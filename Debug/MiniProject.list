
MiniProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011404  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001f34  080115b8  080115b8  000215b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080134ec  080134ec  00030350  2**0
                  CONTENTS
  4 .ARM          00000008  080134ec  080134ec  000234ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080134f4  080134f4  00030350  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080134f4  080134f4  000234f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080134f8  080134f8  000234f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000350  20000000  080134fc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030350  2**0
                  CONTENTS
 10 .bss          00006024  20000350  20000350  00030350  2**2
                  ALLOC
 11 ._user_heap_stack 00002404  20006374  20006374  00030350  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030350  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00030380  2**0
                  CONTENTS, READONLY
 14 .debug_info   000271b9  00000000  00000000  000303c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00006490  00000000  00000000  0005757c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000022d8  00000000  00000000  0005da10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001a7c  00000000  00000000  0005fce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002cb62  00000000  00000000  00061764  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0002ad9f  00000000  00000000  0008e2c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f58fe  00000000  00000000  000b9065  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000a1e8  00000000  00000000  001ae964  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004f  00000000  00000000  001b8b4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000350 	.word	0x20000350
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0801159c 	.word	0x0801159c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000354 	.word	0x20000354
 80001ec:	0801159c 	.word	0x0801159c

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bdc:	f000 b970 	b.w	8000ec0 <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9e08      	ldr	r6, [sp, #32]
 8000bfe:	460d      	mov	r5, r1
 8000c00:	4604      	mov	r4, r0
 8000c02:	460f      	mov	r7, r1
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d14a      	bne.n	8000c9e <__udivmoddi4+0xa6>
 8000c08:	428a      	cmp	r2, r1
 8000c0a:	4694      	mov	ip, r2
 8000c0c:	d965      	bls.n	8000cda <__udivmoddi4+0xe2>
 8000c0e:	fab2 f382 	clz	r3, r2
 8000c12:	b143      	cbz	r3, 8000c26 <__udivmoddi4+0x2e>
 8000c14:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c18:	f1c3 0220 	rsb	r2, r3, #32
 8000c1c:	409f      	lsls	r7, r3
 8000c1e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c22:	4317      	orrs	r7, r2
 8000c24:	409c      	lsls	r4, r3
 8000c26:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c2a:	fa1f f58c 	uxth.w	r5, ip
 8000c2e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c32:	0c22      	lsrs	r2, r4, #16
 8000c34:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c38:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c3c:	fb01 f005 	mul.w	r0, r1, r5
 8000c40:	4290      	cmp	r0, r2
 8000c42:	d90a      	bls.n	8000c5a <__udivmoddi4+0x62>
 8000c44:	eb1c 0202 	adds.w	r2, ip, r2
 8000c48:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c4c:	f080 811c 	bcs.w	8000e88 <__udivmoddi4+0x290>
 8000c50:	4290      	cmp	r0, r2
 8000c52:	f240 8119 	bls.w	8000e88 <__udivmoddi4+0x290>
 8000c56:	3902      	subs	r1, #2
 8000c58:	4462      	add	r2, ip
 8000c5a:	1a12      	subs	r2, r2, r0
 8000c5c:	b2a4      	uxth	r4, r4
 8000c5e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c62:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c66:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c6a:	fb00 f505 	mul.w	r5, r0, r5
 8000c6e:	42a5      	cmp	r5, r4
 8000c70:	d90a      	bls.n	8000c88 <__udivmoddi4+0x90>
 8000c72:	eb1c 0404 	adds.w	r4, ip, r4
 8000c76:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c7a:	f080 8107 	bcs.w	8000e8c <__udivmoddi4+0x294>
 8000c7e:	42a5      	cmp	r5, r4
 8000c80:	f240 8104 	bls.w	8000e8c <__udivmoddi4+0x294>
 8000c84:	4464      	add	r4, ip
 8000c86:	3802      	subs	r0, #2
 8000c88:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c8c:	1b64      	subs	r4, r4, r5
 8000c8e:	2100      	movs	r1, #0
 8000c90:	b11e      	cbz	r6, 8000c9a <__udivmoddi4+0xa2>
 8000c92:	40dc      	lsrs	r4, r3
 8000c94:	2300      	movs	r3, #0
 8000c96:	e9c6 4300 	strd	r4, r3, [r6]
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	428b      	cmp	r3, r1
 8000ca0:	d908      	bls.n	8000cb4 <__udivmoddi4+0xbc>
 8000ca2:	2e00      	cmp	r6, #0
 8000ca4:	f000 80ed 	beq.w	8000e82 <__udivmoddi4+0x28a>
 8000ca8:	2100      	movs	r1, #0
 8000caa:	e9c6 0500 	strd	r0, r5, [r6]
 8000cae:	4608      	mov	r0, r1
 8000cb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb4:	fab3 f183 	clz	r1, r3
 8000cb8:	2900      	cmp	r1, #0
 8000cba:	d149      	bne.n	8000d50 <__udivmoddi4+0x158>
 8000cbc:	42ab      	cmp	r3, r5
 8000cbe:	d302      	bcc.n	8000cc6 <__udivmoddi4+0xce>
 8000cc0:	4282      	cmp	r2, r0
 8000cc2:	f200 80f8 	bhi.w	8000eb6 <__udivmoddi4+0x2be>
 8000cc6:	1a84      	subs	r4, r0, r2
 8000cc8:	eb65 0203 	sbc.w	r2, r5, r3
 8000ccc:	2001      	movs	r0, #1
 8000cce:	4617      	mov	r7, r2
 8000cd0:	2e00      	cmp	r6, #0
 8000cd2:	d0e2      	beq.n	8000c9a <__udivmoddi4+0xa2>
 8000cd4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cd8:	e7df      	b.n	8000c9a <__udivmoddi4+0xa2>
 8000cda:	b902      	cbnz	r2, 8000cde <__udivmoddi4+0xe6>
 8000cdc:	deff      	udf	#255	; 0xff
 8000cde:	fab2 f382 	clz	r3, r2
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	f040 8090 	bne.w	8000e08 <__udivmoddi4+0x210>
 8000ce8:	1a8a      	subs	r2, r1, r2
 8000cea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cee:	fa1f fe8c 	uxth.w	lr, ip
 8000cf2:	2101      	movs	r1, #1
 8000cf4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cf8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cfc:	0c22      	lsrs	r2, r4, #16
 8000cfe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d02:	fb0e f005 	mul.w	r0, lr, r5
 8000d06:	4290      	cmp	r0, r2
 8000d08:	d908      	bls.n	8000d1c <__udivmoddi4+0x124>
 8000d0a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d0e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x122>
 8000d14:	4290      	cmp	r0, r2
 8000d16:	f200 80cb 	bhi.w	8000eb0 <__udivmoddi4+0x2b8>
 8000d1a:	4645      	mov	r5, r8
 8000d1c:	1a12      	subs	r2, r2, r0
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d24:	fb07 2210 	mls	r2, r7, r0, r2
 8000d28:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d2c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d30:	45a6      	cmp	lr, r4
 8000d32:	d908      	bls.n	8000d46 <__udivmoddi4+0x14e>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d3c:	d202      	bcs.n	8000d44 <__udivmoddi4+0x14c>
 8000d3e:	45a6      	cmp	lr, r4
 8000d40:	f200 80bb 	bhi.w	8000eba <__udivmoddi4+0x2c2>
 8000d44:	4610      	mov	r0, r2
 8000d46:	eba4 040e 	sub.w	r4, r4, lr
 8000d4a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d4e:	e79f      	b.n	8000c90 <__udivmoddi4+0x98>
 8000d50:	f1c1 0720 	rsb	r7, r1, #32
 8000d54:	408b      	lsls	r3, r1
 8000d56:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d5a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d5e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d62:	fa20 f307 	lsr.w	r3, r0, r7
 8000d66:	40fd      	lsrs	r5, r7
 8000d68:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d6c:	4323      	orrs	r3, r4
 8000d6e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d72:	fa1f fe8c 	uxth.w	lr, ip
 8000d76:	fb09 5518 	mls	r5, r9, r8, r5
 8000d7a:	0c1c      	lsrs	r4, r3, #16
 8000d7c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d80:	fb08 f50e 	mul.w	r5, r8, lr
 8000d84:	42a5      	cmp	r5, r4
 8000d86:	fa02 f201 	lsl.w	r2, r2, r1
 8000d8a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d8e:	d90b      	bls.n	8000da8 <__udivmoddi4+0x1b0>
 8000d90:	eb1c 0404 	adds.w	r4, ip, r4
 8000d94:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d98:	f080 8088 	bcs.w	8000eac <__udivmoddi4+0x2b4>
 8000d9c:	42a5      	cmp	r5, r4
 8000d9e:	f240 8085 	bls.w	8000eac <__udivmoddi4+0x2b4>
 8000da2:	f1a8 0802 	sub.w	r8, r8, #2
 8000da6:	4464      	add	r4, ip
 8000da8:	1b64      	subs	r4, r4, r5
 8000daa:	b29d      	uxth	r5, r3
 8000dac:	fbb4 f3f9 	udiv	r3, r4, r9
 8000db0:	fb09 4413 	mls	r4, r9, r3, r4
 8000db4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000db8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dbc:	45a6      	cmp	lr, r4
 8000dbe:	d908      	bls.n	8000dd2 <__udivmoddi4+0x1da>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000dc8:	d26c      	bcs.n	8000ea4 <__udivmoddi4+0x2ac>
 8000dca:	45a6      	cmp	lr, r4
 8000dcc:	d96a      	bls.n	8000ea4 <__udivmoddi4+0x2ac>
 8000dce:	3b02      	subs	r3, #2
 8000dd0:	4464      	add	r4, ip
 8000dd2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dd6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dda:	eba4 040e 	sub.w	r4, r4, lr
 8000dde:	42ac      	cmp	r4, r5
 8000de0:	46c8      	mov	r8, r9
 8000de2:	46ae      	mov	lr, r5
 8000de4:	d356      	bcc.n	8000e94 <__udivmoddi4+0x29c>
 8000de6:	d053      	beq.n	8000e90 <__udivmoddi4+0x298>
 8000de8:	b156      	cbz	r6, 8000e00 <__udivmoddi4+0x208>
 8000dea:	ebb0 0208 	subs.w	r2, r0, r8
 8000dee:	eb64 040e 	sbc.w	r4, r4, lr
 8000df2:	fa04 f707 	lsl.w	r7, r4, r7
 8000df6:	40ca      	lsrs	r2, r1
 8000df8:	40cc      	lsrs	r4, r1
 8000dfa:	4317      	orrs	r7, r2
 8000dfc:	e9c6 7400 	strd	r7, r4, [r6]
 8000e00:	4618      	mov	r0, r3
 8000e02:	2100      	movs	r1, #0
 8000e04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e08:	f1c3 0120 	rsb	r1, r3, #32
 8000e0c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e10:	fa20 f201 	lsr.w	r2, r0, r1
 8000e14:	fa25 f101 	lsr.w	r1, r5, r1
 8000e18:	409d      	lsls	r5, r3
 8000e1a:	432a      	orrs	r2, r5
 8000e1c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e20:	fa1f fe8c 	uxth.w	lr, ip
 8000e24:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e28:	fb07 1510 	mls	r5, r7, r0, r1
 8000e2c:	0c11      	lsrs	r1, r2, #16
 8000e2e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e32:	fb00 f50e 	mul.w	r5, r0, lr
 8000e36:	428d      	cmp	r5, r1
 8000e38:	fa04 f403 	lsl.w	r4, r4, r3
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x258>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e46:	d22f      	bcs.n	8000ea8 <__udivmoddi4+0x2b0>
 8000e48:	428d      	cmp	r5, r1
 8000e4a:	d92d      	bls.n	8000ea8 <__udivmoddi4+0x2b0>
 8000e4c:	3802      	subs	r0, #2
 8000e4e:	4461      	add	r1, ip
 8000e50:	1b49      	subs	r1, r1, r5
 8000e52:	b292      	uxth	r2, r2
 8000e54:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e58:	fb07 1115 	mls	r1, r7, r5, r1
 8000e5c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e60:	fb05 f10e 	mul.w	r1, r5, lr
 8000e64:	4291      	cmp	r1, r2
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x282>
 8000e68:	eb1c 0202 	adds.w	r2, ip, r2
 8000e6c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e70:	d216      	bcs.n	8000ea0 <__udivmoddi4+0x2a8>
 8000e72:	4291      	cmp	r1, r2
 8000e74:	d914      	bls.n	8000ea0 <__udivmoddi4+0x2a8>
 8000e76:	3d02      	subs	r5, #2
 8000e78:	4462      	add	r2, ip
 8000e7a:	1a52      	subs	r2, r2, r1
 8000e7c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e80:	e738      	b.n	8000cf4 <__udivmoddi4+0xfc>
 8000e82:	4631      	mov	r1, r6
 8000e84:	4630      	mov	r0, r6
 8000e86:	e708      	b.n	8000c9a <__udivmoddi4+0xa2>
 8000e88:	4639      	mov	r1, r7
 8000e8a:	e6e6      	b.n	8000c5a <__udivmoddi4+0x62>
 8000e8c:	4610      	mov	r0, r2
 8000e8e:	e6fb      	b.n	8000c88 <__udivmoddi4+0x90>
 8000e90:	4548      	cmp	r0, r9
 8000e92:	d2a9      	bcs.n	8000de8 <__udivmoddi4+0x1f0>
 8000e94:	ebb9 0802 	subs.w	r8, r9, r2
 8000e98:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e9c:	3b01      	subs	r3, #1
 8000e9e:	e7a3      	b.n	8000de8 <__udivmoddi4+0x1f0>
 8000ea0:	4645      	mov	r5, r8
 8000ea2:	e7ea      	b.n	8000e7a <__udivmoddi4+0x282>
 8000ea4:	462b      	mov	r3, r5
 8000ea6:	e794      	b.n	8000dd2 <__udivmoddi4+0x1da>
 8000ea8:	4640      	mov	r0, r8
 8000eaa:	e7d1      	b.n	8000e50 <__udivmoddi4+0x258>
 8000eac:	46d0      	mov	r8, sl
 8000eae:	e77b      	b.n	8000da8 <__udivmoddi4+0x1b0>
 8000eb0:	3d02      	subs	r5, #2
 8000eb2:	4462      	add	r2, ip
 8000eb4:	e732      	b.n	8000d1c <__udivmoddi4+0x124>
 8000eb6:	4608      	mov	r0, r1
 8000eb8:	e70a      	b.n	8000cd0 <__udivmoddi4+0xd8>
 8000eba:	4464      	add	r4, ip
 8000ebc:	3802      	subs	r0, #2
 8000ebe:	e742      	b.n	8000d46 <__udivmoddi4+0x14e>

08000ec0 <__aeabi_idiv0>:
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop

08000ec4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b085      	sub	sp, #20
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	60f8      	str	r0, [r7, #12]
 8000ecc:	60b9      	str	r1, [r7, #8]
 8000ece:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	4a07      	ldr	r2, [pc, #28]	; (8000ef0 <vApplicationGetIdleTaskMemory+0x2c>)
 8000ed4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000ed6:	68bb      	ldr	r3, [r7, #8]
 8000ed8:	4a06      	ldr	r2, [pc, #24]	; (8000ef4 <vApplicationGetIdleTaskMemory+0x30>)
 8000eda:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	2280      	movs	r2, #128	; 0x80
 8000ee0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000ee2:	bf00      	nop
 8000ee4:	3714      	adds	r7, #20
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	2000036c 	.word	0x2000036c
 8000ef4:	2000040c 	.word	0x2000040c

08000ef8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ef8:	b5b0      	push	{r4, r5, r7, lr}
 8000efa:	b092      	sub	sp, #72	; 0x48
 8000efc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000efe:	f002 fb25 	bl	800354c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f02:	f000 f845 	bl	8000f90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f06:	f000 f8ad 	bl	8001064 <MX_GPIO_Init>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of myQueue01 */
  osMessageQDef(myQueue01, 16, uint8_t);
 8000f0a:	4b1b      	ldr	r3, [pc, #108]	; (8000f78 <main+0x80>)
 8000f0c:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000f10:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f12:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  myQueue01Handle = osMessageCreate(osMessageQ(myQueue01), NULL);
 8000f16:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000f1a:	2100      	movs	r1, #0
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f00a fd3e 	bl	800b99e <osMessageCreate>
 8000f22:	4603      	mov	r3, r0
 8000f24:	4a15      	ldr	r2, [pc, #84]	; (8000f7c <main+0x84>)
 8000f26:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of TaskDisplayLCD */
  osThreadDef(TaskDisplayLCD, StartTask01, osPriorityNormal, 0, 256);
 8000f28:	4b15      	ldr	r3, [pc, #84]	; (8000f80 <main+0x88>)
 8000f2a:	f107 041c 	add.w	r4, r7, #28
 8000f2e:	461d      	mov	r5, r3
 8000f30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f34:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f38:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskDisplayLCDHandle = osThreadCreate(osThread(TaskDisplayLCD), NULL);
 8000f3c:	f107 031c 	add.w	r3, r7, #28
 8000f40:	2100      	movs	r1, #0
 8000f42:	4618      	mov	r0, r3
 8000f44:	f00a fccb 	bl	800b8de <osThreadCreate>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	4a0e      	ldr	r2, [pc, #56]	; (8000f84 <main+0x8c>)
 8000f4c:	6013      	str	r3, [r2, #0]

  /* definition and creation of TaskGyroScope */
  osThreadDef(TaskGyroScope, StartTask02, osPriorityNormal, 0, 256);
 8000f4e:	4b0e      	ldr	r3, [pc, #56]	; (8000f88 <main+0x90>)
 8000f50:	463c      	mov	r4, r7
 8000f52:	461d      	mov	r5, r3
 8000f54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f58:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f5c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskGyroScopeHandle = osThreadCreate(osThread(TaskGyroScope), NULL);
 8000f60:	463b      	mov	r3, r7
 8000f62:	2100      	movs	r1, #0
 8000f64:	4618      	mov	r0, r3
 8000f66:	f00a fcba 	bl	800b8de <osThreadCreate>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	4a07      	ldr	r2, [pc, #28]	; (8000f8c <main+0x94>)
 8000f6e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000f70:	f00a fcae 	bl	800b8d0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f74:	e7fe      	b.n	8000f74 <main+0x7c>
 8000f76:	bf00      	nop
 8000f78:	080115b8 	.word	0x080115b8
 8000f7c:	20000614 	.word	0x20000614
 8000f80:	080115d8 	.word	0x080115d8
 8000f84:	2000060c 	.word	0x2000060c
 8000f88:	08011604 	.word	0x08011604
 8000f8c:	20000610 	.word	0x20000610

08000f90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b094      	sub	sp, #80	; 0x50
 8000f94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f96:	f107 0320 	add.w	r3, r7, #32
 8000f9a:	2230      	movs	r2, #48	; 0x30
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f00e f9ab 	bl	800f2fa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fa4:	f107 030c 	add.w	r3, r7, #12
 8000fa8:	2200      	movs	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]
 8000fac:	605a      	str	r2, [r3, #4]
 8000fae:	609a      	str	r2, [r3, #8]
 8000fb0:	60da      	str	r2, [r3, #12]
 8000fb2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	60bb      	str	r3, [r7, #8]
 8000fb8:	4b28      	ldr	r3, [pc, #160]	; (800105c <SystemClock_Config+0xcc>)
 8000fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fbc:	4a27      	ldr	r2, [pc, #156]	; (800105c <SystemClock_Config+0xcc>)
 8000fbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fc2:	6413      	str	r3, [r2, #64]	; 0x40
 8000fc4:	4b25      	ldr	r3, [pc, #148]	; (800105c <SystemClock_Config+0xcc>)
 8000fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fcc:	60bb      	str	r3, [r7, #8]
 8000fce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	607b      	str	r3, [r7, #4]
 8000fd4:	4b22      	ldr	r3, [pc, #136]	; (8001060 <SystemClock_Config+0xd0>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a21      	ldr	r2, [pc, #132]	; (8001060 <SystemClock_Config+0xd0>)
 8000fda:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000fde:	6013      	str	r3, [r2, #0]
 8000fe0:	4b1f      	ldr	r3, [pc, #124]	; (8001060 <SystemClock_Config+0xd0>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000fe8:	607b      	str	r3, [r7, #4]
 8000fea:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fec:	2301      	movs	r3, #1
 8000fee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ff0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ff4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ff6:	2302      	movs	r3, #2
 8000ff8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ffa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000ffe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001000:	2308      	movs	r3, #8
 8001002:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001004:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001008:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800100a:	2302      	movs	r3, #2
 800100c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800100e:	2307      	movs	r3, #7
 8001010:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001012:	f107 0320 	add.w	r3, r7, #32
 8001016:	4618      	mov	r0, r3
 8001018:	f004 f9e0 	bl	80053dc <HAL_RCC_OscConfig>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001022:	f000 fa01 	bl	8001428 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001026:	230f      	movs	r3, #15
 8001028:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800102a:	2302      	movs	r3, #2
 800102c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800102e:	2300      	movs	r3, #0
 8001030:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001032:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001036:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001038:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800103c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800103e:	f107 030c 	add.w	r3, r7, #12
 8001042:	2105      	movs	r1, #5
 8001044:	4618      	mov	r0, r3
 8001046:	f004 fc41 	bl	80058cc <HAL_RCC_ClockConfig>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001050:	f000 f9ea 	bl	8001428 <Error_Handler>
  }
}
 8001054:	bf00      	nop
 8001056:	3750      	adds	r7, #80	; 0x50
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	40023800 	.word	0x40023800
 8001060:	40007000 	.word	0x40007000

08001064 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b08a      	sub	sp, #40	; 0x28
 8001068:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800106a:	f107 0314 	add.w	r3, r7, #20
 800106e:	2200      	movs	r2, #0
 8001070:	601a      	str	r2, [r3, #0]
 8001072:	605a      	str	r2, [r3, #4]
 8001074:	609a      	str	r2, [r3, #8]
 8001076:	60da      	str	r2, [r3, #12]
 8001078:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800107a:	2300      	movs	r3, #0
 800107c:	613b      	str	r3, [r7, #16]
 800107e:	4b27      	ldr	r3, [pc, #156]	; (800111c <MX_GPIO_Init+0xb8>)
 8001080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001082:	4a26      	ldr	r2, [pc, #152]	; (800111c <MX_GPIO_Init+0xb8>)
 8001084:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001088:	6313      	str	r3, [r2, #48]	; 0x30
 800108a:	4b24      	ldr	r3, [pc, #144]	; (800111c <MX_GPIO_Init+0xb8>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001092:	613b      	str	r3, [r7, #16]
 8001094:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001096:	2300      	movs	r3, #0
 8001098:	60fb      	str	r3, [r7, #12]
 800109a:	4b20      	ldr	r3, [pc, #128]	; (800111c <MX_GPIO_Init+0xb8>)
 800109c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109e:	4a1f      	ldr	r2, [pc, #124]	; (800111c <MX_GPIO_Init+0xb8>)
 80010a0:	f043 0302 	orr.w	r3, r3, #2
 80010a4:	6313      	str	r3, [r2, #48]	; 0x30
 80010a6:	4b1d      	ldr	r3, [pc, #116]	; (800111c <MX_GPIO_Init+0xb8>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010aa:	f003 0302 	and.w	r3, r3, #2
 80010ae:	60fb      	str	r3, [r7, #12]
 80010b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010b2:	2300      	movs	r3, #0
 80010b4:	60bb      	str	r3, [r7, #8]
 80010b6:	4b19      	ldr	r3, [pc, #100]	; (800111c <MX_GPIO_Init+0xb8>)
 80010b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ba:	4a18      	ldr	r2, [pc, #96]	; (800111c <MX_GPIO_Init+0xb8>)
 80010bc:	f043 0301 	orr.w	r3, r3, #1
 80010c0:	6313      	str	r3, [r2, #48]	; 0x30
 80010c2:	4b16      	ldr	r3, [pc, #88]	; (800111c <MX_GPIO_Init+0xb8>)
 80010c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c6:	f003 0301 	and.w	r3, r3, #1
 80010ca:	60bb      	str	r3, [r7, #8]
 80010cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80010ce:	2300      	movs	r3, #0
 80010d0:	607b      	str	r3, [r7, #4]
 80010d2:	4b12      	ldr	r3, [pc, #72]	; (800111c <MX_GPIO_Init+0xb8>)
 80010d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d6:	4a11      	ldr	r2, [pc, #68]	; (800111c <MX_GPIO_Init+0xb8>)
 80010d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010dc:	6313      	str	r3, [r2, #48]	; 0x30
 80010de:	4b0f      	ldr	r3, [pc, #60]	; (800111c <MX_GPIO_Init+0xb8>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010e6:	607b      	str	r3, [r7, #4]
 80010e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 80010ea:	2200      	movs	r2, #0
 80010ec:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80010f0:	480b      	ldr	r0, [pc, #44]	; (8001120 <MX_GPIO_Init+0xbc>)
 80010f2:	f002 fedd 	bl	8003eb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PG13 PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80010f6:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80010fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010fc:	2301      	movs	r3, #1
 80010fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001100:	2300      	movs	r3, #0
 8001102:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001104:	2302      	movs	r3, #2
 8001106:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001108:	f107 0314 	add.w	r3, r7, #20
 800110c:	4619      	mov	r1, r3
 800110e:	4804      	ldr	r0, [pc, #16]	; (8001120 <MX_GPIO_Init+0xbc>)
 8001110:	f002 fd22 	bl	8003b58 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001114:	bf00      	nop
 8001116:	3728      	adds	r7, #40	; 0x28
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	40023800 	.word	0x40023800
 8001120:	40021800 	.word	0x40021800

08001124 <StartTask01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask01 */
void StartTask01(void const * argument)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b09c      	sub	sp, #112	; 0x70
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 800112c:	f00c fe3e 	bl	800ddac <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  BSP_LCD_Init();
 8001130:	f001 f9e2 	bl	80024f8 <BSP_LCD_Init>
  BSP_LCD_LayerDefaultInit(1, SDRAM_DEVICE_ADDR);
 8001134:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8001138:	2001      	movs	r0, #1
 800113a:	f001 fa5f 	bl	80025fc <BSP_LCD_LayerDefaultInit>
  BSP_LCD_SelectLayer(1);
 800113e:	2001      	movs	r0, #1
 8001140:	f001 fac0 	bl	80026c4 <BSP_LCD_SelectLayer>
  BSP_LCD_DisplayOn();
 8001144:	f001 fe3a 	bl	8002dbc <BSP_LCD_DisplayOn>
  BSP_LCD_SetBackColor(LCD_COLOR_GREEN);
 8001148:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 800114c:	f001 fae2 	bl	8002714 <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001150:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001154:	f001 fac6 	bl	80026e4 <BSP_LCD_SetTextColor>
  BSP_LCD_Clear(LCD_COLOR_GREEN);
 8001158:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 800115c:	f001 fb24 	bl	80027a8 <BSP_LCD_Clear>
  char str_score [50];
  char str_currentHigh [50];
  /* Infinite loop */
  for(;;)
  {
	  sprintf(str_score,"Score: %d", score);
 8001160:	4b60      	ldr	r3, [pc, #384]	; (80012e4 <StartTask01+0x1c0>)
 8001162:	681a      	ldr	r2, [r3, #0]
 8001164:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001168:	495f      	ldr	r1, [pc, #380]	; (80012e8 <StartTask01+0x1c4>)
 800116a:	4618      	mov	r0, r3
 800116c:	f00e f862 	bl	800f234 <siprintf>
	  sprintf(str_currentHigh, "Current high: %d\n", current_radius);
 8001170:	4b5e      	ldr	r3, [pc, #376]	; (80012ec <StartTask01+0x1c8>)
 8001172:	681a      	ldr	r2, [r3, #0]
 8001174:	f107 0308 	add.w	r3, r7, #8
 8001178:	495d      	ldr	r1, [pc, #372]	; (80012f0 <StartTask01+0x1cc>)
 800117a:	4618      	mov	r0, r3
 800117c:	f00e f85a 	bl	800f234 <siprintf>
	  BSP_LCD_Clear(LCD_COLOR_GREEN);
 8001180:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 8001184:	f001 fb10 	bl	80027a8 <BSP_LCD_Clear>
	  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_RESET);
 8001188:	2200      	movs	r2, #0
 800118a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800118e:	4859      	ldr	r0, [pc, #356]	; (80012f4 <StartTask01+0x1d0>)
 8001190:	f002 fe8e 	bl	8003eb0 <HAL_GPIO_WritePin>

	  if(!fallDown && gameRunning){
 8001194:	4b58      	ldr	r3, [pc, #352]	; (80012f8 <StartTask01+0x1d4>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d158      	bne.n	800124e <StartTask01+0x12a>
 800119c:	4b57      	ldr	r3, [pc, #348]	; (80012fc <StartTask01+0x1d8>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d054      	beq.n	800124e <StartTask01+0x12a>
		  CDC_Transmit_HS(str_currentHigh, strlen(str_currentHigh));
 80011a4:	f107 0308 	add.w	r3, r7, #8
 80011a8:	4618      	mov	r0, r3
 80011aa:	f7ff f871 	bl	8000290 <strlen>
 80011ae:	4603      	mov	r3, r0
 80011b0:	b29a      	uxth	r2, r3
 80011b2:	f107 0308 	add.w	r3, r7, #8
 80011b6:	4611      	mov	r1, r2
 80011b8:	4618      	mov	r0, r3
 80011ba:	f00c feb5 	bl	800df28 <CDC_Transmit_HS>
		  BSP_LCD_DisplayStringAtLine(1,str_score);
 80011be:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80011c2:	4619      	mov	r1, r3
 80011c4:	2001      	movs	r0, #1
 80011c6:	f001 fc19 	bl	80029fc <BSP_LCD_DisplayStringAtLine>
		  BSP_LCD_FillCircle(120, 160, current_radius);
 80011ca:	4b48      	ldr	r3, [pc, #288]	; (80012ec <StartTask01+0x1c8>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	b29b      	uxth	r3, r3
 80011d0:	461a      	mov	r2, r3
 80011d2:	21a0      	movs	r1, #160	; 0xa0
 80011d4:	2078      	movs	r0, #120	; 0x78
 80011d6:	f001 fd51 	bl	8002c7c <BSP_LCD_FillCircle>
		  switch (current_speed) {
 80011da:	4b49      	ldr	r3, [pc, #292]	; (8001300 <StartTask01+0x1dc>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	2b0f      	cmp	r3, #15
 80011e0:	d006      	beq.n	80011f0 <StartTask01+0xcc>
 80011e2:	2b0f      	cmp	r3, #15
 80011e4:	dc2b      	bgt.n	800123e <StartTask01+0x11a>
 80011e6:	2b05      	cmp	r3, #5
 80011e8:	d01c      	beq.n	8001224 <StartTask01+0x100>
 80011ea:	2b0a      	cmp	r3, #10
 80011ec:	d00d      	beq.n	800120a <StartTask01+0xe6>
				if(current_radius >= MAX_RADIUS_OF_LOW_SPEED)
					fallDown = 1;
				break;
			}
			default:
				break;
 80011ee:	e026      	b.n	800123e <StartTask01+0x11a>
				current_radius += 8;
 80011f0:	4b3e      	ldr	r3, [pc, #248]	; (80012ec <StartTask01+0x1c8>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	3308      	adds	r3, #8
 80011f6:	4a3d      	ldr	r2, [pc, #244]	; (80012ec <StartTask01+0x1c8>)
 80011f8:	6013      	str	r3, [r2, #0]
				if(current_radius >= MAX_RADIUS_OF_HIGH_SPEED)
 80011fa:	4b3c      	ldr	r3, [pc, #240]	; (80012ec <StartTask01+0x1c8>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	2b77      	cmp	r3, #119	; 0x77
 8001200:	dd1f      	ble.n	8001242 <StartTask01+0x11e>
					fallDown = 1;
 8001202:	4b3d      	ldr	r3, [pc, #244]	; (80012f8 <StartTask01+0x1d4>)
 8001204:	2201      	movs	r2, #1
 8001206:	601a      	str	r2, [r3, #0]
				break;
 8001208:	e01b      	b.n	8001242 <StartTask01+0x11e>
				current_radius += 6;
 800120a:	4b38      	ldr	r3, [pc, #224]	; (80012ec <StartTask01+0x1c8>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	3306      	adds	r3, #6
 8001210:	4a36      	ldr	r2, [pc, #216]	; (80012ec <StartTask01+0x1c8>)
 8001212:	6013      	str	r3, [r2, #0]
				if(current_radius >= MAX_RADIUS_OF_MEDIUM_SPEED)
 8001214:	4b35      	ldr	r3, [pc, #212]	; (80012ec <StartTask01+0x1c8>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	2b6d      	cmp	r3, #109	; 0x6d
 800121a:	dd14      	ble.n	8001246 <StartTask01+0x122>
					fallDown = 1;
 800121c:	4b36      	ldr	r3, [pc, #216]	; (80012f8 <StartTask01+0x1d4>)
 800121e:	2201      	movs	r2, #1
 8001220:	601a      	str	r2, [r3, #0]
				break;
 8001222:	e010      	b.n	8001246 <StartTask01+0x122>
				current_radius += 4;
 8001224:	4b31      	ldr	r3, [pc, #196]	; (80012ec <StartTask01+0x1c8>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	3304      	adds	r3, #4
 800122a:	4a30      	ldr	r2, [pc, #192]	; (80012ec <StartTask01+0x1c8>)
 800122c:	6013      	str	r3, [r2, #0]
				if(current_radius >= MAX_RADIUS_OF_LOW_SPEED)
 800122e:	4b2f      	ldr	r3, [pc, #188]	; (80012ec <StartTask01+0x1c8>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	2b63      	cmp	r3, #99	; 0x63
 8001234:	dd09      	ble.n	800124a <StartTask01+0x126>
					fallDown = 1;
 8001236:	4b30      	ldr	r3, [pc, #192]	; (80012f8 <StartTask01+0x1d4>)
 8001238:	2201      	movs	r2, #1
 800123a:	601a      	str	r2, [r3, #0]
				break;
 800123c:	e005      	b.n	800124a <StartTask01+0x126>
				break;
 800123e:	bf00      	nop
 8001240:	e041      	b.n	80012c6 <StartTask01+0x1a2>
				break;
 8001242:	bf00      	nop
 8001244:	e03f      	b.n	80012c6 <StartTask01+0x1a2>
				break;
 8001246:	bf00      	nop
 8001248:	e03d      	b.n	80012c6 <StartTask01+0x1a2>
				break;
 800124a:	bf00      	nop
		  switch (current_speed) {
 800124c:	e03b      	b.n	80012c6 <StartTask01+0x1a2>
		  }
	  }
	  else{
		  if(current_radius > MIN_RADIUS){
 800124e:	4b27      	ldr	r3, [pc, #156]	; (80012ec <StartTask01+0x1c8>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	2b0f      	cmp	r3, #15
 8001254:	dd13      	ble.n	800127e <StartTask01+0x15a>
			  BSP_LCD_DisplayStringAtLine(1,str_score);
 8001256:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800125a:	4619      	mov	r1, r3
 800125c:	2001      	movs	r0, #1
 800125e:	f001 fbcd 	bl	80029fc <BSP_LCD_DisplayStringAtLine>
			  BSP_LCD_FillCircle(120, 160, current_radius);
 8001262:	4b22      	ldr	r3, [pc, #136]	; (80012ec <StartTask01+0x1c8>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	b29b      	uxth	r3, r3
 8001268:	461a      	mov	r2, r3
 800126a:	21a0      	movs	r1, #160	; 0xa0
 800126c:	2078      	movs	r0, #120	; 0x78
 800126e:	f001 fd05 	bl	8002c7c <BSP_LCD_FillCircle>
			  current_radius -= 5;
 8001272:	4b1e      	ldr	r3, [pc, #120]	; (80012ec <StartTask01+0x1c8>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	3b05      	subs	r3, #5
 8001278:	4a1c      	ldr	r2, [pc, #112]	; (80012ec <StartTask01+0x1c8>)
 800127a:	6013      	str	r3, [r2, #0]
 800127c:	e023      	b.n	80012c6 <StartTask01+0x1a2>
		  }
		  else{
			  gameRunning = 0;
 800127e:	4b1f      	ldr	r3, [pc, #124]	; (80012fc <StartTask01+0x1d8>)
 8001280:	2200      	movs	r2, #0
 8001282:	601a      	str	r2, [r3, #0]
			  BSP_LCD_Clear(LCD_COLOR_GREEN);
 8001284:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 8001288:	f001 fa8e 	bl	80027a8 <BSP_LCD_Clear>
			  BSP_LCD_DisplayStringAtLine(5, "  GAME OVER!");
 800128c:	491d      	ldr	r1, [pc, #116]	; (8001304 <StartTask01+0x1e0>)
 800128e:	2005      	movs	r0, #5
 8001290:	f001 fbb4 	bl	80029fc <BSP_LCD_DisplayStringAtLine>
			  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, GPIO_PIN_SET);
 8001294:	2201      	movs	r2, #1
 8001296:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800129a:	4816      	ldr	r0, [pc, #88]	; (80012f4 <StartTask01+0x1d0>)
 800129c:	f002 fe08 	bl	8003eb0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_RESET);
 80012a0:	2200      	movs	r2, #0
 80012a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012a6:	4813      	ldr	r0, [pc, #76]	; (80012f4 <StartTask01+0x1d0>)
 80012a8:	f002 fe02 	bl	8003eb0 <HAL_GPIO_WritePin>
			  CDC_Transmit_HS(str_currentHigh, strlen(str_currentHigh));
 80012ac:	f107 0308 	add.w	r3, r7, #8
 80012b0:	4618      	mov	r0, r3
 80012b2:	f7fe ffed 	bl	8000290 <strlen>
 80012b6:	4603      	mov	r3, r0
 80012b8:	b29a      	uxth	r2, r3
 80012ba:	f107 0308 	add.w	r3, r7, #8
 80012be:	4611      	mov	r1, r2
 80012c0:	4618      	mov	r0, r3
 80012c2:	f00c fe31 	bl	800df28 <CDC_Transmit_HS>
		  }
	  }
	  osMessagePut(myQueue01Handle, current_radius, osWaitForever);
 80012c6:	4b10      	ldr	r3, [pc, #64]	; (8001308 <StartTask01+0x1e4>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4a08      	ldr	r2, [pc, #32]	; (80012ec <StartTask01+0x1c8>)
 80012cc:	6812      	ldr	r2, [r2, #0]
 80012ce:	4611      	mov	r1, r2
 80012d0:	f04f 32ff 	mov.w	r2, #4294967295
 80012d4:	4618      	mov	r0, r3
 80012d6:	f00a fb8b 	bl	800b9f0 <osMessagePut>
	  osDelay(100);
 80012da:	2064      	movs	r0, #100	; 0x64
 80012dc:	f00a fb4b 	bl	800b976 <osDelay>
	  sprintf(str_score,"Score: %d", score);
 80012e0:	e73e      	b.n	8001160 <StartTask01+0x3c>
 80012e2:	bf00      	nop
 80012e4:	2000061c 	.word	0x2000061c
 80012e8:	08011620 	.word	0x08011620
 80012ec:	20000000 	.word	0x20000000
 80012f0:	0801162c 	.word	0x0801162c
 80012f4:	40021800 	.word	0x40021800
 80012f8:	20000618 	.word	0x20000618
 80012fc:	20000008 	.word	0x20000008
 8001300:	20000004 	.word	0x20000004
 8001304:	08011640 	.word	0x08011640
 8001308:	20000614 	.word	0x20000614

0800130c <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b08a      	sub	sp, #40	; 0x28
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
	BSP_GYRO_Init();
 8001314:	f001 f88a 	bl	800242c <BSP_GYRO_Init>
	float L3GD20_AngRate[3];
  /* Infinite loop */
  for(;;){
	osEvent event = osMessageGet(myQueue01Handle, osWaitForever);
 8001318:	4b33      	ldr	r3, [pc, #204]	; (80013e8 <StartTask02+0xdc>)
 800131a:	6819      	ldr	r1, [r3, #0]
 800131c:	f107 0308 	add.w	r3, r7, #8
 8001320:	f04f 32ff 	mov.w	r2, #4294967295
 8001324:	4618      	mov	r0, r3
 8001326:	f00a fba3 	bl	800ba70 <osMessageGet>
	int currentRadiusFromMessQ = event.value.v;
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	623b      	str	r3, [r7, #32]

	L3GD20_ReadXYZAngRate(L3GD20_AngRate);
 800132e:	f107 0314 	add.w	r3, r7, #20
 8001332:	4618      	mov	r0, r3
 8001334:	f000 fd3e 	bl	8001db4 <L3GD20_ReadXYZAngRate>
	for(int i = 0; i < 3; i++){
 8001338:	2300      	movs	r3, #0
 800133a:	627b      	str	r3, [r7, #36]	; 0x24
 800133c:	e014      	b.n	8001368 <StartTask02+0x5c>
		L3GD20_AngRate[i] = L3GD20_AngRate[i]/10000;
 800133e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001340:	009b      	lsls	r3, r3, #2
 8001342:	3328      	adds	r3, #40	; 0x28
 8001344:	443b      	add	r3, r7
 8001346:	3b14      	subs	r3, #20
 8001348:	ed93 7a00 	vldr	s14, [r3]
 800134c:	eddf 6a27 	vldr	s13, [pc, #156]	; 80013ec <StartTask02+0xe0>
 8001350:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001356:	009b      	lsls	r3, r3, #2
 8001358:	3328      	adds	r3, #40	; 0x28
 800135a:	443b      	add	r3, r7
 800135c:	3b14      	subs	r3, #20
 800135e:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < 3; i++){
 8001362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001364:	3301      	adds	r3, #1
 8001366:	627b      	str	r3, [r7, #36]	; 0x24
 8001368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800136a:	2b02      	cmp	r3, #2
 800136c:	dde7      	ble.n	800133e <StartTask02+0x32>
	}
	if(L3GD20_AngRate[0] >= 15 && currentRadiusFromMessQ > 15 && currentRadiusFromMessQ <= 75 && gameRunning && fallDown){
 800136e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001372:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8001376:	eef4 7ac7 	vcmpe.f32	s15, s14
 800137a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800137e:	db2f      	blt.n	80013e0 <StartTask02+0xd4>
 8001380:	6a3b      	ldr	r3, [r7, #32]
 8001382:	2b0f      	cmp	r3, #15
 8001384:	dd2c      	ble.n	80013e0 <StartTask02+0xd4>
 8001386:	6a3b      	ldr	r3, [r7, #32]
 8001388:	2b4b      	cmp	r3, #75	; 0x4b
 800138a:	dc29      	bgt.n	80013e0 <StartTask02+0xd4>
 800138c:	4b18      	ldr	r3, [pc, #96]	; (80013f0 <StartTask02+0xe4>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d025      	beq.n	80013e0 <StartTask02+0xd4>
 8001394:	4b17      	ldr	r3, [pc, #92]	; (80013f4 <StartTask02+0xe8>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d021      	beq.n	80013e0 <StartTask02+0xd4>
		fallDown = 0;
 800139c:	4b15      	ldr	r3, [pc, #84]	; (80013f4 <StartTask02+0xe8>)
 800139e:	2200      	movs	r2, #0
 80013a0:	601a      	str	r2, [r3, #0]
		score++;
 80013a2:	4b15      	ldr	r3, [pc, #84]	; (80013f8 <StartTask02+0xec>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	3301      	adds	r3, #1
 80013a8:	4a13      	ldr	r2, [pc, #76]	; (80013f8 <StartTask02+0xec>)
 80013aa:	6013      	str	r3, [r2, #0]
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_SET);
 80013ac:	2201      	movs	r2, #1
 80013ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013b2:	4812      	ldr	r0, [pc, #72]	; (80013fc <StartTask02+0xf0>)
 80013b4:	f002 fd7c 	bl	8003eb0 <HAL_GPIO_WritePin>
		if(currentRadiusFromMessQ <= 35)
 80013b8:	6a3b      	ldr	r3, [r7, #32]
 80013ba:	2b23      	cmp	r3, #35	; 0x23
 80013bc:	dc03      	bgt.n	80013c6 <StartTask02+0xba>
			current_speed = HIGH_SPEED;
 80013be:	4b10      	ldr	r3, [pc, #64]	; (8001400 <StartTask02+0xf4>)
 80013c0:	220f      	movs	r2, #15
 80013c2:	601a      	str	r2, [r3, #0]
 80013c4:	e00c      	b.n	80013e0 <StartTask02+0xd4>
		else if (currentRadiusFromMessQ > 35 && currentRadiusFromMessQ <= 45)
 80013c6:	6a3b      	ldr	r3, [r7, #32]
 80013c8:	2b23      	cmp	r3, #35	; 0x23
 80013ca:	dd06      	ble.n	80013da <StartTask02+0xce>
 80013cc:	6a3b      	ldr	r3, [r7, #32]
 80013ce:	2b2d      	cmp	r3, #45	; 0x2d
 80013d0:	dc03      	bgt.n	80013da <StartTask02+0xce>
			current_speed = MEDIUM_SPEED;
 80013d2:	4b0b      	ldr	r3, [pc, #44]	; (8001400 <StartTask02+0xf4>)
 80013d4:	220a      	movs	r2, #10
 80013d6:	601a      	str	r2, [r3, #0]
 80013d8:	e002      	b.n	80013e0 <StartTask02+0xd4>
		else
			current_speed = LOW_SPEED;
 80013da:	4b09      	ldr	r3, [pc, #36]	; (8001400 <StartTask02+0xf4>)
 80013dc:	2205      	movs	r2, #5
 80013de:	601a      	str	r2, [r3, #0]
	}
    osDelay(1);
 80013e0:	2001      	movs	r0, #1
 80013e2:	f00a fac8 	bl	800b976 <osDelay>
  for(;;){
 80013e6:	e797      	b.n	8001318 <StartTask02+0xc>
 80013e8:	20000614 	.word	0x20000614
 80013ec:	461c4000 	.word	0x461c4000
 80013f0:	20000008 	.word	0x20000008
 80013f4:	20000618 	.word	0x20000618
 80013f8:	2000061c 	.word	0x2000061c
 80013fc:	40021800 	.word	0x40021800
 8001400:	20000004 	.word	0x20000004

08001404 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a04      	ldr	r2, [pc, #16]	; (8001424 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d101      	bne.n	800141a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001416:	f002 f8bb 	bl	8003590 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800141a:	bf00      	nop
 800141c:	3708      	adds	r7, #8
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	40001000 	.word	0x40001000

08001428 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800142c:	b672      	cpsid	i
}
 800142e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001430:	e7fe      	b.n	8001430 <Error_Handler+0x8>
	...

08001434 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800143a:	2300      	movs	r3, #0
 800143c:	607b      	str	r3, [r7, #4]
 800143e:	4b12      	ldr	r3, [pc, #72]	; (8001488 <HAL_MspInit+0x54>)
 8001440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001442:	4a11      	ldr	r2, [pc, #68]	; (8001488 <HAL_MspInit+0x54>)
 8001444:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001448:	6453      	str	r3, [r2, #68]	; 0x44
 800144a:	4b0f      	ldr	r3, [pc, #60]	; (8001488 <HAL_MspInit+0x54>)
 800144c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800144e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001452:	607b      	str	r3, [r7, #4]
 8001454:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001456:	2300      	movs	r3, #0
 8001458:	603b      	str	r3, [r7, #0]
 800145a:	4b0b      	ldr	r3, [pc, #44]	; (8001488 <HAL_MspInit+0x54>)
 800145c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145e:	4a0a      	ldr	r2, [pc, #40]	; (8001488 <HAL_MspInit+0x54>)
 8001460:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001464:	6413      	str	r3, [r2, #64]	; 0x40
 8001466:	4b08      	ldr	r3, [pc, #32]	; (8001488 <HAL_MspInit+0x54>)
 8001468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800146e:	603b      	str	r3, [r7, #0]
 8001470:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001472:	2200      	movs	r2, #0
 8001474:	210f      	movs	r1, #15
 8001476:	f06f 0001 	mvn.w	r0, #1
 800147a:	f002 f985 	bl	8003788 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800147e:	bf00      	nop
 8001480:	3708      	adds	r7, #8
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	40023800 	.word	0x40023800

0800148c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b08e      	sub	sp, #56	; 0x38
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001494:	2300      	movs	r3, #0
 8001496:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001498:	2300      	movs	r3, #0
 800149a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800149c:	2300      	movs	r3, #0
 800149e:	60fb      	str	r3, [r7, #12]
 80014a0:	4b33      	ldr	r3, [pc, #204]	; (8001570 <HAL_InitTick+0xe4>)
 80014a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a4:	4a32      	ldr	r2, [pc, #200]	; (8001570 <HAL_InitTick+0xe4>)
 80014a6:	f043 0310 	orr.w	r3, r3, #16
 80014aa:	6413      	str	r3, [r2, #64]	; 0x40
 80014ac:	4b30      	ldr	r3, [pc, #192]	; (8001570 <HAL_InitTick+0xe4>)
 80014ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b0:	f003 0310 	and.w	r3, r3, #16
 80014b4:	60fb      	str	r3, [r7, #12]
 80014b6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80014b8:	f107 0210 	add.w	r2, r7, #16
 80014bc:	f107 0314 	add.w	r3, r7, #20
 80014c0:	4611      	mov	r1, r2
 80014c2:	4618      	mov	r0, r3
 80014c4:	f004 fc0e 	bl	8005ce4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80014c8:	6a3b      	ldr	r3, [r7, #32]
 80014ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80014cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d103      	bne.n	80014da <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80014d2:	f004 fbf3 	bl	8005cbc <HAL_RCC_GetPCLK1Freq>
 80014d6:	6378      	str	r0, [r7, #52]	; 0x34
 80014d8:	e004      	b.n	80014e4 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80014da:	f004 fbef 	bl	8005cbc <HAL_RCC_GetPCLK1Freq>
 80014de:	4603      	mov	r3, r0
 80014e0:	005b      	lsls	r3, r3, #1
 80014e2:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80014e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014e6:	4a23      	ldr	r2, [pc, #140]	; (8001574 <HAL_InitTick+0xe8>)
 80014e8:	fba2 2303 	umull	r2, r3, r2, r3
 80014ec:	0c9b      	lsrs	r3, r3, #18
 80014ee:	3b01      	subs	r3, #1
 80014f0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80014f2:	4b21      	ldr	r3, [pc, #132]	; (8001578 <HAL_InitTick+0xec>)
 80014f4:	4a21      	ldr	r2, [pc, #132]	; (800157c <HAL_InitTick+0xf0>)
 80014f6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80014f8:	4b1f      	ldr	r3, [pc, #124]	; (8001578 <HAL_InitTick+0xec>)
 80014fa:	f240 32e7 	movw	r2, #999	; 0x3e7
 80014fe:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001500:	4a1d      	ldr	r2, [pc, #116]	; (8001578 <HAL_InitTick+0xec>)
 8001502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001504:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001506:	4b1c      	ldr	r3, [pc, #112]	; (8001578 <HAL_InitTick+0xec>)
 8001508:	2200      	movs	r2, #0
 800150a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800150c:	4b1a      	ldr	r3, [pc, #104]	; (8001578 <HAL_InitTick+0xec>)
 800150e:	2200      	movs	r2, #0
 8001510:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001512:	4b19      	ldr	r3, [pc, #100]	; (8001578 <HAL_InitTick+0xec>)
 8001514:	2200      	movs	r2, #0
 8001516:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001518:	4817      	ldr	r0, [pc, #92]	; (8001578 <HAL_InitTick+0xec>)
 800151a:	f004 fdd5 	bl	80060c8 <HAL_TIM_Base_Init>
 800151e:	4603      	mov	r3, r0
 8001520:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001524:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001528:	2b00      	cmp	r3, #0
 800152a:	d11b      	bne.n	8001564 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800152c:	4812      	ldr	r0, [pc, #72]	; (8001578 <HAL_InitTick+0xec>)
 800152e:	f004 fe25 	bl	800617c <HAL_TIM_Base_Start_IT>
 8001532:	4603      	mov	r3, r0
 8001534:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001538:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800153c:	2b00      	cmp	r3, #0
 800153e:	d111      	bne.n	8001564 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001540:	2036      	movs	r0, #54	; 0x36
 8001542:	f002 f93d 	bl	80037c0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2b0f      	cmp	r3, #15
 800154a:	d808      	bhi.n	800155e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800154c:	2200      	movs	r2, #0
 800154e:	6879      	ldr	r1, [r7, #4]
 8001550:	2036      	movs	r0, #54	; 0x36
 8001552:	f002 f919 	bl	8003788 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001556:	4a0a      	ldr	r2, [pc, #40]	; (8001580 <HAL_InitTick+0xf4>)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6013      	str	r3, [r2, #0]
 800155c:	e002      	b.n	8001564 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800155e:	2301      	movs	r3, #1
 8001560:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001564:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001568:	4618      	mov	r0, r3
 800156a:	3738      	adds	r7, #56	; 0x38
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}
 8001570:	40023800 	.word	0x40023800
 8001574:	431bde83 	.word	0x431bde83
 8001578:	20000620 	.word	0x20000620
 800157c:	40001000 	.word	0x40001000
 8001580:	20000084 	.word	0x20000084

08001584 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001588:	e7fe      	b.n	8001588 <NMI_Handler+0x4>

0800158a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800158a:	b480      	push	{r7}
 800158c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800158e:	e7fe      	b.n	800158e <HardFault_Handler+0x4>

08001590 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001594:	e7fe      	b.n	8001594 <MemManage_Handler+0x4>

08001596 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001596:	b480      	push	{r7}
 8001598:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800159a:	e7fe      	b.n	800159a <BusFault_Handler+0x4>

0800159c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015a0:	e7fe      	b.n	80015a0 <UsageFault_Handler+0x4>

080015a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015a2:	b480      	push	{r7}
 80015a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015a6:	bf00      	nop
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr

080015b0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80015b4:	4802      	ldr	r0, [pc, #8]	; (80015c0 <TIM6_DAC_IRQHandler+0x10>)
 80015b6:	f004 fe51 	bl	800625c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80015ba:	bf00      	nop
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	20000620 	.word	0x20000620

080015c4 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 80015c8:	4802      	ldr	r0, [pc, #8]	; (80015d4 <OTG_HS_IRQHandler+0x10>)
 80015ca:	f002 fdda 	bl	8004182 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 80015ce:	bf00      	nop
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	20005afc 	.word	0x20005afc

080015d8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  return 1;
 80015dc:	2301      	movs	r3, #1
}
 80015de:	4618      	mov	r0, r3
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr

080015e8 <_kill>:

int _kill(int pid, int sig)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
 80015f0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80015f2:	f00d ff2b 	bl	800f44c <__errno>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2216      	movs	r2, #22
 80015fa:	601a      	str	r2, [r3, #0]
  return -1;
 80015fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001600:	4618      	mov	r0, r3
 8001602:	3708      	adds	r7, #8
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}

08001608 <_exit>:

void _exit (int status)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001610:	f04f 31ff 	mov.w	r1, #4294967295
 8001614:	6878      	ldr	r0, [r7, #4]
 8001616:	f7ff ffe7 	bl	80015e8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800161a:	e7fe      	b.n	800161a <_exit+0x12>

0800161c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b086      	sub	sp, #24
 8001620:	af00      	add	r7, sp, #0
 8001622:	60f8      	str	r0, [r7, #12]
 8001624:	60b9      	str	r1, [r7, #8]
 8001626:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001628:	2300      	movs	r3, #0
 800162a:	617b      	str	r3, [r7, #20]
 800162c:	e00a      	b.n	8001644 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800162e:	f3af 8000 	nop.w
 8001632:	4601      	mov	r1, r0
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	1c5a      	adds	r2, r3, #1
 8001638:	60ba      	str	r2, [r7, #8]
 800163a:	b2ca      	uxtb	r2, r1
 800163c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	3301      	adds	r3, #1
 8001642:	617b      	str	r3, [r7, #20]
 8001644:	697a      	ldr	r2, [r7, #20]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	429a      	cmp	r2, r3
 800164a:	dbf0      	blt.n	800162e <_read+0x12>
  }

  return len;
 800164c:	687b      	ldr	r3, [r7, #4]
}
 800164e:	4618      	mov	r0, r3
 8001650:	3718      	adds	r7, #24
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}

08001656 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001656:	b580      	push	{r7, lr}
 8001658:	b086      	sub	sp, #24
 800165a:	af00      	add	r7, sp, #0
 800165c:	60f8      	str	r0, [r7, #12]
 800165e:	60b9      	str	r1, [r7, #8]
 8001660:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001662:	2300      	movs	r3, #0
 8001664:	617b      	str	r3, [r7, #20]
 8001666:	e009      	b.n	800167c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001668:	68bb      	ldr	r3, [r7, #8]
 800166a:	1c5a      	adds	r2, r3, #1
 800166c:	60ba      	str	r2, [r7, #8]
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	4618      	mov	r0, r3
 8001672:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	3301      	adds	r3, #1
 800167a:	617b      	str	r3, [r7, #20]
 800167c:	697a      	ldr	r2, [r7, #20]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	429a      	cmp	r2, r3
 8001682:	dbf1      	blt.n	8001668 <_write+0x12>
  }
  return len;
 8001684:	687b      	ldr	r3, [r7, #4]
}
 8001686:	4618      	mov	r0, r3
 8001688:	3718      	adds	r7, #24
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}

0800168e <_close>:

int _close(int file)
{
 800168e:	b480      	push	{r7}
 8001690:	b083      	sub	sp, #12
 8001692:	af00      	add	r7, sp, #0
 8001694:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001696:	f04f 33ff 	mov.w	r3, #4294967295
}
 800169a:	4618      	mov	r0, r3
 800169c:	370c      	adds	r7, #12
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr

080016a6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016a6:	b480      	push	{r7}
 80016a8:	b083      	sub	sp, #12
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	6078      	str	r0, [r7, #4]
 80016ae:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016b6:	605a      	str	r2, [r3, #4]
  return 0;
 80016b8:	2300      	movs	r3, #0
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	370c      	adds	r7, #12
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr

080016c6 <_isatty>:

int _isatty(int file)
{
 80016c6:	b480      	push	{r7}
 80016c8:	b083      	sub	sp, #12
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80016ce:	2301      	movs	r3, #1
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	370c      	adds	r7, #12
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr

080016dc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016dc:	b480      	push	{r7}
 80016de:	b085      	sub	sp, #20
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	60f8      	str	r0, [r7, #12]
 80016e4:	60b9      	str	r1, [r7, #8]
 80016e6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80016e8:	2300      	movs	r3, #0
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	3714      	adds	r7, #20
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
	...

080016f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b086      	sub	sp, #24
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001700:	4a14      	ldr	r2, [pc, #80]	; (8001754 <_sbrk+0x5c>)
 8001702:	4b15      	ldr	r3, [pc, #84]	; (8001758 <_sbrk+0x60>)
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800170c:	4b13      	ldr	r3, [pc, #76]	; (800175c <_sbrk+0x64>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d102      	bne.n	800171a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001714:	4b11      	ldr	r3, [pc, #68]	; (800175c <_sbrk+0x64>)
 8001716:	4a12      	ldr	r2, [pc, #72]	; (8001760 <_sbrk+0x68>)
 8001718:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800171a:	4b10      	ldr	r3, [pc, #64]	; (800175c <_sbrk+0x64>)
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	4413      	add	r3, r2
 8001722:	693a      	ldr	r2, [r7, #16]
 8001724:	429a      	cmp	r2, r3
 8001726:	d207      	bcs.n	8001738 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001728:	f00d fe90 	bl	800f44c <__errno>
 800172c:	4603      	mov	r3, r0
 800172e:	220c      	movs	r2, #12
 8001730:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001732:	f04f 33ff 	mov.w	r3, #4294967295
 8001736:	e009      	b.n	800174c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001738:	4b08      	ldr	r3, [pc, #32]	; (800175c <_sbrk+0x64>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800173e:	4b07      	ldr	r3, [pc, #28]	; (800175c <_sbrk+0x64>)
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	4413      	add	r3, r2
 8001746:	4a05      	ldr	r2, [pc, #20]	; (800175c <_sbrk+0x64>)
 8001748:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800174a:	68fb      	ldr	r3, [r7, #12]
}
 800174c:	4618      	mov	r0, r3
 800174e:	3718      	adds	r7, #24
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	20030000 	.word	0x20030000
 8001758:	00000400 	.word	0x00000400
 800175c:	20000668 	.word	0x20000668
 8001760:	20006378 	.word	0x20006378

08001764 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001768:	4b06      	ldr	r3, [pc, #24]	; (8001784 <SystemInit+0x20>)
 800176a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800176e:	4a05      	ldr	r2, [pc, #20]	; (8001784 <SystemInit+0x20>)
 8001770:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001774:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001778:	bf00      	nop
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr
 8001782:	bf00      	nop
 8001784:	e000ed00 	.word	0xe000ed00

08001788 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001788:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017c0 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800178c:	480d      	ldr	r0, [pc, #52]	; (80017c4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800178e:	490e      	ldr	r1, [pc, #56]	; (80017c8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001790:	4a0e      	ldr	r2, [pc, #56]	; (80017cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001792:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001794:	e002      	b.n	800179c <LoopCopyDataInit>

08001796 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001796:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001798:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800179a:	3304      	adds	r3, #4

0800179c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800179c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800179e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017a0:	d3f9      	bcc.n	8001796 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017a2:	4a0b      	ldr	r2, [pc, #44]	; (80017d0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80017a4:	4c0b      	ldr	r4, [pc, #44]	; (80017d4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80017a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017a8:	e001      	b.n	80017ae <LoopFillZerobss>

080017aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017ac:	3204      	adds	r2, #4

080017ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017b0:	d3fb      	bcc.n	80017aa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80017b2:	f7ff ffd7 	bl	8001764 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017b6:	f00d fe4f 	bl	800f458 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017ba:	f7ff fb9d 	bl	8000ef8 <main>
  bx  lr    
 80017be:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80017c0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80017c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017c8:	20000350 	.word	0x20000350
  ldr r2, =_sidata
 80017cc:	080134fc 	.word	0x080134fc
  ldr r2, =_sbss
 80017d0:	20000350 	.word	0x20000350
  ldr r4, =_ebss
 80017d4:	20006374 	.word	0x20006374

080017d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017d8:	e7fe      	b.n	80017d8 <ADC_IRQHandler>

080017da <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 80017da:	b580      	push	{r7, lr}
 80017dc:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 80017de:	f000 fc73 	bl	80020c8 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 80017e2:	20ca      	movs	r0, #202	; 0xca
 80017e4:	f000 f95d 	bl	8001aa2 <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 80017e8:	20c3      	movs	r0, #195	; 0xc3
 80017ea:	f000 f967 	bl	8001abc <ili9341_WriteData>
  ili9341_WriteData(0x08);
 80017ee:	2008      	movs	r0, #8
 80017f0:	f000 f964 	bl	8001abc <ili9341_WriteData>
  ili9341_WriteData(0x50);
 80017f4:	2050      	movs	r0, #80	; 0x50
 80017f6:	f000 f961 	bl	8001abc <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 80017fa:	20cf      	movs	r0, #207	; 0xcf
 80017fc:	f000 f951 	bl	8001aa2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001800:	2000      	movs	r0, #0
 8001802:	f000 f95b 	bl	8001abc <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 8001806:	20c1      	movs	r0, #193	; 0xc1
 8001808:	f000 f958 	bl	8001abc <ili9341_WriteData>
  ili9341_WriteData(0x30);
 800180c:	2030      	movs	r0, #48	; 0x30
 800180e:	f000 f955 	bl	8001abc <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 8001812:	20ed      	movs	r0, #237	; 0xed
 8001814:	f000 f945 	bl	8001aa2 <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 8001818:	2064      	movs	r0, #100	; 0x64
 800181a:	f000 f94f 	bl	8001abc <ili9341_WriteData>
  ili9341_WriteData(0x03);
 800181e:	2003      	movs	r0, #3
 8001820:	f000 f94c 	bl	8001abc <ili9341_WriteData>
  ili9341_WriteData(0x12);
 8001824:	2012      	movs	r0, #18
 8001826:	f000 f949 	bl	8001abc <ili9341_WriteData>
  ili9341_WriteData(0x81);
 800182a:	2081      	movs	r0, #129	; 0x81
 800182c:	f000 f946 	bl	8001abc <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 8001830:	20e8      	movs	r0, #232	; 0xe8
 8001832:	f000 f936 	bl	8001aa2 <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 8001836:	2085      	movs	r0, #133	; 0x85
 8001838:	f000 f940 	bl	8001abc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800183c:	2000      	movs	r0, #0
 800183e:	f000 f93d 	bl	8001abc <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8001842:	2078      	movs	r0, #120	; 0x78
 8001844:	f000 f93a 	bl	8001abc <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 8001848:	20cb      	movs	r0, #203	; 0xcb
 800184a:	f000 f92a 	bl	8001aa2 <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 800184e:	2039      	movs	r0, #57	; 0x39
 8001850:	f000 f934 	bl	8001abc <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8001854:	202c      	movs	r0, #44	; 0x2c
 8001856:	f000 f931 	bl	8001abc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800185a:	2000      	movs	r0, #0
 800185c:	f000 f92e 	bl	8001abc <ili9341_WriteData>
  ili9341_WriteData(0x34);
 8001860:	2034      	movs	r0, #52	; 0x34
 8001862:	f000 f92b 	bl	8001abc <ili9341_WriteData>
  ili9341_WriteData(0x02);
 8001866:	2002      	movs	r0, #2
 8001868:	f000 f928 	bl	8001abc <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 800186c:	20f7      	movs	r0, #247	; 0xf7
 800186e:	f000 f918 	bl	8001aa2 <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 8001872:	2020      	movs	r0, #32
 8001874:	f000 f922 	bl	8001abc <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8001878:	20ea      	movs	r0, #234	; 0xea
 800187a:	f000 f912 	bl	8001aa2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800187e:	2000      	movs	r0, #0
 8001880:	f000 f91c 	bl	8001abc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001884:	2000      	movs	r0, #0
 8001886:	f000 f919 	bl	8001abc <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 800188a:	20b1      	movs	r0, #177	; 0xb1
 800188c:	f000 f909 	bl	8001aa2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001890:	2000      	movs	r0, #0
 8001892:	f000 f913 	bl	8001abc <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8001896:	201b      	movs	r0, #27
 8001898:	f000 f910 	bl	8001abc <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 800189c:	20b6      	movs	r0, #182	; 0xb6
 800189e:	f000 f900 	bl	8001aa2 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 80018a2:	200a      	movs	r0, #10
 80018a4:	f000 f90a 	bl	8001abc <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 80018a8:	20a2      	movs	r0, #162	; 0xa2
 80018aa:	f000 f907 	bl	8001abc <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 80018ae:	20c0      	movs	r0, #192	; 0xc0
 80018b0:	f000 f8f7 	bl	8001aa2 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 80018b4:	2010      	movs	r0, #16
 80018b6:	f000 f901 	bl	8001abc <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 80018ba:	20c1      	movs	r0, #193	; 0xc1
 80018bc:	f000 f8f1 	bl	8001aa2 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 80018c0:	2010      	movs	r0, #16
 80018c2:	f000 f8fb 	bl	8001abc <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 80018c6:	20c5      	movs	r0, #197	; 0xc5
 80018c8:	f000 f8eb 	bl	8001aa2 <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 80018cc:	2045      	movs	r0, #69	; 0x45
 80018ce:	f000 f8f5 	bl	8001abc <ili9341_WriteData>
  ili9341_WriteData(0x15);
 80018d2:	2015      	movs	r0, #21
 80018d4:	f000 f8f2 	bl	8001abc <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 80018d8:	20c7      	movs	r0, #199	; 0xc7
 80018da:	f000 f8e2 	bl	8001aa2 <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 80018de:	2090      	movs	r0, #144	; 0x90
 80018e0:	f000 f8ec 	bl	8001abc <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 80018e4:	2036      	movs	r0, #54	; 0x36
 80018e6:	f000 f8dc 	bl	8001aa2 <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 80018ea:	20c8      	movs	r0, #200	; 0xc8
 80018ec:	f000 f8e6 	bl	8001abc <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 80018f0:	20f2      	movs	r0, #242	; 0xf2
 80018f2:	f000 f8d6 	bl	8001aa2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80018f6:	2000      	movs	r0, #0
 80018f8:	f000 f8e0 	bl	8001abc <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 80018fc:	20b0      	movs	r0, #176	; 0xb0
 80018fe:	f000 f8d0 	bl	8001aa2 <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 8001902:	20c2      	movs	r0, #194	; 0xc2
 8001904:	f000 f8da 	bl	8001abc <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8001908:	20b6      	movs	r0, #182	; 0xb6
 800190a:	f000 f8ca 	bl	8001aa2 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 800190e:	200a      	movs	r0, #10
 8001910:	f000 f8d4 	bl	8001abc <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8001914:	20a7      	movs	r0, #167	; 0xa7
 8001916:	f000 f8d1 	bl	8001abc <ili9341_WriteData>
  ili9341_WriteData(0x27);
 800191a:	2027      	movs	r0, #39	; 0x27
 800191c:	f000 f8ce 	bl	8001abc <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8001920:	2004      	movs	r0, #4
 8001922:	f000 f8cb 	bl	8001abc <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 8001926:	202a      	movs	r0, #42	; 0x2a
 8001928:	f000 f8bb 	bl	8001aa2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800192c:	2000      	movs	r0, #0
 800192e:	f000 f8c5 	bl	8001abc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001932:	2000      	movs	r0, #0
 8001934:	f000 f8c2 	bl	8001abc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001938:	2000      	movs	r0, #0
 800193a:	f000 f8bf 	bl	8001abc <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 800193e:	20ef      	movs	r0, #239	; 0xef
 8001940:	f000 f8bc 	bl	8001abc <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8001944:	202b      	movs	r0, #43	; 0x2b
 8001946:	f000 f8ac 	bl	8001aa2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800194a:	2000      	movs	r0, #0
 800194c:	f000 f8b6 	bl	8001abc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001950:	2000      	movs	r0, #0
 8001952:	f000 f8b3 	bl	8001abc <ili9341_WriteData>
  ili9341_WriteData(0x01);
 8001956:	2001      	movs	r0, #1
 8001958:	f000 f8b0 	bl	8001abc <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 800195c:	203f      	movs	r0, #63	; 0x3f
 800195e:	f000 f8ad 	bl	8001abc <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 8001962:	20f6      	movs	r0, #246	; 0xf6
 8001964:	f000 f89d 	bl	8001aa2 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8001968:	2001      	movs	r0, #1
 800196a:	f000 f8a7 	bl	8001abc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800196e:	2000      	movs	r0, #0
 8001970:	f000 f8a4 	bl	8001abc <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8001974:	2006      	movs	r0, #6
 8001976:	f000 f8a1 	bl	8001abc <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 800197a:	202c      	movs	r0, #44	; 0x2c
 800197c:	f000 f891 	bl	8001aa2 <ili9341_WriteReg>
  LCD_Delay(200);
 8001980:	20c8      	movs	r0, #200	; 0xc8
 8001982:	f000 fc8f 	bl	80022a4 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 8001986:	2026      	movs	r0, #38	; 0x26
 8001988:	f000 f88b 	bl	8001aa2 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 800198c:	2001      	movs	r0, #1
 800198e:	f000 f895 	bl	8001abc <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 8001992:	20e0      	movs	r0, #224	; 0xe0
 8001994:	f000 f885 	bl	8001aa2 <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8001998:	200f      	movs	r0, #15
 800199a:	f000 f88f 	bl	8001abc <ili9341_WriteData>
  ili9341_WriteData(0x29);
 800199e:	2029      	movs	r0, #41	; 0x29
 80019a0:	f000 f88c 	bl	8001abc <ili9341_WriteData>
  ili9341_WriteData(0x24);
 80019a4:	2024      	movs	r0, #36	; 0x24
 80019a6:	f000 f889 	bl	8001abc <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 80019aa:	200c      	movs	r0, #12
 80019ac:	f000 f886 	bl	8001abc <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 80019b0:	200e      	movs	r0, #14
 80019b2:	f000 f883 	bl	8001abc <ili9341_WriteData>
  ili9341_WriteData(0x09);
 80019b6:	2009      	movs	r0, #9
 80019b8:	f000 f880 	bl	8001abc <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 80019bc:	204e      	movs	r0, #78	; 0x4e
 80019be:	f000 f87d 	bl	8001abc <ili9341_WriteData>
  ili9341_WriteData(0x78);
 80019c2:	2078      	movs	r0, #120	; 0x78
 80019c4:	f000 f87a 	bl	8001abc <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 80019c8:	203c      	movs	r0, #60	; 0x3c
 80019ca:	f000 f877 	bl	8001abc <ili9341_WriteData>
  ili9341_WriteData(0x09);
 80019ce:	2009      	movs	r0, #9
 80019d0:	f000 f874 	bl	8001abc <ili9341_WriteData>
  ili9341_WriteData(0x13);
 80019d4:	2013      	movs	r0, #19
 80019d6:	f000 f871 	bl	8001abc <ili9341_WriteData>
  ili9341_WriteData(0x05);
 80019da:	2005      	movs	r0, #5
 80019dc:	f000 f86e 	bl	8001abc <ili9341_WriteData>
  ili9341_WriteData(0x17);
 80019e0:	2017      	movs	r0, #23
 80019e2:	f000 f86b 	bl	8001abc <ili9341_WriteData>
  ili9341_WriteData(0x11);
 80019e6:	2011      	movs	r0, #17
 80019e8:	f000 f868 	bl	8001abc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80019ec:	2000      	movs	r0, #0
 80019ee:	f000 f865 	bl	8001abc <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 80019f2:	20e1      	movs	r0, #225	; 0xe1
 80019f4:	f000 f855 	bl	8001aa2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80019f8:	2000      	movs	r0, #0
 80019fa:	f000 f85f 	bl	8001abc <ili9341_WriteData>
  ili9341_WriteData(0x16);
 80019fe:	2016      	movs	r0, #22
 8001a00:	f000 f85c 	bl	8001abc <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8001a04:	201b      	movs	r0, #27
 8001a06:	f000 f859 	bl	8001abc <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8001a0a:	2004      	movs	r0, #4
 8001a0c:	f000 f856 	bl	8001abc <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8001a10:	2011      	movs	r0, #17
 8001a12:	f000 f853 	bl	8001abc <ili9341_WriteData>
  ili9341_WriteData(0x07);
 8001a16:	2007      	movs	r0, #7
 8001a18:	f000 f850 	bl	8001abc <ili9341_WriteData>
  ili9341_WriteData(0x31);
 8001a1c:	2031      	movs	r0, #49	; 0x31
 8001a1e:	f000 f84d 	bl	8001abc <ili9341_WriteData>
  ili9341_WriteData(0x33);
 8001a22:	2033      	movs	r0, #51	; 0x33
 8001a24:	f000 f84a 	bl	8001abc <ili9341_WriteData>
  ili9341_WriteData(0x42);
 8001a28:	2042      	movs	r0, #66	; 0x42
 8001a2a:	f000 f847 	bl	8001abc <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8001a2e:	2005      	movs	r0, #5
 8001a30:	f000 f844 	bl	8001abc <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8001a34:	200c      	movs	r0, #12
 8001a36:	f000 f841 	bl	8001abc <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 8001a3a:	200a      	movs	r0, #10
 8001a3c:	f000 f83e 	bl	8001abc <ili9341_WriteData>
  ili9341_WriteData(0x28);
 8001a40:	2028      	movs	r0, #40	; 0x28
 8001a42:	f000 f83b 	bl	8001abc <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 8001a46:	202f      	movs	r0, #47	; 0x2f
 8001a48:	f000 f838 	bl	8001abc <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 8001a4c:	200f      	movs	r0, #15
 8001a4e:	f000 f835 	bl	8001abc <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 8001a52:	2011      	movs	r0, #17
 8001a54:	f000 f825 	bl	8001aa2 <ili9341_WriteReg>
  LCD_Delay(200);
 8001a58:	20c8      	movs	r0, #200	; 0xc8
 8001a5a:	f000 fc23 	bl	80022a4 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8001a5e:	2029      	movs	r0, #41	; 0x29
 8001a60:	f000 f81f 	bl	8001aa2 <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8001a64:	202c      	movs	r0, #44	; 0x2c
 8001a66:	f000 f81c 	bl	8001aa2 <ili9341_WriteReg>
}
 8001a6a:	bf00      	nop
 8001a6c:	bd80      	pop	{r7, pc}

08001a6e <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 8001a6e:	b580      	push	{r7, lr}
 8001a70:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 8001a72:	f000 fb29 	bl	80020c8 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 8001a76:	2103      	movs	r1, #3
 8001a78:	20d3      	movs	r0, #211	; 0xd3
 8001a7a:	f000 f82c 	bl	8001ad6 <ili9341_ReadData>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	b29b      	uxth	r3, r3
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	bd80      	pop	{r7, pc}

08001a86 <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 8001a86:	b580      	push	{r7, lr}
 8001a88:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8001a8a:	2029      	movs	r0, #41	; 0x29
 8001a8c:	f000 f809 	bl	8001aa2 <ili9341_WriteReg>
}
 8001a90:	bf00      	nop
 8001a92:	bd80      	pop	{r7, pc}

08001a94 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 8001a98:	2028      	movs	r0, #40	; 0x28
 8001a9a:	f000 f802 	bl	8001aa2 <ili9341_WriteReg>
}
 8001a9e:	bf00      	nop
 8001aa0:	bd80      	pop	{r7, pc}

08001aa2 <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 8001aa2:	b580      	push	{r7, lr}
 8001aa4:	b082      	sub	sp, #8
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8001aac:	79fb      	ldrb	r3, [r7, #7]
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f000 fba4 	bl	80021fc <LCD_IO_WriteReg>
}
 8001ab4:	bf00      	nop
 8001ab6:	3708      	adds	r7, #8
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}

08001abc <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b082      	sub	sp, #8
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8001ac6:	88fb      	ldrh	r3, [r7, #6]
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f000 fb75 	bl	80021b8 <LCD_IO_WriteData>
}
 8001ace:	bf00      	nop
 8001ad0:	3708      	adds	r7, #8
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}

08001ad6 <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 8001ad6:	b580      	push	{r7, lr}
 8001ad8:	b082      	sub	sp, #8
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	4603      	mov	r3, r0
 8001ade:	460a      	mov	r2, r1
 8001ae0:	80fb      	strh	r3, [r7, #6]
 8001ae2:	4613      	mov	r3, r2
 8001ae4:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 8001ae6:	797a      	ldrb	r2, [r7, #5]
 8001ae8:	88fb      	ldrh	r3, [r7, #6]
 8001aea:	4611      	mov	r1, r2
 8001aec:	4618      	mov	r0, r3
 8001aee:	f000 fba7 	bl	8002240 <LCD_IO_ReadData>
 8001af2:	4603      	mov	r3, r0
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3708      	adds	r7, #8
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}

08001afc <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 8001b00:	23f0      	movs	r3, #240	; 0xf0
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr

08001b0c <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 8001b10:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr

08001b1e <L3GD20_Init>:
  * @param  L3GD20_InitStruct: pointer to a L3GD20_InitTypeDef structure 
  *         that contains the configuration setting for the L3GD20.
  * @retval None
  */
void L3GD20_Init(uint16_t InitStruct)
{  
 8001b1e:	b580      	push	{r7, lr}
 8001b20:	b084      	sub	sp, #16
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	4603      	mov	r3, r0
 8001b26:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	73fb      	strb	r3, [r7, #15]
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 8001b2c:	f000 fbc6 	bl	80022bc <GYRO_IO_Init>
  
  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8001b30:	88fb      	ldrh	r3, [r7, #6]
 8001b32:	b2db      	uxtb	r3, r3
 8001b34:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 8001b36:	f107 030f 	add.w	r3, r7, #15
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	2120      	movs	r1, #32
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f000 fc08 	bl	8002354 <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG4 register */  
  ctrl = (uint8_t) (InitStruct >> 8);
 8001b44:	88fb      	ldrh	r3, [r7, #6]
 8001b46:	0a1b      	lsrs	r3, r3, #8
 8001b48:	b29b      	uxth	r3, r3
 8001b4a:	b2db      	uxtb	r3, r3
 8001b4c:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG4_ADDR, 1);
 8001b4e:	f107 030f 	add.w	r3, r7, #15
 8001b52:	2201      	movs	r2, #1
 8001b54:	2123      	movs	r1, #35	; 0x23
 8001b56:	4618      	mov	r0, r3
 8001b58:	f000 fbfc 	bl	8002354 <GYRO_IO_Write>
}
 8001b5c:	bf00      	nop
 8001b5e:	3710      	adds	r7, #16
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}

08001b64 <L3GD20_DeInit>:
  * @brief L3GD20 De-initialization
  * @param  None
  * @retval None
  */
void L3GD20_DeInit(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
}
 8001b68:	bf00      	nop
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr

08001b72 <L3GD20_ReadID>:
  * @brief  Read ID address of L3GD20
  * @param  None
  * @retval ID name
  */
uint8_t L3GD20_ReadID(void)
{
 8001b72:	b580      	push	{r7, lr}
 8001b74:	b082      	sub	sp, #8
 8001b76:	af00      	add	r7, sp, #0
  uint8_t tmp;
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 8001b78:	f000 fba0 	bl	80022bc <GYRO_IO_Init>
  
  /* Read WHO I AM register */
  GYRO_IO_Read(&tmp, L3GD20_WHO_AM_I_ADDR, 1);
 8001b7c:	1dfb      	adds	r3, r7, #7
 8001b7e:	2201      	movs	r2, #1
 8001b80:	210f      	movs	r1, #15
 8001b82:	4618      	mov	r0, r3
 8001b84:	f000 fc18 	bl	80023b8 <GYRO_IO_Read>
  
  /* Return the ID */
  return (uint8_t)tmp;
 8001b88:	79fb      	ldrb	r3, [r7, #7]
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3708      	adds	r7, #8
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}

08001b92 <L3GD20_RebootCmd>:
  * @brief  Reboot memory content of L3GD20
  * @param  None
  * @retval None
  */
void L3GD20_RebootCmd(void)
{
 8001b92:	b580      	push	{r7, lr}
 8001b94:	b082      	sub	sp, #8
 8001b96:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8001b98:	1dfb      	adds	r3, r7, #7
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	2124      	movs	r1, #36	; 0x24
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f000 fc0a 	bl	80023b8 <GYRO_IO_Read>
  
  /* Enable or Disable the reboot memory */
  tmpreg |= L3GD20_BOOT_REBOOTMEMORY;
 8001ba4:	79fb      	ldrb	r3, [r7, #7]
 8001ba6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001baa:	b2db      	uxtb	r3, r3
 8001bac:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8001bae:	1dfb      	adds	r3, r7, #7
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	2124      	movs	r1, #36	; 0x24
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f000 fbcd 	bl	8002354 <GYRO_IO_Write>
}
 8001bba:	bf00      	nop
 8001bbc:	3708      	adds	r7, #8
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}

08001bc2 <L3GD20_LowPower>:
  * @brief Set L3GD20 in low-power mode
  * @param 
  * @retval  None
  */
void L3GD20_LowPower(uint16_t InitStruct)
{  
 8001bc2:	b580      	push	{r7, lr}
 8001bc4:	b084      	sub	sp, #16
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	4603      	mov	r3, r0
 8001bca:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8001bd0:	88fb      	ldrh	r3, [r7, #6]
 8001bd2:	b2db      	uxtb	r3, r3
 8001bd4:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 8001bd6:	f107 030f 	add.w	r3, r7, #15
 8001bda:	2201      	movs	r2, #1
 8001bdc:	2120      	movs	r1, #32
 8001bde:	4618      	mov	r0, r3
 8001be0:	f000 fbb8 	bl	8002354 <GYRO_IO_Write>
}
 8001be4:	bf00      	nop
 8001be6:	3710      	adds	r7, #16
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}

08001bec <L3GD20_INT1InterruptConfig>:
  * @brief  Set L3GD20 Interrupt INT1 configuration
  * @param  Int1Config: the configuration setting for the L3GD20 Interrupt.
  * @retval None
  */
void L3GD20_INT1InterruptConfig(uint16_t Int1Config)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b084      	sub	sp, #16
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	73fb      	strb	r3, [r7, #15]
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	73bb      	strb	r3, [r7, #14]
  
  /* Read INT1_CFG register */
  GYRO_IO_Read(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 8001bfe:	f107 030f 	add.w	r3, r7, #15
 8001c02:	2201      	movs	r2, #1
 8001c04:	2130      	movs	r1, #48	; 0x30
 8001c06:	4618      	mov	r0, r3
 8001c08:	f000 fbd6 	bl	80023b8 <GYRO_IO_Read>
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 8001c0c:	f107 030e 	add.w	r3, r7, #14
 8001c10:	2201      	movs	r2, #1
 8001c12:	2122      	movs	r1, #34	; 0x22
 8001c14:	4618      	mov	r0, r3
 8001c16:	f000 fbcf 	bl	80023b8 <GYRO_IO_Read>
  
  ctrl_cfr &= 0x80;
 8001c1a:	7bfb      	ldrb	r3, [r7, #15]
 8001c1c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	73fb      	strb	r3, [r7, #15]
  ctrl_cfr |= ((uint8_t) Int1Config >> 8);
 8001c24:	88fb      	ldrh	r3, [r7, #6]
 8001c26:	b2db      	uxtb	r3, r3
 8001c28:	121b      	asrs	r3, r3, #8
 8001c2a:	b25a      	sxtb	r2, r3
 8001c2c:	7bfb      	ldrb	r3, [r7, #15]
 8001c2e:	b25b      	sxtb	r3, r3
 8001c30:	4313      	orrs	r3, r2
 8001c32:	b25b      	sxtb	r3, r3
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	73fb      	strb	r3, [r7, #15]
  
  ctrl3 &= 0xDF;
 8001c38:	7bbb      	ldrb	r3, [r7, #14]
 8001c3a:	f023 0320 	bic.w	r3, r3, #32
 8001c3e:	b2db      	uxtb	r3, r3
 8001c40:	73bb      	strb	r3, [r7, #14]
  ctrl3 |= ((uint8_t) Int1Config);   
 8001c42:	88fb      	ldrh	r3, [r7, #6]
 8001c44:	b2da      	uxtb	r2, r3
 8001c46:	7bbb      	ldrb	r3, [r7, #14]
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	73bb      	strb	r3, [r7, #14]
  
  /* Write value to MEMS INT1_CFG register */
  GYRO_IO_Write(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 8001c4e:	f107 030f 	add.w	r3, r7, #15
 8001c52:	2201      	movs	r2, #1
 8001c54:	2130      	movs	r1, #48	; 0x30
 8001c56:	4618      	mov	r0, r3
 8001c58:	f000 fb7c 	bl	8002354 <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 8001c5c:	f107 030e 	add.w	r3, r7, #14
 8001c60:	2201      	movs	r2, #1
 8001c62:	2122      	movs	r1, #34	; 0x22
 8001c64:	4618      	mov	r0, r3
 8001c66:	f000 fb75 	bl	8002354 <GYRO_IO_Write>
}
 8001c6a:	bf00      	nop
 8001c6c:	3710      	adds	r7, #16
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}

08001c72 <L3GD20_EnableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_EnableIT(uint8_t IntSel)
{  
 8001c72:	b580      	push	{r7, lr}
 8001c74:	b084      	sub	sp, #16
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	4603      	mov	r3, r0
 8001c7a:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8001c7c:	f107 030f 	add.w	r3, r7, #15
 8001c80:	2201      	movs	r2, #1
 8001c82:	2122      	movs	r1, #34	; 0x22
 8001c84:	4618      	mov	r0, r3
 8001c86:	f000 fb97 	bl	80023b8 <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 8001c8a:	79fb      	ldrb	r3, [r7, #7]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d10a      	bne.n	8001ca6 <L3GD20_EnableIT+0x34>
  {
    tmpreg &= 0x7F;	
 8001c90:	7bfb      	ldrb	r3, [r7, #15]
 8001c92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c96:	b2db      	uxtb	r3, r3
 8001c98:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_ENABLE;
 8001c9a:	7bfb      	ldrb	r3, [r7, #15]
 8001c9c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	73fb      	strb	r3, [r7, #15]
 8001ca4:	e00c      	b.n	8001cc0 <L3GD20_EnableIT+0x4e>
  }
  else if(IntSel == L3GD20_INT2)
 8001ca6:	79fb      	ldrb	r3, [r7, #7]
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d109      	bne.n	8001cc0 <L3GD20_EnableIT+0x4e>
  {
    tmpreg &= 0xF7;
 8001cac:	7bfb      	ldrb	r3, [r7, #15]
 8001cae:	f023 0308 	bic.w	r3, r3, #8
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_ENABLE;
 8001cb6:	7bfb      	ldrb	r3, [r7, #15]
 8001cb8:	f043 0308 	orr.w	r3, r3, #8
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8001cc0:	f107 030f 	add.w	r3, r7, #15
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	2122      	movs	r1, #34	; 0x22
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f000 fb43 	bl	8002354 <GYRO_IO_Write>
}
 8001cce:	bf00      	nop
 8001cd0:	3710      	adds	r7, #16
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}

08001cd6 <L3GD20_DisableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_DisableIT(uint8_t IntSel)
{  
 8001cd6:	b580      	push	{r7, lr}
 8001cd8:	b084      	sub	sp, #16
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	4603      	mov	r3, r0
 8001cde:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8001ce0:	f107 030f 	add.w	r3, r7, #15
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	2122      	movs	r1, #34	; 0x22
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f000 fb65 	bl	80023b8 <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 8001cee:	79fb      	ldrb	r3, [r7, #7]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d107      	bne.n	8001d04 <L3GD20_DisableIT+0x2e>
  {
    tmpreg &= 0x7F;	
 8001cf4:	7bfb      	ldrb	r3, [r7, #15]
 8001cf6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_DISABLE;
 8001cfe:	7bfb      	ldrb	r3, [r7, #15]
 8001d00:	73fb      	strb	r3, [r7, #15]
 8001d02:	e009      	b.n	8001d18 <L3GD20_DisableIT+0x42>
  }
  else if(IntSel == L3GD20_INT2)
 8001d04:	79fb      	ldrb	r3, [r7, #7]
 8001d06:	2b01      	cmp	r3, #1
 8001d08:	d106      	bne.n	8001d18 <L3GD20_DisableIT+0x42>
  {
    tmpreg &= 0xF7;
 8001d0a:	7bfb      	ldrb	r3, [r7, #15]
 8001d0c:	f023 0308 	bic.w	r3, r3, #8
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_DISABLE;
 8001d14:	7bfb      	ldrb	r3, [r7, #15]
 8001d16:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8001d18:	f107 030f 	add.w	r3, r7, #15
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	2122      	movs	r1, #34	; 0x22
 8001d20:	4618      	mov	r0, r3
 8001d22:	f000 fb17 	bl	8002354 <GYRO_IO_Write>
}
 8001d26:	bf00      	nop
 8001d28:	3710      	adds	r7, #16
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}

08001d2e <L3GD20_FilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains the configuration setting for the L3GD20.        
  * @retval None
  */
void L3GD20_FilterConfig(uint8_t FilterStruct) 
{
 8001d2e:	b580      	push	{r7, lr}
 8001d30:	b084      	sub	sp, #16
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	4603      	mov	r3, r0
 8001d36:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 8001d38:	f107 030f 	add.w	r3, r7, #15
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	2121      	movs	r1, #33	; 0x21
 8001d40:	4618      	mov	r0, r3
 8001d42:	f000 fb39 	bl	80023b8 <GYRO_IO_Read>
  
  tmpreg &= 0xC0;
 8001d46:	7bfb      	ldrb	r3, [r7, #15]
 8001d48:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	73fb      	strb	r3, [r7, #15]
  
  /* Configure MEMS: mode and cutoff frequency */
  tmpreg |= FilterStruct;
 8001d50:	7bfa      	ldrb	r2, [r7, #15]
 8001d52:	79fb      	ldrb	r3, [r7, #7]
 8001d54:	4313      	orrs	r3, r2
 8001d56:	b2db      	uxtb	r3, r3
 8001d58:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG2 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 8001d5a:	f107 030f 	add.w	r3, r7, #15
 8001d5e:	2201      	movs	r2, #1
 8001d60:	2121      	movs	r1, #33	; 0x21
 8001d62:	4618      	mov	r0, r3
 8001d64:	f000 faf6 	bl	8002354 <GYRO_IO_Write>
}
 8001d68:	bf00      	nop
 8001d6a:	3710      	adds	r7, #16
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}

08001d70 <L3GD20_FilterCmd>:
  *         @arg: L3GD20_HIGHPASSFILTER_DISABLE 
  *         @arg: L3GD20_HIGHPASSFILTER_ENABLE          
  * @retval None
  */
void L3GD20_FilterCmd(uint8_t HighPassFilterState)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b084      	sub	sp, #16
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	4603      	mov	r3, r0
 8001d78:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8001d7a:	f107 030f 	add.w	r3, r7, #15
 8001d7e:	2201      	movs	r2, #1
 8001d80:	2124      	movs	r1, #36	; 0x24
 8001d82:	4618      	mov	r0, r3
 8001d84:	f000 fb18 	bl	80023b8 <GYRO_IO_Read>
  
  tmpreg &= 0xEF;
 8001d88:	7bfb      	ldrb	r3, [r7, #15]
 8001d8a:	f023 0310 	bic.w	r3, r3, #16
 8001d8e:	b2db      	uxtb	r3, r3
 8001d90:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterState;
 8001d92:	7bfa      	ldrb	r2, [r7, #15]
 8001d94:	79fb      	ldrb	r3, [r7, #7]
 8001d96:	4313      	orrs	r3, r2
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8001d9c:	f107 030f 	add.w	r3, r7, #15
 8001da0:	2201      	movs	r2, #1
 8001da2:	2124      	movs	r1, #36	; 0x24
 8001da4:	4618      	mov	r0, r3
 8001da6:	f000 fad5 	bl	8002354 <GYRO_IO_Write>
}
 8001daa:	bf00      	nop
 8001dac:	3710      	adds	r7, #16
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
	...

08001db4 <L3GD20_ReadXYZAngRate>:
* @brief  Calculate the L3GD20 angular data.
* @param  pfData: Data out pointer
* @retval None
*/
void L3GD20_ReadXYZAngRate(float *pfData)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b08a      	sub	sp, #40	; 0x28
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  uint8_t tmpbuffer[6] ={0};
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	61bb      	str	r3, [r7, #24]
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	83bb      	strh	r3, [r7, #28]
  int16_t RawData[3] = {0};
 8001dc4:	f107 0310 	add.w	r3, r7, #16
 8001dc8:	2200      	movs	r2, #0
 8001dca:	601a      	str	r2, [r3, #0]
 8001dcc:	809a      	strh	r2, [r3, #4]
  uint8_t tmpreg = 0;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	73fb      	strb	r3, [r7, #15]
  float sensitivity = 0;
 8001dd2:	f04f 0300 	mov.w	r3, #0
 8001dd6:	627b      	str	r3, [r7, #36]	; 0x24
  int i =0;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	623b      	str	r3, [r7, #32]
  
  GYRO_IO_Read(&tmpreg,L3GD20_CTRL_REG4_ADDR,1);
 8001ddc:	f107 030f 	add.w	r3, r7, #15
 8001de0:	2201      	movs	r2, #1
 8001de2:	2123      	movs	r1, #35	; 0x23
 8001de4:	4618      	mov	r0, r3
 8001de6:	f000 fae7 	bl	80023b8 <GYRO_IO_Read>
  
  GYRO_IO_Read(tmpbuffer,L3GD20_OUT_X_L_ADDR,6);
 8001dea:	f107 0318 	add.w	r3, r7, #24
 8001dee:	2206      	movs	r2, #6
 8001df0:	2128      	movs	r1, #40	; 0x28
 8001df2:	4618      	mov	r0, r3
 8001df4:	f000 fae0 	bl	80023b8 <GYRO_IO_Read>
  
  /* check in the control register 4 the data alignment (Big Endian or Little Endian)*/
  if(!(tmpreg & L3GD20_BLE_MSB))
 8001df8:	7bfb      	ldrb	r3, [r7, #15]
 8001dfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d123      	bne.n	8001e4a <L3GD20_ReadXYZAngRate+0x96>
  {
    for(i=0; i<3; i++)
 8001e02:	2300      	movs	r3, #0
 8001e04:	623b      	str	r3, [r7, #32]
 8001e06:	e01c      	b.n	8001e42 <L3GD20_ReadXYZAngRate+0x8e>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i+1] << 8) + tmpbuffer[2*i]);
 8001e08:	6a3b      	ldr	r3, [r7, #32]
 8001e0a:	005b      	lsls	r3, r3, #1
 8001e0c:	3301      	adds	r3, #1
 8001e0e:	3328      	adds	r3, #40	; 0x28
 8001e10:	443b      	add	r3, r7
 8001e12:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001e16:	b29b      	uxth	r3, r3
 8001e18:	021b      	lsls	r3, r3, #8
 8001e1a:	b29a      	uxth	r2, r3
 8001e1c:	6a3b      	ldr	r3, [r7, #32]
 8001e1e:	005b      	lsls	r3, r3, #1
 8001e20:	3328      	adds	r3, #40	; 0x28
 8001e22:	443b      	add	r3, r7
 8001e24:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001e28:	b29b      	uxth	r3, r3
 8001e2a:	4413      	add	r3, r2
 8001e2c:	b29b      	uxth	r3, r3
 8001e2e:	b21a      	sxth	r2, r3
 8001e30:	6a3b      	ldr	r3, [r7, #32]
 8001e32:	005b      	lsls	r3, r3, #1
 8001e34:	3328      	adds	r3, #40	; 0x28
 8001e36:	443b      	add	r3, r7
 8001e38:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 8001e3c:	6a3b      	ldr	r3, [r7, #32]
 8001e3e:	3301      	adds	r3, #1
 8001e40:	623b      	str	r3, [r7, #32]
 8001e42:	6a3b      	ldr	r3, [r7, #32]
 8001e44:	2b02      	cmp	r3, #2
 8001e46:	dddf      	ble.n	8001e08 <L3GD20_ReadXYZAngRate+0x54>
 8001e48:	e022      	b.n	8001e90 <L3GD20_ReadXYZAngRate+0xdc>
    }
  }
  else
  {
    for(i=0; i<3; i++)
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	623b      	str	r3, [r7, #32]
 8001e4e:	e01c      	b.n	8001e8a <L3GD20_ReadXYZAngRate+0xd6>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i] << 8) + tmpbuffer[2*i+1]);
 8001e50:	6a3b      	ldr	r3, [r7, #32]
 8001e52:	005b      	lsls	r3, r3, #1
 8001e54:	3328      	adds	r3, #40	; 0x28
 8001e56:	443b      	add	r3, r7
 8001e58:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001e5c:	b29b      	uxth	r3, r3
 8001e5e:	021b      	lsls	r3, r3, #8
 8001e60:	b29a      	uxth	r2, r3
 8001e62:	6a3b      	ldr	r3, [r7, #32]
 8001e64:	005b      	lsls	r3, r3, #1
 8001e66:	3301      	adds	r3, #1
 8001e68:	3328      	adds	r3, #40	; 0x28
 8001e6a:	443b      	add	r3, r7
 8001e6c:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001e70:	b29b      	uxth	r3, r3
 8001e72:	4413      	add	r3, r2
 8001e74:	b29b      	uxth	r3, r3
 8001e76:	b21a      	sxth	r2, r3
 8001e78:	6a3b      	ldr	r3, [r7, #32]
 8001e7a:	005b      	lsls	r3, r3, #1
 8001e7c:	3328      	adds	r3, #40	; 0x28
 8001e7e:	443b      	add	r3, r7
 8001e80:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 8001e84:	6a3b      	ldr	r3, [r7, #32]
 8001e86:	3301      	adds	r3, #1
 8001e88:	623b      	str	r3, [r7, #32]
 8001e8a:	6a3b      	ldr	r3, [r7, #32]
 8001e8c:	2b02      	cmp	r3, #2
 8001e8e:	dddf      	ble.n	8001e50 <L3GD20_ReadXYZAngRate+0x9c>
    }
  }
  
  /* Switch the sensitivity value set in the CRTL4 */
  switch(tmpreg & L3GD20_FULLSCALE_SELECTION)
 8001e90:	7bfb      	ldrb	r3, [r7, #15]
 8001e92:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001e96:	2b20      	cmp	r3, #32
 8001e98:	d00c      	beq.n	8001eb4 <L3GD20_ReadXYZAngRate+0x100>
 8001e9a:	2b20      	cmp	r3, #32
 8001e9c:	dc0d      	bgt.n	8001eba <L3GD20_ReadXYZAngRate+0x106>
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d002      	beq.n	8001ea8 <L3GD20_ReadXYZAngRate+0xf4>
 8001ea2:	2b10      	cmp	r3, #16
 8001ea4:	d003      	beq.n	8001eae <L3GD20_ReadXYZAngRate+0xfa>
 8001ea6:	e008      	b.n	8001eba <L3GD20_ReadXYZAngRate+0x106>
  {
  case L3GD20_FULLSCALE_250:
    sensitivity=L3GD20_SENSITIVITY_250DPS;
 8001ea8:	4b15      	ldr	r3, [pc, #84]	; (8001f00 <L3GD20_ReadXYZAngRate+0x14c>)
 8001eaa:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 8001eac:	e005      	b.n	8001eba <L3GD20_ReadXYZAngRate+0x106>
    
  case L3GD20_FULLSCALE_500:
    sensitivity=L3GD20_SENSITIVITY_500DPS;
 8001eae:	4b15      	ldr	r3, [pc, #84]	; (8001f04 <L3GD20_ReadXYZAngRate+0x150>)
 8001eb0:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 8001eb2:	e002      	b.n	8001eba <L3GD20_ReadXYZAngRate+0x106>
    
  case L3GD20_FULLSCALE_2000:
    sensitivity=L3GD20_SENSITIVITY_2000DPS;
 8001eb4:	4b14      	ldr	r3, [pc, #80]	; (8001f08 <L3GD20_ReadXYZAngRate+0x154>)
 8001eb6:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 8001eb8:	bf00      	nop
  }
  /* Divide by sensitivity */
  for(i=0; i<3; i++)
 8001eba:	2300      	movs	r3, #0
 8001ebc:	623b      	str	r3, [r7, #32]
 8001ebe:	e016      	b.n	8001eee <L3GD20_ReadXYZAngRate+0x13a>
  {
    pfData[i]=(float)(RawData[i] * sensitivity);
 8001ec0:	6a3b      	ldr	r3, [r7, #32]
 8001ec2:	005b      	lsls	r3, r3, #1
 8001ec4:	3328      	adds	r3, #40	; 0x28
 8001ec6:	443b      	add	r3, r7
 8001ec8:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 8001ecc:	ee07 3a90 	vmov	s15, r3
 8001ed0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ed4:	6a3b      	ldr	r3, [r7, #32]
 8001ed6:	009b      	lsls	r3, r3, #2
 8001ed8:	687a      	ldr	r2, [r7, #4]
 8001eda:	4413      	add	r3, r2
 8001edc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001ee0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ee4:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 8001ee8:	6a3b      	ldr	r3, [r7, #32]
 8001eea:	3301      	adds	r3, #1
 8001eec:	623b      	str	r3, [r7, #32]
 8001eee:	6a3b      	ldr	r3, [r7, #32]
 8001ef0:	2b02      	cmp	r3, #2
 8001ef2:	dde5      	ble.n	8001ec0 <L3GD20_ReadXYZAngRate+0x10c>
  }
}
 8001ef4:	bf00      	nop
 8001ef6:	bf00      	nop
 8001ef8:	3728      	adds	r7, #40	; 0x28
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	410c0000 	.word	0x410c0000
 8001f04:	418c0000 	.word	0x418c0000
 8001f08:	428c0000 	.word	0x428c0000

08001f0c <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8001f10:	4819      	ldr	r0, [pc, #100]	; (8001f78 <SPIx_Init+0x6c>)
 8001f12:	f007 fa93 	bl	800943c <HAL_SPI_GetState>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d12b      	bne.n	8001f74 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8001f1c:	4b16      	ldr	r3, [pc, #88]	; (8001f78 <SPIx_Init+0x6c>)
 8001f1e:	4a17      	ldr	r2, [pc, #92]	; (8001f7c <SPIx_Init+0x70>)
 8001f20:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001f22:	4b15      	ldr	r3, [pc, #84]	; (8001f78 <SPIx_Init+0x6c>)
 8001f24:	2218      	movs	r2, #24
 8001f26:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8001f28:	4b13      	ldr	r3, [pc, #76]	; (8001f78 <SPIx_Init+0x6c>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8001f2e:	4b12      	ldr	r3, [pc, #72]	; (8001f78 <SPIx_Init+0x6c>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8001f34:	4b10      	ldr	r3, [pc, #64]	; (8001f78 <SPIx_Init+0x6c>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8001f3a:	4b0f      	ldr	r3, [pc, #60]	; (8001f78 <SPIx_Init+0x6c>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8001f40:	4b0d      	ldr	r3, [pc, #52]	; (8001f78 <SPIx_Init+0x6c>)
 8001f42:	2207      	movs	r2, #7
 8001f44:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8001f46:	4b0c      	ldr	r3, [pc, #48]	; (8001f78 <SPIx_Init+0x6c>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8001f4c:	4b0a      	ldr	r3, [pc, #40]	; (8001f78 <SPIx_Init+0x6c>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8001f52:	4b09      	ldr	r3, [pc, #36]	; (8001f78 <SPIx_Init+0x6c>)
 8001f54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f58:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8001f5a:	4b07      	ldr	r3, [pc, #28]	; (8001f78 <SPIx_Init+0x6c>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8001f60:	4b05      	ldr	r3, [pc, #20]	; (8001f78 <SPIx_Init+0x6c>)
 8001f62:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001f66:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 8001f68:	4803      	ldr	r0, [pc, #12]	; (8001f78 <SPIx_Init+0x6c>)
 8001f6a:	f000 f873 	bl	8002054 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8001f6e:	4802      	ldr	r0, [pc, #8]	; (8001f78 <SPIx_Init+0x6c>)
 8001f70:	f006 fdb0 	bl	8008ad4 <HAL_SPI_Init>
  } 
}
 8001f74:	bf00      	nop
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	2000066c 	.word	0x2000066c
 8001f7c:	40015000 	.word	0x40015000

08001f80 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b084      	sub	sp, #16
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	4603      	mov	r3, r0
 8001f88:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 8001f8e:	79fb      	ldrb	r3, [r7, #7]
 8001f90:	b29a      	uxth	r2, r3
 8001f92:	4b09      	ldr	r3, [pc, #36]	; (8001fb8 <SPIx_Read+0x38>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f107 0108 	add.w	r1, r7, #8
 8001f9a:	4808      	ldr	r0, [pc, #32]	; (8001fbc <SPIx_Read+0x3c>)
 8001f9c:	f006 ff9b 	bl	8008ed6 <HAL_SPI_Receive>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8001fa4:	7bfb      	ldrb	r3, [r7, #15]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d001      	beq.n	8001fae <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8001faa:	f000 f847 	bl	800203c <SPIx_Error>
  }
  
  return readvalue;
 8001fae:	68bb      	ldr	r3, [r7, #8]
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	3710      	adds	r7, #16
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	2000007c 	.word	0x2000007c
 8001fbc:	2000066c 	.word	0x2000066c

08001fc0 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b084      	sub	sp, #16
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 8001fce:	4b09      	ldr	r3, [pc, #36]	; (8001ff4 <SPIx_Write+0x34>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	1db9      	adds	r1, r7, #6
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	4808      	ldr	r0, [pc, #32]	; (8001ff8 <SPIx_Write+0x38>)
 8001fd8:	f006 fe41 	bl	8008c5e <HAL_SPI_Transmit>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8001fe0:	7bfb      	ldrb	r3, [r7, #15]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d001      	beq.n	8001fea <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8001fe6:	f000 f829 	bl	800203c <SPIx_Error>
  }
}
 8001fea:	bf00      	nop
 8001fec:	3710      	adds	r7, #16
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	2000007c 	.word	0x2000007c
 8001ff8:	2000066c 	.word	0x2000066c

08001ffc <SPIx_WriteRead>:
  *         from the SPI bus.
  * @param  Byte: Byte send.
  * @retval The received byte value
  */
static uint8_t SPIx_WriteRead(uint8_t Byte)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b086      	sub	sp, #24
 8002000:	af02      	add	r7, sp, #8
 8002002:	4603      	mov	r3, r0
 8002004:	71fb      	strb	r3, [r7, #7]
  uint8_t receivedbyte = 0;
 8002006:	2300      	movs	r3, #0
 8002008:	73fb      	strb	r3, [r7, #15]
  
  /* Send a Byte through the SPI peripheral */
  /* Read byte from the SPI bus */
  if(HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t*) &Byte, (uint8_t*) &receivedbyte, 1, SpixTimeout) != HAL_OK)
 800200a:	4b0a      	ldr	r3, [pc, #40]	; (8002034 <SPIx_WriteRead+0x38>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f107 020f 	add.w	r2, r7, #15
 8002012:	1df9      	adds	r1, r7, #7
 8002014:	9300      	str	r3, [sp, #0]
 8002016:	2301      	movs	r3, #1
 8002018:	4807      	ldr	r0, [pc, #28]	; (8002038 <SPIx_WriteRead+0x3c>)
 800201a:	f007 f86d 	bl	80090f8 <HAL_SPI_TransmitReceive>
 800201e:	4603      	mov	r3, r0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d001      	beq.n	8002028 <SPIx_WriteRead+0x2c>
  {
    SPIx_Error();
 8002024:	f000 f80a 	bl	800203c <SPIx_Error>
  }
  
  return receivedbyte;
 8002028:	7bfb      	ldrb	r3, [r7, #15]
}
 800202a:	4618      	mov	r0, r3
 800202c:	3710      	adds	r7, #16
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	2000007c 	.word	0x2000007c
 8002038:	2000066c 	.word	0x2000066c

0800203c <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8002040:	4803      	ldr	r0, [pc, #12]	; (8002050 <SPIx_Error+0x14>)
 8002042:	f006 fdd0 	bl	8008be6 <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 8002046:	f7ff ff61 	bl	8001f0c <SPIx_Init>
}
 800204a:	bf00      	nop
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	2000066c 	.word	0x2000066c

08002054 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b08a      	sub	sp, #40	; 0x28
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 800205c:	2300      	movs	r3, #0
 800205e:	613b      	str	r3, [r7, #16]
 8002060:	4b17      	ldr	r3, [pc, #92]	; (80020c0 <SPIx_MspInit+0x6c>)
 8002062:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002064:	4a16      	ldr	r2, [pc, #88]	; (80020c0 <SPIx_MspInit+0x6c>)
 8002066:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800206a:	6453      	str	r3, [r2, #68]	; 0x44
 800206c:	4b14      	ldr	r3, [pc, #80]	; (80020c0 <SPIx_MspInit+0x6c>)
 800206e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002070:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002074:	613b      	str	r3, [r7, #16]
 8002076:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8002078:	2300      	movs	r3, #0
 800207a:	60fb      	str	r3, [r7, #12]
 800207c:	4b10      	ldr	r3, [pc, #64]	; (80020c0 <SPIx_MspInit+0x6c>)
 800207e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002080:	4a0f      	ldr	r2, [pc, #60]	; (80020c0 <SPIx_MspInit+0x6c>)
 8002082:	f043 0320 	orr.w	r3, r3, #32
 8002086:	6313      	str	r3, [r2, #48]	; 0x30
 8002088:	4b0d      	ldr	r3, [pc, #52]	; (80020c0 <SPIx_MspInit+0x6c>)
 800208a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208c:	f003 0320 	and.w	r3, r3, #32
 8002090:	60fb      	str	r3, [r7, #12]
 8002092:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8002094:	f44f 7360 	mov.w	r3, #896	; 0x380
 8002098:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 800209a:	2302      	movs	r3, #2
 800209c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 800209e:	2302      	movs	r3, #2
 80020a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 80020a2:	2301      	movs	r3, #1
 80020a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 80020a6:	2305      	movs	r3, #5
 80020a8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 80020aa:	f107 0314 	add.w	r3, r7, #20
 80020ae:	4619      	mov	r1, r3
 80020b0:	4804      	ldr	r0, [pc, #16]	; (80020c4 <SPIx_MspInit+0x70>)
 80020b2:	f001 fd51 	bl	8003b58 <HAL_GPIO_Init>
}
 80020b6:	bf00      	nop
 80020b8:	3728      	adds	r7, #40	; 0x28
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	40023800 	.word	0x40023800
 80020c4:	40021400 	.word	0x40021400

080020c8 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b088      	sub	sp, #32
 80020cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 80020ce:	4b36      	ldr	r3, [pc, #216]	; (80021a8 <LCD_IO_Init+0xe0>)
 80020d0:	781b      	ldrb	r3, [r3, #0]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d164      	bne.n	80021a0 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 80020d6:	4b34      	ldr	r3, [pc, #208]	; (80021a8 <LCD_IO_Init+0xe0>)
 80020d8:	2201      	movs	r2, #1
 80020da:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 80020dc:	2300      	movs	r3, #0
 80020de:	60bb      	str	r3, [r7, #8]
 80020e0:	4b32      	ldr	r3, [pc, #200]	; (80021ac <LCD_IO_Init+0xe4>)
 80020e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e4:	4a31      	ldr	r2, [pc, #196]	; (80021ac <LCD_IO_Init+0xe4>)
 80020e6:	f043 0308 	orr.w	r3, r3, #8
 80020ea:	6313      	str	r3, [r2, #48]	; 0x30
 80020ec:	4b2f      	ldr	r3, [pc, #188]	; (80021ac <LCD_IO_Init+0xe4>)
 80020ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f0:	f003 0308 	and.w	r3, r3, #8
 80020f4:	60bb      	str	r3, [r7, #8]
 80020f6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 80020f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80020fc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80020fe:	2301      	movs	r3, #1
 8002100:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002102:	2300      	movs	r3, #0
 8002104:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002106:	2302      	movs	r3, #2
 8002108:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 800210a:	f107 030c 	add.w	r3, r7, #12
 800210e:	4619      	mov	r1, r3
 8002110:	4827      	ldr	r0, [pc, #156]	; (80021b0 <LCD_IO_Init+0xe8>)
 8002112:	f001 fd21 	bl	8003b58 <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 8002116:	2300      	movs	r3, #0
 8002118:	607b      	str	r3, [r7, #4]
 800211a:	4b24      	ldr	r3, [pc, #144]	; (80021ac <LCD_IO_Init+0xe4>)
 800211c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211e:	4a23      	ldr	r2, [pc, #140]	; (80021ac <LCD_IO_Init+0xe4>)
 8002120:	f043 0308 	orr.w	r3, r3, #8
 8002124:	6313      	str	r3, [r2, #48]	; 0x30
 8002126:	4b21      	ldr	r3, [pc, #132]	; (80021ac <LCD_IO_Init+0xe4>)
 8002128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212a:	f003 0308 	and.w	r3, r3, #8
 800212e:	607b      	str	r3, [r7, #4]
 8002130:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8002132:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002136:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002138:	2301      	movs	r3, #1
 800213a:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800213c:	2300      	movs	r3, #0
 800213e:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002140:	2302      	movs	r3, #2
 8002142:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8002144:	f107 030c 	add.w	r3, r7, #12
 8002148:	4619      	mov	r1, r3
 800214a:	4819      	ldr	r0, [pc, #100]	; (80021b0 <LCD_IO_Init+0xe8>)
 800214c:	f001 fd04 	bl	8003b58 <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8002150:	2300      	movs	r3, #0
 8002152:	603b      	str	r3, [r7, #0]
 8002154:	4b15      	ldr	r3, [pc, #84]	; (80021ac <LCD_IO_Init+0xe4>)
 8002156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002158:	4a14      	ldr	r2, [pc, #80]	; (80021ac <LCD_IO_Init+0xe4>)
 800215a:	f043 0304 	orr.w	r3, r3, #4
 800215e:	6313      	str	r3, [r2, #48]	; 0x30
 8002160:	4b12      	ldr	r3, [pc, #72]	; (80021ac <LCD_IO_Init+0xe4>)
 8002162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002164:	f003 0304 	and.w	r3, r3, #4
 8002168:	603b      	str	r3, [r7, #0]
 800216a:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 800216c:	2304      	movs	r3, #4
 800216e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002170:	2301      	movs	r3, #1
 8002172:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002174:	2300      	movs	r3, #0
 8002176:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002178:	2302      	movs	r3, #2
 800217a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 800217c:	f107 030c 	add.w	r3, r7, #12
 8002180:	4619      	mov	r1, r3
 8002182:	480c      	ldr	r0, [pc, #48]	; (80021b4 <LCD_IO_Init+0xec>)
 8002184:	f001 fce8 	bl	8003b58 <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 8002188:	2200      	movs	r2, #0
 800218a:	2104      	movs	r1, #4
 800218c:	4809      	ldr	r0, [pc, #36]	; (80021b4 <LCD_IO_Init+0xec>)
 800218e:	f001 fe8f 	bl	8003eb0 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8002192:	2201      	movs	r2, #1
 8002194:	2104      	movs	r1, #4
 8002196:	4807      	ldr	r0, [pc, #28]	; (80021b4 <LCD_IO_Init+0xec>)
 8002198:	f001 fe8a 	bl	8003eb0 <HAL_GPIO_WritePin>
    
    SPIx_Init();
 800219c:	f7ff feb6 	bl	8001f0c <SPIx_Init>
  }
}
 80021a0:	bf00      	nop
 80021a2:	3720      	adds	r7, #32
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	200006c4 	.word	0x200006c4
 80021ac:	40023800 	.word	0x40023800
 80021b0:	40020c00 	.word	0x40020c00
 80021b4:	40020800 	.word	0x40020800

080021b8 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b082      	sub	sp, #8
 80021bc:	af00      	add	r7, sp, #0
 80021be:	4603      	mov	r3, r0
 80021c0:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 80021c2:	2201      	movs	r2, #1
 80021c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80021c8:	480a      	ldr	r0, [pc, #40]	; (80021f4 <LCD_IO_WriteData+0x3c>)
 80021ca:	f001 fe71 	bl	8003eb0 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 80021ce:	2200      	movs	r2, #0
 80021d0:	2104      	movs	r1, #4
 80021d2:	4809      	ldr	r0, [pc, #36]	; (80021f8 <LCD_IO_WriteData+0x40>)
 80021d4:	f001 fe6c 	bl	8003eb0 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 80021d8:	88fb      	ldrh	r3, [r7, #6]
 80021da:	4618      	mov	r0, r3
 80021dc:	f7ff fef0 	bl	8001fc0 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80021e0:	2201      	movs	r2, #1
 80021e2:	2104      	movs	r1, #4
 80021e4:	4804      	ldr	r0, [pc, #16]	; (80021f8 <LCD_IO_WriteData+0x40>)
 80021e6:	f001 fe63 	bl	8003eb0 <HAL_GPIO_WritePin>
}
 80021ea:	bf00      	nop
 80021ec:	3708      	adds	r7, #8
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	40020c00 	.word	0x40020c00
 80021f8:	40020800 	.word	0x40020800

080021fc <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b082      	sub	sp, #8
 8002200:	af00      	add	r7, sp, #0
 8002202:	4603      	mov	r3, r0
 8002204:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8002206:	2200      	movs	r2, #0
 8002208:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800220c:	480a      	ldr	r0, [pc, #40]	; (8002238 <LCD_IO_WriteReg+0x3c>)
 800220e:	f001 fe4f 	bl	8003eb0 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8002212:	2200      	movs	r2, #0
 8002214:	2104      	movs	r1, #4
 8002216:	4809      	ldr	r0, [pc, #36]	; (800223c <LCD_IO_WriteReg+0x40>)
 8002218:	f001 fe4a 	bl	8003eb0 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 800221c:	79fb      	ldrb	r3, [r7, #7]
 800221e:	b29b      	uxth	r3, r3
 8002220:	4618      	mov	r0, r3
 8002222:	f7ff fecd 	bl	8001fc0 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002226:	2201      	movs	r2, #1
 8002228:	2104      	movs	r1, #4
 800222a:	4804      	ldr	r0, [pc, #16]	; (800223c <LCD_IO_WriteReg+0x40>)
 800222c:	f001 fe40 	bl	8003eb0 <HAL_GPIO_WritePin>
}
 8002230:	bf00      	nop
 8002232:	3708      	adds	r7, #8
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}
 8002238:	40020c00 	.word	0x40020c00
 800223c:	40020800 	.word	0x40020800

08002240 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b084      	sub	sp, #16
 8002244:	af00      	add	r7, sp, #0
 8002246:	4603      	mov	r3, r0
 8002248:	460a      	mov	r2, r1
 800224a:	80fb      	strh	r3, [r7, #6]
 800224c:	4613      	mov	r3, r2
 800224e:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 8002250:	2300      	movs	r3, #0
 8002252:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 8002254:	2200      	movs	r2, #0
 8002256:	2104      	movs	r1, #4
 8002258:	4810      	ldr	r0, [pc, #64]	; (800229c <LCD_IO_ReadData+0x5c>)
 800225a:	f001 fe29 	bl	8003eb0 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 800225e:	2200      	movs	r2, #0
 8002260:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002264:	480e      	ldr	r0, [pc, #56]	; (80022a0 <LCD_IO_ReadData+0x60>)
 8002266:	f001 fe23 	bl	8003eb0 <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 800226a:	88fb      	ldrh	r3, [r7, #6]
 800226c:	4618      	mov	r0, r3
 800226e:	f7ff fea7 	bl	8001fc0 <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 8002272:	797b      	ldrb	r3, [r7, #5]
 8002274:	4618      	mov	r0, r3
 8002276:	f7ff fe83 	bl	8001f80 <SPIx_Read>
 800227a:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 800227c:	2201      	movs	r2, #1
 800227e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002282:	4807      	ldr	r0, [pc, #28]	; (80022a0 <LCD_IO_ReadData+0x60>)
 8002284:	f001 fe14 	bl	8003eb0 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002288:	2201      	movs	r2, #1
 800228a:	2104      	movs	r1, #4
 800228c:	4803      	ldr	r0, [pc, #12]	; (800229c <LCD_IO_ReadData+0x5c>)
 800228e:	f001 fe0f 	bl	8003eb0 <HAL_GPIO_WritePin>
  
  return readvalue;
 8002292:	68fb      	ldr	r3, [r7, #12]
}
 8002294:	4618      	mov	r0, r3
 8002296:	3710      	adds	r7, #16
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}
 800229c:	40020800 	.word	0x40020800
 80022a0:	40020c00 	.word	0x40020c00

080022a4 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b082      	sub	sp, #8
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80022ac:	6878      	ldr	r0, [r7, #4]
 80022ae:	f001 f98f 	bl	80035d0 <HAL_Delay>
}
 80022b2:	bf00      	nop
 80022b4:	3708      	adds	r7, #8
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
	...

080022bc <GYRO_IO_Init>:

/**
  * @brief  Configures the Gyroscope SPI interface.
  */
void GYRO_IO_Init(void)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b088      	sub	sp, #32
 80022c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Configure the Gyroscope Control pins ------------------------------------*/
  /* Enable CS GPIO clock and Configure GPIO PIN for Gyroscope Chip select */  
  GYRO_CS_GPIO_CLK_ENABLE();  
 80022c2:	2300      	movs	r3, #0
 80022c4:	60bb      	str	r3, [r7, #8]
 80022c6:	4b20      	ldr	r3, [pc, #128]	; (8002348 <GYRO_IO_Init+0x8c>)
 80022c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ca:	4a1f      	ldr	r2, [pc, #124]	; (8002348 <GYRO_IO_Init+0x8c>)
 80022cc:	f043 0304 	orr.w	r3, r3, #4
 80022d0:	6313      	str	r3, [r2, #48]	; 0x30
 80022d2:	4b1d      	ldr	r3, [pc, #116]	; (8002348 <GYRO_IO_Init+0x8c>)
 80022d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d6:	f003 0304 	and.w	r3, r3, #4
 80022da:	60bb      	str	r3, [r7, #8]
 80022dc:	68bb      	ldr	r3, [r7, #8]
  GPIO_InitStructure.Pin = GYRO_CS_PIN;
 80022de:	2302      	movs	r3, #2
 80022e0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 80022e2:	2301      	movs	r3, #1
 80022e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 80022e6:	2300      	movs	r3, #0
 80022e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_MEDIUM;
 80022ea:	2301      	movs	r3, #1
 80022ec:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GYRO_CS_GPIO_PORT, &GPIO_InitStructure);
 80022ee:	f107 030c 	add.w	r3, r7, #12
 80022f2:	4619      	mov	r1, r3
 80022f4:	4815      	ldr	r0, [pc, #84]	; (800234c <GYRO_IO_Init+0x90>)
 80022f6:	f001 fc2f 	bl	8003b58 <HAL_GPIO_Init>
  
  /* Deselect: Chip Select high */
  GYRO_CS_HIGH();
 80022fa:	2201      	movs	r2, #1
 80022fc:	2102      	movs	r1, #2
 80022fe:	4813      	ldr	r0, [pc, #76]	; (800234c <GYRO_IO_Init+0x90>)
 8002300:	f001 fdd6 	bl	8003eb0 <HAL_GPIO_WritePin>
  
  /* Enable INT1, INT2 GPIO clock and Configure GPIO PINs to detect Interrupts */
  GYRO_INT_GPIO_CLK_ENABLE();
 8002304:	2300      	movs	r3, #0
 8002306:	607b      	str	r3, [r7, #4]
 8002308:	4b0f      	ldr	r3, [pc, #60]	; (8002348 <GYRO_IO_Init+0x8c>)
 800230a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230c:	4a0e      	ldr	r2, [pc, #56]	; (8002348 <GYRO_IO_Init+0x8c>)
 800230e:	f043 0301 	orr.w	r3, r3, #1
 8002312:	6313      	str	r3, [r2, #48]	; 0x30
 8002314:	4b0c      	ldr	r3, [pc, #48]	; (8002348 <GYRO_IO_Init+0x8c>)
 8002316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002318:	f003 0301 	and.w	r3, r3, #1
 800231c:	607b      	str	r3, [r7, #4]
 800231e:	687b      	ldr	r3, [r7, #4]
  GPIO_InitStructure.Pin = GYRO_INT1_PIN | GYRO_INT2_PIN;
 8002320:	2306      	movs	r3, #6
 8002322:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 8002324:	2300      	movs	r3, #0
 8002326:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8002328:	2302      	movs	r3, #2
 800232a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull= GPIO_NOPULL;
 800232c:	2300      	movs	r3, #0
 800232e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GYRO_INT_GPIO_PORT, &GPIO_InitStructure);
 8002330:	f107 030c 	add.w	r3, r7, #12
 8002334:	4619      	mov	r1, r3
 8002336:	4806      	ldr	r0, [pc, #24]	; (8002350 <GYRO_IO_Init+0x94>)
 8002338:	f001 fc0e 	bl	8003b58 <HAL_GPIO_Init>

  SPIx_Init();
 800233c:	f7ff fde6 	bl	8001f0c <SPIx_Init>
}
 8002340:	bf00      	nop
 8002342:	3720      	adds	r7, #32
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}
 8002348:	40023800 	.word	0x40023800
 800234c:	40020800 	.word	0x40020800
 8002350:	40020000 	.word	0x40020000

08002354 <GYRO_IO_Write>:
  * @param  pBuffer: Pointer to the buffer containing the data to be written to the Gyroscope.
  * @param  WriteAddr: Gyroscope's internal address to write to.
  * @param  NumByteToWrite: Number of bytes to write.
  */
void GYRO_IO_Write(uint8_t* pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b082      	sub	sp, #8
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
 800235c:	460b      	mov	r3, r1
 800235e:	70fb      	strb	r3, [r7, #3]
 8002360:	4613      	mov	r3, r2
 8002362:	803b      	strh	r3, [r7, #0]
  /* Configure the MS bit: 
       - When 0, the address will remain unchanged in multiple read/write commands.
       - When 1, the address will be auto incremented in multiple read/write commands.
  */
  if(NumByteToWrite > 0x01)
 8002364:	883b      	ldrh	r3, [r7, #0]
 8002366:	2b01      	cmp	r3, #1
 8002368:	d903      	bls.n	8002372 <GYRO_IO_Write+0x1e>
  {
    WriteAddr |= (uint8_t)MULTIPLEBYTE_CMD;
 800236a:	78fb      	ldrb	r3, [r7, #3]
 800236c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002370:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 8002372:	2200      	movs	r2, #0
 8002374:	2102      	movs	r1, #2
 8002376:	480f      	ldr	r0, [pc, #60]	; (80023b4 <GYRO_IO_Write+0x60>)
 8002378:	f001 fd9a 	bl	8003eb0 <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(WriteAddr);
 800237c:	78fb      	ldrb	r3, [r7, #3]
 800237e:	4618      	mov	r0, r3
 8002380:	f7ff fe3c 	bl	8001ffc <SPIx_WriteRead>
  
  /* Send the data that will be written into the device (MSB First) */
  while(NumByteToWrite >= 0x01)
 8002384:	e00a      	b.n	800239c <GYRO_IO_Write+0x48>
  {
    SPIx_WriteRead(*pBuffer);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	781b      	ldrb	r3, [r3, #0]
 800238a:	4618      	mov	r0, r3
 800238c:	f7ff fe36 	bl	8001ffc <SPIx_WriteRead>
    NumByteToWrite--;
 8002390:	883b      	ldrh	r3, [r7, #0]
 8002392:	3b01      	subs	r3, #1
 8002394:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	3301      	adds	r3, #1
 800239a:	607b      	str	r3, [r7, #4]
  while(NumByteToWrite >= 0x01)
 800239c:	883b      	ldrh	r3, [r7, #0]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d1f1      	bne.n	8002386 <GYRO_IO_Write+0x32>
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 80023a2:	2201      	movs	r2, #1
 80023a4:	2102      	movs	r1, #2
 80023a6:	4803      	ldr	r0, [pc, #12]	; (80023b4 <GYRO_IO_Write+0x60>)
 80023a8:	f001 fd82 	bl	8003eb0 <HAL_GPIO_WritePin>
}
 80023ac:	bf00      	nop
 80023ae:	3708      	adds	r7, #8
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}
 80023b4:	40020800 	.word	0x40020800

080023b8 <GYRO_IO_Read>:
  * @param  pBuffer: Pointer to the buffer that receives the data read from the Gyroscope.
  * @param  ReadAddr: Gyroscope's internal address to read from.
  * @param  NumByteToRead: Number of bytes to read from the Gyroscope.
  */
void GYRO_IO_Read(uint8_t* pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{  
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b082      	sub	sp, #8
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
 80023c0:	460b      	mov	r3, r1
 80023c2:	70fb      	strb	r3, [r7, #3]
 80023c4:	4613      	mov	r3, r2
 80023c6:	803b      	strh	r3, [r7, #0]
  if(NumByteToRead > 0x01)
 80023c8:	883b      	ldrh	r3, [r7, #0]
 80023ca:	2b01      	cmp	r3, #1
 80023cc:	d904      	bls.n	80023d8 <GYRO_IO_Read+0x20>
  {
    ReadAddr |= (uint8_t)(READWRITE_CMD | MULTIPLEBYTE_CMD);
 80023ce:	78fb      	ldrb	r3, [r7, #3]
 80023d0:	f063 033f 	orn	r3, r3, #63	; 0x3f
 80023d4:	70fb      	strb	r3, [r7, #3]
 80023d6:	e003      	b.n	80023e0 <GYRO_IO_Read+0x28>
  }
  else
  {
    ReadAddr |= (uint8_t)READWRITE_CMD;
 80023d8:	78fb      	ldrb	r3, [r7, #3]
 80023da:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80023de:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 80023e0:	2200      	movs	r2, #0
 80023e2:	2102      	movs	r1, #2
 80023e4:	4810      	ldr	r0, [pc, #64]	; (8002428 <GYRO_IO_Read+0x70>)
 80023e6:	f001 fd63 	bl	8003eb0 <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(ReadAddr);
 80023ea:	78fb      	ldrb	r3, [r7, #3]
 80023ec:	4618      	mov	r0, r3
 80023ee:	f7ff fe05 	bl	8001ffc <SPIx_WriteRead>
  
  /* Receive the data that will be read from the device (MSB First) */
  while(NumByteToRead > 0x00)
 80023f2:	e00c      	b.n	800240e <GYRO_IO_Read+0x56>
  {
    /* Send dummy byte (0x00) to generate the SPI clock to Gyroscope (Slave device) */
    *pBuffer = SPIx_WriteRead(DUMMY_BYTE);
 80023f4:	2000      	movs	r0, #0
 80023f6:	f7ff fe01 	bl	8001ffc <SPIx_WriteRead>
 80023fa:	4603      	mov	r3, r0
 80023fc:	461a      	mov	r2, r3
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	701a      	strb	r2, [r3, #0]
    NumByteToRead--;
 8002402:	883b      	ldrh	r3, [r7, #0]
 8002404:	3b01      	subs	r3, #1
 8002406:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	3301      	adds	r3, #1
 800240c:	607b      	str	r3, [r7, #4]
  while(NumByteToRead > 0x00)
 800240e:	883b      	ldrh	r3, [r7, #0]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d1ef      	bne.n	80023f4 <GYRO_IO_Read+0x3c>
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 8002414:	2201      	movs	r2, #1
 8002416:	2102      	movs	r1, #2
 8002418:	4803      	ldr	r0, [pc, #12]	; (8002428 <GYRO_IO_Read+0x70>)
 800241a:	f001 fd49 	bl	8003eb0 <HAL_GPIO_WritePin>
}  
 800241e:	bf00      	nop
 8002420:	3708      	adds	r7, #8
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	40020800 	.word	0x40020800

0800242c <BSP_GYRO_Init>:
/**
  * @brief  Set gyroscope Initialization.
  * @retval GYRO_OK if no problem during initialization
  */
uint8_t BSP_GYRO_Init(void)
{  
 800242c:	b580      	push	{r7, lr}
 800242e:	b084      	sub	sp, #16
 8002430:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8002436:	2300      	movs	r3, #0
 8002438:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef         Gyro_InitStructure;
  GYRO_FilterConfigTypeDef Gyro_FilterStructure = {0,0};
 800243a:	2300      	movs	r3, #0
 800243c:	703b      	strb	r3, [r7, #0]
 800243e:	2300      	movs	r3, #0
 8002440:	707b      	strb	r3, [r7, #1]

  if((L3gd20Drv.ReadID() == I_AM_L3GD20) || (L3gd20Drv.ReadID() == I_AM_L3GD20_TR))
 8002442:	4b2b      	ldr	r3, [pc, #172]	; (80024f0 <BSP_GYRO_Init+0xc4>)
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	4798      	blx	r3
 8002448:	4603      	mov	r3, r0
 800244a:	2bd4      	cmp	r3, #212	; 0xd4
 800244c:	d005      	beq.n	800245a <BSP_GYRO_Init+0x2e>
 800244e:	4b28      	ldr	r3, [pc, #160]	; (80024f0 <BSP_GYRO_Init+0xc4>)
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	4798      	blx	r3
 8002454:	4603      	mov	r3, r0
 8002456:	2bd5      	cmp	r3, #213	; 0xd5
 8002458:	d145      	bne.n	80024e6 <BSP_GYRO_Init+0xba>
  {	
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &L3gd20Drv;
 800245a:	4b26      	ldr	r3, [pc, #152]	; (80024f4 <BSP_GYRO_Init+0xc8>)
 800245c:	4a24      	ldr	r2, [pc, #144]	; (80024f0 <BSP_GYRO_Init+0xc4>)
 800245e:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ----------------------------------------------------*/
    /* Fill the gyroscope structure */
    Gyro_InitStructure.Power_Mode       = L3GD20_MODE_ACTIVE;
 8002460:	2308      	movs	r3, #8
 8002462:	713b      	strb	r3, [r7, #4]
    Gyro_InitStructure.Output_DataRate  = L3GD20_OUTPUT_DATARATE_1;
 8002464:	2300      	movs	r3, #0
 8002466:	717b      	strb	r3, [r7, #5]
    Gyro_InitStructure.Axes_Enable      = L3GD20_AXES_ENABLE;
 8002468:	2307      	movs	r3, #7
 800246a:	71bb      	strb	r3, [r7, #6]
    Gyro_InitStructure.Band_Width       = L3GD20_BANDWIDTH_4;
 800246c:	2330      	movs	r3, #48	; 0x30
 800246e:	71fb      	strb	r3, [r7, #7]
    Gyro_InitStructure.BlockData_Update = L3GD20_BlockDataUpdate_Continous;
 8002470:	2300      	movs	r3, #0
 8002472:	723b      	strb	r3, [r7, #8]
    Gyro_InitStructure.Endianness       = L3GD20_BLE_LSB;
 8002474:	2300      	movs	r3, #0
 8002476:	727b      	strb	r3, [r7, #9]
    Gyro_InitStructure.Full_Scale       = L3GD20_FULLSCALE_500;
 8002478:	2310      	movs	r3, #16
 800247a:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 800247c:	793a      	ldrb	r2, [r7, #4]
 800247e:	797b      	ldrb	r3, [r7, #5]
 8002480:	4313      	orrs	r3, r2
 8002482:	b2da      	uxtb	r2, r3
                       Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 8002484:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8002486:	4313      	orrs	r3, r2
 8002488:	b2da      	uxtb	r2, r3
                       Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 800248a:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 800248c:	4313      	orrs	r3, r2
 800248e:	b2db      	uxtb	r3, r3
 8002490:	81bb      	strh	r3, [r7, #12]

    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 8002492:	7a3a      	ldrb	r2, [r7, #8]
 8002494:	7a7b      	ldrb	r3, [r7, #9]
 8002496:	4313      	orrs	r3, r2
 8002498:	b2da      	uxtb	r2, r3
                         Gyro_InitStructure.Full_Scale) << 8);
 800249a:	7abb      	ldrb	r3, [r7, #10]
    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 800249c:	4313      	orrs	r3, r2
 800249e:	b2db      	uxtb	r3, r3
 80024a0:	b29b      	uxth	r3, r3
 80024a2:	021b      	lsls	r3, r3, #8
 80024a4:	b29a      	uxth	r2, r3
 80024a6:	89bb      	ldrh	r3, [r7, #12]
 80024a8:	4313      	orrs	r3, r2
 80024aa:	81bb      	strh	r3, [r7, #12]
    
    /* Initialize the gyroscope */
    GyroscopeDrv->Init(ctrl);
 80024ac:	4b11      	ldr	r3, [pc, #68]	; (80024f4 <BSP_GYRO_Init+0xc8>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	89ba      	ldrh	r2, [r7, #12]
 80024b4:	4610      	mov	r0, r2
 80024b6:	4798      	blx	r3

    Gyro_FilterStructure.HighPassFilter_Mode_Selection   = L3GD20_HPM_NORMAL_MODE_RES;
 80024b8:	2300      	movs	r3, #0
 80024ba:	703b      	strb	r3, [r7, #0]
    Gyro_FilterStructure.HighPassFilter_CutOff_Frequency = L3GD20_HPFCF_0;
 80024bc:	2300      	movs	r3, #0
 80024be:	707b      	strb	r3, [r7, #1]

    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
 80024c0:	783a      	ldrb	r2, [r7, #0]
                       Gyro_FilterStructure.HighPassFilter_CutOff_Frequency));
 80024c2:	787b      	ldrb	r3, [r7, #1]
    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
 80024c4:	4313      	orrs	r3, r2
 80024c6:	b2db      	uxtb	r3, r3
 80024c8:	81bb      	strh	r3, [r7, #12]

    /* Configure the gyroscope main parameters */
    GyroscopeDrv->FilterConfig(ctrl) ;
 80024ca:	4b0a      	ldr	r3, [pc, #40]	; (80024f4 <BSP_GYRO_Init+0xc8>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024d0:	89ba      	ldrh	r2, [r7, #12]
 80024d2:	b2d2      	uxtb	r2, r2
 80024d4:	4610      	mov	r0, r2
 80024d6:	4798      	blx	r3

    GyroscopeDrv->FilterCmd(L3GD20_HIGHPASSFILTER_ENABLE);
 80024d8:	4b06      	ldr	r3, [pc, #24]	; (80024f4 <BSP_GYRO_Init+0xc8>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024de:	2010      	movs	r0, #16
 80024e0:	4798      	blx	r3

    ret = GYRO_OK;
 80024e2:	2300      	movs	r3, #0
 80024e4:	73fb      	strb	r3, [r7, #15]
    GyroscopeDrv->FilterCmd(I3G4250D_HIGHPASSFILTER_ENABLE);

    ret = GYRO_OK;
  }
#endif /* USE_STM32F429I_DISCOVERY_REVD */
  return ret;
 80024e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	3710      	adds	r7, #16
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	20000048 	.word	0x20000048
 80024f4:	200006c8 	.word	0x200006c8

080024f8 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 80024f8:	b580      	push	{r7, lr}
 80024fa:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 80024fc:	4b2d      	ldr	r3, [pc, #180]	; (80025b4 <BSP_LCD_Init+0xbc>)
 80024fe:	4a2e      	ldr	r2, [pc, #184]	; (80025b8 <BSP_LCD_Init+0xc0>)
 8002500:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 8002502:	4b2c      	ldr	r3, [pc, #176]	; (80025b4 <BSP_LCD_Init+0xbc>)
 8002504:	2209      	movs	r2, #9
 8002506:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 8002508:	4b2a      	ldr	r3, [pc, #168]	; (80025b4 <BSP_LCD_Init+0xbc>)
 800250a:	2201      	movs	r2, #1
 800250c:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 800250e:	4b29      	ldr	r3, [pc, #164]	; (80025b4 <BSP_LCD_Init+0xbc>)
 8002510:	221d      	movs	r2, #29
 8002512:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 8002514:	4b27      	ldr	r3, [pc, #156]	; (80025b4 <BSP_LCD_Init+0xbc>)
 8002516:	2203      	movs	r2, #3
 8002518:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 800251a:	4b26      	ldr	r3, [pc, #152]	; (80025b4 <BSP_LCD_Init+0xbc>)
 800251c:	f240 120d 	movw	r2, #269	; 0x10d
 8002520:	625a      	str	r2, [r3, #36]	; 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 8002522:	4b24      	ldr	r3, [pc, #144]	; (80025b4 <BSP_LCD_Init+0xbc>)
 8002524:	f240 1243 	movw	r2, #323	; 0x143
 8002528:	629a      	str	r2, [r3, #40]	; 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 800252a:	4b22      	ldr	r3, [pc, #136]	; (80025b4 <BSP_LCD_Init+0xbc>)
 800252c:	f240 1217 	movw	r2, #279	; 0x117
 8002530:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 8002532:	4b20      	ldr	r3, [pc, #128]	; (80025b4 <BSP_LCD_Init+0xbc>)
 8002534:	f240 1247 	movw	r2, #327	; 0x147
 8002538:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 800253a:	4b1e      	ldr	r3, [pc, #120]	; (80025b4 <BSP_LCD_Init+0xbc>)
 800253c:	2200      	movs	r2, #0
 800253e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 8002542:	4b1c      	ldr	r3, [pc, #112]	; (80025b4 <BSP_LCD_Init+0xbc>)
 8002544:	2200      	movs	r2, #0
 8002546:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 800254a:	4b1a      	ldr	r3, [pc, #104]	; (80025b4 <BSP_LCD_Init+0xbc>)
 800254c:	2200      	movs	r2, #0
 800254e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002552:	4b1a      	ldr	r3, [pc, #104]	; (80025bc <BSP_LCD_Init+0xc4>)
 8002554:	2208      	movs	r2, #8
 8002556:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8002558:	4b18      	ldr	r3, [pc, #96]	; (80025bc <BSP_LCD_Init+0xc4>)
 800255a:	22c0      	movs	r2, #192	; 0xc0
 800255c:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 800255e:	4b17      	ldr	r3, [pc, #92]	; (80025bc <BSP_LCD_Init+0xc4>)
 8002560:	2204      	movs	r2, #4
 8002562:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8002564:	4b15      	ldr	r3, [pc, #84]	; (80025bc <BSP_LCD_Init+0xc4>)
 8002566:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800256a:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 800256c:	4813      	ldr	r0, [pc, #76]	; (80025bc <BSP_LCD_Init+0xc4>)
 800256e:	f003 fbeb 	bl	8005d48 <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002572:	4b10      	ldr	r3, [pc, #64]	; (80025b4 <BSP_LCD_Init+0xbc>)
 8002574:	2200      	movs	r2, #0
 8002576:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8002578:	4b0e      	ldr	r3, [pc, #56]	; (80025b4 <BSP_LCD_Init+0xbc>)
 800257a:	2200      	movs	r2, #0
 800257c:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800257e:	4b0d      	ldr	r3, [pc, #52]	; (80025b4 <BSP_LCD_Init+0xbc>)
 8002580:	2200      	movs	r2, #0
 8002582:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002584:	4b0b      	ldr	r3, [pc, #44]	; (80025b4 <BSP_LCD_Init+0xbc>)
 8002586:	2200      	movs	r2, #0
 8002588:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 800258a:	f000 fc27 	bl	8002ddc <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 800258e:	4809      	ldr	r0, [pc, #36]	; (80025b4 <BSP_LCD_Init+0xbc>)
 8002590:	f005 ff2c 	bl	80083ec <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 8002594:	4b0a      	ldr	r3, [pc, #40]	; (80025c0 <BSP_LCD_Init+0xc8>)
 8002596:	4a0b      	ldr	r2, [pc, #44]	; (80025c4 <BSP_LCD_Init+0xcc>)
 8002598:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 800259a:	4b09      	ldr	r3, [pc, #36]	; (80025c0 <BSP_LCD_Init+0xc8>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 80025a2:	f000 fe09 	bl	80031b8 <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 80025a6:	4808      	ldr	r0, [pc, #32]	; (80025c8 <BSP_LCD_Init+0xd0>)
 80025a8:	f000 f8ce 	bl	8002748 <BSP_LCD_SetFont>

  return LCD_OK;
 80025ac:	2300      	movs	r3, #0
}  
 80025ae:	4618      	mov	r0, r3
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	200006cc 	.word	0x200006cc
 80025b8:	40016800 	.word	0x40016800
 80025bc:	200007b4 	.word	0x200007b4
 80025c0:	20000800 	.word	0x20000800
 80025c4:	20000010 	.word	0x20000010
 80025c8:	2000008c 	.word	0x2000008c

080025cc <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 80025d0:	4b03      	ldr	r3, [pc, #12]	; (80025e0 <BSP_LCD_GetXSize+0x14>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025d6:	4798      	blx	r3
 80025d8:	4603      	mov	r3, r0
}
 80025da:	4618      	mov	r0, r3
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	20000800 	.word	0x20000800

080025e4 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 80025e8:	4b03      	ldr	r3, [pc, #12]	; (80025f8 <BSP_LCD_GetYSize+0x14>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ee:	4798      	blx	r3
 80025f0:	4603      	mov	r3, r0
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	20000800 	.word	0x20000800

080025fc <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b090      	sub	sp, #64	; 0x40
 8002600:	af00      	add	r7, sp, #0
 8002602:	4603      	mov	r3, r0
 8002604:	6039      	str	r1, [r7, #0]
 8002606:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 8002608:	2300      	movs	r3, #0
 800260a:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 800260c:	f7ff ffde 	bl	80025cc <BSP_LCD_GetXSize>
 8002610:	4603      	mov	r3, r0
 8002612:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8002614:	2300      	movs	r3, #0
 8002616:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8002618:	f7ff ffe4 	bl	80025e4 <BSP_LCD_GetYSize>
 800261c:	4603      	mov	r3, r0
 800261e:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8002620:	2300      	movs	r3, #0
 8002622:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 8002628:	23ff      	movs	r3, #255	; 0xff
 800262a:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 800262c:	2300      	movs	r3, #0
 800262e:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 8002630:	2300      	movs	r3, #0
 8002632:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 8002636:	2300      	movs	r3, #0
 8002638:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 800263c:	2300      	movs	r3, #0
 800263e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8002642:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002646:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002648:	2307      	movs	r3, #7
 800264a:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 800264c:	f7ff ffbe 	bl	80025cc <BSP_LCD_GetXSize>
 8002650:	4603      	mov	r3, r0
 8002652:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8002654:	f7ff ffc6 	bl	80025e4 <BSP_LCD_GetYSize>
 8002658:	4603      	mov	r3, r0
 800265a:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 800265c:	88fa      	ldrh	r2, [r7, #6]
 800265e:	f107 030c 	add.w	r3, r7, #12
 8002662:	4619      	mov	r1, r3
 8002664:	4814      	ldr	r0, [pc, #80]	; (80026b8 <BSP_LCD_LayerDefaultInit+0xbc>)
 8002666:	f005 ff9b 	bl	80085a0 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 800266a:	88fa      	ldrh	r2, [r7, #6]
 800266c:	4913      	ldr	r1, [pc, #76]	; (80026bc <BSP_LCD_LayerDefaultInit+0xc0>)
 800266e:	4613      	mov	r3, r2
 8002670:	005b      	lsls	r3, r3, #1
 8002672:	4413      	add	r3, r2
 8002674:	009b      	lsls	r3, r3, #2
 8002676:	440b      	add	r3, r1
 8002678:	3304      	adds	r3, #4
 800267a:	f04f 32ff 	mov.w	r2, #4294967295
 800267e:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8002680:	88fa      	ldrh	r2, [r7, #6]
 8002682:	490e      	ldr	r1, [pc, #56]	; (80026bc <BSP_LCD_LayerDefaultInit+0xc0>)
 8002684:	4613      	mov	r3, r2
 8002686:	005b      	lsls	r3, r3, #1
 8002688:	4413      	add	r3, r2
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	440b      	add	r3, r1
 800268e:	3308      	adds	r3, #8
 8002690:	4a0b      	ldr	r2, [pc, #44]	; (80026c0 <BSP_LCD_LayerDefaultInit+0xc4>)
 8002692:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8002694:	88fa      	ldrh	r2, [r7, #6]
 8002696:	4909      	ldr	r1, [pc, #36]	; (80026bc <BSP_LCD_LayerDefaultInit+0xc0>)
 8002698:	4613      	mov	r3, r2
 800269a:	005b      	lsls	r3, r3, #1
 800269c:	4413      	add	r3, r2
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	440b      	add	r3, r1
 80026a2:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 80026a6:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 80026a8:	4803      	ldr	r0, [pc, #12]	; (80026b8 <BSP_LCD_LayerDefaultInit+0xbc>)
 80026aa:	f005 ffb7 	bl	800861c <HAL_LTDC_EnableDither>
}
 80026ae:	bf00      	nop
 80026b0:	3740      	adds	r7, #64	; 0x40
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	200006cc 	.word	0x200006cc
 80026bc:	200007e8 	.word	0x200007e8
 80026c0:	2000008c 	.word	0x2000008c

080026c4 <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b083      	sub	sp, #12
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 80026cc:	4a04      	ldr	r2, [pc, #16]	; (80026e0 <BSP_LCD_SelectLayer+0x1c>)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6013      	str	r3, [r2, #0]
}
 80026d2:	bf00      	nop
 80026d4:	370c      	adds	r7, #12
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr
 80026de:	bf00      	nop
 80026e0:	200007e4 	.word	0x200007e4

080026e4 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 80026ec:	4b07      	ldr	r3, [pc, #28]	; (800270c <BSP_LCD_SetTextColor+0x28>)
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	4907      	ldr	r1, [pc, #28]	; (8002710 <BSP_LCD_SetTextColor+0x2c>)
 80026f2:	4613      	mov	r3, r2
 80026f4:	005b      	lsls	r3, r3, #1
 80026f6:	4413      	add	r3, r2
 80026f8:	009b      	lsls	r3, r3, #2
 80026fa:	440b      	add	r3, r1
 80026fc:	687a      	ldr	r2, [r7, #4]
 80026fe:	601a      	str	r2, [r3, #0]
}
 8002700:	bf00      	nop
 8002702:	370c      	adds	r7, #12
 8002704:	46bd      	mov	sp, r7
 8002706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270a:	4770      	bx	lr
 800270c:	200007e4 	.word	0x200007e4
 8002710:	200007e8 	.word	0x200007e8

08002714 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the Background color.
  * @param  Color: the layer Background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8002714:	b480      	push	{r7}
 8002716:	b083      	sub	sp, #12
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 800271c:	4b08      	ldr	r3, [pc, #32]	; (8002740 <BSP_LCD_SetBackColor+0x2c>)
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	4908      	ldr	r1, [pc, #32]	; (8002744 <BSP_LCD_SetBackColor+0x30>)
 8002722:	4613      	mov	r3, r2
 8002724:	005b      	lsls	r3, r3, #1
 8002726:	4413      	add	r3, r2
 8002728:	009b      	lsls	r3, r3, #2
 800272a:	440b      	add	r3, r1
 800272c:	3304      	adds	r3, #4
 800272e:	687a      	ldr	r2, [r7, #4]
 8002730:	601a      	str	r2, [r3, #0]
}
 8002732:	bf00      	nop
 8002734:	370c      	adds	r7, #12
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr
 800273e:	bf00      	nop
 8002740:	200007e4 	.word	0x200007e4
 8002744:	200007e8 	.word	0x200007e8

08002748 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 8002748:	b480      	push	{r7}
 800274a:	b083      	sub	sp, #12
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 8002750:	4b08      	ldr	r3, [pc, #32]	; (8002774 <BSP_LCD_SetFont+0x2c>)
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	4908      	ldr	r1, [pc, #32]	; (8002778 <BSP_LCD_SetFont+0x30>)
 8002756:	4613      	mov	r3, r2
 8002758:	005b      	lsls	r3, r3, #1
 800275a:	4413      	add	r3, r2
 800275c:	009b      	lsls	r3, r3, #2
 800275e:	440b      	add	r3, r1
 8002760:	3308      	adds	r3, #8
 8002762:	687a      	ldr	r2, [r7, #4]
 8002764:	601a      	str	r2, [r3, #0]
}
 8002766:	bf00      	nop
 8002768:	370c      	adds	r7, #12
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr
 8002772:	bf00      	nop
 8002774:	200007e4 	.word	0x200007e4
 8002778:	200007e8 	.word	0x200007e8

0800277c <BSP_LCD_GetFont>:
/**
  * @brief  Gets the Text Font.
  * @retval Layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 800277c:	b480      	push	{r7}
 800277e:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 8002780:	4b07      	ldr	r3, [pc, #28]	; (80027a0 <BSP_LCD_GetFont+0x24>)
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	4907      	ldr	r1, [pc, #28]	; (80027a4 <BSP_LCD_GetFont+0x28>)
 8002786:	4613      	mov	r3, r2
 8002788:	005b      	lsls	r3, r3, #1
 800278a:	4413      	add	r3, r2
 800278c:	009b      	lsls	r3, r3, #2
 800278e:	440b      	add	r3, r1
 8002790:	3308      	adds	r3, #8
 8002792:	681b      	ldr	r3, [r3, #0]
}
 8002794:	4618      	mov	r0, r3
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr
 800279e:	bf00      	nop
 80027a0:	200007e4 	.word	0x200007e4
 80027a4:	200007e8 	.word	0x200007e8

080027a8 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 80027a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027aa:	b085      	sub	sp, #20
 80027ac:	af02      	add	r7, sp, #8
 80027ae:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 80027b0:	4b0f      	ldr	r3, [pc, #60]	; (80027f0 <BSP_LCD_Clear+0x48>)
 80027b2:	681c      	ldr	r4, [r3, #0]
 80027b4:	4b0e      	ldr	r3, [pc, #56]	; (80027f0 <BSP_LCD_Clear+0x48>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a0e      	ldr	r2, [pc, #56]	; (80027f4 <BSP_LCD_Clear+0x4c>)
 80027ba:	2134      	movs	r1, #52	; 0x34
 80027bc:	fb01 f303 	mul.w	r3, r1, r3
 80027c0:	4413      	add	r3, r2
 80027c2:	335c      	adds	r3, #92	; 0x5c
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	461e      	mov	r6, r3
 80027c8:	f7ff ff00 	bl	80025cc <BSP_LCD_GetXSize>
 80027cc:	4605      	mov	r5, r0
 80027ce:	f7ff ff09 	bl	80025e4 <BSP_LCD_GetYSize>
 80027d2:	4602      	mov	r2, r0
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	9301      	str	r3, [sp, #4]
 80027d8:	2300      	movs	r3, #0
 80027da:	9300      	str	r3, [sp, #0]
 80027dc:	4613      	mov	r3, r2
 80027de:	462a      	mov	r2, r5
 80027e0:	4631      	mov	r1, r6
 80027e2:	4620      	mov	r0, r4
 80027e4:	f000 fcb0 	bl	8003148 <FillBuffer>
}
 80027e8:	bf00      	nop
 80027ea:	370c      	adds	r7, #12
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80027f0:	200007e4 	.word	0x200007e4
 80027f4:	200006cc 	.word	0x200006cc

080027f8 <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 80027f8:	b590      	push	{r4, r7, lr}
 80027fa:	b083      	sub	sp, #12
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	4603      	mov	r3, r0
 8002800:	80fb      	strh	r3, [r7, #6]
 8002802:	460b      	mov	r3, r1
 8002804:	80bb      	strh	r3, [r7, #4]
 8002806:	4613      	mov	r3, r2
 8002808:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800280a:	4b1b      	ldr	r3, [pc, #108]	; (8002878 <BSP_LCD_DisplayChar+0x80>)
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	491b      	ldr	r1, [pc, #108]	; (800287c <BSP_LCD_DisplayChar+0x84>)
 8002810:	4613      	mov	r3, r2
 8002812:	005b      	lsls	r3, r3, #1
 8002814:	4413      	add	r3, r2
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	440b      	add	r3, r1
 800281a:	3308      	adds	r3, #8
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	6819      	ldr	r1, [r3, #0]
 8002820:	78fb      	ldrb	r3, [r7, #3]
 8002822:	f1a3 0020 	sub.w	r0, r3, #32
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002826:	4b14      	ldr	r3, [pc, #80]	; (8002878 <BSP_LCD_DisplayChar+0x80>)
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	4c14      	ldr	r4, [pc, #80]	; (800287c <BSP_LCD_DisplayChar+0x84>)
 800282c:	4613      	mov	r3, r2
 800282e:	005b      	lsls	r3, r3, #1
 8002830:	4413      	add	r3, r2
 8002832:	009b      	lsls	r3, r3, #2
 8002834:	4423      	add	r3, r4
 8002836:	3308      	adds	r3, #8
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800283c:	fb03 f000 	mul.w	r0, r3, r0
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002840:	4b0d      	ldr	r3, [pc, #52]	; (8002878 <BSP_LCD_DisplayChar+0x80>)
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	4c0d      	ldr	r4, [pc, #52]	; (800287c <BSP_LCD_DisplayChar+0x84>)
 8002846:	4613      	mov	r3, r2
 8002848:	005b      	lsls	r3, r3, #1
 800284a:	4413      	add	r3, r2
 800284c:	009b      	lsls	r3, r3, #2
 800284e:	4423      	add	r3, r4
 8002850:	3308      	adds	r3, #8
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	889b      	ldrh	r3, [r3, #4]
 8002856:	3307      	adds	r3, #7
 8002858:	2b00      	cmp	r3, #0
 800285a:	da00      	bge.n	800285e <BSP_LCD_DisplayChar+0x66>
 800285c:	3307      	adds	r3, #7
 800285e:	10db      	asrs	r3, r3, #3
 8002860:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002864:	18ca      	adds	r2, r1, r3
 8002866:	88b9      	ldrh	r1, [r7, #4]
 8002868:	88fb      	ldrh	r3, [r7, #6]
 800286a:	4618      	mov	r0, r3
 800286c:	f000 fbb2 	bl	8002fd4 <DrawChar>
}
 8002870:	bf00      	nop
 8002872:	370c      	adds	r7, #12
 8002874:	46bd      	mov	sp, r7
 8002876:	bd90      	pop	{r4, r7, pc}
 8002878:	200007e4 	.word	0x200007e4
 800287c:	200007e8 	.word	0x200007e8

08002880 <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE 
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE   
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 8002880:	b5b0      	push	{r4, r5, r7, lr}
 8002882:	b088      	sub	sp, #32
 8002884:	af00      	add	r7, sp, #0
 8002886:	60ba      	str	r2, [r7, #8]
 8002888:	461a      	mov	r2, r3
 800288a:	4603      	mov	r3, r0
 800288c:	81fb      	strh	r3, [r7, #14]
 800288e:	460b      	mov	r3, r1
 8002890:	81bb      	strh	r3, [r7, #12]
 8002892:	4613      	mov	r3, r2
 8002894:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 8002896:	2301      	movs	r3, #1
 8002898:	83fb      	strh	r3, [r7, #30]
 800289a:	2300      	movs	r3, #0
 800289c:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 800289e:	2300      	movs	r3, #0
 80028a0:	61bb      	str	r3, [r7, #24]
 80028a2:	2300      	movs	r3, #0
 80028a4:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 80028aa:	e002      	b.n	80028b2 <BSP_LCD_DisplayStringAt+0x32>
 80028ac:	69bb      	ldr	r3, [r7, #24]
 80028ae:	3301      	adds	r3, #1
 80028b0:	61bb      	str	r3, [r7, #24]
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	1c5a      	adds	r2, r3, #1
 80028b6:	617a      	str	r2, [r7, #20]
 80028b8:	781b      	ldrb	r3, [r3, #0]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d1f6      	bne.n	80028ac <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 80028be:	f7ff fe85 	bl	80025cc <BSP_LCD_GetXSize>
 80028c2:	4601      	mov	r1, r0
 80028c4:	4b4b      	ldr	r3, [pc, #300]	; (80029f4 <BSP_LCD_DisplayStringAt+0x174>)
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	484b      	ldr	r0, [pc, #300]	; (80029f8 <BSP_LCD_DisplayStringAt+0x178>)
 80028ca:	4613      	mov	r3, r2
 80028cc:	005b      	lsls	r3, r3, #1
 80028ce:	4413      	add	r3, r2
 80028d0:	009b      	lsls	r3, r3, #2
 80028d2:	4403      	add	r3, r0
 80028d4:	3308      	adds	r3, #8
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	889b      	ldrh	r3, [r3, #4]
 80028da:	fbb1 f3f3 	udiv	r3, r1, r3
 80028de:	613b      	str	r3, [r7, #16]
  
  switch (mode)
 80028e0:	79fb      	ldrb	r3, [r7, #7]
 80028e2:	2b03      	cmp	r3, #3
 80028e4:	d01c      	beq.n	8002920 <BSP_LCD_DisplayStringAt+0xa0>
 80028e6:	2b03      	cmp	r3, #3
 80028e8:	dc33      	bgt.n	8002952 <BSP_LCD_DisplayStringAt+0xd2>
 80028ea:	2b01      	cmp	r3, #1
 80028ec:	d002      	beq.n	80028f4 <BSP_LCD_DisplayStringAt+0x74>
 80028ee:	2b02      	cmp	r3, #2
 80028f0:	d019      	beq.n	8002926 <BSP_LCD_DisplayStringAt+0xa6>
 80028f2:	e02e      	b.n	8002952 <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      refcolumn = X+ ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 80028f4:	693a      	ldr	r2, [r7, #16]
 80028f6:	69bb      	ldr	r3, [r7, #24]
 80028f8:	1ad1      	subs	r1, r2, r3
 80028fa:	4b3e      	ldr	r3, [pc, #248]	; (80029f4 <BSP_LCD_DisplayStringAt+0x174>)
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	483e      	ldr	r0, [pc, #248]	; (80029f8 <BSP_LCD_DisplayStringAt+0x178>)
 8002900:	4613      	mov	r3, r2
 8002902:	005b      	lsls	r3, r3, #1
 8002904:	4413      	add	r3, r2
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	4403      	add	r3, r0
 800290a:	3308      	adds	r3, #8
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	889b      	ldrh	r3, [r3, #4]
 8002910:	fb01 f303 	mul.w	r3, r1, r3
 8002914:	085b      	lsrs	r3, r3, #1
 8002916:	b29a      	uxth	r2, r3
 8002918:	89fb      	ldrh	r3, [r7, #14]
 800291a:	4413      	add	r3, r2
 800291c:	83fb      	strh	r3, [r7, #30]
      break;
 800291e:	e01b      	b.n	8002958 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      refcolumn = X;
 8002920:	89fb      	ldrh	r3, [r7, #14]
 8002922:	83fb      	strh	r3, [r7, #30]
      break;
 8002924:	e018      	b.n	8002958 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8002926:	693a      	ldr	r2, [r7, #16]
 8002928:	69bb      	ldr	r3, [r7, #24]
 800292a:	1ad3      	subs	r3, r2, r3
 800292c:	b299      	uxth	r1, r3
 800292e:	4b31      	ldr	r3, [pc, #196]	; (80029f4 <BSP_LCD_DisplayStringAt+0x174>)
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	4831      	ldr	r0, [pc, #196]	; (80029f8 <BSP_LCD_DisplayStringAt+0x178>)
 8002934:	4613      	mov	r3, r2
 8002936:	005b      	lsls	r3, r3, #1
 8002938:	4413      	add	r3, r2
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	4403      	add	r3, r0
 800293e:	3308      	adds	r3, #8
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	889b      	ldrh	r3, [r3, #4]
 8002944:	fb11 f303 	smulbb	r3, r1, r3
 8002948:	b29a      	uxth	r2, r3
 800294a:	89fb      	ldrh	r3, [r7, #14]
 800294c:	4413      	add	r3, r2
 800294e:	83fb      	strh	r3, [r7, #30]
      break;
 8002950:	e002      	b.n	8002958 <BSP_LCD_DisplayStringAt+0xd8>
    }
  default:
    {
      refcolumn = X;
 8002952:	89fb      	ldrh	r3, [r7, #14]
 8002954:	83fb      	strh	r3, [r7, #30]
      break;
 8002956:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8002958:	e01a      	b.n	8002990 <BSP_LCD_DisplayStringAt+0x110>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	781a      	ldrb	r2, [r3, #0]
 800295e:	89b9      	ldrh	r1, [r7, #12]
 8002960:	8bfb      	ldrh	r3, [r7, #30]
 8002962:	4618      	mov	r0, r3
 8002964:	f7ff ff48 	bl	80027f8 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8002968:	4b22      	ldr	r3, [pc, #136]	; (80029f4 <BSP_LCD_DisplayStringAt+0x174>)
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	4922      	ldr	r1, [pc, #136]	; (80029f8 <BSP_LCD_DisplayStringAt+0x178>)
 800296e:	4613      	mov	r3, r2
 8002970:	005b      	lsls	r3, r3, #1
 8002972:	4413      	add	r3, r2
 8002974:	009b      	lsls	r3, r3, #2
 8002976:	440b      	add	r3, r1
 8002978:	3308      	adds	r3, #8
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	889a      	ldrh	r2, [r3, #4]
 800297e:	8bfb      	ldrh	r3, [r7, #30]
 8002980:	4413      	add	r3, r2
 8002982:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	3301      	adds	r3, #1
 8002988:	60bb      	str	r3, [r7, #8]
    i++;
 800298a:	8bbb      	ldrh	r3, [r7, #28]
 800298c:	3301      	adds	r3, #1
 800298e:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	781b      	ldrb	r3, [r3, #0]
 8002994:	2b00      	cmp	r3, #0
 8002996:	bf14      	ite	ne
 8002998:	2301      	movne	r3, #1
 800299a:	2300      	moveq	r3, #0
 800299c:	b2dc      	uxtb	r4, r3
 800299e:	f7ff fe15 	bl	80025cc <BSP_LCD_GetXSize>
 80029a2:	8bb9      	ldrh	r1, [r7, #28]
 80029a4:	4b13      	ldr	r3, [pc, #76]	; (80029f4 <BSP_LCD_DisplayStringAt+0x174>)
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	4d13      	ldr	r5, [pc, #76]	; (80029f8 <BSP_LCD_DisplayStringAt+0x178>)
 80029aa:	4613      	mov	r3, r2
 80029ac:	005b      	lsls	r3, r3, #1
 80029ae:	4413      	add	r3, r2
 80029b0:	009b      	lsls	r3, r3, #2
 80029b2:	442b      	add	r3, r5
 80029b4:	3308      	adds	r3, #8
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	889b      	ldrh	r3, [r3, #4]
 80029ba:	fb01 f303 	mul.w	r3, r1, r3
 80029be:	1ac3      	subs	r3, r0, r3
 80029c0:	b299      	uxth	r1, r3
 80029c2:	4b0c      	ldr	r3, [pc, #48]	; (80029f4 <BSP_LCD_DisplayStringAt+0x174>)
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	480c      	ldr	r0, [pc, #48]	; (80029f8 <BSP_LCD_DisplayStringAt+0x178>)
 80029c8:	4613      	mov	r3, r2
 80029ca:	005b      	lsls	r3, r3, #1
 80029cc:	4413      	add	r3, r2
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	4403      	add	r3, r0
 80029d2:	3308      	adds	r3, #8
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	889b      	ldrh	r3, [r3, #4]
 80029d8:	4299      	cmp	r1, r3
 80029da:	bf2c      	ite	cs
 80029dc:	2301      	movcs	r3, #1
 80029de:	2300      	movcc	r3, #0
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	4023      	ands	r3, r4
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d1b7      	bne.n	800295a <BSP_LCD_DisplayStringAt+0xda>
  }  
}
 80029ea:	bf00      	nop
 80029ec:	bf00      	nop
 80029ee:	3720      	adds	r7, #32
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bdb0      	pop	{r4, r5, r7, pc}
 80029f4:	200007e4 	.word	0x200007e4
 80029f8:	200007e8 	.word	0x200007e8

080029fc <BSP_LCD_DisplayStringAtLine>:
  * @brief  Displays a maximum of 20 char on the LCD.
  * @param  Line: the Line where to display the character shape
  * @param  ptr: pointer to string to display on LCD
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b082      	sub	sp, #8
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	4603      	mov	r3, r0
 8002a04:	6039      	str	r1, [r7, #0]
 8002a06:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 8002a08:	f7ff feb8 	bl	800277c <BSP_LCD_GetFont>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	88db      	ldrh	r3, [r3, #6]
 8002a10:	88fa      	ldrh	r2, [r7, #6]
 8002a12:	fb12 f303 	smulbb	r3, r2, r3
 8002a16:	b299      	uxth	r1, r3
 8002a18:	2303      	movs	r3, #3
 8002a1a:	683a      	ldr	r2, [r7, #0]
 8002a1c:	2000      	movs	r0, #0
 8002a1e:	f7ff ff2f 	bl	8002880 <BSP_LCD_DisplayStringAt>
}
 8002a22:	bf00      	nop
 8002a24:	3708      	adds	r7, #8
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}
	...

08002a2c <BSP_LCD_DrawHLine>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Length: line length
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8002a2c:	b5b0      	push	{r4, r5, r7, lr}
 8002a2e:	b086      	sub	sp, #24
 8002a30:	af02      	add	r7, sp, #8
 8002a32:	4603      	mov	r3, r0
 8002a34:	80fb      	strh	r3, [r7, #6]
 8002a36:	460b      	mov	r3, r1
 8002a38:	80bb      	strh	r3, [r7, #4]
 8002a3a:	4613      	mov	r3, r2
 8002a3c:	807b      	strh	r3, [r7, #2]
  uint32_t xaddress = 0;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8002a42:	4b16      	ldr	r3, [pc, #88]	; (8002a9c <BSP_LCD_DrawHLine+0x70>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a16      	ldr	r2, [pc, #88]	; (8002aa0 <BSP_LCD_DrawHLine+0x74>)
 8002a48:	2134      	movs	r1, #52	; 0x34
 8002a4a:	fb01 f303 	mul.w	r3, r1, r3
 8002a4e:	4413      	add	r3, r2
 8002a50:	335c      	adds	r3, #92	; 0x5c
 8002a52:	681c      	ldr	r4, [r3, #0]
 8002a54:	f7ff fdba 	bl	80025cc <BSP_LCD_GetXSize>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	88bb      	ldrh	r3, [r7, #4]
 8002a5c:	fb03 f202 	mul.w	r2, r3, r2
 8002a60:	88fb      	ldrh	r3, [r7, #6]
 8002a62:	4413      	add	r3, r2
 8002a64:	009b      	lsls	r3, r3, #2
 8002a66:	4423      	add	r3, r4
 8002a68:	60fb      	str	r3, [r7, #12]

  /* Write line */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 8002a6a:	4b0c      	ldr	r3, [pc, #48]	; (8002a9c <BSP_LCD_DrawHLine+0x70>)
 8002a6c:	6818      	ldr	r0, [r3, #0]
 8002a6e:	68f9      	ldr	r1, [r7, #12]
 8002a70:	887c      	ldrh	r4, [r7, #2]
 8002a72:	4b0a      	ldr	r3, [pc, #40]	; (8002a9c <BSP_LCD_DrawHLine+0x70>)
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	4d0b      	ldr	r5, [pc, #44]	; (8002aa4 <BSP_LCD_DrawHLine+0x78>)
 8002a78:	4613      	mov	r3, r2
 8002a7a:	005b      	lsls	r3, r3, #1
 8002a7c:	4413      	add	r3, r2
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	442b      	add	r3, r5
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	9301      	str	r3, [sp, #4]
 8002a86:	2300      	movs	r3, #0
 8002a88:	9300      	str	r3, [sp, #0]
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	4622      	mov	r2, r4
 8002a8e:	f000 fb5b 	bl	8003148 <FillBuffer>
}
 8002a92:	bf00      	nop
 8002a94:	3710      	adds	r7, #16
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bdb0      	pop	{r4, r5, r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	200007e4 	.word	0x200007e4
 8002aa0:	200006cc 	.word	0x200006cc
 8002aa4:	200007e8 	.word	0x200007e8

08002aa8 <BSP_LCD_DrawCircle>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Radius: the circle radius
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8002aa8:	b590      	push	{r4, r7, lr}
 8002aaa:	b087      	sub	sp, #28
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	4603      	mov	r3, r0
 8002ab0:	80fb      	strh	r3, [r7, #6]
 8002ab2:	460b      	mov	r3, r1
 8002ab4:	80bb      	strh	r3, [r7, #4]
 8002ab6:	4613      	mov	r3, r2
 8002ab8:	807b      	strh	r3, [r7, #2]
  int32_t  d;/* Decision Variable */ 
  uint32_t  curx;/* Current X Value */
  uint32_t  cury;/* Current Y Value */ 
  
  d = 3 - (Radius << 1);
 8002aba:	887b      	ldrh	r3, [r7, #2]
 8002abc:	005b      	lsls	r3, r3, #1
 8002abe:	f1c3 0303 	rsb	r3, r3, #3
 8002ac2:	617b      	str	r3, [r7, #20]
  curx = 0;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	613b      	str	r3, [r7, #16]
  cury = Radius;
 8002ac8:	887b      	ldrh	r3, [r7, #2]
 8002aca:	60fb      	str	r3, [r7, #12]
  
  while (curx <= cury)
 8002acc:	e0c7      	b.n	8002c5e <BSP_LCD_DrawCircle+0x1b6>
  {
    BSP_LCD_DrawPixel((Xpos + curx), (Ypos - cury), DrawProp[ActiveLayer].TextColor);
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	b29a      	uxth	r2, r3
 8002ad2:	88fb      	ldrh	r3, [r7, #6]
 8002ad4:	4413      	add	r3, r2
 8002ad6:	b298      	uxth	r0, r3
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	b29b      	uxth	r3, r3
 8002adc:	88ba      	ldrh	r2, [r7, #4]
 8002ade:	1ad3      	subs	r3, r2, r3
 8002ae0:	b299      	uxth	r1, r3
 8002ae2:	4b64      	ldr	r3, [pc, #400]	; (8002c74 <BSP_LCD_DrawCircle+0x1cc>)
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	4c64      	ldr	r4, [pc, #400]	; (8002c78 <BSP_LCD_DrawCircle+0x1d0>)
 8002ae8:	4613      	mov	r3, r2
 8002aea:	005b      	lsls	r3, r3, #1
 8002aec:	4413      	add	r3, r2
 8002aee:	009b      	lsls	r3, r3, #2
 8002af0:	4423      	add	r3, r4
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	461a      	mov	r2, r3
 8002af6:	f000 fa47 	bl	8002f88 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - curx), (Ypos - cury), DrawProp[ActiveLayer].TextColor);
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	b29b      	uxth	r3, r3
 8002afe:	88fa      	ldrh	r2, [r7, #6]
 8002b00:	1ad3      	subs	r3, r2, r3
 8002b02:	b298      	uxth	r0, r3
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	b29b      	uxth	r3, r3
 8002b08:	88ba      	ldrh	r2, [r7, #4]
 8002b0a:	1ad3      	subs	r3, r2, r3
 8002b0c:	b299      	uxth	r1, r3
 8002b0e:	4b59      	ldr	r3, [pc, #356]	; (8002c74 <BSP_LCD_DrawCircle+0x1cc>)
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	4c59      	ldr	r4, [pc, #356]	; (8002c78 <BSP_LCD_DrawCircle+0x1d0>)
 8002b14:	4613      	mov	r3, r2
 8002b16:	005b      	lsls	r3, r3, #1
 8002b18:	4413      	add	r3, r2
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	4423      	add	r3, r4
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	461a      	mov	r2, r3
 8002b22:	f000 fa31 	bl	8002f88 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + cury), (Ypos - curx), DrawProp[ActiveLayer].TextColor);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	b29a      	uxth	r2, r3
 8002b2a:	88fb      	ldrh	r3, [r7, #6]
 8002b2c:	4413      	add	r3, r2
 8002b2e:	b298      	uxth	r0, r3
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	b29b      	uxth	r3, r3
 8002b34:	88ba      	ldrh	r2, [r7, #4]
 8002b36:	1ad3      	subs	r3, r2, r3
 8002b38:	b299      	uxth	r1, r3
 8002b3a:	4b4e      	ldr	r3, [pc, #312]	; (8002c74 <BSP_LCD_DrawCircle+0x1cc>)
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	4c4e      	ldr	r4, [pc, #312]	; (8002c78 <BSP_LCD_DrawCircle+0x1d0>)
 8002b40:	4613      	mov	r3, r2
 8002b42:	005b      	lsls	r3, r3, #1
 8002b44:	4413      	add	r3, r2
 8002b46:	009b      	lsls	r3, r3, #2
 8002b48:	4423      	add	r3, r4
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	461a      	mov	r2, r3
 8002b4e:	f000 fa1b 	bl	8002f88 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - cury), (Ypos - curx), DrawProp[ActiveLayer].TextColor);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	b29b      	uxth	r3, r3
 8002b56:	88fa      	ldrh	r2, [r7, #6]
 8002b58:	1ad3      	subs	r3, r2, r3
 8002b5a:	b298      	uxth	r0, r3
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	b29b      	uxth	r3, r3
 8002b60:	88ba      	ldrh	r2, [r7, #4]
 8002b62:	1ad3      	subs	r3, r2, r3
 8002b64:	b299      	uxth	r1, r3
 8002b66:	4b43      	ldr	r3, [pc, #268]	; (8002c74 <BSP_LCD_DrawCircle+0x1cc>)
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	4c43      	ldr	r4, [pc, #268]	; (8002c78 <BSP_LCD_DrawCircle+0x1d0>)
 8002b6c:	4613      	mov	r3, r2
 8002b6e:	005b      	lsls	r3, r3, #1
 8002b70:	4413      	add	r3, r2
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	4423      	add	r3, r4
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	461a      	mov	r2, r3
 8002b7a:	f000 fa05 	bl	8002f88 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + curx), (Ypos + cury), DrawProp[ActiveLayer].TextColor);
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	b29a      	uxth	r2, r3
 8002b82:	88fb      	ldrh	r3, [r7, #6]
 8002b84:	4413      	add	r3, r2
 8002b86:	b298      	uxth	r0, r3
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	b29a      	uxth	r2, r3
 8002b8c:	88bb      	ldrh	r3, [r7, #4]
 8002b8e:	4413      	add	r3, r2
 8002b90:	b299      	uxth	r1, r3
 8002b92:	4b38      	ldr	r3, [pc, #224]	; (8002c74 <BSP_LCD_DrawCircle+0x1cc>)
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	4c38      	ldr	r4, [pc, #224]	; (8002c78 <BSP_LCD_DrawCircle+0x1d0>)
 8002b98:	4613      	mov	r3, r2
 8002b9a:	005b      	lsls	r3, r3, #1
 8002b9c:	4413      	add	r3, r2
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	4423      	add	r3, r4
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	461a      	mov	r2, r3
 8002ba6:	f000 f9ef 	bl	8002f88 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - curx), (Ypos + cury), DrawProp[ActiveLayer].TextColor);
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	b29b      	uxth	r3, r3
 8002bae:	88fa      	ldrh	r2, [r7, #6]
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	b298      	uxth	r0, r3
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	b29a      	uxth	r2, r3
 8002bb8:	88bb      	ldrh	r3, [r7, #4]
 8002bba:	4413      	add	r3, r2
 8002bbc:	b299      	uxth	r1, r3
 8002bbe:	4b2d      	ldr	r3, [pc, #180]	; (8002c74 <BSP_LCD_DrawCircle+0x1cc>)
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	4c2d      	ldr	r4, [pc, #180]	; (8002c78 <BSP_LCD_DrawCircle+0x1d0>)
 8002bc4:	4613      	mov	r3, r2
 8002bc6:	005b      	lsls	r3, r3, #1
 8002bc8:	4413      	add	r3, r2
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	4423      	add	r3, r4
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	461a      	mov	r2, r3
 8002bd2:	f000 f9d9 	bl	8002f88 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + cury), (Ypos + curx), DrawProp[ActiveLayer].TextColor);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	b29a      	uxth	r2, r3
 8002bda:	88fb      	ldrh	r3, [r7, #6]
 8002bdc:	4413      	add	r3, r2
 8002bde:	b298      	uxth	r0, r3
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	b29a      	uxth	r2, r3
 8002be4:	88bb      	ldrh	r3, [r7, #4]
 8002be6:	4413      	add	r3, r2
 8002be8:	b299      	uxth	r1, r3
 8002bea:	4b22      	ldr	r3, [pc, #136]	; (8002c74 <BSP_LCD_DrawCircle+0x1cc>)
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	4c22      	ldr	r4, [pc, #136]	; (8002c78 <BSP_LCD_DrawCircle+0x1d0>)
 8002bf0:	4613      	mov	r3, r2
 8002bf2:	005b      	lsls	r3, r3, #1
 8002bf4:	4413      	add	r3, r2
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	4423      	add	r3, r4
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	461a      	mov	r2, r3
 8002bfe:	f000 f9c3 	bl	8002f88 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - cury), (Ypos + curx), DrawProp[ActiveLayer].TextColor);   
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	b29b      	uxth	r3, r3
 8002c06:	88fa      	ldrh	r2, [r7, #6]
 8002c08:	1ad3      	subs	r3, r2, r3
 8002c0a:	b298      	uxth	r0, r3
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	b29a      	uxth	r2, r3
 8002c10:	88bb      	ldrh	r3, [r7, #4]
 8002c12:	4413      	add	r3, r2
 8002c14:	b299      	uxth	r1, r3
 8002c16:	4b17      	ldr	r3, [pc, #92]	; (8002c74 <BSP_LCD_DrawCircle+0x1cc>)
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	4c17      	ldr	r4, [pc, #92]	; (8002c78 <BSP_LCD_DrawCircle+0x1d0>)
 8002c1c:	4613      	mov	r3, r2
 8002c1e:	005b      	lsls	r3, r3, #1
 8002c20:	4413      	add	r3, r2
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	4423      	add	r3, r4
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	461a      	mov	r2, r3
 8002c2a:	f000 f9ad 	bl	8002f88 <BSP_LCD_DrawPixel>

    if (d < 0)
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	da06      	bge.n	8002c42 <BSP_LCD_DrawCircle+0x19a>
    { 
      d += (curx << 2) + 6;
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	009a      	lsls	r2, r3, #2
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	4413      	add	r3, r2
 8002c3c:	3306      	adds	r3, #6
 8002c3e:	617b      	str	r3, [r7, #20]
 8002c40:	e00a      	b.n	8002c58 <BSP_LCD_DrawCircle+0x1b0>
    }
    else
    {
      d += ((curx - cury) << 2) + 10;
 8002c42:	693a      	ldr	r2, [r7, #16]
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	1ad3      	subs	r3, r2, r3
 8002c48:	009a      	lsls	r2, r3, #2
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	4413      	add	r3, r2
 8002c4e:	330a      	adds	r3, #10
 8002c50:	617b      	str	r3, [r7, #20]
      cury--;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	3b01      	subs	r3, #1
 8002c56:	60fb      	str	r3, [r7, #12]
    }
    curx++;
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	3301      	adds	r3, #1
 8002c5c:	613b      	str	r3, [r7, #16]
  while (curx <= cury)
 8002c5e:	693a      	ldr	r2, [r7, #16]
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	429a      	cmp	r2, r3
 8002c64:	f67f af33 	bls.w	8002ace <BSP_LCD_DrawCircle+0x26>
  } 
}
 8002c68:	bf00      	nop
 8002c6a:	bf00      	nop
 8002c6c:	371c      	adds	r7, #28
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd90      	pop	{r4, r7, pc}
 8002c72:	bf00      	nop
 8002c74:	200007e4 	.word	0x200007e4
 8002c78:	200007e8 	.word	0x200007e8

08002c7c <BSP_LCD_FillCircle>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Radius: the circle radius
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b086      	sub	sp, #24
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	4603      	mov	r3, r0
 8002c84:	80fb      	strh	r3, [r7, #6]
 8002c86:	460b      	mov	r3, r1
 8002c88:	80bb      	strh	r3, [r7, #4]
 8002c8a:	4613      	mov	r3, r2
 8002c8c:	807b      	strh	r3, [r7, #2]
  int32_t  d;    /* Decision Variable */ 
  uint32_t  curx;/* Current X Value */
  uint32_t  cury;/* Current Y Value */ 
  
  d = 3 - (Radius << 1);
 8002c8e:	887b      	ldrh	r3, [r7, #2]
 8002c90:	005b      	lsls	r3, r3, #1
 8002c92:	f1c3 0303 	rsb	r3, r3, #3
 8002c96:	617b      	str	r3, [r7, #20]

  curx = 0;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	613b      	str	r3, [r7, #16]
  cury = Radius;
 8002c9c:	887b      	ldrh	r3, [r7, #2]
 8002c9e:	60fb      	str	r3, [r7, #12]
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8002ca0:	4b44      	ldr	r3, [pc, #272]	; (8002db4 <BSP_LCD_FillCircle+0x138>)
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	4944      	ldr	r1, [pc, #272]	; (8002db8 <BSP_LCD_FillCircle+0x13c>)
 8002ca6:	4613      	mov	r3, r2
 8002ca8:	005b      	lsls	r3, r3, #1
 8002caa:	4413      	add	r3, r2
 8002cac:	009b      	lsls	r3, r3, #2
 8002cae:	440b      	add	r3, r1
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f7ff fd16 	bl	80026e4 <BSP_LCD_SetTextColor>

  while (curx <= cury)
 8002cb8:	e061      	b.n	8002d7e <BSP_LCD_FillCircle+0x102>
  {
    if(cury > 0) 
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d021      	beq.n	8002d04 <BSP_LCD_FillCircle+0x88>
    {
      BSP_LCD_DrawHLine(Xpos - cury, Ypos + curx, 2*cury);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	b29b      	uxth	r3, r3
 8002cc4:	88fa      	ldrh	r2, [r7, #6]
 8002cc6:	1ad3      	subs	r3, r2, r3
 8002cc8:	b298      	uxth	r0, r3
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	b29a      	uxth	r2, r3
 8002cce:	88bb      	ldrh	r3, [r7, #4]
 8002cd0:	4413      	add	r3, r2
 8002cd2:	b299      	uxth	r1, r3
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	b29b      	uxth	r3, r3
 8002cd8:	005b      	lsls	r3, r3, #1
 8002cda:	b29b      	uxth	r3, r3
 8002cdc:	461a      	mov	r2, r3
 8002cde:	f7ff fea5 	bl	8002a2c <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - cury, Ypos - curx, 2*cury);
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	b29b      	uxth	r3, r3
 8002ce6:	88fa      	ldrh	r2, [r7, #6]
 8002ce8:	1ad3      	subs	r3, r2, r3
 8002cea:	b298      	uxth	r0, r3
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	b29b      	uxth	r3, r3
 8002cf0:	88ba      	ldrh	r2, [r7, #4]
 8002cf2:	1ad3      	subs	r3, r2, r3
 8002cf4:	b299      	uxth	r1, r3
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	b29b      	uxth	r3, r3
 8002cfa:	005b      	lsls	r3, r3, #1
 8002cfc:	b29b      	uxth	r3, r3
 8002cfe:	461a      	mov	r2, r3
 8002d00:	f7ff fe94 	bl	8002a2c <BSP_LCD_DrawHLine>
    }

    if(curx > 0) 
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d021      	beq.n	8002d4e <BSP_LCD_FillCircle+0xd2>
    {
      BSP_LCD_DrawHLine(Xpos - curx, Ypos - cury, 2*curx);
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	b29b      	uxth	r3, r3
 8002d0e:	88fa      	ldrh	r2, [r7, #6]
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	b298      	uxth	r0, r3
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	b29b      	uxth	r3, r3
 8002d18:	88ba      	ldrh	r2, [r7, #4]
 8002d1a:	1ad3      	subs	r3, r2, r3
 8002d1c:	b299      	uxth	r1, r3
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	b29b      	uxth	r3, r3
 8002d22:	005b      	lsls	r3, r3, #1
 8002d24:	b29b      	uxth	r3, r3
 8002d26:	461a      	mov	r2, r3
 8002d28:	f7ff fe80 	bl	8002a2c <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - curx, Ypos + cury, 2*curx);
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	88fa      	ldrh	r2, [r7, #6]
 8002d32:	1ad3      	subs	r3, r2, r3
 8002d34:	b298      	uxth	r0, r3
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	b29a      	uxth	r2, r3
 8002d3a:	88bb      	ldrh	r3, [r7, #4]
 8002d3c:	4413      	add	r3, r2
 8002d3e:	b299      	uxth	r1, r3
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	b29b      	uxth	r3, r3
 8002d44:	005b      	lsls	r3, r3, #1
 8002d46:	b29b      	uxth	r3, r3
 8002d48:	461a      	mov	r2, r3
 8002d4a:	f7ff fe6f 	bl	8002a2c <BSP_LCD_DrawHLine>
    }
    if (d < 0)
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	da06      	bge.n	8002d62 <BSP_LCD_FillCircle+0xe6>
    { 
      d += (curx << 2) + 6;
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	009a      	lsls	r2, r3, #2
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	4413      	add	r3, r2
 8002d5c:	3306      	adds	r3, #6
 8002d5e:	617b      	str	r3, [r7, #20]
 8002d60:	e00a      	b.n	8002d78 <BSP_LCD_FillCircle+0xfc>
    }
    else
    {
      d += ((curx - cury) << 2) + 10;
 8002d62:	693a      	ldr	r2, [r7, #16]
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	1ad3      	subs	r3, r2, r3
 8002d68:	009a      	lsls	r2, r3, #2
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	4413      	add	r3, r2
 8002d6e:	330a      	adds	r3, #10
 8002d70:	617b      	str	r3, [r7, #20]
      cury--;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	3b01      	subs	r3, #1
 8002d76:	60fb      	str	r3, [r7, #12]
    }
    curx++;
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	3301      	adds	r3, #1
 8002d7c:	613b      	str	r3, [r7, #16]
  while (curx <= cury)
 8002d7e:	693a      	ldr	r2, [r7, #16]
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	429a      	cmp	r2, r3
 8002d84:	d999      	bls.n	8002cba <BSP_LCD_FillCircle+0x3e>
  }

  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8002d86:	4b0b      	ldr	r3, [pc, #44]	; (8002db4 <BSP_LCD_FillCircle+0x138>)
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	490b      	ldr	r1, [pc, #44]	; (8002db8 <BSP_LCD_FillCircle+0x13c>)
 8002d8c:	4613      	mov	r3, r2
 8002d8e:	005b      	lsls	r3, r3, #1
 8002d90:	4413      	add	r3, r2
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	440b      	add	r3, r1
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f7ff fca3 	bl	80026e4 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 8002d9e:	887a      	ldrh	r2, [r7, #2]
 8002da0:	88b9      	ldrh	r1, [r7, #4]
 8002da2:	88fb      	ldrh	r3, [r7, #6]
 8002da4:	4618      	mov	r0, r3
 8002da6:	f7ff fe7f 	bl	8002aa8 <BSP_LCD_DrawCircle>
}
 8002daa:	bf00      	nop
 8002dac:	3718      	adds	r7, #24
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	bf00      	nop
 8002db4:	200007e4 	.word	0x200007e4
 8002db8:	200007e8 	.word	0x200007e8

08002dbc <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	af00      	add	r7, sp, #0
  if(LcdDrv->DisplayOn != NULL)
 8002dc0:	4b05      	ldr	r3, [pc, #20]	; (8002dd8 <BSP_LCD_DisplayOn+0x1c>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d003      	beq.n	8002dd2 <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 8002dca:	4b03      	ldr	r3, [pc, #12]	; (8002dd8 <BSP_LCD_DisplayOn+0x1c>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	4798      	blx	r3
  }
}
 8002dd2:	bf00      	nop
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	20000800 	.word	0x20000800

08002ddc <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b08e      	sub	sp, #56	; 0x38
 8002de0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8002de2:	2300      	movs	r3, #0
 8002de4:	623b      	str	r3, [r7, #32]
 8002de6:	4b61      	ldr	r3, [pc, #388]	; (8002f6c <BSP_LCD_MspInit+0x190>)
 8002de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dea:	4a60      	ldr	r2, [pc, #384]	; (8002f6c <BSP_LCD_MspInit+0x190>)
 8002dec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002df0:	6453      	str	r3, [r2, #68]	; 0x44
 8002df2:	4b5e      	ldr	r3, [pc, #376]	; (8002f6c <BSP_LCD_MspInit+0x190>)
 8002df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002df6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002dfa:	623b      	str	r3, [r7, #32]
 8002dfc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 8002dfe:	2300      	movs	r3, #0
 8002e00:	61fb      	str	r3, [r7, #28]
 8002e02:	4b5a      	ldr	r3, [pc, #360]	; (8002f6c <BSP_LCD_MspInit+0x190>)
 8002e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e06:	4a59      	ldr	r2, [pc, #356]	; (8002f6c <BSP_LCD_MspInit+0x190>)
 8002e08:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002e0c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e0e:	4b57      	ldr	r3, [pc, #348]	; (8002f6c <BSP_LCD_MspInit+0x190>)
 8002e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e12:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002e16:	61fb      	str	r3, [r7, #28]
 8002e18:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	61bb      	str	r3, [r7, #24]
 8002e1e:	4b53      	ldr	r3, [pc, #332]	; (8002f6c <BSP_LCD_MspInit+0x190>)
 8002e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e22:	4a52      	ldr	r2, [pc, #328]	; (8002f6c <BSP_LCD_MspInit+0x190>)
 8002e24:	f043 0301 	orr.w	r3, r3, #1
 8002e28:	6313      	str	r3, [r2, #48]	; 0x30
 8002e2a:	4b50      	ldr	r3, [pc, #320]	; (8002f6c <BSP_LCD_MspInit+0x190>)
 8002e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e2e:	f003 0301 	and.w	r3, r3, #1
 8002e32:	61bb      	str	r3, [r7, #24]
 8002e34:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e36:	2300      	movs	r3, #0
 8002e38:	617b      	str	r3, [r7, #20]
 8002e3a:	4b4c      	ldr	r3, [pc, #304]	; (8002f6c <BSP_LCD_MspInit+0x190>)
 8002e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e3e:	4a4b      	ldr	r2, [pc, #300]	; (8002f6c <BSP_LCD_MspInit+0x190>)
 8002e40:	f043 0302 	orr.w	r3, r3, #2
 8002e44:	6313      	str	r3, [r2, #48]	; 0x30
 8002e46:	4b49      	ldr	r3, [pc, #292]	; (8002f6c <BSP_LCD_MspInit+0x190>)
 8002e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e4a:	f003 0302 	and.w	r3, r3, #2
 8002e4e:	617b      	str	r3, [r7, #20]
 8002e50:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e52:	2300      	movs	r3, #0
 8002e54:	613b      	str	r3, [r7, #16]
 8002e56:	4b45      	ldr	r3, [pc, #276]	; (8002f6c <BSP_LCD_MspInit+0x190>)
 8002e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e5a:	4a44      	ldr	r2, [pc, #272]	; (8002f6c <BSP_LCD_MspInit+0x190>)
 8002e5c:	f043 0304 	orr.w	r3, r3, #4
 8002e60:	6313      	str	r3, [r2, #48]	; 0x30
 8002e62:	4b42      	ldr	r3, [pc, #264]	; (8002f6c <BSP_LCD_MspInit+0x190>)
 8002e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e66:	f003 0304 	and.w	r3, r3, #4
 8002e6a:	613b      	str	r3, [r7, #16]
 8002e6c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e6e:	2300      	movs	r3, #0
 8002e70:	60fb      	str	r3, [r7, #12]
 8002e72:	4b3e      	ldr	r3, [pc, #248]	; (8002f6c <BSP_LCD_MspInit+0x190>)
 8002e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e76:	4a3d      	ldr	r2, [pc, #244]	; (8002f6c <BSP_LCD_MspInit+0x190>)
 8002e78:	f043 0308 	orr.w	r3, r3, #8
 8002e7c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e7e:	4b3b      	ldr	r3, [pc, #236]	; (8002f6c <BSP_LCD_MspInit+0x190>)
 8002e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e82:	f003 0308 	and.w	r3, r3, #8
 8002e86:	60fb      	str	r3, [r7, #12]
 8002e88:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	60bb      	str	r3, [r7, #8]
 8002e8e:	4b37      	ldr	r3, [pc, #220]	; (8002f6c <BSP_LCD_MspInit+0x190>)
 8002e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e92:	4a36      	ldr	r2, [pc, #216]	; (8002f6c <BSP_LCD_MspInit+0x190>)
 8002e94:	f043 0320 	orr.w	r3, r3, #32
 8002e98:	6313      	str	r3, [r2, #48]	; 0x30
 8002e9a:	4b34      	ldr	r3, [pc, #208]	; (8002f6c <BSP_LCD_MspInit+0x190>)
 8002e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e9e:	f003 0320 	and.w	r3, r3, #32
 8002ea2:	60bb      	str	r3, [r7, #8]
 8002ea4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	607b      	str	r3, [r7, #4]
 8002eaa:	4b30      	ldr	r3, [pc, #192]	; (8002f6c <BSP_LCD_MspInit+0x190>)
 8002eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eae:	4a2f      	ldr	r2, [pc, #188]	; (8002f6c <BSP_LCD_MspInit+0x190>)
 8002eb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002eb4:	6313      	str	r3, [r2, #48]	; 0x30
 8002eb6:	4b2d      	ldr	r3, [pc, #180]	; (8002f6c <BSP_LCD_MspInit+0x190>)
 8002eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ebe:	607b      	str	r3, [r7, #4]
 8002ec0:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8002ec2:	f641 0358 	movw	r3, #6232	; 0x1858
 8002ec6:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8002ec8:	2302      	movs	r3, #2
 8002eca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8002ed0:	2302      	movs	r3, #2
 8002ed2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8002ed4:	230e      	movs	r3, #14
 8002ed6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8002ed8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002edc:	4619      	mov	r1, r3
 8002ede:	4824      	ldr	r0, [pc, #144]	; (8002f70 <BSP_LCD_MspInit+0x194>)
 8002ee0:	f000 fe3a 	bl	8003b58 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8002ee4:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8002ee8:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002eea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002eee:	4619      	mov	r1, r3
 8002ef0:	4820      	ldr	r0, [pc, #128]	; (8002f74 <BSP_LCD_MspInit+0x198>)
 8002ef2:	f000 fe31 	bl	8003b58 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8002ef6:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8002efa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8002efc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f00:	4619      	mov	r1, r3
 8002f02:	481d      	ldr	r0, [pc, #116]	; (8002f78 <BSP_LCD_MspInit+0x19c>)
 8002f04:	f000 fe28 	bl	8003b58 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8002f08:	2348      	movs	r3, #72	; 0x48
 8002f0a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8002f0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f10:	4619      	mov	r1, r3
 8002f12:	481a      	ldr	r0, [pc, #104]	; (8002f7c <BSP_LCD_MspInit+0x1a0>)
 8002f14:	f000 fe20 	bl	8003b58 <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8002f18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f1c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 8002f1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f22:	4619      	mov	r1, r3
 8002f24:	4816      	ldr	r0, [pc, #88]	; (8002f80 <BSP_LCD_MspInit+0x1a4>)
 8002f26:	f000 fe17 	bl	8003b58 <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8002f2a:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8002f2e:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8002f30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f34:	4619      	mov	r1, r3
 8002f36:	4813      	ldr	r0, [pc, #76]	; (8002f84 <BSP_LCD_MspInit+0x1a8>)
 8002f38:	f000 fe0e 	bl	8003b58 <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8002f3c:	2303      	movs	r3, #3
 8002f3e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8002f40:	2309      	movs	r3, #9
 8002f42:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002f44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f48:	4619      	mov	r1, r3
 8002f4a:	480a      	ldr	r0, [pc, #40]	; (8002f74 <BSP_LCD_MspInit+0x198>)
 8002f4c:	f000 fe04 	bl	8003b58 <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8002f50:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002f54:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8002f56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f5a:	4619      	mov	r1, r3
 8002f5c:	4809      	ldr	r0, [pc, #36]	; (8002f84 <BSP_LCD_MspInit+0x1a8>)
 8002f5e:	f000 fdfb 	bl	8003b58 <HAL_GPIO_Init>
}
 8002f62:	bf00      	nop
 8002f64:	3738      	adds	r7, #56	; 0x38
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}
 8002f6a:	bf00      	nop
 8002f6c:	40023800 	.word	0x40023800
 8002f70:	40020000 	.word	0x40020000
 8002f74:	40020400 	.word	0x40020400
 8002f78:	40020800 	.word	0x40020800
 8002f7c:	40020c00 	.word	0x40020c00
 8002f80:	40021400 	.word	0x40021400
 8002f84:	40021800 	.word	0x40021800

08002f88 <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8002f88:	b5b0      	push	{r4, r5, r7, lr}
 8002f8a:	b082      	sub	sp, #8
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	4603      	mov	r3, r0
 8002f90:	603a      	str	r2, [r7, #0]
 8002f92:	80fb      	strh	r3, [r7, #6]
 8002f94:	460b      	mov	r3, r1
 8002f96:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8002f98:	4b0c      	ldr	r3, [pc, #48]	; (8002fcc <BSP_LCD_DrawPixel+0x44>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a0c      	ldr	r2, [pc, #48]	; (8002fd0 <BSP_LCD_DrawPixel+0x48>)
 8002f9e:	2134      	movs	r1, #52	; 0x34
 8002fa0:	fb01 f303 	mul.w	r3, r1, r3
 8002fa4:	4413      	add	r3, r2
 8002fa6:	335c      	adds	r3, #92	; 0x5c
 8002fa8:	681c      	ldr	r4, [r3, #0]
 8002faa:	88bd      	ldrh	r5, [r7, #4]
 8002fac:	f7ff fb0e 	bl	80025cc <BSP_LCD_GetXSize>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	fb03 f205 	mul.w	r2, r3, r5
 8002fb6:	88fb      	ldrh	r3, [r7, #6]
 8002fb8:	4413      	add	r3, r2
 8002fba:	009b      	lsls	r3, r3, #2
 8002fbc:	4423      	add	r3, r4
 8002fbe:	461a      	mov	r2, r3
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	6013      	str	r3, [r2, #0]
}
 8002fc4:	bf00      	nop
 8002fc6:	3708      	adds	r7, #8
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bdb0      	pop	{r4, r5, r7, pc}
 8002fcc:	200007e4 	.word	0x200007e4
 8002fd0:	200006cc 	.word	0x200006cc

08002fd4 <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b088      	sub	sp, #32
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	4603      	mov	r3, r0
 8002fdc:	603a      	str	r2, [r7, #0]
 8002fde:	80fb      	strh	r3, [r7, #6]
 8002fe0:	460b      	mov	r3, r1
 8002fe2:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	61fb      	str	r3, [r7, #28]
 8002fe8:	2300      	movs	r3, #0
 8002fea:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line=0;
 8002fec:	2300      	movs	r3, #0
 8002fee:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 8002ff0:	4b53      	ldr	r3, [pc, #332]	; (8003140 <DrawChar+0x16c>)
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	4953      	ldr	r1, [pc, #332]	; (8003144 <DrawChar+0x170>)
 8002ff6:	4613      	mov	r3, r2
 8002ff8:	005b      	lsls	r3, r3, #1
 8002ffa:	4413      	add	r3, r2
 8002ffc:	009b      	lsls	r3, r3, #2
 8002ffe:	440b      	add	r3, r1
 8003000:	3308      	adds	r3, #8
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	88db      	ldrh	r3, [r3, #6]
 8003006:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8003008:	4b4d      	ldr	r3, [pc, #308]	; (8003140 <DrawChar+0x16c>)
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	494d      	ldr	r1, [pc, #308]	; (8003144 <DrawChar+0x170>)
 800300e:	4613      	mov	r3, r2
 8003010:	005b      	lsls	r3, r3, #1
 8003012:	4413      	add	r3, r2
 8003014:	009b      	lsls	r3, r3, #2
 8003016:	440b      	add	r3, r1
 8003018:	3308      	adds	r3, #8
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	889b      	ldrh	r3, [r3, #4]
 800301e:	823b      	strh	r3, [r7, #16]

  offset = 8 *((width + 7)/8) -  width ;
 8003020:	8a3b      	ldrh	r3, [r7, #16]
 8003022:	3307      	adds	r3, #7
 8003024:	2b00      	cmp	r3, #0
 8003026:	da00      	bge.n	800302a <DrawChar+0x56>
 8003028:	3307      	adds	r3, #7
 800302a:	10db      	asrs	r3, r3, #3
 800302c:	b2db      	uxtb	r3, r3
 800302e:	00db      	lsls	r3, r3, #3
 8003030:	b2da      	uxtb	r2, r3
 8003032:	8a3b      	ldrh	r3, [r7, #16]
 8003034:	b2db      	uxtb	r3, r3
 8003036:	1ad3      	subs	r3, r2, r3
 8003038:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 800303a:	2300      	movs	r3, #0
 800303c:	61fb      	str	r3, [r7, #28]
 800303e:	e076      	b.n	800312e <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8003040:	8a3b      	ldrh	r3, [r7, #16]
 8003042:	3307      	adds	r3, #7
 8003044:	2b00      	cmp	r3, #0
 8003046:	da00      	bge.n	800304a <DrawChar+0x76>
 8003048:	3307      	adds	r3, #7
 800304a:	10db      	asrs	r3, r3, #3
 800304c:	461a      	mov	r2, r3
 800304e:	69fb      	ldr	r3, [r7, #28]
 8003050:	fb02 f303 	mul.w	r3, r2, r3
 8003054:	683a      	ldr	r2, [r7, #0]
 8003056:	4413      	add	r3, r2
 8003058:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 800305a:	8a3b      	ldrh	r3, [r7, #16]
 800305c:	3307      	adds	r3, #7
 800305e:	2b00      	cmp	r3, #0
 8003060:	da00      	bge.n	8003064 <DrawChar+0x90>
 8003062:	3307      	adds	r3, #7
 8003064:	10db      	asrs	r3, r3, #3
 8003066:	2b01      	cmp	r3, #1
 8003068:	d002      	beq.n	8003070 <DrawChar+0x9c>
 800306a:	2b02      	cmp	r3, #2
 800306c:	d004      	beq.n	8003078 <DrawChar+0xa4>
 800306e:	e00c      	b.n	800308a <DrawChar+0xb6>
    {
    case 1:
      line =  pchar[0];      
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	781b      	ldrb	r3, [r3, #0]
 8003074:	617b      	str	r3, [r7, #20]
      break;
 8003076:	e016      	b.n	80030a6 <DrawChar+0xd2>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	781b      	ldrb	r3, [r3, #0]
 800307c:	021b      	lsls	r3, r3, #8
 800307e:	68ba      	ldr	r2, [r7, #8]
 8003080:	3201      	adds	r2, #1
 8003082:	7812      	ldrb	r2, [r2, #0]
 8003084:	4313      	orrs	r3, r2
 8003086:	617b      	str	r3, [r7, #20]
      break;
 8003088:	e00d      	b.n	80030a6 <DrawChar+0xd2>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	781b      	ldrb	r3, [r3, #0]
 800308e:	041a      	lsls	r2, r3, #16
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	3301      	adds	r3, #1
 8003094:	781b      	ldrb	r3, [r3, #0]
 8003096:	021b      	lsls	r3, r3, #8
 8003098:	4313      	orrs	r3, r2
 800309a:	68ba      	ldr	r2, [r7, #8]
 800309c:	3202      	adds	r2, #2
 800309e:	7812      	ldrb	r2, [r2, #0]
 80030a0:	4313      	orrs	r3, r2
 80030a2:	617b      	str	r3, [r7, #20]
      break;
 80030a4:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 80030a6:	2300      	movs	r3, #0
 80030a8:	61bb      	str	r3, [r7, #24]
 80030aa:	e036      	b.n	800311a <DrawChar+0x146>
    {
      if(line & (1 << (width- j + offset- 1))) 
 80030ac:	8a3a      	ldrh	r2, [r7, #16]
 80030ae:	69bb      	ldr	r3, [r7, #24]
 80030b0:	1ad2      	subs	r2, r2, r3
 80030b2:	7bfb      	ldrb	r3, [r7, #15]
 80030b4:	4413      	add	r3, r2
 80030b6:	3b01      	subs	r3, #1
 80030b8:	2201      	movs	r2, #1
 80030ba:	fa02 f303 	lsl.w	r3, r2, r3
 80030be:	461a      	mov	r2, r3
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	4013      	ands	r3, r2
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d012      	beq.n	80030ee <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 80030c8:	69bb      	ldr	r3, [r7, #24]
 80030ca:	b29a      	uxth	r2, r3
 80030cc:	88fb      	ldrh	r3, [r7, #6]
 80030ce:	4413      	add	r3, r2
 80030d0:	b298      	uxth	r0, r3
 80030d2:	4b1b      	ldr	r3, [pc, #108]	; (8003140 <DrawChar+0x16c>)
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	491b      	ldr	r1, [pc, #108]	; (8003144 <DrawChar+0x170>)
 80030d8:	4613      	mov	r3, r2
 80030da:	005b      	lsls	r3, r3, #1
 80030dc:	4413      	add	r3, r2
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	440b      	add	r3, r1
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	88bb      	ldrh	r3, [r7, #4]
 80030e6:	4619      	mov	r1, r3
 80030e8:	f7ff ff4e 	bl	8002f88 <BSP_LCD_DrawPixel>
 80030ec:	e012      	b.n	8003114 <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 80030ee:	69bb      	ldr	r3, [r7, #24]
 80030f0:	b29a      	uxth	r2, r3
 80030f2:	88fb      	ldrh	r3, [r7, #6]
 80030f4:	4413      	add	r3, r2
 80030f6:	b298      	uxth	r0, r3
 80030f8:	4b11      	ldr	r3, [pc, #68]	; (8003140 <DrawChar+0x16c>)
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	4911      	ldr	r1, [pc, #68]	; (8003144 <DrawChar+0x170>)
 80030fe:	4613      	mov	r3, r2
 8003100:	005b      	lsls	r3, r3, #1
 8003102:	4413      	add	r3, r2
 8003104:	009b      	lsls	r3, r3, #2
 8003106:	440b      	add	r3, r1
 8003108:	3304      	adds	r3, #4
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	88bb      	ldrh	r3, [r7, #4]
 800310e:	4619      	mov	r1, r3
 8003110:	f7ff ff3a 	bl	8002f88 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8003114:	69bb      	ldr	r3, [r7, #24]
 8003116:	3301      	adds	r3, #1
 8003118:	61bb      	str	r3, [r7, #24]
 800311a:	8a3b      	ldrh	r3, [r7, #16]
 800311c:	69ba      	ldr	r2, [r7, #24]
 800311e:	429a      	cmp	r2, r3
 8003120:	d3c4      	bcc.n	80030ac <DrawChar+0xd8>
      } 
    }
    Ypos++;
 8003122:	88bb      	ldrh	r3, [r7, #4]
 8003124:	3301      	adds	r3, #1
 8003126:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8003128:	69fb      	ldr	r3, [r7, #28]
 800312a:	3301      	adds	r3, #1
 800312c:	61fb      	str	r3, [r7, #28]
 800312e:	8a7b      	ldrh	r3, [r7, #18]
 8003130:	69fa      	ldr	r2, [r7, #28]
 8003132:	429a      	cmp	r2, r3
 8003134:	d384      	bcc.n	8003040 <DrawChar+0x6c>
  }
}
 8003136:	bf00      	nop
 8003138:	bf00      	nop
 800313a:	3720      	adds	r7, #32
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}
 8003140:	200007e4 	.word	0x200007e4
 8003144:	200007e8 	.word	0x200007e8

08003148 <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b086      	sub	sp, #24
 800314c:	af02      	add	r7, sp, #8
 800314e:	60f8      	str	r0, [r7, #12]
 8003150:	60b9      	str	r1, [r7, #8]
 8003152:	607a      	str	r2, [r7, #4]
 8003154:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 8003156:	4b16      	ldr	r3, [pc, #88]	; (80031b0 <FillBuffer+0x68>)
 8003158:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800315c:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 800315e:	4b14      	ldr	r3, [pc, #80]	; (80031b0 <FillBuffer+0x68>)
 8003160:	2200      	movs	r2, #0
 8003162:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 8003164:	4a12      	ldr	r2, [pc, #72]	; (80031b0 <FillBuffer+0x68>)
 8003166:	69bb      	ldr	r3, [r7, #24]
 8003168:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 800316a:	4b11      	ldr	r3, [pc, #68]	; (80031b0 <FillBuffer+0x68>)
 800316c:	4a11      	ldr	r2, [pc, #68]	; (80031b4 <FillBuffer+0x6c>)
 800316e:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 8003170:	480f      	ldr	r0, [pc, #60]	; (80031b0 <FillBuffer+0x68>)
 8003172:	f004 fea5 	bl	8007ec0 <HAL_DMA2D_Init>
 8003176:	4603      	mov	r3, r0
 8003178:	2b00      	cmp	r3, #0
 800317a:	d115      	bne.n	80031a8 <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 800317c:	68f9      	ldr	r1, [r7, #12]
 800317e:	480c      	ldr	r0, [pc, #48]	; (80031b0 <FillBuffer+0x68>)
 8003180:	f005 f806 	bl	8008190 <HAL_DMA2D_ConfigLayer>
 8003184:	4603      	mov	r3, r0
 8003186:	2b00      	cmp	r3, #0
 8003188:	d10e      	bne.n	80031a8 <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 800318a:	68ba      	ldr	r2, [r7, #8]
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	9300      	str	r3, [sp, #0]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	69f9      	ldr	r1, [r7, #28]
 8003194:	4806      	ldr	r0, [pc, #24]	; (80031b0 <FillBuffer+0x68>)
 8003196:	f004 fee6 	bl	8007f66 <HAL_DMA2D_Start>
 800319a:	4603      	mov	r3, r0
 800319c:	2b00      	cmp	r3, #0
 800319e:	d103      	bne.n	80031a8 <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 80031a0:	210a      	movs	r1, #10
 80031a2:	4803      	ldr	r0, [pc, #12]	; (80031b0 <FillBuffer+0x68>)
 80031a4:	f004 ff0a 	bl	8007fbc <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 80031a8:	bf00      	nop
 80031aa:	3710      	adds	r7, #16
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}
 80031b0:	20000774 	.word	0x20000774
 80031b4:	4002b000 	.word	0x4002b000

080031b8 <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 80031bc:	4b29      	ldr	r3, [pc, #164]	; (8003264 <BSP_SDRAM_Init+0xac>)
 80031be:	4a2a      	ldr	r2, [pc, #168]	; (8003268 <BSP_SDRAM_Init+0xb0>)
 80031c0:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 80031c2:	4b2a      	ldr	r3, [pc, #168]	; (800326c <BSP_SDRAM_Init+0xb4>)
 80031c4:	2202      	movs	r2, #2
 80031c6:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 80031c8:	4b28      	ldr	r3, [pc, #160]	; (800326c <BSP_SDRAM_Init+0xb4>)
 80031ca:	2207      	movs	r2, #7
 80031cc:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 80031ce:	4b27      	ldr	r3, [pc, #156]	; (800326c <BSP_SDRAM_Init+0xb4>)
 80031d0:	2204      	movs	r2, #4
 80031d2:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 80031d4:	4b25      	ldr	r3, [pc, #148]	; (800326c <BSP_SDRAM_Init+0xb4>)
 80031d6:	2207      	movs	r2, #7
 80031d8:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 80031da:	4b24      	ldr	r3, [pc, #144]	; (800326c <BSP_SDRAM_Init+0xb4>)
 80031dc:	2202      	movs	r2, #2
 80031de:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 80031e0:	4b22      	ldr	r3, [pc, #136]	; (800326c <BSP_SDRAM_Init+0xb4>)
 80031e2:	2202      	movs	r2, #2
 80031e4:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 80031e6:	4b21      	ldr	r3, [pc, #132]	; (800326c <BSP_SDRAM_Init+0xb4>)
 80031e8:	2202      	movs	r2, #2
 80031ea:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 80031ec:	4b1d      	ldr	r3, [pc, #116]	; (8003264 <BSP_SDRAM_Init+0xac>)
 80031ee:	2201      	movs	r2, #1
 80031f0:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80031f2:	4b1c      	ldr	r3, [pc, #112]	; (8003264 <BSP_SDRAM_Init+0xac>)
 80031f4:	2200      	movs	r2, #0
 80031f6:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 80031f8:	4b1a      	ldr	r3, [pc, #104]	; (8003264 <BSP_SDRAM_Init+0xac>)
 80031fa:	2204      	movs	r2, #4
 80031fc:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 80031fe:	4b19      	ldr	r3, [pc, #100]	; (8003264 <BSP_SDRAM_Init+0xac>)
 8003200:	2210      	movs	r2, #16
 8003202:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8003204:	4b17      	ldr	r3, [pc, #92]	; (8003264 <BSP_SDRAM_Init+0xac>)
 8003206:	2240      	movs	r2, #64	; 0x40
 8003208:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 800320a:	4b16      	ldr	r3, [pc, #88]	; (8003264 <BSP_SDRAM_Init+0xac>)
 800320c:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8003210:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8003212:	4b14      	ldr	r3, [pc, #80]	; (8003264 <BSP_SDRAM_Init+0xac>)
 8003214:	2200      	movs	r2, #0
 8003216:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8003218:	4b12      	ldr	r3, [pc, #72]	; (8003264 <BSP_SDRAM_Init+0xac>)
 800321a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800321e:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 8003220:	4b10      	ldr	r3, [pc, #64]	; (8003264 <BSP_SDRAM_Init+0xac>)
 8003222:	2200      	movs	r2, #0
 8003224:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 8003226:	4b0f      	ldr	r3, [pc, #60]	; (8003264 <BSP_SDRAM_Init+0xac>)
 8003228:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800322c:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 800322e:	2100      	movs	r1, #0
 8003230:	480c      	ldr	r0, [pc, #48]	; (8003264 <BSP_SDRAM_Init+0xac>)
 8003232:	f000 f87f 	bl	8003334 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 8003236:	490d      	ldr	r1, [pc, #52]	; (800326c <BSP_SDRAM_Init+0xb4>)
 8003238:	480a      	ldr	r0, [pc, #40]	; (8003264 <BSP_SDRAM_Init+0xac>)
 800323a:	f005 fbb0 	bl	800899e <HAL_SDRAM_Init>
 800323e:	4603      	mov	r3, r0
 8003240:	2b00      	cmp	r3, #0
 8003242:	d003      	beq.n	800324c <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8003244:	4b0a      	ldr	r3, [pc, #40]	; (8003270 <BSP_SDRAM_Init+0xb8>)
 8003246:	2201      	movs	r2, #1
 8003248:	701a      	strb	r2, [r3, #0]
 800324a:	e002      	b.n	8003252 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 800324c:	4b08      	ldr	r3, [pc, #32]	; (8003270 <BSP_SDRAM_Init+0xb8>)
 800324e:	2200      	movs	r2, #0
 8003250:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8003252:	f240 506a 	movw	r0, #1386	; 0x56a
 8003256:	f000 f80d 	bl	8003274 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 800325a:	4b05      	ldr	r3, [pc, #20]	; (8003270 <BSP_SDRAM_Init+0xb8>)
 800325c:	781b      	ldrb	r3, [r3, #0]
}
 800325e:	4618      	mov	r0, r3
 8003260:	bd80      	pop	{r7, pc}
 8003262:	bf00      	nop
 8003264:	20000804 	.word	0x20000804
 8003268:	a0000140 	.word	0xa0000140
 800326c:	20000838 	.word	0x20000838
 8003270:	20000080 	.word	0x20000080

08003274 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b084      	sub	sp, #16
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 800327c:	2300      	movs	r3, #0
 800327e:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8003280:	4b2a      	ldr	r3, [pc, #168]	; (800332c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003282:	2201      	movs	r2, #1
 8003284:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003286:	4b29      	ldr	r3, [pc, #164]	; (800332c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003288:	2208      	movs	r2, #8
 800328a:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 800328c:	4b27      	ldr	r3, [pc, #156]	; (800332c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800328e:	2201      	movs	r2, #1
 8003290:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8003292:	4b26      	ldr	r3, [pc, #152]	; (800332c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003294:	2200      	movs	r2, #0
 8003296:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8003298:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800329c:	4923      	ldr	r1, [pc, #140]	; (800332c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800329e:	4824      	ldr	r0, [pc, #144]	; (8003330 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80032a0:	f005 fbbb 	bl	8008a1a <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 80032a4:	2001      	movs	r0, #1
 80032a6:	f000 f993 	bl	80035d0 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 80032aa:	4b20      	ldr	r3, [pc, #128]	; (800332c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80032ac:	2202      	movs	r2, #2
 80032ae:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80032b0:	4b1e      	ldr	r3, [pc, #120]	; (800332c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80032b2:	2208      	movs	r2, #8
 80032b4:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 80032b6:	4b1d      	ldr	r3, [pc, #116]	; (800332c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80032b8:	2201      	movs	r2, #1
 80032ba:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 80032bc:	4b1b      	ldr	r3, [pc, #108]	; (800332c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80032be:	2200      	movs	r2, #0
 80032c0:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 80032c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80032c6:	4919      	ldr	r1, [pc, #100]	; (800332c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80032c8:	4819      	ldr	r0, [pc, #100]	; (8003330 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80032ca:	f005 fba6 	bl	8008a1a <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80032ce:	4b17      	ldr	r3, [pc, #92]	; (800332c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80032d0:	2203      	movs	r2, #3
 80032d2:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80032d4:	4b15      	ldr	r3, [pc, #84]	; (800332c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80032d6:	2208      	movs	r2, #8
 80032d8:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 80032da:	4b14      	ldr	r3, [pc, #80]	; (800332c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80032dc:	2204      	movs	r2, #4
 80032de:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 80032e0:	4b12      	ldr	r3, [pc, #72]	; (800332c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80032e2:	2200      	movs	r2, #0
 80032e4:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80032e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80032ea:	4910      	ldr	r1, [pc, #64]	; (800332c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80032ec:	4810      	ldr	r0, [pc, #64]	; (8003330 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80032ee:	f005 fb94 	bl	8008a1a <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 80032f2:	f44f 730c 	mov.w	r3, #560	; 0x230
 80032f6:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 80032f8:	4b0c      	ldr	r3, [pc, #48]	; (800332c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80032fa:	2204      	movs	r2, #4
 80032fc:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80032fe:	4b0b      	ldr	r3, [pc, #44]	; (800332c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003300:	2208      	movs	r2, #8
 8003302:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8003304:	4b09      	ldr	r3, [pc, #36]	; (800332c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003306:	2201      	movs	r2, #1
 8003308:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	4a07      	ldr	r2, [pc, #28]	; (800332c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800330e:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8003310:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003314:	4905      	ldr	r1, [pc, #20]	; (800332c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003316:	4806      	ldr	r0, [pc, #24]	; (8003330 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003318:	f005 fb7f 	bl	8008a1a <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 800331c:	6879      	ldr	r1, [r7, #4]
 800331e:	4804      	ldr	r0, [pc, #16]	; (8003330 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003320:	f005 fbb0 	bl	8008a84 <HAL_SDRAM_ProgramRefreshRate>
}
 8003324:	bf00      	nop
 8003326:	3710      	adds	r7, #16
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}
 800332c:	20000854 	.word	0x20000854
 8003330:	20000804 	.word	0x20000804

08003334 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b090      	sub	sp, #64	; 0x40
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
 800333c:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2b00      	cmp	r3, #0
 8003342:	f000 80ec 	beq.w	800351e <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8003346:	2300      	movs	r3, #0
 8003348:	62bb      	str	r3, [r7, #40]	; 0x28
 800334a:	4b77      	ldr	r3, [pc, #476]	; (8003528 <BSP_SDRAM_MspInit+0x1f4>)
 800334c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800334e:	4a76      	ldr	r2, [pc, #472]	; (8003528 <BSP_SDRAM_MspInit+0x1f4>)
 8003350:	f043 0301 	orr.w	r3, r3, #1
 8003354:	6393      	str	r3, [r2, #56]	; 0x38
 8003356:	4b74      	ldr	r3, [pc, #464]	; (8003528 <BSP_SDRAM_MspInit+0x1f4>)
 8003358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800335a:	f003 0301 	and.w	r3, r3, #1
 800335e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003360:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8003362:	2300      	movs	r3, #0
 8003364:	627b      	str	r3, [r7, #36]	; 0x24
 8003366:	4b70      	ldr	r3, [pc, #448]	; (8003528 <BSP_SDRAM_MspInit+0x1f4>)
 8003368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800336a:	4a6f      	ldr	r2, [pc, #444]	; (8003528 <BSP_SDRAM_MspInit+0x1f4>)
 800336c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003370:	6313      	str	r3, [r2, #48]	; 0x30
 8003372:	4b6d      	ldr	r3, [pc, #436]	; (8003528 <BSP_SDRAM_MspInit+0x1f4>)
 8003374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003376:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800337a:	627b      	str	r3, [r7, #36]	; 0x24
 800337c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800337e:	2300      	movs	r3, #0
 8003380:	623b      	str	r3, [r7, #32]
 8003382:	4b69      	ldr	r3, [pc, #420]	; (8003528 <BSP_SDRAM_MspInit+0x1f4>)
 8003384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003386:	4a68      	ldr	r2, [pc, #416]	; (8003528 <BSP_SDRAM_MspInit+0x1f4>)
 8003388:	f043 0302 	orr.w	r3, r3, #2
 800338c:	6313      	str	r3, [r2, #48]	; 0x30
 800338e:	4b66      	ldr	r3, [pc, #408]	; (8003528 <BSP_SDRAM_MspInit+0x1f4>)
 8003390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003392:	f003 0302 	and.w	r3, r3, #2
 8003396:	623b      	str	r3, [r7, #32]
 8003398:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800339a:	2300      	movs	r3, #0
 800339c:	61fb      	str	r3, [r7, #28]
 800339e:	4b62      	ldr	r3, [pc, #392]	; (8003528 <BSP_SDRAM_MspInit+0x1f4>)
 80033a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a2:	4a61      	ldr	r2, [pc, #388]	; (8003528 <BSP_SDRAM_MspInit+0x1f4>)
 80033a4:	f043 0304 	orr.w	r3, r3, #4
 80033a8:	6313      	str	r3, [r2, #48]	; 0x30
 80033aa:	4b5f      	ldr	r3, [pc, #380]	; (8003528 <BSP_SDRAM_MspInit+0x1f4>)
 80033ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ae:	f003 0304 	and.w	r3, r3, #4
 80033b2:	61fb      	str	r3, [r7, #28]
 80033b4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80033b6:	2300      	movs	r3, #0
 80033b8:	61bb      	str	r3, [r7, #24]
 80033ba:	4b5b      	ldr	r3, [pc, #364]	; (8003528 <BSP_SDRAM_MspInit+0x1f4>)
 80033bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033be:	4a5a      	ldr	r2, [pc, #360]	; (8003528 <BSP_SDRAM_MspInit+0x1f4>)
 80033c0:	f043 0308 	orr.w	r3, r3, #8
 80033c4:	6313      	str	r3, [r2, #48]	; 0x30
 80033c6:	4b58      	ldr	r3, [pc, #352]	; (8003528 <BSP_SDRAM_MspInit+0x1f4>)
 80033c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ca:	f003 0308 	and.w	r3, r3, #8
 80033ce:	61bb      	str	r3, [r7, #24]
 80033d0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80033d2:	2300      	movs	r3, #0
 80033d4:	617b      	str	r3, [r7, #20]
 80033d6:	4b54      	ldr	r3, [pc, #336]	; (8003528 <BSP_SDRAM_MspInit+0x1f4>)
 80033d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033da:	4a53      	ldr	r2, [pc, #332]	; (8003528 <BSP_SDRAM_MspInit+0x1f4>)
 80033dc:	f043 0310 	orr.w	r3, r3, #16
 80033e0:	6313      	str	r3, [r2, #48]	; 0x30
 80033e2:	4b51      	ldr	r3, [pc, #324]	; (8003528 <BSP_SDRAM_MspInit+0x1f4>)
 80033e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e6:	f003 0310 	and.w	r3, r3, #16
 80033ea:	617b      	str	r3, [r7, #20]
 80033ec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80033ee:	2300      	movs	r3, #0
 80033f0:	613b      	str	r3, [r7, #16]
 80033f2:	4b4d      	ldr	r3, [pc, #308]	; (8003528 <BSP_SDRAM_MspInit+0x1f4>)
 80033f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f6:	4a4c      	ldr	r2, [pc, #304]	; (8003528 <BSP_SDRAM_MspInit+0x1f4>)
 80033f8:	f043 0320 	orr.w	r3, r3, #32
 80033fc:	6313      	str	r3, [r2, #48]	; 0x30
 80033fe:	4b4a      	ldr	r3, [pc, #296]	; (8003528 <BSP_SDRAM_MspInit+0x1f4>)
 8003400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003402:	f003 0320 	and.w	r3, r3, #32
 8003406:	613b      	str	r3, [r7, #16]
 8003408:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800340a:	2300      	movs	r3, #0
 800340c:	60fb      	str	r3, [r7, #12]
 800340e:	4b46      	ldr	r3, [pc, #280]	; (8003528 <BSP_SDRAM_MspInit+0x1f4>)
 8003410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003412:	4a45      	ldr	r2, [pc, #276]	; (8003528 <BSP_SDRAM_MspInit+0x1f4>)
 8003414:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003418:	6313      	str	r3, [r2, #48]	; 0x30
 800341a:	4b43      	ldr	r3, [pc, #268]	; (8003528 <BSP_SDRAM_MspInit+0x1f4>)
 800341c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800341e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003422:	60fb      	str	r3, [r7, #12]
 8003424:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 8003426:	2302      	movs	r3, #2
 8003428:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 800342a:	2302      	movs	r3, #2
 800342c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 800342e:	2300      	movs	r3, #0
 8003430:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 8003432:	230c      	movs	r3, #12
 8003434:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 8003436:	2360      	movs	r3, #96	; 0x60
 8003438:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 800343a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800343e:	4619      	mov	r1, r3
 8003440:	483a      	ldr	r0, [pc, #232]	; (800352c <BSP_SDRAM_MspInit+0x1f8>)
 8003442:	f000 fb89 	bl	8003b58 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 8003446:	2301      	movs	r3, #1
 8003448:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 800344a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800344e:	4619      	mov	r1, r3
 8003450:	4837      	ldr	r0, [pc, #220]	; (8003530 <BSP_SDRAM_MspInit+0x1fc>)
 8003452:	f000 fb81 	bl	8003b58 <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 8003456:	f24c 7303 	movw	r3, #50947	; 0xc703
 800345a:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 800345c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003460:	4619      	mov	r1, r3
 8003462:	4834      	ldr	r0, [pc, #208]	; (8003534 <BSP_SDRAM_MspInit+0x200>)
 8003464:	f000 fb78 	bl	8003b58 <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 8003468:	f64f 7383 	movw	r3, #65411	; 0xff83
 800346c:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 800346e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003472:	4619      	mov	r1, r3
 8003474:	4830      	ldr	r0, [pc, #192]	; (8003538 <BSP_SDRAM_MspInit+0x204>)
 8003476:	f000 fb6f 	bl	8003b58 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 800347a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800347e:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8003480:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003484:	4619      	mov	r1, r3
 8003486:	482d      	ldr	r0, [pc, #180]	; (800353c <BSP_SDRAM_MspInit+0x208>)
 8003488:	f000 fb66 	bl	8003b58 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 800348c:	f248 1333 	movw	r3, #33075	; 0x8133
 8003490:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8003492:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003496:	4619      	mov	r1, r3
 8003498:	4829      	ldr	r0, [pc, #164]	; (8003540 <BSP_SDRAM_MspInit+0x20c>)
 800349a:	f000 fb5d 	bl	8003b58 <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 800349e:	4b29      	ldr	r3, [pc, #164]	; (8003544 <BSP_SDRAM_MspInit+0x210>)
 80034a0:	2200      	movs	r2, #0
 80034a2:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 80034a4:	4b27      	ldr	r3, [pc, #156]	; (8003544 <BSP_SDRAM_MspInit+0x210>)
 80034a6:	2280      	movs	r2, #128	; 0x80
 80034a8:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 80034aa:	4b26      	ldr	r3, [pc, #152]	; (8003544 <BSP_SDRAM_MspInit+0x210>)
 80034ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034b0:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 80034b2:	4b24      	ldr	r3, [pc, #144]	; (8003544 <BSP_SDRAM_MspInit+0x210>)
 80034b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80034b8:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80034ba:	4b22      	ldr	r3, [pc, #136]	; (8003544 <BSP_SDRAM_MspInit+0x210>)
 80034bc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80034c0:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80034c2:	4b20      	ldr	r3, [pc, #128]	; (8003544 <BSP_SDRAM_MspInit+0x210>)
 80034c4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80034c8:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 80034ca:	4b1e      	ldr	r3, [pc, #120]	; (8003544 <BSP_SDRAM_MspInit+0x210>)
 80034cc:	2200      	movs	r2, #0
 80034ce:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 80034d0:	4b1c      	ldr	r3, [pc, #112]	; (8003544 <BSP_SDRAM_MspInit+0x210>)
 80034d2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80034d6:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 80034d8:	4b1a      	ldr	r3, [pc, #104]	; (8003544 <BSP_SDRAM_MspInit+0x210>)
 80034da:	2200      	movs	r2, #0
 80034dc:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80034de:	4b19      	ldr	r3, [pc, #100]	; (8003544 <BSP_SDRAM_MspInit+0x210>)
 80034e0:	2203      	movs	r2, #3
 80034e2:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 80034e4:	4b17      	ldr	r3, [pc, #92]	; (8003544 <BSP_SDRAM_MspInit+0x210>)
 80034e6:	2200      	movs	r2, #0
 80034e8:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 80034ea:	4b16      	ldr	r3, [pc, #88]	; (8003544 <BSP_SDRAM_MspInit+0x210>)
 80034ec:	2200      	movs	r2, #0
 80034ee:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 80034f0:	4b14      	ldr	r3, [pc, #80]	; (8003544 <BSP_SDRAM_MspInit+0x210>)
 80034f2:	4a15      	ldr	r2, [pc, #84]	; (8003548 <BSP_SDRAM_MspInit+0x214>)
 80034f4:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	4a12      	ldr	r2, [pc, #72]	; (8003544 <BSP_SDRAM_MspInit+0x210>)
 80034fa:	631a      	str	r2, [r3, #48]	; 0x30
 80034fc:	4a11      	ldr	r2, [pc, #68]	; (8003544 <BSP_SDRAM_MspInit+0x210>)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 8003502:	4810      	ldr	r0, [pc, #64]	; (8003544 <BSP_SDRAM_MspInit+0x210>)
 8003504:	f000 fa18 	bl	8003938 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 8003508:	480e      	ldr	r0, [pc, #56]	; (8003544 <BSP_SDRAM_MspInit+0x210>)
 800350a:	f000 f967 	bl	80037dc <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 800350e:	2200      	movs	r2, #0
 8003510:	210f      	movs	r1, #15
 8003512:	2038      	movs	r0, #56	; 0x38
 8003514:	f000 f938 	bl	8003788 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8003518:	2038      	movs	r0, #56	; 0x38
 800351a:	f000 f951 	bl	80037c0 <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 800351e:	bf00      	nop
 8003520:	3740      	adds	r7, #64	; 0x40
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}
 8003526:	bf00      	nop
 8003528:	40023800 	.word	0x40023800
 800352c:	40020400 	.word	0x40020400
 8003530:	40020800 	.word	0x40020800
 8003534:	40020c00 	.word	0x40020c00
 8003538:	40021000 	.word	0x40021000
 800353c:	40021400 	.word	0x40021400
 8003540:	40021800 	.word	0x40021800
 8003544:	20000864 	.word	0x20000864
 8003548:	40026410 	.word	0x40026410

0800354c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003550:	4b0e      	ldr	r3, [pc, #56]	; (800358c <HAL_Init+0x40>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a0d      	ldr	r2, [pc, #52]	; (800358c <HAL_Init+0x40>)
 8003556:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800355a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800355c:	4b0b      	ldr	r3, [pc, #44]	; (800358c <HAL_Init+0x40>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a0a      	ldr	r2, [pc, #40]	; (800358c <HAL_Init+0x40>)
 8003562:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003566:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003568:	4b08      	ldr	r3, [pc, #32]	; (800358c <HAL_Init+0x40>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a07      	ldr	r2, [pc, #28]	; (800358c <HAL_Init+0x40>)
 800356e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003572:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003574:	2003      	movs	r0, #3
 8003576:	f000 f8fc 	bl	8003772 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800357a:	200f      	movs	r0, #15
 800357c:	f7fd ff86 	bl	800148c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003580:	f7fd ff58 	bl	8001434 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003584:	2300      	movs	r3, #0
}
 8003586:	4618      	mov	r0, r3
 8003588:	bd80      	pop	{r7, pc}
 800358a:	bf00      	nop
 800358c:	40023c00 	.word	0x40023c00

08003590 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003590:	b480      	push	{r7}
 8003592:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003594:	4b06      	ldr	r3, [pc, #24]	; (80035b0 <HAL_IncTick+0x20>)
 8003596:	781b      	ldrb	r3, [r3, #0]
 8003598:	461a      	mov	r2, r3
 800359a:	4b06      	ldr	r3, [pc, #24]	; (80035b4 <HAL_IncTick+0x24>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4413      	add	r3, r2
 80035a0:	4a04      	ldr	r2, [pc, #16]	; (80035b4 <HAL_IncTick+0x24>)
 80035a2:	6013      	str	r3, [r2, #0]
}
 80035a4:	bf00      	nop
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr
 80035ae:	bf00      	nop
 80035b0:	20000088 	.word	0x20000088
 80035b4:	200008c4 	.word	0x200008c4

080035b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80035b8:	b480      	push	{r7}
 80035ba:	af00      	add	r7, sp, #0
  return uwTick;
 80035bc:	4b03      	ldr	r3, [pc, #12]	; (80035cc <HAL_GetTick+0x14>)
 80035be:	681b      	ldr	r3, [r3, #0]
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr
 80035ca:	bf00      	nop
 80035cc:	200008c4 	.word	0x200008c4

080035d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b084      	sub	sp, #16
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80035d8:	f7ff ffee 	bl	80035b8 <HAL_GetTick>
 80035dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035e8:	d005      	beq.n	80035f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80035ea:	4b0a      	ldr	r3, [pc, #40]	; (8003614 <HAL_Delay+0x44>)
 80035ec:	781b      	ldrb	r3, [r3, #0]
 80035ee:	461a      	mov	r2, r3
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	4413      	add	r3, r2
 80035f4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80035f6:	bf00      	nop
 80035f8:	f7ff ffde 	bl	80035b8 <HAL_GetTick>
 80035fc:	4602      	mov	r2, r0
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	68fa      	ldr	r2, [r7, #12]
 8003604:	429a      	cmp	r2, r3
 8003606:	d8f7      	bhi.n	80035f8 <HAL_Delay+0x28>
  {
  }
}
 8003608:	bf00      	nop
 800360a:	bf00      	nop
 800360c:	3710      	adds	r7, #16
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}
 8003612:	bf00      	nop
 8003614:	20000088 	.word	0x20000088

08003618 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003618:	b480      	push	{r7}
 800361a:	b085      	sub	sp, #20
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	f003 0307 	and.w	r3, r3, #7
 8003626:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003628:	4b0c      	ldr	r3, [pc, #48]	; (800365c <__NVIC_SetPriorityGrouping+0x44>)
 800362a:	68db      	ldr	r3, [r3, #12]
 800362c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800362e:	68ba      	ldr	r2, [r7, #8]
 8003630:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003634:	4013      	ands	r3, r2
 8003636:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003640:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003644:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003648:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800364a:	4a04      	ldr	r2, [pc, #16]	; (800365c <__NVIC_SetPriorityGrouping+0x44>)
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	60d3      	str	r3, [r2, #12]
}
 8003650:	bf00      	nop
 8003652:	3714      	adds	r7, #20
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr
 800365c:	e000ed00 	.word	0xe000ed00

08003660 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003660:	b480      	push	{r7}
 8003662:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003664:	4b04      	ldr	r3, [pc, #16]	; (8003678 <__NVIC_GetPriorityGrouping+0x18>)
 8003666:	68db      	ldr	r3, [r3, #12]
 8003668:	0a1b      	lsrs	r3, r3, #8
 800366a:	f003 0307 	and.w	r3, r3, #7
}
 800366e:	4618      	mov	r0, r3
 8003670:	46bd      	mov	sp, r7
 8003672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003676:	4770      	bx	lr
 8003678:	e000ed00 	.word	0xe000ed00

0800367c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800367c:	b480      	push	{r7}
 800367e:	b083      	sub	sp, #12
 8003680:	af00      	add	r7, sp, #0
 8003682:	4603      	mov	r3, r0
 8003684:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800368a:	2b00      	cmp	r3, #0
 800368c:	db0b      	blt.n	80036a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800368e:	79fb      	ldrb	r3, [r7, #7]
 8003690:	f003 021f 	and.w	r2, r3, #31
 8003694:	4907      	ldr	r1, [pc, #28]	; (80036b4 <__NVIC_EnableIRQ+0x38>)
 8003696:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800369a:	095b      	lsrs	r3, r3, #5
 800369c:	2001      	movs	r0, #1
 800369e:	fa00 f202 	lsl.w	r2, r0, r2
 80036a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80036a6:	bf00      	nop
 80036a8:	370c      	adds	r7, #12
 80036aa:	46bd      	mov	sp, r7
 80036ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b0:	4770      	bx	lr
 80036b2:	bf00      	nop
 80036b4:	e000e100 	.word	0xe000e100

080036b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b083      	sub	sp, #12
 80036bc:	af00      	add	r7, sp, #0
 80036be:	4603      	mov	r3, r0
 80036c0:	6039      	str	r1, [r7, #0]
 80036c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	db0a      	blt.n	80036e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	b2da      	uxtb	r2, r3
 80036d0:	490c      	ldr	r1, [pc, #48]	; (8003704 <__NVIC_SetPriority+0x4c>)
 80036d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036d6:	0112      	lsls	r2, r2, #4
 80036d8:	b2d2      	uxtb	r2, r2
 80036da:	440b      	add	r3, r1
 80036dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80036e0:	e00a      	b.n	80036f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	b2da      	uxtb	r2, r3
 80036e6:	4908      	ldr	r1, [pc, #32]	; (8003708 <__NVIC_SetPriority+0x50>)
 80036e8:	79fb      	ldrb	r3, [r7, #7]
 80036ea:	f003 030f 	and.w	r3, r3, #15
 80036ee:	3b04      	subs	r3, #4
 80036f0:	0112      	lsls	r2, r2, #4
 80036f2:	b2d2      	uxtb	r2, r2
 80036f4:	440b      	add	r3, r1
 80036f6:	761a      	strb	r2, [r3, #24]
}
 80036f8:	bf00      	nop
 80036fa:	370c      	adds	r7, #12
 80036fc:	46bd      	mov	sp, r7
 80036fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003702:	4770      	bx	lr
 8003704:	e000e100 	.word	0xe000e100
 8003708:	e000ed00 	.word	0xe000ed00

0800370c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800370c:	b480      	push	{r7}
 800370e:	b089      	sub	sp, #36	; 0x24
 8003710:	af00      	add	r7, sp, #0
 8003712:	60f8      	str	r0, [r7, #12]
 8003714:	60b9      	str	r1, [r7, #8]
 8003716:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	f003 0307 	and.w	r3, r3, #7
 800371e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003720:	69fb      	ldr	r3, [r7, #28]
 8003722:	f1c3 0307 	rsb	r3, r3, #7
 8003726:	2b04      	cmp	r3, #4
 8003728:	bf28      	it	cs
 800372a:	2304      	movcs	r3, #4
 800372c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800372e:	69fb      	ldr	r3, [r7, #28]
 8003730:	3304      	adds	r3, #4
 8003732:	2b06      	cmp	r3, #6
 8003734:	d902      	bls.n	800373c <NVIC_EncodePriority+0x30>
 8003736:	69fb      	ldr	r3, [r7, #28]
 8003738:	3b03      	subs	r3, #3
 800373a:	e000      	b.n	800373e <NVIC_EncodePriority+0x32>
 800373c:	2300      	movs	r3, #0
 800373e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003740:	f04f 32ff 	mov.w	r2, #4294967295
 8003744:	69bb      	ldr	r3, [r7, #24]
 8003746:	fa02 f303 	lsl.w	r3, r2, r3
 800374a:	43da      	mvns	r2, r3
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	401a      	ands	r2, r3
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003754:	f04f 31ff 	mov.w	r1, #4294967295
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	fa01 f303 	lsl.w	r3, r1, r3
 800375e:	43d9      	mvns	r1, r3
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003764:	4313      	orrs	r3, r2
         );
}
 8003766:	4618      	mov	r0, r3
 8003768:	3724      	adds	r7, #36	; 0x24
 800376a:	46bd      	mov	sp, r7
 800376c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003770:	4770      	bx	lr

08003772 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003772:	b580      	push	{r7, lr}
 8003774:	b082      	sub	sp, #8
 8003776:	af00      	add	r7, sp, #0
 8003778:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f7ff ff4c 	bl	8003618 <__NVIC_SetPriorityGrouping>
}
 8003780:	bf00      	nop
 8003782:	3708      	adds	r7, #8
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}

08003788 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003788:	b580      	push	{r7, lr}
 800378a:	b086      	sub	sp, #24
 800378c:	af00      	add	r7, sp, #0
 800378e:	4603      	mov	r3, r0
 8003790:	60b9      	str	r1, [r7, #8]
 8003792:	607a      	str	r2, [r7, #4]
 8003794:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003796:	2300      	movs	r3, #0
 8003798:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800379a:	f7ff ff61 	bl	8003660 <__NVIC_GetPriorityGrouping>
 800379e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80037a0:	687a      	ldr	r2, [r7, #4]
 80037a2:	68b9      	ldr	r1, [r7, #8]
 80037a4:	6978      	ldr	r0, [r7, #20]
 80037a6:	f7ff ffb1 	bl	800370c <NVIC_EncodePriority>
 80037aa:	4602      	mov	r2, r0
 80037ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037b0:	4611      	mov	r1, r2
 80037b2:	4618      	mov	r0, r3
 80037b4:	f7ff ff80 	bl	80036b8 <__NVIC_SetPriority>
}
 80037b8:	bf00      	nop
 80037ba:	3718      	adds	r7, #24
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}

080037c0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b082      	sub	sp, #8
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	4603      	mov	r3, r0
 80037c8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80037ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037ce:	4618      	mov	r0, r3
 80037d0:	f7ff ff54 	bl	800367c <__NVIC_EnableIRQ>
}
 80037d4:	bf00      	nop
 80037d6:	3708      	adds	r7, #8
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}

080037dc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b086      	sub	sp, #24
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80037e4:	2300      	movs	r3, #0
 80037e6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80037e8:	f7ff fee6 	bl	80035b8 <HAL_GetTick>
 80037ec:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d101      	bne.n	80037f8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	e099      	b.n	800392c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2202      	movs	r2, #2
 80037fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2200      	movs	r2, #0
 8003804:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f022 0201 	bic.w	r2, r2, #1
 8003816:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003818:	e00f      	b.n	800383a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800381a:	f7ff fecd 	bl	80035b8 <HAL_GetTick>
 800381e:	4602      	mov	r2, r0
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	1ad3      	subs	r3, r2, r3
 8003824:	2b05      	cmp	r3, #5
 8003826:	d908      	bls.n	800383a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2220      	movs	r2, #32
 800382c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2203      	movs	r2, #3
 8003832:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003836:	2303      	movs	r3, #3
 8003838:	e078      	b.n	800392c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f003 0301 	and.w	r3, r3, #1
 8003844:	2b00      	cmp	r3, #0
 8003846:	d1e8      	bne.n	800381a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003850:	697a      	ldr	r2, [r7, #20]
 8003852:	4b38      	ldr	r3, [pc, #224]	; (8003934 <HAL_DMA_Init+0x158>)
 8003854:	4013      	ands	r3, r2
 8003856:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	685a      	ldr	r2, [r3, #4]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003866:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	691b      	ldr	r3, [r3, #16]
 800386c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003872:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	699b      	ldr	r3, [r3, #24]
 8003878:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800387e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6a1b      	ldr	r3, [r3, #32]
 8003884:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003886:	697a      	ldr	r2, [r7, #20]
 8003888:	4313      	orrs	r3, r2
 800388a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003890:	2b04      	cmp	r3, #4
 8003892:	d107      	bne.n	80038a4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800389c:	4313      	orrs	r3, r2
 800389e:	697a      	ldr	r2, [r7, #20]
 80038a0:	4313      	orrs	r3, r2
 80038a2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	697a      	ldr	r2, [r7, #20]
 80038aa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	695b      	ldr	r3, [r3, #20]
 80038b2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	f023 0307 	bic.w	r3, r3, #7
 80038ba:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c0:	697a      	ldr	r2, [r7, #20]
 80038c2:	4313      	orrs	r3, r2
 80038c4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ca:	2b04      	cmp	r3, #4
 80038cc:	d117      	bne.n	80038fe <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038d2:	697a      	ldr	r2, [r7, #20]
 80038d4:	4313      	orrs	r3, r2
 80038d6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d00e      	beq.n	80038fe <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80038e0:	6878      	ldr	r0, [r7, #4]
 80038e2:	f000 f8bd 	bl	8003a60 <DMA_CheckFifoParam>
 80038e6:	4603      	mov	r3, r0
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d008      	beq.n	80038fe <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2240      	movs	r2, #64	; 0x40
 80038f0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2201      	movs	r2, #1
 80038f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80038fa:	2301      	movs	r3, #1
 80038fc:	e016      	b.n	800392c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	697a      	ldr	r2, [r7, #20]
 8003904:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f000 f874 	bl	80039f4 <DMA_CalcBaseAndBitshift>
 800390c:	4603      	mov	r3, r0
 800390e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003914:	223f      	movs	r2, #63	; 0x3f
 8003916:	409a      	lsls	r2, r3
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2200      	movs	r2, #0
 8003920:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2201      	movs	r2, #1
 8003926:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800392a:	2300      	movs	r3, #0
}
 800392c:	4618      	mov	r0, r3
 800392e:	3718      	adds	r7, #24
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}
 8003934:	f010803f 	.word	0xf010803f

08003938 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b084      	sub	sp, #16
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d101      	bne.n	800394a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	e050      	b.n	80039ec <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003950:	b2db      	uxtb	r3, r3
 8003952:	2b02      	cmp	r3, #2
 8003954:	d101      	bne.n	800395a <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8003956:	2302      	movs	r3, #2
 8003958:	e048      	b.n	80039ec <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f022 0201 	bic.w	r2, r2, #1
 8003968:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	2200      	movs	r2, #0
 8003970:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	2200      	movs	r2, #0
 8003978:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	2200      	movs	r2, #0
 8003980:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	2200      	movs	r2, #0
 8003988:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	2200      	movs	r2, #0
 8003990:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	2221      	movs	r2, #33	; 0x21
 8003998:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f000 f82a 	bl	80039f4 <DMA_CalcBaseAndBitshift>
 80039a0:	4603      	mov	r3, r0
 80039a2:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2200      	movs	r2, #0
 80039a8:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2200      	movs	r2, #0
 80039ae:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2200      	movs	r2, #0
 80039b4:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2200      	movs	r2, #0
 80039ba:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2200      	movs	r2, #0
 80039c0:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2200      	movs	r2, #0
 80039c6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039cc:	223f      	movs	r2, #63	; 0x3f
 80039ce:	409a      	lsls	r2, r3
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2200      	movs	r2, #0
 80039d8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2200      	movs	r2, #0
 80039de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2200      	movs	r2, #0
 80039e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80039ea:	2300      	movs	r3, #0
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	3710      	adds	r7, #16
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}

080039f4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b085      	sub	sp, #20
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	b2db      	uxtb	r3, r3
 8003a02:	3b10      	subs	r3, #16
 8003a04:	4a14      	ldr	r2, [pc, #80]	; (8003a58 <DMA_CalcBaseAndBitshift+0x64>)
 8003a06:	fba2 2303 	umull	r2, r3, r2, r3
 8003a0a:	091b      	lsrs	r3, r3, #4
 8003a0c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003a0e:	4a13      	ldr	r2, [pc, #76]	; (8003a5c <DMA_CalcBaseAndBitshift+0x68>)
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	4413      	add	r3, r2
 8003a14:	781b      	ldrb	r3, [r3, #0]
 8003a16:	461a      	mov	r2, r3
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	2b03      	cmp	r3, #3
 8003a20:	d909      	bls.n	8003a36 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003a2a:	f023 0303 	bic.w	r3, r3, #3
 8003a2e:	1d1a      	adds	r2, r3, #4
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	659a      	str	r2, [r3, #88]	; 0x58
 8003a34:	e007      	b.n	8003a46 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003a3e:	f023 0303 	bic.w	r3, r3, #3
 8003a42:	687a      	ldr	r2, [r7, #4]
 8003a44:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3714      	adds	r7, #20
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a54:	4770      	bx	lr
 8003a56:	bf00      	nop
 8003a58:	aaaaaaab 	.word	0xaaaaaaab
 8003a5c:	080116b8 	.word	0x080116b8

08003a60 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b085      	sub	sp, #20
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a70:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	699b      	ldr	r3, [r3, #24]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d11f      	bne.n	8003aba <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	2b03      	cmp	r3, #3
 8003a7e:	d856      	bhi.n	8003b2e <DMA_CheckFifoParam+0xce>
 8003a80:	a201      	add	r2, pc, #4	; (adr r2, 8003a88 <DMA_CheckFifoParam+0x28>)
 8003a82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a86:	bf00      	nop
 8003a88:	08003a99 	.word	0x08003a99
 8003a8c:	08003aab 	.word	0x08003aab
 8003a90:	08003a99 	.word	0x08003a99
 8003a94:	08003b2f 	.word	0x08003b2f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a9c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d046      	beq.n	8003b32 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003aa8:	e043      	b.n	8003b32 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aae:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003ab2:	d140      	bne.n	8003b36 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ab8:	e03d      	b.n	8003b36 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	699b      	ldr	r3, [r3, #24]
 8003abe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ac2:	d121      	bne.n	8003b08 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	2b03      	cmp	r3, #3
 8003ac8:	d837      	bhi.n	8003b3a <DMA_CheckFifoParam+0xda>
 8003aca:	a201      	add	r2, pc, #4	; (adr r2, 8003ad0 <DMA_CheckFifoParam+0x70>)
 8003acc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ad0:	08003ae1 	.word	0x08003ae1
 8003ad4:	08003ae7 	.word	0x08003ae7
 8003ad8:	08003ae1 	.word	0x08003ae1
 8003adc:	08003af9 	.word	0x08003af9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	73fb      	strb	r3, [r7, #15]
      break;
 8003ae4:	e030      	b.n	8003b48 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d025      	beq.n	8003b3e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003af6:	e022      	b.n	8003b3e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003afc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003b00:	d11f      	bne.n	8003b42 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003b06:	e01c      	b.n	8003b42 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	2b02      	cmp	r3, #2
 8003b0c:	d903      	bls.n	8003b16 <DMA_CheckFifoParam+0xb6>
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	2b03      	cmp	r3, #3
 8003b12:	d003      	beq.n	8003b1c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003b14:	e018      	b.n	8003b48 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	73fb      	strb	r3, [r7, #15]
      break;
 8003b1a:	e015      	b.n	8003b48 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b20:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d00e      	beq.n	8003b46 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	73fb      	strb	r3, [r7, #15]
      break;
 8003b2c:	e00b      	b.n	8003b46 <DMA_CheckFifoParam+0xe6>
      break;
 8003b2e:	bf00      	nop
 8003b30:	e00a      	b.n	8003b48 <DMA_CheckFifoParam+0xe8>
      break;
 8003b32:	bf00      	nop
 8003b34:	e008      	b.n	8003b48 <DMA_CheckFifoParam+0xe8>
      break;
 8003b36:	bf00      	nop
 8003b38:	e006      	b.n	8003b48 <DMA_CheckFifoParam+0xe8>
      break;
 8003b3a:	bf00      	nop
 8003b3c:	e004      	b.n	8003b48 <DMA_CheckFifoParam+0xe8>
      break;
 8003b3e:	bf00      	nop
 8003b40:	e002      	b.n	8003b48 <DMA_CheckFifoParam+0xe8>
      break;   
 8003b42:	bf00      	nop
 8003b44:	e000      	b.n	8003b48 <DMA_CheckFifoParam+0xe8>
      break;
 8003b46:	bf00      	nop
    }
  } 
  
  return status; 
 8003b48:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	3714      	adds	r7, #20
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b54:	4770      	bx	lr
 8003b56:	bf00      	nop

08003b58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b089      	sub	sp, #36	; 0x24
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
 8003b60:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003b62:	2300      	movs	r3, #0
 8003b64:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003b66:	2300      	movs	r3, #0
 8003b68:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b6e:	2300      	movs	r3, #0
 8003b70:	61fb      	str	r3, [r7, #28]
 8003b72:	e177      	b.n	8003e64 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003b74:	2201      	movs	r2, #1
 8003b76:	69fb      	ldr	r3, [r7, #28]
 8003b78:	fa02 f303 	lsl.w	r3, r2, r3
 8003b7c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	697a      	ldr	r2, [r7, #20]
 8003b84:	4013      	ands	r3, r2
 8003b86:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003b88:	693a      	ldr	r2, [r7, #16]
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	f040 8166 	bne.w	8003e5e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	f003 0303 	and.w	r3, r3, #3
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	d005      	beq.n	8003baa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003ba6:	2b02      	cmp	r3, #2
 8003ba8:	d130      	bne.n	8003c0c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003bb0:	69fb      	ldr	r3, [r7, #28]
 8003bb2:	005b      	lsls	r3, r3, #1
 8003bb4:	2203      	movs	r2, #3
 8003bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bba:	43db      	mvns	r3, r3
 8003bbc:	69ba      	ldr	r2, [r7, #24]
 8003bbe:	4013      	ands	r3, r2
 8003bc0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	68da      	ldr	r2, [r3, #12]
 8003bc6:	69fb      	ldr	r3, [r7, #28]
 8003bc8:	005b      	lsls	r3, r3, #1
 8003bca:	fa02 f303 	lsl.w	r3, r2, r3
 8003bce:	69ba      	ldr	r2, [r7, #24]
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	69ba      	ldr	r2, [r7, #24]
 8003bd8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003be0:	2201      	movs	r2, #1
 8003be2:	69fb      	ldr	r3, [r7, #28]
 8003be4:	fa02 f303 	lsl.w	r3, r2, r3
 8003be8:	43db      	mvns	r3, r3
 8003bea:	69ba      	ldr	r2, [r7, #24]
 8003bec:	4013      	ands	r3, r2
 8003bee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	091b      	lsrs	r3, r3, #4
 8003bf6:	f003 0201 	and.w	r2, r3, #1
 8003bfa:	69fb      	ldr	r3, [r7, #28]
 8003bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8003c00:	69ba      	ldr	r2, [r7, #24]
 8003c02:	4313      	orrs	r3, r2
 8003c04:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	69ba      	ldr	r2, [r7, #24]
 8003c0a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	f003 0303 	and.w	r3, r3, #3
 8003c14:	2b03      	cmp	r3, #3
 8003c16:	d017      	beq.n	8003c48 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	68db      	ldr	r3, [r3, #12]
 8003c1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003c1e:	69fb      	ldr	r3, [r7, #28]
 8003c20:	005b      	lsls	r3, r3, #1
 8003c22:	2203      	movs	r2, #3
 8003c24:	fa02 f303 	lsl.w	r3, r2, r3
 8003c28:	43db      	mvns	r3, r3
 8003c2a:	69ba      	ldr	r2, [r7, #24]
 8003c2c:	4013      	ands	r3, r2
 8003c2e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	689a      	ldr	r2, [r3, #8]
 8003c34:	69fb      	ldr	r3, [r7, #28]
 8003c36:	005b      	lsls	r3, r3, #1
 8003c38:	fa02 f303 	lsl.w	r3, r2, r3
 8003c3c:	69ba      	ldr	r2, [r7, #24]
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	69ba      	ldr	r2, [r7, #24]
 8003c46:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	f003 0303 	and.w	r3, r3, #3
 8003c50:	2b02      	cmp	r3, #2
 8003c52:	d123      	bne.n	8003c9c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003c54:	69fb      	ldr	r3, [r7, #28]
 8003c56:	08da      	lsrs	r2, r3, #3
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	3208      	adds	r2, #8
 8003c5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c60:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003c62:	69fb      	ldr	r3, [r7, #28]
 8003c64:	f003 0307 	and.w	r3, r3, #7
 8003c68:	009b      	lsls	r3, r3, #2
 8003c6a:	220f      	movs	r2, #15
 8003c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c70:	43db      	mvns	r3, r3
 8003c72:	69ba      	ldr	r2, [r7, #24]
 8003c74:	4013      	ands	r3, r2
 8003c76:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	691a      	ldr	r2, [r3, #16]
 8003c7c:	69fb      	ldr	r3, [r7, #28]
 8003c7e:	f003 0307 	and.w	r3, r3, #7
 8003c82:	009b      	lsls	r3, r3, #2
 8003c84:	fa02 f303 	lsl.w	r3, r2, r3
 8003c88:	69ba      	ldr	r2, [r7, #24]
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003c8e:	69fb      	ldr	r3, [r7, #28]
 8003c90:	08da      	lsrs	r2, r3, #3
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	3208      	adds	r2, #8
 8003c96:	69b9      	ldr	r1, [r7, #24]
 8003c98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003ca2:	69fb      	ldr	r3, [r7, #28]
 8003ca4:	005b      	lsls	r3, r3, #1
 8003ca6:	2203      	movs	r2, #3
 8003ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cac:	43db      	mvns	r3, r3
 8003cae:	69ba      	ldr	r2, [r7, #24]
 8003cb0:	4013      	ands	r3, r2
 8003cb2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	f003 0203 	and.w	r2, r3, #3
 8003cbc:	69fb      	ldr	r3, [r7, #28]
 8003cbe:	005b      	lsls	r3, r3, #1
 8003cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc4:	69ba      	ldr	r2, [r7, #24]
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	69ba      	ldr	r2, [r7, #24]
 8003cce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	f000 80c0 	beq.w	8003e5e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003cde:	2300      	movs	r3, #0
 8003ce0:	60fb      	str	r3, [r7, #12]
 8003ce2:	4b66      	ldr	r3, [pc, #408]	; (8003e7c <HAL_GPIO_Init+0x324>)
 8003ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ce6:	4a65      	ldr	r2, [pc, #404]	; (8003e7c <HAL_GPIO_Init+0x324>)
 8003ce8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003cec:	6453      	str	r3, [r2, #68]	; 0x44
 8003cee:	4b63      	ldr	r3, [pc, #396]	; (8003e7c <HAL_GPIO_Init+0x324>)
 8003cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cf2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cf6:	60fb      	str	r3, [r7, #12]
 8003cf8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003cfa:	4a61      	ldr	r2, [pc, #388]	; (8003e80 <HAL_GPIO_Init+0x328>)
 8003cfc:	69fb      	ldr	r3, [r7, #28]
 8003cfe:	089b      	lsrs	r3, r3, #2
 8003d00:	3302      	adds	r3, #2
 8003d02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003d08:	69fb      	ldr	r3, [r7, #28]
 8003d0a:	f003 0303 	and.w	r3, r3, #3
 8003d0e:	009b      	lsls	r3, r3, #2
 8003d10:	220f      	movs	r2, #15
 8003d12:	fa02 f303 	lsl.w	r3, r2, r3
 8003d16:	43db      	mvns	r3, r3
 8003d18:	69ba      	ldr	r2, [r7, #24]
 8003d1a:	4013      	ands	r3, r2
 8003d1c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	4a58      	ldr	r2, [pc, #352]	; (8003e84 <HAL_GPIO_Init+0x32c>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d037      	beq.n	8003d96 <HAL_GPIO_Init+0x23e>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	4a57      	ldr	r2, [pc, #348]	; (8003e88 <HAL_GPIO_Init+0x330>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d031      	beq.n	8003d92 <HAL_GPIO_Init+0x23a>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	4a56      	ldr	r2, [pc, #344]	; (8003e8c <HAL_GPIO_Init+0x334>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d02b      	beq.n	8003d8e <HAL_GPIO_Init+0x236>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	4a55      	ldr	r2, [pc, #340]	; (8003e90 <HAL_GPIO_Init+0x338>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d025      	beq.n	8003d8a <HAL_GPIO_Init+0x232>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	4a54      	ldr	r2, [pc, #336]	; (8003e94 <HAL_GPIO_Init+0x33c>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d01f      	beq.n	8003d86 <HAL_GPIO_Init+0x22e>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	4a53      	ldr	r2, [pc, #332]	; (8003e98 <HAL_GPIO_Init+0x340>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d019      	beq.n	8003d82 <HAL_GPIO_Init+0x22a>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	4a52      	ldr	r2, [pc, #328]	; (8003e9c <HAL_GPIO_Init+0x344>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d013      	beq.n	8003d7e <HAL_GPIO_Init+0x226>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	4a51      	ldr	r2, [pc, #324]	; (8003ea0 <HAL_GPIO_Init+0x348>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d00d      	beq.n	8003d7a <HAL_GPIO_Init+0x222>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	4a50      	ldr	r2, [pc, #320]	; (8003ea4 <HAL_GPIO_Init+0x34c>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d007      	beq.n	8003d76 <HAL_GPIO_Init+0x21e>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	4a4f      	ldr	r2, [pc, #316]	; (8003ea8 <HAL_GPIO_Init+0x350>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d101      	bne.n	8003d72 <HAL_GPIO_Init+0x21a>
 8003d6e:	2309      	movs	r3, #9
 8003d70:	e012      	b.n	8003d98 <HAL_GPIO_Init+0x240>
 8003d72:	230a      	movs	r3, #10
 8003d74:	e010      	b.n	8003d98 <HAL_GPIO_Init+0x240>
 8003d76:	2308      	movs	r3, #8
 8003d78:	e00e      	b.n	8003d98 <HAL_GPIO_Init+0x240>
 8003d7a:	2307      	movs	r3, #7
 8003d7c:	e00c      	b.n	8003d98 <HAL_GPIO_Init+0x240>
 8003d7e:	2306      	movs	r3, #6
 8003d80:	e00a      	b.n	8003d98 <HAL_GPIO_Init+0x240>
 8003d82:	2305      	movs	r3, #5
 8003d84:	e008      	b.n	8003d98 <HAL_GPIO_Init+0x240>
 8003d86:	2304      	movs	r3, #4
 8003d88:	e006      	b.n	8003d98 <HAL_GPIO_Init+0x240>
 8003d8a:	2303      	movs	r3, #3
 8003d8c:	e004      	b.n	8003d98 <HAL_GPIO_Init+0x240>
 8003d8e:	2302      	movs	r3, #2
 8003d90:	e002      	b.n	8003d98 <HAL_GPIO_Init+0x240>
 8003d92:	2301      	movs	r3, #1
 8003d94:	e000      	b.n	8003d98 <HAL_GPIO_Init+0x240>
 8003d96:	2300      	movs	r3, #0
 8003d98:	69fa      	ldr	r2, [r7, #28]
 8003d9a:	f002 0203 	and.w	r2, r2, #3
 8003d9e:	0092      	lsls	r2, r2, #2
 8003da0:	4093      	lsls	r3, r2
 8003da2:	69ba      	ldr	r2, [r7, #24]
 8003da4:	4313      	orrs	r3, r2
 8003da6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003da8:	4935      	ldr	r1, [pc, #212]	; (8003e80 <HAL_GPIO_Init+0x328>)
 8003daa:	69fb      	ldr	r3, [r7, #28]
 8003dac:	089b      	lsrs	r3, r3, #2
 8003dae:	3302      	adds	r3, #2
 8003db0:	69ba      	ldr	r2, [r7, #24]
 8003db2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003db6:	4b3d      	ldr	r3, [pc, #244]	; (8003eac <HAL_GPIO_Init+0x354>)
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	43db      	mvns	r3, r3
 8003dc0:	69ba      	ldr	r2, [r7, #24]
 8003dc2:	4013      	ands	r3, r2
 8003dc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d003      	beq.n	8003dda <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003dd2:	69ba      	ldr	r2, [r7, #24]
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003dda:	4a34      	ldr	r2, [pc, #208]	; (8003eac <HAL_GPIO_Init+0x354>)
 8003ddc:	69bb      	ldr	r3, [r7, #24]
 8003dde:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003de0:	4b32      	ldr	r3, [pc, #200]	; (8003eac <HAL_GPIO_Init+0x354>)
 8003de2:	68db      	ldr	r3, [r3, #12]
 8003de4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	43db      	mvns	r3, r3
 8003dea:	69ba      	ldr	r2, [r7, #24]
 8003dec:	4013      	ands	r3, r2
 8003dee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d003      	beq.n	8003e04 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003dfc:	69ba      	ldr	r2, [r7, #24]
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	4313      	orrs	r3, r2
 8003e02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003e04:	4a29      	ldr	r2, [pc, #164]	; (8003eac <HAL_GPIO_Init+0x354>)
 8003e06:	69bb      	ldr	r3, [r7, #24]
 8003e08:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003e0a:	4b28      	ldr	r3, [pc, #160]	; (8003eac <HAL_GPIO_Init+0x354>)
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	43db      	mvns	r3, r3
 8003e14:	69ba      	ldr	r2, [r7, #24]
 8003e16:	4013      	ands	r3, r2
 8003e18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d003      	beq.n	8003e2e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003e26:	69ba      	ldr	r2, [r7, #24]
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003e2e:	4a1f      	ldr	r2, [pc, #124]	; (8003eac <HAL_GPIO_Init+0x354>)
 8003e30:	69bb      	ldr	r3, [r7, #24]
 8003e32:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003e34:	4b1d      	ldr	r3, [pc, #116]	; (8003eac <HAL_GPIO_Init+0x354>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	43db      	mvns	r3, r3
 8003e3e:	69ba      	ldr	r2, [r7, #24]
 8003e40:	4013      	ands	r3, r2
 8003e42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d003      	beq.n	8003e58 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003e50:	69ba      	ldr	r2, [r7, #24]
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	4313      	orrs	r3, r2
 8003e56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003e58:	4a14      	ldr	r2, [pc, #80]	; (8003eac <HAL_GPIO_Init+0x354>)
 8003e5a:	69bb      	ldr	r3, [r7, #24]
 8003e5c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e5e:	69fb      	ldr	r3, [r7, #28]
 8003e60:	3301      	adds	r3, #1
 8003e62:	61fb      	str	r3, [r7, #28]
 8003e64:	69fb      	ldr	r3, [r7, #28]
 8003e66:	2b0f      	cmp	r3, #15
 8003e68:	f67f ae84 	bls.w	8003b74 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003e6c:	bf00      	nop
 8003e6e:	bf00      	nop
 8003e70:	3724      	adds	r7, #36	; 0x24
 8003e72:	46bd      	mov	sp, r7
 8003e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e78:	4770      	bx	lr
 8003e7a:	bf00      	nop
 8003e7c:	40023800 	.word	0x40023800
 8003e80:	40013800 	.word	0x40013800
 8003e84:	40020000 	.word	0x40020000
 8003e88:	40020400 	.word	0x40020400
 8003e8c:	40020800 	.word	0x40020800
 8003e90:	40020c00 	.word	0x40020c00
 8003e94:	40021000 	.word	0x40021000
 8003e98:	40021400 	.word	0x40021400
 8003e9c:	40021800 	.word	0x40021800
 8003ea0:	40021c00 	.word	0x40021c00
 8003ea4:	40022000 	.word	0x40022000
 8003ea8:	40022400 	.word	0x40022400
 8003eac:	40013c00 	.word	0x40013c00

08003eb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b083      	sub	sp, #12
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
 8003eb8:	460b      	mov	r3, r1
 8003eba:	807b      	strh	r3, [r7, #2]
 8003ebc:	4613      	mov	r3, r2
 8003ebe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ec0:	787b      	ldrb	r3, [r7, #1]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d003      	beq.n	8003ece <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003ec6:	887a      	ldrh	r2, [r7, #2]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003ecc:	e003      	b.n	8003ed6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003ece:	887b      	ldrh	r3, [r7, #2]
 8003ed0:	041a      	lsls	r2, r3, #16
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	619a      	str	r2, [r3, #24]
}
 8003ed6:	bf00      	nop
 8003ed8:	370c      	adds	r7, #12
 8003eda:	46bd      	mov	sp, r7
 8003edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee0:	4770      	bx	lr

08003ee2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003ee2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ee4:	b08f      	sub	sp, #60	; 0x3c
 8003ee6:	af0a      	add	r7, sp, #40	; 0x28
 8003ee8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d101      	bne.n	8003ef4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	e10f      	b.n	8004114 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003f00:	b2db      	uxtb	r3, r3
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d106      	bne.n	8003f14 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f00a f952 	bl	800e1b8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2203      	movs	r2, #3
 8003f18:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d102      	bne.n	8003f2e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4618      	mov	r0, r3
 8003f34:	f002 fc8b 	bl	800684e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	603b      	str	r3, [r7, #0]
 8003f3e:	687e      	ldr	r6, [r7, #4]
 8003f40:	466d      	mov	r5, sp
 8003f42:	f106 0410 	add.w	r4, r6, #16
 8003f46:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f48:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f4c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f4e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003f52:	e885 0003 	stmia.w	r5, {r0, r1}
 8003f56:	1d33      	adds	r3, r6, #4
 8003f58:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003f5a:	6838      	ldr	r0, [r7, #0]
 8003f5c:	f002 fb62 	bl	8006624 <USB_CoreInit>
 8003f60:	4603      	mov	r3, r0
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d005      	beq.n	8003f72 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2202      	movs	r2, #2
 8003f6a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e0d0      	b.n	8004114 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	2100      	movs	r1, #0
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f002 fc79 	bl	8006870 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f7e:	2300      	movs	r3, #0
 8003f80:	73fb      	strb	r3, [r7, #15]
 8003f82:	e04a      	b.n	800401a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003f84:	7bfa      	ldrb	r2, [r7, #15]
 8003f86:	6879      	ldr	r1, [r7, #4]
 8003f88:	4613      	mov	r3, r2
 8003f8a:	00db      	lsls	r3, r3, #3
 8003f8c:	4413      	add	r3, r2
 8003f8e:	009b      	lsls	r3, r3, #2
 8003f90:	440b      	add	r3, r1
 8003f92:	333d      	adds	r3, #61	; 0x3d
 8003f94:	2201      	movs	r2, #1
 8003f96:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003f98:	7bfa      	ldrb	r2, [r7, #15]
 8003f9a:	6879      	ldr	r1, [r7, #4]
 8003f9c:	4613      	mov	r3, r2
 8003f9e:	00db      	lsls	r3, r3, #3
 8003fa0:	4413      	add	r3, r2
 8003fa2:	009b      	lsls	r3, r3, #2
 8003fa4:	440b      	add	r3, r1
 8003fa6:	333c      	adds	r3, #60	; 0x3c
 8003fa8:	7bfa      	ldrb	r2, [r7, #15]
 8003faa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003fac:	7bfa      	ldrb	r2, [r7, #15]
 8003fae:	7bfb      	ldrb	r3, [r7, #15]
 8003fb0:	b298      	uxth	r0, r3
 8003fb2:	6879      	ldr	r1, [r7, #4]
 8003fb4:	4613      	mov	r3, r2
 8003fb6:	00db      	lsls	r3, r3, #3
 8003fb8:	4413      	add	r3, r2
 8003fba:	009b      	lsls	r3, r3, #2
 8003fbc:	440b      	add	r3, r1
 8003fbe:	3344      	adds	r3, #68	; 0x44
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003fc4:	7bfa      	ldrb	r2, [r7, #15]
 8003fc6:	6879      	ldr	r1, [r7, #4]
 8003fc8:	4613      	mov	r3, r2
 8003fca:	00db      	lsls	r3, r3, #3
 8003fcc:	4413      	add	r3, r2
 8003fce:	009b      	lsls	r3, r3, #2
 8003fd0:	440b      	add	r3, r1
 8003fd2:	3340      	adds	r3, #64	; 0x40
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003fd8:	7bfa      	ldrb	r2, [r7, #15]
 8003fda:	6879      	ldr	r1, [r7, #4]
 8003fdc:	4613      	mov	r3, r2
 8003fde:	00db      	lsls	r3, r3, #3
 8003fe0:	4413      	add	r3, r2
 8003fe2:	009b      	lsls	r3, r3, #2
 8003fe4:	440b      	add	r3, r1
 8003fe6:	3348      	adds	r3, #72	; 0x48
 8003fe8:	2200      	movs	r2, #0
 8003fea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003fec:	7bfa      	ldrb	r2, [r7, #15]
 8003fee:	6879      	ldr	r1, [r7, #4]
 8003ff0:	4613      	mov	r3, r2
 8003ff2:	00db      	lsls	r3, r3, #3
 8003ff4:	4413      	add	r3, r2
 8003ff6:	009b      	lsls	r3, r3, #2
 8003ff8:	440b      	add	r3, r1
 8003ffa:	334c      	adds	r3, #76	; 0x4c
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004000:	7bfa      	ldrb	r2, [r7, #15]
 8004002:	6879      	ldr	r1, [r7, #4]
 8004004:	4613      	mov	r3, r2
 8004006:	00db      	lsls	r3, r3, #3
 8004008:	4413      	add	r3, r2
 800400a:	009b      	lsls	r3, r3, #2
 800400c:	440b      	add	r3, r1
 800400e:	3354      	adds	r3, #84	; 0x54
 8004010:	2200      	movs	r2, #0
 8004012:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004014:	7bfb      	ldrb	r3, [r7, #15]
 8004016:	3301      	adds	r3, #1
 8004018:	73fb      	strb	r3, [r7, #15]
 800401a:	7bfa      	ldrb	r2, [r7, #15]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	429a      	cmp	r2, r3
 8004022:	d3af      	bcc.n	8003f84 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004024:	2300      	movs	r3, #0
 8004026:	73fb      	strb	r3, [r7, #15]
 8004028:	e044      	b.n	80040b4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800402a:	7bfa      	ldrb	r2, [r7, #15]
 800402c:	6879      	ldr	r1, [r7, #4]
 800402e:	4613      	mov	r3, r2
 8004030:	00db      	lsls	r3, r3, #3
 8004032:	4413      	add	r3, r2
 8004034:	009b      	lsls	r3, r3, #2
 8004036:	440b      	add	r3, r1
 8004038:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800403c:	2200      	movs	r2, #0
 800403e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004040:	7bfa      	ldrb	r2, [r7, #15]
 8004042:	6879      	ldr	r1, [r7, #4]
 8004044:	4613      	mov	r3, r2
 8004046:	00db      	lsls	r3, r3, #3
 8004048:	4413      	add	r3, r2
 800404a:	009b      	lsls	r3, r3, #2
 800404c:	440b      	add	r3, r1
 800404e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8004052:	7bfa      	ldrb	r2, [r7, #15]
 8004054:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004056:	7bfa      	ldrb	r2, [r7, #15]
 8004058:	6879      	ldr	r1, [r7, #4]
 800405a:	4613      	mov	r3, r2
 800405c:	00db      	lsls	r3, r3, #3
 800405e:	4413      	add	r3, r2
 8004060:	009b      	lsls	r3, r3, #2
 8004062:	440b      	add	r3, r1
 8004064:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004068:	2200      	movs	r2, #0
 800406a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800406c:	7bfa      	ldrb	r2, [r7, #15]
 800406e:	6879      	ldr	r1, [r7, #4]
 8004070:	4613      	mov	r3, r2
 8004072:	00db      	lsls	r3, r3, #3
 8004074:	4413      	add	r3, r2
 8004076:	009b      	lsls	r3, r3, #2
 8004078:	440b      	add	r3, r1
 800407a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800407e:	2200      	movs	r2, #0
 8004080:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004082:	7bfa      	ldrb	r2, [r7, #15]
 8004084:	6879      	ldr	r1, [r7, #4]
 8004086:	4613      	mov	r3, r2
 8004088:	00db      	lsls	r3, r3, #3
 800408a:	4413      	add	r3, r2
 800408c:	009b      	lsls	r3, r3, #2
 800408e:	440b      	add	r3, r1
 8004090:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004094:	2200      	movs	r2, #0
 8004096:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004098:	7bfa      	ldrb	r2, [r7, #15]
 800409a:	6879      	ldr	r1, [r7, #4]
 800409c:	4613      	mov	r3, r2
 800409e:	00db      	lsls	r3, r3, #3
 80040a0:	4413      	add	r3, r2
 80040a2:	009b      	lsls	r3, r3, #2
 80040a4:	440b      	add	r3, r1
 80040a6:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80040aa:	2200      	movs	r2, #0
 80040ac:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80040ae:	7bfb      	ldrb	r3, [r7, #15]
 80040b0:	3301      	adds	r3, #1
 80040b2:	73fb      	strb	r3, [r7, #15]
 80040b4:	7bfa      	ldrb	r2, [r7, #15]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	429a      	cmp	r2, r3
 80040bc:	d3b5      	bcc.n	800402a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	603b      	str	r3, [r7, #0]
 80040c4:	687e      	ldr	r6, [r7, #4]
 80040c6:	466d      	mov	r5, sp
 80040c8:	f106 0410 	add.w	r4, r6, #16
 80040cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80040ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80040d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80040d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80040d4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80040d8:	e885 0003 	stmia.w	r5, {r0, r1}
 80040dc:	1d33      	adds	r3, r6, #4
 80040de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80040e0:	6838      	ldr	r0, [r7, #0]
 80040e2:	f002 fc11 	bl	8006908 <USB_DevInit>
 80040e6:	4603      	mov	r3, r0
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d005      	beq.n	80040f8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2202      	movs	r2, #2
 80040f0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	e00d      	b.n	8004114 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2200      	movs	r2, #0
 80040fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2201      	movs	r2, #1
 8004104:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4618      	mov	r0, r3
 800410e:	f003 fd60 	bl	8007bd2 <USB_DevDisconnect>

  return HAL_OK;
 8004112:	2300      	movs	r3, #0
}
 8004114:	4618      	mov	r0, r3
 8004116:	3714      	adds	r7, #20
 8004118:	46bd      	mov	sp, r7
 800411a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800411c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b084      	sub	sp, #16
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004130:	2b01      	cmp	r3, #1
 8004132:	d101      	bne.n	8004138 <HAL_PCD_Start+0x1c>
 8004134:	2302      	movs	r3, #2
 8004136:	e020      	b.n	800417a <HAL_PCD_Start+0x5e>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2201      	movs	r2, #1
 800413c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004144:	2b01      	cmp	r3, #1
 8004146:	d109      	bne.n	800415c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800414c:	2b01      	cmp	r3, #1
 800414e:	d005      	beq.n	800415c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004154:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4618      	mov	r0, r3
 8004162:	f002 fb63 	bl	800682c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4618      	mov	r0, r3
 800416c:	f003 fd10 	bl	8007b90 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2200      	movs	r2, #0
 8004174:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004178:	2300      	movs	r3, #0
}
 800417a:	4618      	mov	r0, r3
 800417c:	3710      	adds	r7, #16
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}

08004182 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004182:	b590      	push	{r4, r7, lr}
 8004184:	b08d      	sub	sp, #52	; 0x34
 8004186:	af00      	add	r7, sp, #0
 8004188:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004190:	6a3b      	ldr	r3, [r7, #32]
 8004192:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4618      	mov	r0, r3
 800419a:	f003 fdce 	bl	8007d3a <USB_GetMode>
 800419e:	4603      	mov	r3, r0
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	f040 848a 	bne.w	8004aba <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4618      	mov	r0, r3
 80041ac:	f003 fd32 	bl	8007c14 <USB_ReadInterrupts>
 80041b0:	4603      	mov	r3, r0
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	f000 8480 	beq.w	8004ab8 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80041b8:	69fb      	ldr	r3, [r7, #28]
 80041ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	0a1b      	lsrs	r3, r3, #8
 80041c2:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4618      	mov	r0, r3
 80041d2:	f003 fd1f 	bl	8007c14 <USB_ReadInterrupts>
 80041d6:	4603      	mov	r3, r0
 80041d8:	f003 0302 	and.w	r3, r3, #2
 80041dc:	2b02      	cmp	r3, #2
 80041de:	d107      	bne.n	80041f0 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	695a      	ldr	r2, [r3, #20]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f002 0202 	and.w	r2, r2, #2
 80041ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4618      	mov	r0, r3
 80041f6:	f003 fd0d 	bl	8007c14 <USB_ReadInterrupts>
 80041fa:	4603      	mov	r3, r0
 80041fc:	f003 0310 	and.w	r3, r3, #16
 8004200:	2b10      	cmp	r3, #16
 8004202:	d161      	bne.n	80042c8 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	699a      	ldr	r2, [r3, #24]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f022 0210 	bic.w	r2, r2, #16
 8004212:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004214:	6a3b      	ldr	r3, [r7, #32]
 8004216:	6a1b      	ldr	r3, [r3, #32]
 8004218:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800421a:	69bb      	ldr	r3, [r7, #24]
 800421c:	f003 020f 	and.w	r2, r3, #15
 8004220:	4613      	mov	r3, r2
 8004222:	00db      	lsls	r3, r3, #3
 8004224:	4413      	add	r3, r2
 8004226:	009b      	lsls	r3, r3, #2
 8004228:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800422c:	687a      	ldr	r2, [r7, #4]
 800422e:	4413      	add	r3, r2
 8004230:	3304      	adds	r3, #4
 8004232:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004234:	69bb      	ldr	r3, [r7, #24]
 8004236:	0c5b      	lsrs	r3, r3, #17
 8004238:	f003 030f 	and.w	r3, r3, #15
 800423c:	2b02      	cmp	r3, #2
 800423e:	d124      	bne.n	800428a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004240:	69ba      	ldr	r2, [r7, #24]
 8004242:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8004246:	4013      	ands	r3, r2
 8004248:	2b00      	cmp	r3, #0
 800424a:	d035      	beq.n	80042b8 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004250:	69bb      	ldr	r3, [r7, #24]
 8004252:	091b      	lsrs	r3, r3, #4
 8004254:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004256:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800425a:	b29b      	uxth	r3, r3
 800425c:	461a      	mov	r2, r3
 800425e:	6a38      	ldr	r0, [r7, #32]
 8004260:	f003 fb44 	bl	80078ec <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	691a      	ldr	r2, [r3, #16]
 8004268:	69bb      	ldr	r3, [r7, #24]
 800426a:	091b      	lsrs	r3, r3, #4
 800426c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004270:	441a      	add	r2, r3
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	6a1a      	ldr	r2, [r3, #32]
 800427a:	69bb      	ldr	r3, [r7, #24]
 800427c:	091b      	lsrs	r3, r3, #4
 800427e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004282:	441a      	add	r2, r3
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	621a      	str	r2, [r3, #32]
 8004288:	e016      	b.n	80042b8 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800428a:	69bb      	ldr	r3, [r7, #24]
 800428c:	0c5b      	lsrs	r3, r3, #17
 800428e:	f003 030f 	and.w	r3, r3, #15
 8004292:	2b06      	cmp	r3, #6
 8004294:	d110      	bne.n	80042b8 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800429c:	2208      	movs	r2, #8
 800429e:	4619      	mov	r1, r3
 80042a0:	6a38      	ldr	r0, [r7, #32]
 80042a2:	f003 fb23 	bl	80078ec <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	6a1a      	ldr	r2, [r3, #32]
 80042aa:	69bb      	ldr	r3, [r7, #24]
 80042ac:	091b      	lsrs	r3, r3, #4
 80042ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80042b2:	441a      	add	r2, r3
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	699a      	ldr	r2, [r3, #24]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f042 0210 	orr.w	r2, r2, #16
 80042c6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4618      	mov	r0, r3
 80042ce:	f003 fca1 	bl	8007c14 <USB_ReadInterrupts>
 80042d2:	4603      	mov	r3, r0
 80042d4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80042d8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80042dc:	f040 80a7 	bne.w	800442e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80042e0:	2300      	movs	r3, #0
 80042e2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4618      	mov	r0, r3
 80042ea:	f003 fca6 	bl	8007c3a <USB_ReadDevAllOutEpInterrupt>
 80042ee:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80042f0:	e099      	b.n	8004426 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80042f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042f4:	f003 0301 	and.w	r3, r3, #1
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	f000 808e 	beq.w	800441a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004304:	b2d2      	uxtb	r2, r2
 8004306:	4611      	mov	r1, r2
 8004308:	4618      	mov	r0, r3
 800430a:	f003 fcca 	bl	8007ca2 <USB_ReadDevOutEPInterrupt>
 800430e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	f003 0301 	and.w	r3, r3, #1
 8004316:	2b00      	cmp	r3, #0
 8004318:	d00c      	beq.n	8004334 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800431a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800431c:	015a      	lsls	r2, r3, #5
 800431e:	69fb      	ldr	r3, [r7, #28]
 8004320:	4413      	add	r3, r2
 8004322:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004326:	461a      	mov	r2, r3
 8004328:	2301      	movs	r3, #1
 800432a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800432c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	f000 fec2 	bl	80050b8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	f003 0308 	and.w	r3, r3, #8
 800433a:	2b00      	cmp	r3, #0
 800433c:	d00c      	beq.n	8004358 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800433e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004340:	015a      	lsls	r2, r3, #5
 8004342:	69fb      	ldr	r3, [r7, #28]
 8004344:	4413      	add	r3, r2
 8004346:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800434a:	461a      	mov	r2, r3
 800434c:	2308      	movs	r3, #8
 800434e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004350:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	f000 ff98 	bl	8005288 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	f003 0310 	and.w	r3, r3, #16
 800435e:	2b00      	cmp	r3, #0
 8004360:	d008      	beq.n	8004374 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004364:	015a      	lsls	r2, r3, #5
 8004366:	69fb      	ldr	r3, [r7, #28]
 8004368:	4413      	add	r3, r2
 800436a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800436e:	461a      	mov	r2, r3
 8004370:	2310      	movs	r3, #16
 8004372:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	f003 0302 	and.w	r3, r3, #2
 800437a:	2b00      	cmp	r3, #0
 800437c:	d030      	beq.n	80043e0 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800437e:	6a3b      	ldr	r3, [r7, #32]
 8004380:	695b      	ldr	r3, [r3, #20]
 8004382:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004386:	2b80      	cmp	r3, #128	; 0x80
 8004388:	d109      	bne.n	800439e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800438a:	69fb      	ldr	r3, [r7, #28]
 800438c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	69fa      	ldr	r2, [r7, #28]
 8004394:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004398:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800439c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800439e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043a0:	4613      	mov	r3, r2
 80043a2:	00db      	lsls	r3, r3, #3
 80043a4:	4413      	add	r3, r2
 80043a6:	009b      	lsls	r3, r3, #2
 80043a8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80043ac:	687a      	ldr	r2, [r7, #4]
 80043ae:	4413      	add	r3, r2
 80043b0:	3304      	adds	r3, #4
 80043b2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	78db      	ldrb	r3, [r3, #3]
 80043b8:	2b01      	cmp	r3, #1
 80043ba:	d108      	bne.n	80043ce <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	2200      	movs	r2, #0
 80043c0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80043c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c4:	b2db      	uxtb	r3, r3
 80043c6:	4619      	mov	r1, r3
 80043c8:	6878      	ldr	r0, [r7, #4]
 80043ca:	f009 fff7 	bl	800e3bc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80043ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d0:	015a      	lsls	r2, r3, #5
 80043d2:	69fb      	ldr	r3, [r7, #28]
 80043d4:	4413      	add	r3, r2
 80043d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043da:	461a      	mov	r2, r3
 80043dc:	2302      	movs	r3, #2
 80043de:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	f003 0320 	and.w	r3, r3, #32
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d008      	beq.n	80043fc <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80043ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ec:	015a      	lsls	r2, r3, #5
 80043ee:	69fb      	ldr	r3, [r7, #28]
 80043f0:	4413      	add	r3, r2
 80043f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043f6:	461a      	mov	r2, r3
 80043f8:	2320      	movs	r3, #32
 80043fa:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004402:	2b00      	cmp	r3, #0
 8004404:	d009      	beq.n	800441a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004408:	015a      	lsls	r2, r3, #5
 800440a:	69fb      	ldr	r3, [r7, #28]
 800440c:	4413      	add	r3, r2
 800440e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004412:	461a      	mov	r2, r3
 8004414:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004418:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800441a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800441c:	3301      	adds	r3, #1
 800441e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004422:	085b      	lsrs	r3, r3, #1
 8004424:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004428:	2b00      	cmp	r3, #0
 800442a:	f47f af62 	bne.w	80042f2 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4618      	mov	r0, r3
 8004434:	f003 fbee 	bl	8007c14 <USB_ReadInterrupts>
 8004438:	4603      	mov	r3, r0
 800443a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800443e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004442:	f040 80db 	bne.w	80045fc <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4618      	mov	r0, r3
 800444c:	f003 fc0f 	bl	8007c6e <USB_ReadDevAllInEpInterrupt>
 8004450:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8004452:	2300      	movs	r3, #0
 8004454:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8004456:	e0cd      	b.n	80045f4 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800445a:	f003 0301 	and.w	r3, r3, #1
 800445e:	2b00      	cmp	r3, #0
 8004460:	f000 80c2 	beq.w	80045e8 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800446a:	b2d2      	uxtb	r2, r2
 800446c:	4611      	mov	r1, r2
 800446e:	4618      	mov	r0, r3
 8004470:	f003 fc35 	bl	8007cde <USB_ReadDevInEPInterrupt>
 8004474:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	f003 0301 	and.w	r3, r3, #1
 800447c:	2b00      	cmp	r3, #0
 800447e:	d057      	beq.n	8004530 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004482:	f003 030f 	and.w	r3, r3, #15
 8004486:	2201      	movs	r2, #1
 8004488:	fa02 f303 	lsl.w	r3, r2, r3
 800448c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800448e:	69fb      	ldr	r3, [r7, #28]
 8004490:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004494:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	43db      	mvns	r3, r3
 800449a:	69f9      	ldr	r1, [r7, #28]
 800449c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80044a0:	4013      	ands	r3, r2
 80044a2:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80044a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a6:	015a      	lsls	r2, r3, #5
 80044a8:	69fb      	ldr	r3, [r7, #28]
 80044aa:	4413      	add	r3, r2
 80044ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044b0:	461a      	mov	r2, r3
 80044b2:	2301      	movs	r3, #1
 80044b4:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	691b      	ldr	r3, [r3, #16]
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	d132      	bne.n	8004524 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80044be:	6879      	ldr	r1, [r7, #4]
 80044c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044c2:	4613      	mov	r3, r2
 80044c4:	00db      	lsls	r3, r3, #3
 80044c6:	4413      	add	r3, r2
 80044c8:	009b      	lsls	r3, r3, #2
 80044ca:	440b      	add	r3, r1
 80044cc:	334c      	adds	r3, #76	; 0x4c
 80044ce:	6819      	ldr	r1, [r3, #0]
 80044d0:	6878      	ldr	r0, [r7, #4]
 80044d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044d4:	4613      	mov	r3, r2
 80044d6:	00db      	lsls	r3, r3, #3
 80044d8:	4413      	add	r3, r2
 80044da:	009b      	lsls	r3, r3, #2
 80044dc:	4403      	add	r3, r0
 80044de:	3348      	adds	r3, #72	; 0x48
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4419      	add	r1, r3
 80044e4:	6878      	ldr	r0, [r7, #4]
 80044e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044e8:	4613      	mov	r3, r2
 80044ea:	00db      	lsls	r3, r3, #3
 80044ec:	4413      	add	r3, r2
 80044ee:	009b      	lsls	r3, r3, #2
 80044f0:	4403      	add	r3, r0
 80044f2:	334c      	adds	r3, #76	; 0x4c
 80044f4:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80044f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d113      	bne.n	8004524 <HAL_PCD_IRQHandler+0x3a2>
 80044fc:	6879      	ldr	r1, [r7, #4]
 80044fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004500:	4613      	mov	r3, r2
 8004502:	00db      	lsls	r3, r3, #3
 8004504:	4413      	add	r3, r2
 8004506:	009b      	lsls	r3, r3, #2
 8004508:	440b      	add	r3, r1
 800450a:	3354      	adds	r3, #84	; 0x54
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d108      	bne.n	8004524 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6818      	ldr	r0, [r3, #0]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800451c:	461a      	mov	r2, r3
 800451e:	2101      	movs	r1, #1
 8004520:	f003 fc3c 	bl	8007d9c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004526:	b2db      	uxtb	r3, r3
 8004528:	4619      	mov	r1, r3
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f009 fec1 	bl	800e2b2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	f003 0308 	and.w	r3, r3, #8
 8004536:	2b00      	cmp	r3, #0
 8004538:	d008      	beq.n	800454c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800453a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800453c:	015a      	lsls	r2, r3, #5
 800453e:	69fb      	ldr	r3, [r7, #28]
 8004540:	4413      	add	r3, r2
 8004542:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004546:	461a      	mov	r2, r3
 8004548:	2308      	movs	r3, #8
 800454a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	f003 0310 	and.w	r3, r3, #16
 8004552:	2b00      	cmp	r3, #0
 8004554:	d008      	beq.n	8004568 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004558:	015a      	lsls	r2, r3, #5
 800455a:	69fb      	ldr	r3, [r7, #28]
 800455c:	4413      	add	r3, r2
 800455e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004562:	461a      	mov	r2, r3
 8004564:	2310      	movs	r3, #16
 8004566:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800456e:	2b00      	cmp	r3, #0
 8004570:	d008      	beq.n	8004584 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004574:	015a      	lsls	r2, r3, #5
 8004576:	69fb      	ldr	r3, [r7, #28]
 8004578:	4413      	add	r3, r2
 800457a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800457e:	461a      	mov	r2, r3
 8004580:	2340      	movs	r3, #64	; 0x40
 8004582:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	f003 0302 	and.w	r3, r3, #2
 800458a:	2b00      	cmp	r3, #0
 800458c:	d023      	beq.n	80045d6 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800458e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004590:	6a38      	ldr	r0, [r7, #32]
 8004592:	f002 fb1d 	bl	8006bd0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004596:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004598:	4613      	mov	r3, r2
 800459a:	00db      	lsls	r3, r3, #3
 800459c:	4413      	add	r3, r2
 800459e:	009b      	lsls	r3, r3, #2
 80045a0:	3338      	adds	r3, #56	; 0x38
 80045a2:	687a      	ldr	r2, [r7, #4]
 80045a4:	4413      	add	r3, r2
 80045a6:	3304      	adds	r3, #4
 80045a8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	78db      	ldrb	r3, [r3, #3]
 80045ae:	2b01      	cmp	r3, #1
 80045b0:	d108      	bne.n	80045c4 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	2200      	movs	r2, #0
 80045b6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80045b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ba:	b2db      	uxtb	r3, r3
 80045bc:	4619      	mov	r1, r3
 80045be:	6878      	ldr	r0, [r7, #4]
 80045c0:	f009 ff0e 	bl	800e3e0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80045c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c6:	015a      	lsls	r2, r3, #5
 80045c8:	69fb      	ldr	r3, [r7, #28]
 80045ca:	4413      	add	r3, r2
 80045cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045d0:	461a      	mov	r2, r3
 80045d2:	2302      	movs	r3, #2
 80045d4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d003      	beq.n	80045e8 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80045e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80045e2:	6878      	ldr	r0, [r7, #4]
 80045e4:	f000 fcdb 	bl	8004f9e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80045e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ea:	3301      	adds	r3, #1
 80045ec:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80045ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045f0:	085b      	lsrs	r3, r3, #1
 80045f2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80045f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	f47f af2e 	bne.w	8004458 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4618      	mov	r0, r3
 8004602:	f003 fb07 	bl	8007c14 <USB_ReadInterrupts>
 8004606:	4603      	mov	r3, r0
 8004608:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800460c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004610:	d122      	bne.n	8004658 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004612:	69fb      	ldr	r3, [r7, #28]
 8004614:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	69fa      	ldr	r2, [r7, #28]
 800461c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004620:	f023 0301 	bic.w	r3, r3, #1
 8004624:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800462c:	2b01      	cmp	r3, #1
 800462e:	d108      	bne.n	8004642 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2200      	movs	r2, #0
 8004634:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004638:	2100      	movs	r1, #0
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	f000 fec2 	bl	80053c4 <HAL_PCDEx_LPM_Callback>
 8004640:	e002      	b.n	8004648 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	f009 feac 	bl	800e3a0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	695a      	ldr	r2, [r3, #20]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8004656:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4618      	mov	r0, r3
 800465e:	f003 fad9 	bl	8007c14 <USB_ReadInterrupts>
 8004662:	4603      	mov	r3, r0
 8004664:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004668:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800466c:	d112      	bne.n	8004694 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800466e:	69fb      	ldr	r3, [r7, #28]
 8004670:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	f003 0301 	and.w	r3, r3, #1
 800467a:	2b01      	cmp	r3, #1
 800467c:	d102      	bne.n	8004684 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	f009 fe68 	bl	800e354 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	695a      	ldr	r2, [r3, #20]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004692:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4618      	mov	r0, r3
 800469a:	f003 fabb 	bl	8007c14 <USB_ReadInterrupts>
 800469e:	4603      	mov	r3, r0
 80046a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80046a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046a8:	f040 80b7 	bne.w	800481a <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80046ac:	69fb      	ldr	r3, [r7, #28]
 80046ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	69fa      	ldr	r2, [r7, #28]
 80046b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80046ba:	f023 0301 	bic.w	r3, r3, #1
 80046be:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	2110      	movs	r1, #16
 80046c6:	4618      	mov	r0, r3
 80046c8:	f002 fa82 	bl	8006bd0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80046cc:	2300      	movs	r3, #0
 80046ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046d0:	e046      	b.n	8004760 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80046d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046d4:	015a      	lsls	r2, r3, #5
 80046d6:	69fb      	ldr	r3, [r7, #28]
 80046d8:	4413      	add	r3, r2
 80046da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046de:	461a      	mov	r2, r3
 80046e0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80046e4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80046e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046e8:	015a      	lsls	r2, r3, #5
 80046ea:	69fb      	ldr	r3, [r7, #28]
 80046ec:	4413      	add	r3, r2
 80046ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80046f6:	0151      	lsls	r1, r2, #5
 80046f8:	69fa      	ldr	r2, [r7, #28]
 80046fa:	440a      	add	r2, r1
 80046fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004700:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004704:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004708:	015a      	lsls	r2, r3, #5
 800470a:	69fb      	ldr	r3, [r7, #28]
 800470c:	4413      	add	r3, r2
 800470e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004712:	461a      	mov	r2, r3
 8004714:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004718:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800471a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800471c:	015a      	lsls	r2, r3, #5
 800471e:	69fb      	ldr	r3, [r7, #28]
 8004720:	4413      	add	r3, r2
 8004722:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800472a:	0151      	lsls	r1, r2, #5
 800472c:	69fa      	ldr	r2, [r7, #28]
 800472e:	440a      	add	r2, r1
 8004730:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004734:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004738:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800473a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800473c:	015a      	lsls	r2, r3, #5
 800473e:	69fb      	ldr	r3, [r7, #28]
 8004740:	4413      	add	r3, r2
 8004742:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800474a:	0151      	lsls	r1, r2, #5
 800474c:	69fa      	ldr	r2, [r7, #28]
 800474e:	440a      	add	r2, r1
 8004750:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004754:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004758:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800475a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800475c:	3301      	adds	r3, #1
 800475e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004766:	429a      	cmp	r2, r3
 8004768:	d3b3      	bcc.n	80046d2 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800476a:	69fb      	ldr	r3, [r7, #28]
 800476c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004770:	69db      	ldr	r3, [r3, #28]
 8004772:	69fa      	ldr	r2, [r7, #28]
 8004774:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004778:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800477c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004782:	2b00      	cmp	r3, #0
 8004784:	d016      	beq.n	80047b4 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004786:	69fb      	ldr	r3, [r7, #28]
 8004788:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800478c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004790:	69fa      	ldr	r2, [r7, #28]
 8004792:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004796:	f043 030b 	orr.w	r3, r3, #11
 800479a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800479e:	69fb      	ldr	r3, [r7, #28]
 80047a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047a6:	69fa      	ldr	r2, [r7, #28]
 80047a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80047ac:	f043 030b 	orr.w	r3, r3, #11
 80047b0:	6453      	str	r3, [r2, #68]	; 0x44
 80047b2:	e015      	b.n	80047e0 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80047b4:	69fb      	ldr	r3, [r7, #28]
 80047b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047ba:	695b      	ldr	r3, [r3, #20]
 80047bc:	69fa      	ldr	r2, [r7, #28]
 80047be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80047c2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80047c6:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80047ca:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80047cc:	69fb      	ldr	r3, [r7, #28]
 80047ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047d2:	691b      	ldr	r3, [r3, #16]
 80047d4:	69fa      	ldr	r2, [r7, #28]
 80047d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80047da:	f043 030b 	orr.w	r3, r3, #11
 80047de:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80047e0:	69fb      	ldr	r3, [r7, #28]
 80047e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	69fa      	ldr	r2, [r7, #28]
 80047ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80047ee:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80047f2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6818      	ldr	r0, [r3, #0]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	691b      	ldr	r3, [r3, #16]
 80047fc:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004804:	461a      	mov	r2, r3
 8004806:	f003 fac9 	bl	8007d9c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	695a      	ldr	r2, [r3, #20]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004818:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4618      	mov	r0, r3
 8004820:	f003 f9f8 	bl	8007c14 <USB_ReadInterrupts>
 8004824:	4603      	mov	r3, r0
 8004826:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800482a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800482e:	d124      	bne.n	800487a <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4618      	mov	r0, r3
 8004836:	f003 fa8e 	bl	8007d56 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4618      	mov	r0, r3
 8004840:	f002 fa43 	bl	8006cca <USB_GetDevSpeed>
 8004844:	4603      	mov	r3, r0
 8004846:	461a      	mov	r2, r3
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681c      	ldr	r4, [r3, #0]
 8004850:	f001 fa28 	bl	8005ca4 <HAL_RCC_GetHCLKFreq>
 8004854:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800485a:	b2db      	uxtb	r3, r3
 800485c:	461a      	mov	r2, r3
 800485e:	4620      	mov	r0, r4
 8004860:	f001 ff42 	bl	80066e8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004864:	6878      	ldr	r0, [r7, #4]
 8004866:	f009 fd4c 	bl	800e302 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	695a      	ldr	r2, [r3, #20]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004878:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4618      	mov	r0, r3
 8004880:	f003 f9c8 	bl	8007c14 <USB_ReadInterrupts>
 8004884:	4603      	mov	r3, r0
 8004886:	f003 0308 	and.w	r3, r3, #8
 800488a:	2b08      	cmp	r3, #8
 800488c:	d10a      	bne.n	80048a4 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800488e:	6878      	ldr	r0, [r7, #4]
 8004890:	f009 fd29 	bl	800e2e6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	695a      	ldr	r2, [r3, #20]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f002 0208 	and.w	r2, r2, #8
 80048a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4618      	mov	r0, r3
 80048aa:	f003 f9b3 	bl	8007c14 <USB_ReadInterrupts>
 80048ae:	4603      	mov	r3, r0
 80048b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048b4:	2b80      	cmp	r3, #128	; 0x80
 80048b6:	d122      	bne.n	80048fe <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80048b8:	6a3b      	ldr	r3, [r7, #32]
 80048ba:	699b      	ldr	r3, [r3, #24]
 80048bc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80048c0:	6a3b      	ldr	r3, [r7, #32]
 80048c2:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80048c4:	2301      	movs	r3, #1
 80048c6:	627b      	str	r3, [r7, #36]	; 0x24
 80048c8:	e014      	b.n	80048f4 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80048ca:	6879      	ldr	r1, [r7, #4]
 80048cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048ce:	4613      	mov	r3, r2
 80048d0:	00db      	lsls	r3, r3, #3
 80048d2:	4413      	add	r3, r2
 80048d4:	009b      	lsls	r3, r3, #2
 80048d6:	440b      	add	r3, r1
 80048d8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80048dc:	781b      	ldrb	r3, [r3, #0]
 80048de:	2b01      	cmp	r3, #1
 80048e0:	d105      	bne.n	80048ee <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80048e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e4:	b2db      	uxtb	r3, r3
 80048e6:	4619      	mov	r1, r3
 80048e8:	6878      	ldr	r0, [r7, #4]
 80048ea:	f000 fb27 	bl	8004f3c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80048ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f0:	3301      	adds	r3, #1
 80048f2:	627b      	str	r3, [r7, #36]	; 0x24
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048fa:	429a      	cmp	r2, r3
 80048fc:	d3e5      	bcc.n	80048ca <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4618      	mov	r0, r3
 8004904:	f003 f986 	bl	8007c14 <USB_ReadInterrupts>
 8004908:	4603      	mov	r3, r0
 800490a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800490e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004912:	d13b      	bne.n	800498c <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004914:	2301      	movs	r3, #1
 8004916:	627b      	str	r3, [r7, #36]	; 0x24
 8004918:	e02b      	b.n	8004972 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800491a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800491c:	015a      	lsls	r2, r3, #5
 800491e:	69fb      	ldr	r3, [r7, #28]
 8004920:	4413      	add	r3, r2
 8004922:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800492a:	6879      	ldr	r1, [r7, #4]
 800492c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800492e:	4613      	mov	r3, r2
 8004930:	00db      	lsls	r3, r3, #3
 8004932:	4413      	add	r3, r2
 8004934:	009b      	lsls	r3, r3, #2
 8004936:	440b      	add	r3, r1
 8004938:	3340      	adds	r3, #64	; 0x40
 800493a:	781b      	ldrb	r3, [r3, #0]
 800493c:	2b01      	cmp	r3, #1
 800493e:	d115      	bne.n	800496c <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004940:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004942:	2b00      	cmp	r3, #0
 8004944:	da12      	bge.n	800496c <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004946:	6879      	ldr	r1, [r7, #4]
 8004948:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800494a:	4613      	mov	r3, r2
 800494c:	00db      	lsls	r3, r3, #3
 800494e:	4413      	add	r3, r2
 8004950:	009b      	lsls	r3, r3, #2
 8004952:	440b      	add	r3, r1
 8004954:	333f      	adds	r3, #63	; 0x3f
 8004956:	2201      	movs	r2, #1
 8004958:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800495a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495c:	b2db      	uxtb	r3, r3
 800495e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004962:	b2db      	uxtb	r3, r3
 8004964:	4619      	mov	r1, r3
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	f000 fae8 	bl	8004f3c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800496c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800496e:	3301      	adds	r3, #1
 8004970:	627b      	str	r3, [r7, #36]	; 0x24
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004978:	429a      	cmp	r2, r3
 800497a:	d3ce      	bcc.n	800491a <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	695a      	ldr	r2, [r3, #20]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800498a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4618      	mov	r0, r3
 8004992:	f003 f93f 	bl	8007c14 <USB_ReadInterrupts>
 8004996:	4603      	mov	r3, r0
 8004998:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800499c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80049a0:	d155      	bne.n	8004a4e <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80049a2:	2301      	movs	r3, #1
 80049a4:	627b      	str	r3, [r7, #36]	; 0x24
 80049a6:	e045      	b.n	8004a34 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80049a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049aa:	015a      	lsls	r2, r3, #5
 80049ac:	69fb      	ldr	r3, [r7, #28]
 80049ae:	4413      	add	r3, r2
 80049b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80049b8:	6879      	ldr	r1, [r7, #4]
 80049ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049bc:	4613      	mov	r3, r2
 80049be:	00db      	lsls	r3, r3, #3
 80049c0:	4413      	add	r3, r2
 80049c2:	009b      	lsls	r3, r3, #2
 80049c4:	440b      	add	r3, r1
 80049c6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80049ca:	781b      	ldrb	r3, [r3, #0]
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	d12e      	bne.n	8004a2e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80049d0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	da2b      	bge.n	8004a2e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80049d6:	69bb      	ldr	r3, [r7, #24]
 80049d8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80049e2:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80049e6:	429a      	cmp	r2, r3
 80049e8:	d121      	bne.n	8004a2e <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80049ea:	6879      	ldr	r1, [r7, #4]
 80049ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049ee:	4613      	mov	r3, r2
 80049f0:	00db      	lsls	r3, r3, #3
 80049f2:	4413      	add	r3, r2
 80049f4:	009b      	lsls	r3, r3, #2
 80049f6:	440b      	add	r3, r1
 80049f8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80049fc:	2201      	movs	r2, #1
 80049fe:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004a00:	6a3b      	ldr	r3, [r7, #32]
 8004a02:	699b      	ldr	r3, [r3, #24]
 8004a04:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004a08:	6a3b      	ldr	r3, [r7, #32]
 8004a0a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004a0c:	6a3b      	ldr	r3, [r7, #32]
 8004a0e:	695b      	ldr	r3, [r3, #20]
 8004a10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d10a      	bne.n	8004a2e <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004a18:	69fb      	ldr	r3, [r7, #28]
 8004a1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	69fa      	ldr	r2, [r7, #28]
 8004a22:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004a2a:	6053      	str	r3, [r2, #4]
            break;
 8004a2c:	e007      	b.n	8004a3e <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a30:	3301      	adds	r3, #1
 8004a32:	627b      	str	r3, [r7, #36]	; 0x24
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a3a:	429a      	cmp	r2, r3
 8004a3c:	d3b4      	bcc.n	80049a8 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	695a      	ldr	r2, [r3, #20]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004a4c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4618      	mov	r0, r3
 8004a54:	f003 f8de 	bl	8007c14 <USB_ReadInterrupts>
 8004a58:	4603      	mov	r3, r0
 8004a5a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004a5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a62:	d10a      	bne.n	8004a7a <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004a64:	6878      	ldr	r0, [r7, #4]
 8004a66:	f009 fccd 	bl	800e404 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	695a      	ldr	r2, [r3, #20]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004a78:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4618      	mov	r0, r3
 8004a80:	f003 f8c8 	bl	8007c14 <USB_ReadInterrupts>
 8004a84:	4603      	mov	r3, r0
 8004a86:	f003 0304 	and.w	r3, r3, #4
 8004a8a:	2b04      	cmp	r3, #4
 8004a8c:	d115      	bne.n	8004aba <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004a96:	69bb      	ldr	r3, [r7, #24]
 8004a98:	f003 0304 	and.w	r3, r3, #4
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d002      	beq.n	8004aa6 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004aa0:	6878      	ldr	r0, [r7, #4]
 8004aa2:	f009 fcbd 	bl	800e420 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	6859      	ldr	r1, [r3, #4]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	69ba      	ldr	r2, [r7, #24]
 8004ab2:	430a      	orrs	r2, r1
 8004ab4:	605a      	str	r2, [r3, #4]
 8004ab6:	e000      	b.n	8004aba <HAL_PCD_IRQHandler+0x938>
      return;
 8004ab8:	bf00      	nop
    }
  }
}
 8004aba:	3734      	adds	r7, #52	; 0x34
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bd90      	pop	{r4, r7, pc}

08004ac0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b082      	sub	sp, #8
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
 8004ac8:	460b      	mov	r3, r1
 8004aca:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004ad2:	2b01      	cmp	r3, #1
 8004ad4:	d101      	bne.n	8004ada <HAL_PCD_SetAddress+0x1a>
 8004ad6:	2302      	movs	r3, #2
 8004ad8:	e013      	b.n	8004b02 <HAL_PCD_SetAddress+0x42>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2201      	movs	r2, #1
 8004ade:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	78fa      	ldrb	r2, [r7, #3]
 8004ae6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	78fa      	ldrb	r2, [r7, #3]
 8004af0:	4611      	mov	r1, r2
 8004af2:	4618      	mov	r0, r3
 8004af4:	f003 f826 	bl	8007b44 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2200      	movs	r2, #0
 8004afc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004b00:	2300      	movs	r3, #0
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	3708      	adds	r7, #8
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bd80      	pop	{r7, pc}

08004b0a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004b0a:	b580      	push	{r7, lr}
 8004b0c:	b084      	sub	sp, #16
 8004b0e:	af00      	add	r7, sp, #0
 8004b10:	6078      	str	r0, [r7, #4]
 8004b12:	4608      	mov	r0, r1
 8004b14:	4611      	mov	r1, r2
 8004b16:	461a      	mov	r2, r3
 8004b18:	4603      	mov	r3, r0
 8004b1a:	70fb      	strb	r3, [r7, #3]
 8004b1c:	460b      	mov	r3, r1
 8004b1e:	803b      	strh	r3, [r7, #0]
 8004b20:	4613      	mov	r3, r2
 8004b22:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004b24:	2300      	movs	r3, #0
 8004b26:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004b28:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	da0f      	bge.n	8004b50 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b30:	78fb      	ldrb	r3, [r7, #3]
 8004b32:	f003 020f 	and.w	r2, r3, #15
 8004b36:	4613      	mov	r3, r2
 8004b38:	00db      	lsls	r3, r3, #3
 8004b3a:	4413      	add	r3, r2
 8004b3c:	009b      	lsls	r3, r3, #2
 8004b3e:	3338      	adds	r3, #56	; 0x38
 8004b40:	687a      	ldr	r2, [r7, #4]
 8004b42:	4413      	add	r3, r2
 8004b44:	3304      	adds	r3, #4
 8004b46:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	705a      	strb	r2, [r3, #1]
 8004b4e:	e00f      	b.n	8004b70 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004b50:	78fb      	ldrb	r3, [r7, #3]
 8004b52:	f003 020f 	and.w	r2, r3, #15
 8004b56:	4613      	mov	r3, r2
 8004b58:	00db      	lsls	r3, r3, #3
 8004b5a:	4413      	add	r3, r2
 8004b5c:	009b      	lsls	r3, r3, #2
 8004b5e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004b62:	687a      	ldr	r2, [r7, #4]
 8004b64:	4413      	add	r3, r2
 8004b66:	3304      	adds	r3, #4
 8004b68:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004b70:	78fb      	ldrb	r3, [r7, #3]
 8004b72:	f003 030f 	and.w	r3, r3, #15
 8004b76:	b2da      	uxtb	r2, r3
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004b7c:	883a      	ldrh	r2, [r7, #0]
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	78ba      	ldrb	r2, [r7, #2]
 8004b86:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	785b      	ldrb	r3, [r3, #1]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d004      	beq.n	8004b9a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	781b      	ldrb	r3, [r3, #0]
 8004b94:	b29a      	uxth	r2, r3
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004b9a:	78bb      	ldrb	r3, [r7, #2]
 8004b9c:	2b02      	cmp	r3, #2
 8004b9e:	d102      	bne.n	8004ba6 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004bac:	2b01      	cmp	r3, #1
 8004bae:	d101      	bne.n	8004bb4 <HAL_PCD_EP_Open+0xaa>
 8004bb0:	2302      	movs	r3, #2
 8004bb2:	e00e      	b.n	8004bd2 <HAL_PCD_EP_Open+0xc8>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2201      	movs	r2, #1
 8004bb8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	68f9      	ldr	r1, [r7, #12]
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	f002 f8a6 	bl	8006d14 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8004bd0:	7afb      	ldrb	r3, [r7, #11]
}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	3710      	adds	r7, #16
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}

08004bda <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004bda:	b580      	push	{r7, lr}
 8004bdc:	b084      	sub	sp, #16
 8004bde:	af00      	add	r7, sp, #0
 8004be0:	6078      	str	r0, [r7, #4]
 8004be2:	460b      	mov	r3, r1
 8004be4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004be6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	da0f      	bge.n	8004c0e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004bee:	78fb      	ldrb	r3, [r7, #3]
 8004bf0:	f003 020f 	and.w	r2, r3, #15
 8004bf4:	4613      	mov	r3, r2
 8004bf6:	00db      	lsls	r3, r3, #3
 8004bf8:	4413      	add	r3, r2
 8004bfa:	009b      	lsls	r3, r3, #2
 8004bfc:	3338      	adds	r3, #56	; 0x38
 8004bfe:	687a      	ldr	r2, [r7, #4]
 8004c00:	4413      	add	r3, r2
 8004c02:	3304      	adds	r3, #4
 8004c04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	2201      	movs	r2, #1
 8004c0a:	705a      	strb	r2, [r3, #1]
 8004c0c:	e00f      	b.n	8004c2e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004c0e:	78fb      	ldrb	r3, [r7, #3]
 8004c10:	f003 020f 	and.w	r2, r3, #15
 8004c14:	4613      	mov	r3, r2
 8004c16:	00db      	lsls	r3, r3, #3
 8004c18:	4413      	add	r3, r2
 8004c1a:	009b      	lsls	r3, r3, #2
 8004c1c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004c20:	687a      	ldr	r2, [r7, #4]
 8004c22:	4413      	add	r3, r2
 8004c24:	3304      	adds	r3, #4
 8004c26:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004c2e:	78fb      	ldrb	r3, [r7, #3]
 8004c30:	f003 030f 	and.w	r3, r3, #15
 8004c34:	b2da      	uxtb	r2, r3
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004c40:	2b01      	cmp	r3, #1
 8004c42:	d101      	bne.n	8004c48 <HAL_PCD_EP_Close+0x6e>
 8004c44:	2302      	movs	r3, #2
 8004c46:	e00e      	b.n	8004c66 <HAL_PCD_EP_Close+0x8c>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	68f9      	ldr	r1, [r7, #12]
 8004c56:	4618      	mov	r0, r3
 8004c58:	f002 f8e4 	bl	8006e24 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8004c64:	2300      	movs	r3, #0
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	3710      	adds	r7, #16
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd80      	pop	{r7, pc}

08004c6e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004c6e:	b580      	push	{r7, lr}
 8004c70:	b086      	sub	sp, #24
 8004c72:	af00      	add	r7, sp, #0
 8004c74:	60f8      	str	r0, [r7, #12]
 8004c76:	607a      	str	r2, [r7, #4]
 8004c78:	603b      	str	r3, [r7, #0]
 8004c7a:	460b      	mov	r3, r1
 8004c7c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004c7e:	7afb      	ldrb	r3, [r7, #11]
 8004c80:	f003 020f 	and.w	r2, r3, #15
 8004c84:	4613      	mov	r3, r2
 8004c86:	00db      	lsls	r3, r3, #3
 8004c88:	4413      	add	r3, r2
 8004c8a:	009b      	lsls	r3, r3, #2
 8004c8c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004c90:	68fa      	ldr	r2, [r7, #12]
 8004c92:	4413      	add	r3, r2
 8004c94:	3304      	adds	r3, #4
 8004c96:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	687a      	ldr	r2, [r7, #4]
 8004c9c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	683a      	ldr	r2, [r7, #0]
 8004ca2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	2200      	movs	r2, #0
 8004cae:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004cb0:	7afb      	ldrb	r3, [r7, #11]
 8004cb2:	f003 030f 	and.w	r3, r3, #15
 8004cb6:	b2da      	uxtb	r2, r3
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	691b      	ldr	r3, [r3, #16]
 8004cc0:	2b01      	cmp	r3, #1
 8004cc2:	d102      	bne.n	8004cca <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004cc4:	687a      	ldr	r2, [r7, #4]
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004cca:	7afb      	ldrb	r3, [r7, #11]
 8004ccc:	f003 030f 	and.w	r3, r3, #15
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d109      	bne.n	8004ce8 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	6818      	ldr	r0, [r3, #0]
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	691b      	ldr	r3, [r3, #16]
 8004cdc:	b2db      	uxtb	r3, r3
 8004cde:	461a      	mov	r2, r3
 8004ce0:	6979      	ldr	r1, [r7, #20]
 8004ce2:	f002 fbc3 	bl	800746c <USB_EP0StartXfer>
 8004ce6:	e008      	b.n	8004cfa <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	6818      	ldr	r0, [r3, #0]
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	691b      	ldr	r3, [r3, #16]
 8004cf0:	b2db      	uxtb	r3, r3
 8004cf2:	461a      	mov	r2, r3
 8004cf4:	6979      	ldr	r1, [r7, #20]
 8004cf6:	f002 f971 	bl	8006fdc <USB_EPStartXfer>
  }

  return HAL_OK;
 8004cfa:	2300      	movs	r3, #0
}
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	3718      	adds	r7, #24
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bd80      	pop	{r7, pc}

08004d04 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004d04:	b480      	push	{r7}
 8004d06:	b083      	sub	sp, #12
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
 8004d0c:	460b      	mov	r3, r1
 8004d0e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004d10:	78fb      	ldrb	r3, [r7, #3]
 8004d12:	f003 020f 	and.w	r2, r3, #15
 8004d16:	6879      	ldr	r1, [r7, #4]
 8004d18:	4613      	mov	r3, r2
 8004d1a:	00db      	lsls	r3, r3, #3
 8004d1c:	4413      	add	r3, r2
 8004d1e:	009b      	lsls	r3, r3, #2
 8004d20:	440b      	add	r3, r1
 8004d22:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8004d26:	681b      	ldr	r3, [r3, #0]
}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	370c      	adds	r7, #12
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d32:	4770      	bx	lr

08004d34 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b086      	sub	sp, #24
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	60f8      	str	r0, [r7, #12]
 8004d3c:	607a      	str	r2, [r7, #4]
 8004d3e:	603b      	str	r3, [r7, #0]
 8004d40:	460b      	mov	r3, r1
 8004d42:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004d44:	7afb      	ldrb	r3, [r7, #11]
 8004d46:	f003 020f 	and.w	r2, r3, #15
 8004d4a:	4613      	mov	r3, r2
 8004d4c:	00db      	lsls	r3, r3, #3
 8004d4e:	4413      	add	r3, r2
 8004d50:	009b      	lsls	r3, r3, #2
 8004d52:	3338      	adds	r3, #56	; 0x38
 8004d54:	68fa      	ldr	r2, [r7, #12]
 8004d56:	4413      	add	r3, r2
 8004d58:	3304      	adds	r3, #4
 8004d5a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004d5c:	697b      	ldr	r3, [r7, #20]
 8004d5e:	687a      	ldr	r2, [r7, #4]
 8004d60:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	683a      	ldr	r2, [r7, #0]
 8004d66:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	2201      	movs	r2, #1
 8004d72:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004d74:	7afb      	ldrb	r3, [r7, #11]
 8004d76:	f003 030f 	and.w	r3, r3, #15
 8004d7a:	b2da      	uxtb	r2, r3
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	691b      	ldr	r3, [r3, #16]
 8004d84:	2b01      	cmp	r3, #1
 8004d86:	d102      	bne.n	8004d8e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004d88:	687a      	ldr	r2, [r7, #4]
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004d8e:	7afb      	ldrb	r3, [r7, #11]
 8004d90:	f003 030f 	and.w	r3, r3, #15
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d109      	bne.n	8004dac <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	6818      	ldr	r0, [r3, #0]
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	691b      	ldr	r3, [r3, #16]
 8004da0:	b2db      	uxtb	r3, r3
 8004da2:	461a      	mov	r2, r3
 8004da4:	6979      	ldr	r1, [r7, #20]
 8004da6:	f002 fb61 	bl	800746c <USB_EP0StartXfer>
 8004daa:	e008      	b.n	8004dbe <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	6818      	ldr	r0, [r3, #0]
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	691b      	ldr	r3, [r3, #16]
 8004db4:	b2db      	uxtb	r3, r3
 8004db6:	461a      	mov	r2, r3
 8004db8:	6979      	ldr	r1, [r7, #20]
 8004dba:	f002 f90f 	bl	8006fdc <USB_EPStartXfer>
  }

  return HAL_OK;
 8004dbe:	2300      	movs	r3, #0
}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	3718      	adds	r7, #24
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bd80      	pop	{r7, pc}

08004dc8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b084      	sub	sp, #16
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
 8004dd0:	460b      	mov	r3, r1
 8004dd2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004dd4:	78fb      	ldrb	r3, [r7, #3]
 8004dd6:	f003 020f 	and.w	r2, r3, #15
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	429a      	cmp	r2, r3
 8004de0:	d901      	bls.n	8004de6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004de2:	2301      	movs	r3, #1
 8004de4:	e050      	b.n	8004e88 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004de6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	da0f      	bge.n	8004e0e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004dee:	78fb      	ldrb	r3, [r7, #3]
 8004df0:	f003 020f 	and.w	r2, r3, #15
 8004df4:	4613      	mov	r3, r2
 8004df6:	00db      	lsls	r3, r3, #3
 8004df8:	4413      	add	r3, r2
 8004dfa:	009b      	lsls	r3, r3, #2
 8004dfc:	3338      	adds	r3, #56	; 0x38
 8004dfe:	687a      	ldr	r2, [r7, #4]
 8004e00:	4413      	add	r3, r2
 8004e02:	3304      	adds	r3, #4
 8004e04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	2201      	movs	r2, #1
 8004e0a:	705a      	strb	r2, [r3, #1]
 8004e0c:	e00d      	b.n	8004e2a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004e0e:	78fa      	ldrb	r2, [r7, #3]
 8004e10:	4613      	mov	r3, r2
 8004e12:	00db      	lsls	r3, r3, #3
 8004e14:	4413      	add	r3, r2
 8004e16:	009b      	lsls	r3, r3, #2
 8004e18:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004e1c:	687a      	ldr	r2, [r7, #4]
 8004e1e:	4413      	add	r3, r2
 8004e20:	3304      	adds	r3, #4
 8004e22:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	2200      	movs	r2, #0
 8004e28:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	2201      	movs	r2, #1
 8004e2e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004e30:	78fb      	ldrb	r3, [r7, #3]
 8004e32:	f003 030f 	and.w	r3, r3, #15
 8004e36:	b2da      	uxtb	r2, r3
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004e42:	2b01      	cmp	r3, #1
 8004e44:	d101      	bne.n	8004e4a <HAL_PCD_EP_SetStall+0x82>
 8004e46:	2302      	movs	r3, #2
 8004e48:	e01e      	b.n	8004e88 <HAL_PCD_EP_SetStall+0xc0>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2201      	movs	r2, #1
 8004e4e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	68f9      	ldr	r1, [r7, #12]
 8004e58:	4618      	mov	r0, r3
 8004e5a:	f002 fd9f 	bl	800799c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004e5e:	78fb      	ldrb	r3, [r7, #3]
 8004e60:	f003 030f 	and.w	r3, r3, #15
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d10a      	bne.n	8004e7e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6818      	ldr	r0, [r3, #0]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	691b      	ldr	r3, [r3, #16]
 8004e70:	b2d9      	uxtb	r1, r3
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004e78:	461a      	mov	r2, r3
 8004e7a:	f002 ff8f 	bl	8007d9c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2200      	movs	r2, #0
 8004e82:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004e86:	2300      	movs	r3, #0
}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	3710      	adds	r7, #16
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bd80      	pop	{r7, pc}

08004e90 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b084      	sub	sp, #16
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
 8004e98:	460b      	mov	r3, r1
 8004e9a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004e9c:	78fb      	ldrb	r3, [r7, #3]
 8004e9e:	f003 020f 	and.w	r2, r3, #15
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	429a      	cmp	r2, r3
 8004ea8:	d901      	bls.n	8004eae <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	e042      	b.n	8004f34 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004eae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	da0f      	bge.n	8004ed6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004eb6:	78fb      	ldrb	r3, [r7, #3]
 8004eb8:	f003 020f 	and.w	r2, r3, #15
 8004ebc:	4613      	mov	r3, r2
 8004ebe:	00db      	lsls	r3, r3, #3
 8004ec0:	4413      	add	r3, r2
 8004ec2:	009b      	lsls	r3, r3, #2
 8004ec4:	3338      	adds	r3, #56	; 0x38
 8004ec6:	687a      	ldr	r2, [r7, #4]
 8004ec8:	4413      	add	r3, r2
 8004eca:	3304      	adds	r3, #4
 8004ecc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	2201      	movs	r2, #1
 8004ed2:	705a      	strb	r2, [r3, #1]
 8004ed4:	e00f      	b.n	8004ef6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004ed6:	78fb      	ldrb	r3, [r7, #3]
 8004ed8:	f003 020f 	and.w	r2, r3, #15
 8004edc:	4613      	mov	r3, r2
 8004ede:	00db      	lsls	r3, r3, #3
 8004ee0:	4413      	add	r3, r2
 8004ee2:	009b      	lsls	r3, r3, #2
 8004ee4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004ee8:	687a      	ldr	r2, [r7, #4]
 8004eea:	4413      	add	r3, r2
 8004eec:	3304      	adds	r3, #4
 8004eee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004efc:	78fb      	ldrb	r3, [r7, #3]
 8004efe:	f003 030f 	and.w	r3, r3, #15
 8004f02:	b2da      	uxtb	r2, r3
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004f0e:	2b01      	cmp	r3, #1
 8004f10:	d101      	bne.n	8004f16 <HAL_PCD_EP_ClrStall+0x86>
 8004f12:	2302      	movs	r3, #2
 8004f14:	e00e      	b.n	8004f34 <HAL_PCD_EP_ClrStall+0xa4>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2201      	movs	r2, #1
 8004f1a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	68f9      	ldr	r1, [r7, #12]
 8004f24:	4618      	mov	r0, r3
 8004f26:	f002 fda7 	bl	8007a78 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004f32:	2300      	movs	r3, #0
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	3710      	adds	r7, #16
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bd80      	pop	{r7, pc}

08004f3c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b084      	sub	sp, #16
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
 8004f44:	460b      	mov	r3, r1
 8004f46:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004f48:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	da0c      	bge.n	8004f6a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004f50:	78fb      	ldrb	r3, [r7, #3]
 8004f52:	f003 020f 	and.w	r2, r3, #15
 8004f56:	4613      	mov	r3, r2
 8004f58:	00db      	lsls	r3, r3, #3
 8004f5a:	4413      	add	r3, r2
 8004f5c:	009b      	lsls	r3, r3, #2
 8004f5e:	3338      	adds	r3, #56	; 0x38
 8004f60:	687a      	ldr	r2, [r7, #4]
 8004f62:	4413      	add	r3, r2
 8004f64:	3304      	adds	r3, #4
 8004f66:	60fb      	str	r3, [r7, #12]
 8004f68:	e00c      	b.n	8004f84 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004f6a:	78fb      	ldrb	r3, [r7, #3]
 8004f6c:	f003 020f 	and.w	r2, r3, #15
 8004f70:	4613      	mov	r3, r2
 8004f72:	00db      	lsls	r3, r3, #3
 8004f74:	4413      	add	r3, r2
 8004f76:	009b      	lsls	r3, r3, #2
 8004f78:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004f7c:	687a      	ldr	r2, [r7, #4]
 8004f7e:	4413      	add	r3, r2
 8004f80:	3304      	adds	r3, #4
 8004f82:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	68f9      	ldr	r1, [r7, #12]
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f002 fbc6 	bl	800771c <USB_EPStopXfer>
 8004f90:	4603      	mov	r3, r0
 8004f92:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004f94:	7afb      	ldrb	r3, [r7, #11]
}
 8004f96:	4618      	mov	r0, r3
 8004f98:	3710      	adds	r7, #16
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}

08004f9e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004f9e:	b580      	push	{r7, lr}
 8004fa0:	b08a      	sub	sp, #40	; 0x28
 8004fa2:	af02      	add	r7, sp, #8
 8004fa4:	6078      	str	r0, [r7, #4]
 8004fa6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004fb2:	683a      	ldr	r2, [r7, #0]
 8004fb4:	4613      	mov	r3, r2
 8004fb6:	00db      	lsls	r3, r3, #3
 8004fb8:	4413      	add	r3, r2
 8004fba:	009b      	lsls	r3, r3, #2
 8004fbc:	3338      	adds	r3, #56	; 0x38
 8004fbe:	687a      	ldr	r2, [r7, #4]
 8004fc0:	4413      	add	r3, r2
 8004fc2:	3304      	adds	r3, #4
 8004fc4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	6a1a      	ldr	r2, [r3, #32]
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	699b      	ldr	r3, [r3, #24]
 8004fce:	429a      	cmp	r2, r3
 8004fd0:	d901      	bls.n	8004fd6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	e06c      	b.n	80050b0 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	699a      	ldr	r2, [r3, #24]
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	6a1b      	ldr	r3, [r3, #32]
 8004fde:	1ad3      	subs	r3, r2, r3
 8004fe0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	68db      	ldr	r3, [r3, #12]
 8004fe6:	69fa      	ldr	r2, [r7, #28]
 8004fe8:	429a      	cmp	r2, r3
 8004fea:	d902      	bls.n	8004ff2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	68db      	ldr	r3, [r3, #12]
 8004ff0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004ff2:	69fb      	ldr	r3, [r7, #28]
 8004ff4:	3303      	adds	r3, #3
 8004ff6:	089b      	lsrs	r3, r3, #2
 8004ff8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004ffa:	e02b      	b.n	8005054 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	699a      	ldr	r2, [r3, #24]
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	6a1b      	ldr	r3, [r3, #32]
 8005004:	1ad3      	subs	r3, r2, r3
 8005006:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	68db      	ldr	r3, [r3, #12]
 800500c:	69fa      	ldr	r2, [r7, #28]
 800500e:	429a      	cmp	r2, r3
 8005010:	d902      	bls.n	8005018 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	68db      	ldr	r3, [r3, #12]
 8005016:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005018:	69fb      	ldr	r3, [r7, #28]
 800501a:	3303      	adds	r3, #3
 800501c:	089b      	lsrs	r3, r3, #2
 800501e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	6919      	ldr	r1, [r3, #16]
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	b2da      	uxtb	r2, r3
 8005028:	69fb      	ldr	r3, [r7, #28]
 800502a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005030:	b2db      	uxtb	r3, r3
 8005032:	9300      	str	r3, [sp, #0]
 8005034:	4603      	mov	r3, r0
 8005036:	6978      	ldr	r0, [r7, #20]
 8005038:	f002 fc1a 	bl	8007870 <USB_WritePacket>

    ep->xfer_buff  += len;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	691a      	ldr	r2, [r3, #16]
 8005040:	69fb      	ldr	r3, [r7, #28]
 8005042:	441a      	add	r2, r3
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	6a1a      	ldr	r2, [r3, #32]
 800504c:	69fb      	ldr	r3, [r7, #28]
 800504e:	441a      	add	r2, r3
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	015a      	lsls	r2, r3, #5
 8005058:	693b      	ldr	r3, [r7, #16]
 800505a:	4413      	add	r3, r2
 800505c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005060:	699b      	ldr	r3, [r3, #24]
 8005062:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005064:	69ba      	ldr	r2, [r7, #24]
 8005066:	429a      	cmp	r2, r3
 8005068:	d809      	bhi.n	800507e <PCD_WriteEmptyTxFifo+0xe0>
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	6a1a      	ldr	r2, [r3, #32]
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005072:	429a      	cmp	r2, r3
 8005074:	d203      	bcs.n	800507e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	699b      	ldr	r3, [r3, #24]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d1be      	bne.n	8004ffc <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	699a      	ldr	r2, [r3, #24]
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	6a1b      	ldr	r3, [r3, #32]
 8005086:	429a      	cmp	r2, r3
 8005088:	d811      	bhi.n	80050ae <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	f003 030f 	and.w	r3, r3, #15
 8005090:	2201      	movs	r2, #1
 8005092:	fa02 f303 	lsl.w	r3, r2, r3
 8005096:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005098:	693b      	ldr	r3, [r7, #16]
 800509a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800509e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	43db      	mvns	r3, r3
 80050a4:	6939      	ldr	r1, [r7, #16]
 80050a6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80050aa:	4013      	ands	r3, r2
 80050ac:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80050ae:	2300      	movs	r3, #0
}
 80050b0:	4618      	mov	r0, r3
 80050b2:	3720      	adds	r7, #32
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bd80      	pop	{r7, pc}

080050b8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b088      	sub	sp, #32
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
 80050c0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050c8:	69fb      	ldr	r3, [r7, #28]
 80050ca:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80050cc:	69fb      	ldr	r3, [r7, #28]
 80050ce:	333c      	adds	r3, #60	; 0x3c
 80050d0:	3304      	adds	r3, #4
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	015a      	lsls	r2, r3, #5
 80050da:	69bb      	ldr	r3, [r7, #24]
 80050dc:	4413      	add	r3, r2
 80050de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050e2:	689b      	ldr	r3, [r3, #8]
 80050e4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	691b      	ldr	r3, [r3, #16]
 80050ea:	2b01      	cmp	r3, #1
 80050ec:	d17b      	bne.n	80051e6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	f003 0308 	and.w	r3, r3, #8
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d015      	beq.n	8005124 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	4a61      	ldr	r2, [pc, #388]	; (8005280 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	f240 80b9 	bls.w	8005274 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005102:	693b      	ldr	r3, [r7, #16]
 8005104:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005108:	2b00      	cmp	r3, #0
 800510a:	f000 80b3 	beq.w	8005274 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	015a      	lsls	r2, r3, #5
 8005112:	69bb      	ldr	r3, [r7, #24]
 8005114:	4413      	add	r3, r2
 8005116:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800511a:	461a      	mov	r2, r3
 800511c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005120:	6093      	str	r3, [r2, #8]
 8005122:	e0a7      	b.n	8005274 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	f003 0320 	and.w	r3, r3, #32
 800512a:	2b00      	cmp	r3, #0
 800512c:	d009      	beq.n	8005142 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	015a      	lsls	r2, r3, #5
 8005132:	69bb      	ldr	r3, [r7, #24]
 8005134:	4413      	add	r3, r2
 8005136:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800513a:	461a      	mov	r2, r3
 800513c:	2320      	movs	r3, #32
 800513e:	6093      	str	r3, [r2, #8]
 8005140:	e098      	b.n	8005274 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005148:	2b00      	cmp	r3, #0
 800514a:	f040 8093 	bne.w	8005274 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	4a4b      	ldr	r2, [pc, #300]	; (8005280 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d90f      	bls.n	8005176 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800515c:	2b00      	cmp	r3, #0
 800515e:	d00a      	beq.n	8005176 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	015a      	lsls	r2, r3, #5
 8005164:	69bb      	ldr	r3, [r7, #24]
 8005166:	4413      	add	r3, r2
 8005168:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800516c:	461a      	mov	r2, r3
 800516e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005172:	6093      	str	r3, [r2, #8]
 8005174:	e07e      	b.n	8005274 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8005176:	683a      	ldr	r2, [r7, #0]
 8005178:	4613      	mov	r3, r2
 800517a:	00db      	lsls	r3, r3, #3
 800517c:	4413      	add	r3, r2
 800517e:	009b      	lsls	r3, r3, #2
 8005180:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005184:	687a      	ldr	r2, [r7, #4]
 8005186:	4413      	add	r3, r2
 8005188:	3304      	adds	r3, #4
 800518a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	69da      	ldr	r2, [r3, #28]
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	0159      	lsls	r1, r3, #5
 8005194:	69bb      	ldr	r3, [r7, #24]
 8005196:	440b      	add	r3, r1
 8005198:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800519c:	691b      	ldr	r3, [r3, #16]
 800519e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80051a2:	1ad2      	subs	r2, r2, r3
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d114      	bne.n	80051d8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	699b      	ldr	r3, [r3, #24]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d109      	bne.n	80051ca <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6818      	ldr	r0, [r3, #0]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80051c0:	461a      	mov	r2, r3
 80051c2:	2101      	movs	r1, #1
 80051c4:	f002 fdea 	bl	8007d9c <USB_EP0_OutStart>
 80051c8:	e006      	b.n	80051d8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	691a      	ldr	r2, [r3, #16]
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	6a1b      	ldr	r3, [r3, #32]
 80051d2:	441a      	add	r2, r3
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	b2db      	uxtb	r3, r3
 80051dc:	4619      	mov	r1, r3
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	f009 f84c 	bl	800e27c <HAL_PCD_DataOutStageCallback>
 80051e4:	e046      	b.n	8005274 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	4a26      	ldr	r2, [pc, #152]	; (8005284 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d124      	bne.n	8005238 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80051ee:	693b      	ldr	r3, [r7, #16]
 80051f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d00a      	beq.n	800520e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	015a      	lsls	r2, r3, #5
 80051fc:	69bb      	ldr	r3, [r7, #24]
 80051fe:	4413      	add	r3, r2
 8005200:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005204:	461a      	mov	r2, r3
 8005206:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800520a:	6093      	str	r3, [r2, #8]
 800520c:	e032      	b.n	8005274 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	f003 0320 	and.w	r3, r3, #32
 8005214:	2b00      	cmp	r3, #0
 8005216:	d008      	beq.n	800522a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	015a      	lsls	r2, r3, #5
 800521c:	69bb      	ldr	r3, [r7, #24]
 800521e:	4413      	add	r3, r2
 8005220:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005224:	461a      	mov	r2, r3
 8005226:	2320      	movs	r3, #32
 8005228:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	b2db      	uxtb	r3, r3
 800522e:	4619      	mov	r1, r3
 8005230:	6878      	ldr	r0, [r7, #4]
 8005232:	f009 f823 	bl	800e27c <HAL_PCD_DataOutStageCallback>
 8005236:	e01d      	b.n	8005274 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d114      	bne.n	8005268 <PCD_EP_OutXfrComplete_int+0x1b0>
 800523e:	6879      	ldr	r1, [r7, #4]
 8005240:	683a      	ldr	r2, [r7, #0]
 8005242:	4613      	mov	r3, r2
 8005244:	00db      	lsls	r3, r3, #3
 8005246:	4413      	add	r3, r2
 8005248:	009b      	lsls	r3, r3, #2
 800524a:	440b      	add	r3, r1
 800524c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d108      	bne.n	8005268 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6818      	ldr	r0, [r3, #0]
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005260:	461a      	mov	r2, r3
 8005262:	2100      	movs	r1, #0
 8005264:	f002 fd9a 	bl	8007d9c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	b2db      	uxtb	r3, r3
 800526c:	4619      	mov	r1, r3
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	f009 f804 	bl	800e27c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005274:	2300      	movs	r3, #0
}
 8005276:	4618      	mov	r0, r3
 8005278:	3720      	adds	r7, #32
 800527a:	46bd      	mov	sp, r7
 800527c:	bd80      	pop	{r7, pc}
 800527e:	bf00      	nop
 8005280:	4f54300a 	.word	0x4f54300a
 8005284:	4f54310a 	.word	0x4f54310a

08005288 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b086      	sub	sp, #24
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
 8005290:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	333c      	adds	r3, #60	; 0x3c
 80052a0:	3304      	adds	r3, #4
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	015a      	lsls	r2, r3, #5
 80052aa:	693b      	ldr	r3, [r7, #16]
 80052ac:	4413      	add	r3, r2
 80052ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052b2:	689b      	ldr	r3, [r3, #8]
 80052b4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	4a15      	ldr	r2, [pc, #84]	; (8005310 <PCD_EP_OutSetupPacket_int+0x88>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d90e      	bls.n	80052dc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d009      	beq.n	80052dc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	015a      	lsls	r2, r3, #5
 80052cc:	693b      	ldr	r3, [r7, #16]
 80052ce:	4413      	add	r3, r2
 80052d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052d4:	461a      	mov	r2, r3
 80052d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052da:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80052dc:	6878      	ldr	r0, [r7, #4]
 80052de:	f008 ffbb 	bl	800e258 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	4a0a      	ldr	r2, [pc, #40]	; (8005310 <PCD_EP_OutSetupPacket_int+0x88>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d90c      	bls.n	8005304 <PCD_EP_OutSetupPacket_int+0x7c>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	691b      	ldr	r3, [r3, #16]
 80052ee:	2b01      	cmp	r3, #1
 80052f0:	d108      	bne.n	8005304 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6818      	ldr	r0, [r3, #0]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80052fc:	461a      	mov	r2, r3
 80052fe:	2101      	movs	r1, #1
 8005300:	f002 fd4c 	bl	8007d9c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005304:	2300      	movs	r3, #0
}
 8005306:	4618      	mov	r0, r3
 8005308:	3718      	adds	r7, #24
 800530a:	46bd      	mov	sp, r7
 800530c:	bd80      	pop	{r7, pc}
 800530e:	bf00      	nop
 8005310:	4f54300a 	.word	0x4f54300a

08005314 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005314:	b480      	push	{r7}
 8005316:	b085      	sub	sp, #20
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
 800531c:	460b      	mov	r3, r1
 800531e:	70fb      	strb	r3, [r7, #3]
 8005320:	4613      	mov	r3, r2
 8005322:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800532a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800532c:	78fb      	ldrb	r3, [r7, #3]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d107      	bne.n	8005342 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005332:	883b      	ldrh	r3, [r7, #0]
 8005334:	0419      	lsls	r1, r3, #16
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	68ba      	ldr	r2, [r7, #8]
 800533c:	430a      	orrs	r2, r1
 800533e:	629a      	str	r2, [r3, #40]	; 0x28
 8005340:	e028      	b.n	8005394 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005348:	0c1b      	lsrs	r3, r3, #16
 800534a:	68ba      	ldr	r2, [r7, #8]
 800534c:	4413      	add	r3, r2
 800534e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005350:	2300      	movs	r3, #0
 8005352:	73fb      	strb	r3, [r7, #15]
 8005354:	e00d      	b.n	8005372 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681a      	ldr	r2, [r3, #0]
 800535a:	7bfb      	ldrb	r3, [r7, #15]
 800535c:	3340      	adds	r3, #64	; 0x40
 800535e:	009b      	lsls	r3, r3, #2
 8005360:	4413      	add	r3, r2
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	0c1b      	lsrs	r3, r3, #16
 8005366:	68ba      	ldr	r2, [r7, #8]
 8005368:	4413      	add	r3, r2
 800536a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800536c:	7bfb      	ldrb	r3, [r7, #15]
 800536e:	3301      	adds	r3, #1
 8005370:	73fb      	strb	r3, [r7, #15]
 8005372:	7bfa      	ldrb	r2, [r7, #15]
 8005374:	78fb      	ldrb	r3, [r7, #3]
 8005376:	3b01      	subs	r3, #1
 8005378:	429a      	cmp	r2, r3
 800537a:	d3ec      	bcc.n	8005356 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800537c:	883b      	ldrh	r3, [r7, #0]
 800537e:	0418      	lsls	r0, r3, #16
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6819      	ldr	r1, [r3, #0]
 8005384:	78fb      	ldrb	r3, [r7, #3]
 8005386:	3b01      	subs	r3, #1
 8005388:	68ba      	ldr	r2, [r7, #8]
 800538a:	4302      	orrs	r2, r0
 800538c:	3340      	adds	r3, #64	; 0x40
 800538e:	009b      	lsls	r3, r3, #2
 8005390:	440b      	add	r3, r1
 8005392:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005394:	2300      	movs	r3, #0
}
 8005396:	4618      	mov	r0, r3
 8005398:	3714      	adds	r7, #20
 800539a:	46bd      	mov	sp, r7
 800539c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a0:	4770      	bx	lr

080053a2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80053a2:	b480      	push	{r7}
 80053a4:	b083      	sub	sp, #12
 80053a6:	af00      	add	r7, sp, #0
 80053a8:	6078      	str	r0, [r7, #4]
 80053aa:	460b      	mov	r3, r1
 80053ac:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	887a      	ldrh	r2, [r7, #2]
 80053b4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80053b6:	2300      	movs	r3, #0
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	370c      	adds	r7, #12
 80053bc:	46bd      	mov	sp, r7
 80053be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c2:	4770      	bx	lr

080053c4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80053c4:	b480      	push	{r7}
 80053c6:	b083      	sub	sp, #12
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
 80053cc:	460b      	mov	r3, r1
 80053ce:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80053d0:	bf00      	nop
 80053d2:	370c      	adds	r7, #12
 80053d4:	46bd      	mov	sp, r7
 80053d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053da:	4770      	bx	lr

080053dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b086      	sub	sp, #24
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d101      	bne.n	80053ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80053ea:	2301      	movs	r3, #1
 80053ec:	e267      	b.n	80058be <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f003 0301 	and.w	r3, r3, #1
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d075      	beq.n	80054e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80053fa:	4b88      	ldr	r3, [pc, #544]	; (800561c <HAL_RCC_OscConfig+0x240>)
 80053fc:	689b      	ldr	r3, [r3, #8]
 80053fe:	f003 030c 	and.w	r3, r3, #12
 8005402:	2b04      	cmp	r3, #4
 8005404:	d00c      	beq.n	8005420 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005406:	4b85      	ldr	r3, [pc, #532]	; (800561c <HAL_RCC_OscConfig+0x240>)
 8005408:	689b      	ldr	r3, [r3, #8]
 800540a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800540e:	2b08      	cmp	r3, #8
 8005410:	d112      	bne.n	8005438 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005412:	4b82      	ldr	r3, [pc, #520]	; (800561c <HAL_RCC_OscConfig+0x240>)
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800541a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800541e:	d10b      	bne.n	8005438 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005420:	4b7e      	ldr	r3, [pc, #504]	; (800561c <HAL_RCC_OscConfig+0x240>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005428:	2b00      	cmp	r3, #0
 800542a:	d05b      	beq.n	80054e4 <HAL_RCC_OscConfig+0x108>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	685b      	ldr	r3, [r3, #4]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d157      	bne.n	80054e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005434:	2301      	movs	r3, #1
 8005436:	e242      	b.n	80058be <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005440:	d106      	bne.n	8005450 <HAL_RCC_OscConfig+0x74>
 8005442:	4b76      	ldr	r3, [pc, #472]	; (800561c <HAL_RCC_OscConfig+0x240>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a75      	ldr	r2, [pc, #468]	; (800561c <HAL_RCC_OscConfig+0x240>)
 8005448:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800544c:	6013      	str	r3, [r2, #0]
 800544e:	e01d      	b.n	800548c <HAL_RCC_OscConfig+0xb0>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005458:	d10c      	bne.n	8005474 <HAL_RCC_OscConfig+0x98>
 800545a:	4b70      	ldr	r3, [pc, #448]	; (800561c <HAL_RCC_OscConfig+0x240>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a6f      	ldr	r2, [pc, #444]	; (800561c <HAL_RCC_OscConfig+0x240>)
 8005460:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005464:	6013      	str	r3, [r2, #0]
 8005466:	4b6d      	ldr	r3, [pc, #436]	; (800561c <HAL_RCC_OscConfig+0x240>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a6c      	ldr	r2, [pc, #432]	; (800561c <HAL_RCC_OscConfig+0x240>)
 800546c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005470:	6013      	str	r3, [r2, #0]
 8005472:	e00b      	b.n	800548c <HAL_RCC_OscConfig+0xb0>
 8005474:	4b69      	ldr	r3, [pc, #420]	; (800561c <HAL_RCC_OscConfig+0x240>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a68      	ldr	r2, [pc, #416]	; (800561c <HAL_RCC_OscConfig+0x240>)
 800547a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800547e:	6013      	str	r3, [r2, #0]
 8005480:	4b66      	ldr	r3, [pc, #408]	; (800561c <HAL_RCC_OscConfig+0x240>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4a65      	ldr	r2, [pc, #404]	; (800561c <HAL_RCC_OscConfig+0x240>)
 8005486:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800548a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d013      	beq.n	80054bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005494:	f7fe f890 	bl	80035b8 <HAL_GetTick>
 8005498:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800549a:	e008      	b.n	80054ae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800549c:	f7fe f88c 	bl	80035b8 <HAL_GetTick>
 80054a0:	4602      	mov	r2, r0
 80054a2:	693b      	ldr	r3, [r7, #16]
 80054a4:	1ad3      	subs	r3, r2, r3
 80054a6:	2b64      	cmp	r3, #100	; 0x64
 80054a8:	d901      	bls.n	80054ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80054aa:	2303      	movs	r3, #3
 80054ac:	e207      	b.n	80058be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054ae:	4b5b      	ldr	r3, [pc, #364]	; (800561c <HAL_RCC_OscConfig+0x240>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d0f0      	beq.n	800549c <HAL_RCC_OscConfig+0xc0>
 80054ba:	e014      	b.n	80054e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054bc:	f7fe f87c 	bl	80035b8 <HAL_GetTick>
 80054c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80054c2:	e008      	b.n	80054d6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80054c4:	f7fe f878 	bl	80035b8 <HAL_GetTick>
 80054c8:	4602      	mov	r2, r0
 80054ca:	693b      	ldr	r3, [r7, #16]
 80054cc:	1ad3      	subs	r3, r2, r3
 80054ce:	2b64      	cmp	r3, #100	; 0x64
 80054d0:	d901      	bls.n	80054d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80054d2:	2303      	movs	r3, #3
 80054d4:	e1f3      	b.n	80058be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80054d6:	4b51      	ldr	r3, [pc, #324]	; (800561c <HAL_RCC_OscConfig+0x240>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d1f0      	bne.n	80054c4 <HAL_RCC_OscConfig+0xe8>
 80054e2:	e000      	b.n	80054e6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f003 0302 	and.w	r3, r3, #2
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d063      	beq.n	80055ba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80054f2:	4b4a      	ldr	r3, [pc, #296]	; (800561c <HAL_RCC_OscConfig+0x240>)
 80054f4:	689b      	ldr	r3, [r3, #8]
 80054f6:	f003 030c 	and.w	r3, r3, #12
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d00b      	beq.n	8005516 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80054fe:	4b47      	ldr	r3, [pc, #284]	; (800561c <HAL_RCC_OscConfig+0x240>)
 8005500:	689b      	ldr	r3, [r3, #8]
 8005502:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005506:	2b08      	cmp	r3, #8
 8005508:	d11c      	bne.n	8005544 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800550a:	4b44      	ldr	r3, [pc, #272]	; (800561c <HAL_RCC_OscConfig+0x240>)
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005512:	2b00      	cmp	r3, #0
 8005514:	d116      	bne.n	8005544 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005516:	4b41      	ldr	r3, [pc, #260]	; (800561c <HAL_RCC_OscConfig+0x240>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f003 0302 	and.w	r3, r3, #2
 800551e:	2b00      	cmp	r3, #0
 8005520:	d005      	beq.n	800552e <HAL_RCC_OscConfig+0x152>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	68db      	ldr	r3, [r3, #12]
 8005526:	2b01      	cmp	r3, #1
 8005528:	d001      	beq.n	800552e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800552a:	2301      	movs	r3, #1
 800552c:	e1c7      	b.n	80058be <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800552e:	4b3b      	ldr	r3, [pc, #236]	; (800561c <HAL_RCC_OscConfig+0x240>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	691b      	ldr	r3, [r3, #16]
 800553a:	00db      	lsls	r3, r3, #3
 800553c:	4937      	ldr	r1, [pc, #220]	; (800561c <HAL_RCC_OscConfig+0x240>)
 800553e:	4313      	orrs	r3, r2
 8005540:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005542:	e03a      	b.n	80055ba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	68db      	ldr	r3, [r3, #12]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d020      	beq.n	800558e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800554c:	4b34      	ldr	r3, [pc, #208]	; (8005620 <HAL_RCC_OscConfig+0x244>)
 800554e:	2201      	movs	r2, #1
 8005550:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005552:	f7fe f831 	bl	80035b8 <HAL_GetTick>
 8005556:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005558:	e008      	b.n	800556c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800555a:	f7fe f82d 	bl	80035b8 <HAL_GetTick>
 800555e:	4602      	mov	r2, r0
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	1ad3      	subs	r3, r2, r3
 8005564:	2b02      	cmp	r3, #2
 8005566:	d901      	bls.n	800556c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005568:	2303      	movs	r3, #3
 800556a:	e1a8      	b.n	80058be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800556c:	4b2b      	ldr	r3, [pc, #172]	; (800561c <HAL_RCC_OscConfig+0x240>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f003 0302 	and.w	r3, r3, #2
 8005574:	2b00      	cmp	r3, #0
 8005576:	d0f0      	beq.n	800555a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005578:	4b28      	ldr	r3, [pc, #160]	; (800561c <HAL_RCC_OscConfig+0x240>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	691b      	ldr	r3, [r3, #16]
 8005584:	00db      	lsls	r3, r3, #3
 8005586:	4925      	ldr	r1, [pc, #148]	; (800561c <HAL_RCC_OscConfig+0x240>)
 8005588:	4313      	orrs	r3, r2
 800558a:	600b      	str	r3, [r1, #0]
 800558c:	e015      	b.n	80055ba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800558e:	4b24      	ldr	r3, [pc, #144]	; (8005620 <HAL_RCC_OscConfig+0x244>)
 8005590:	2200      	movs	r2, #0
 8005592:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005594:	f7fe f810 	bl	80035b8 <HAL_GetTick>
 8005598:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800559a:	e008      	b.n	80055ae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800559c:	f7fe f80c 	bl	80035b8 <HAL_GetTick>
 80055a0:	4602      	mov	r2, r0
 80055a2:	693b      	ldr	r3, [r7, #16]
 80055a4:	1ad3      	subs	r3, r2, r3
 80055a6:	2b02      	cmp	r3, #2
 80055a8:	d901      	bls.n	80055ae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80055aa:	2303      	movs	r3, #3
 80055ac:	e187      	b.n	80058be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80055ae:	4b1b      	ldr	r3, [pc, #108]	; (800561c <HAL_RCC_OscConfig+0x240>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f003 0302 	and.w	r3, r3, #2
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d1f0      	bne.n	800559c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f003 0308 	and.w	r3, r3, #8
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d036      	beq.n	8005634 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	695b      	ldr	r3, [r3, #20]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d016      	beq.n	80055fc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80055ce:	4b15      	ldr	r3, [pc, #84]	; (8005624 <HAL_RCC_OscConfig+0x248>)
 80055d0:	2201      	movs	r2, #1
 80055d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055d4:	f7fd fff0 	bl	80035b8 <HAL_GetTick>
 80055d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80055da:	e008      	b.n	80055ee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80055dc:	f7fd ffec 	bl	80035b8 <HAL_GetTick>
 80055e0:	4602      	mov	r2, r0
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	1ad3      	subs	r3, r2, r3
 80055e6:	2b02      	cmp	r3, #2
 80055e8:	d901      	bls.n	80055ee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80055ea:	2303      	movs	r3, #3
 80055ec:	e167      	b.n	80058be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80055ee:	4b0b      	ldr	r3, [pc, #44]	; (800561c <HAL_RCC_OscConfig+0x240>)
 80055f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055f2:	f003 0302 	and.w	r3, r3, #2
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d0f0      	beq.n	80055dc <HAL_RCC_OscConfig+0x200>
 80055fa:	e01b      	b.n	8005634 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80055fc:	4b09      	ldr	r3, [pc, #36]	; (8005624 <HAL_RCC_OscConfig+0x248>)
 80055fe:	2200      	movs	r2, #0
 8005600:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005602:	f7fd ffd9 	bl	80035b8 <HAL_GetTick>
 8005606:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005608:	e00e      	b.n	8005628 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800560a:	f7fd ffd5 	bl	80035b8 <HAL_GetTick>
 800560e:	4602      	mov	r2, r0
 8005610:	693b      	ldr	r3, [r7, #16]
 8005612:	1ad3      	subs	r3, r2, r3
 8005614:	2b02      	cmp	r3, #2
 8005616:	d907      	bls.n	8005628 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005618:	2303      	movs	r3, #3
 800561a:	e150      	b.n	80058be <HAL_RCC_OscConfig+0x4e2>
 800561c:	40023800 	.word	0x40023800
 8005620:	42470000 	.word	0x42470000
 8005624:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005628:	4b88      	ldr	r3, [pc, #544]	; (800584c <HAL_RCC_OscConfig+0x470>)
 800562a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800562c:	f003 0302 	and.w	r3, r3, #2
 8005630:	2b00      	cmp	r3, #0
 8005632:	d1ea      	bne.n	800560a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f003 0304 	and.w	r3, r3, #4
 800563c:	2b00      	cmp	r3, #0
 800563e:	f000 8097 	beq.w	8005770 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005642:	2300      	movs	r3, #0
 8005644:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005646:	4b81      	ldr	r3, [pc, #516]	; (800584c <HAL_RCC_OscConfig+0x470>)
 8005648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800564a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800564e:	2b00      	cmp	r3, #0
 8005650:	d10f      	bne.n	8005672 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005652:	2300      	movs	r3, #0
 8005654:	60bb      	str	r3, [r7, #8]
 8005656:	4b7d      	ldr	r3, [pc, #500]	; (800584c <HAL_RCC_OscConfig+0x470>)
 8005658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800565a:	4a7c      	ldr	r2, [pc, #496]	; (800584c <HAL_RCC_OscConfig+0x470>)
 800565c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005660:	6413      	str	r3, [r2, #64]	; 0x40
 8005662:	4b7a      	ldr	r3, [pc, #488]	; (800584c <HAL_RCC_OscConfig+0x470>)
 8005664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005666:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800566a:	60bb      	str	r3, [r7, #8]
 800566c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800566e:	2301      	movs	r3, #1
 8005670:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005672:	4b77      	ldr	r3, [pc, #476]	; (8005850 <HAL_RCC_OscConfig+0x474>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800567a:	2b00      	cmp	r3, #0
 800567c:	d118      	bne.n	80056b0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800567e:	4b74      	ldr	r3, [pc, #464]	; (8005850 <HAL_RCC_OscConfig+0x474>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4a73      	ldr	r2, [pc, #460]	; (8005850 <HAL_RCC_OscConfig+0x474>)
 8005684:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005688:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800568a:	f7fd ff95 	bl	80035b8 <HAL_GetTick>
 800568e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005690:	e008      	b.n	80056a4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005692:	f7fd ff91 	bl	80035b8 <HAL_GetTick>
 8005696:	4602      	mov	r2, r0
 8005698:	693b      	ldr	r3, [r7, #16]
 800569a:	1ad3      	subs	r3, r2, r3
 800569c:	2b02      	cmp	r3, #2
 800569e:	d901      	bls.n	80056a4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80056a0:	2303      	movs	r3, #3
 80056a2:	e10c      	b.n	80058be <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056a4:	4b6a      	ldr	r3, [pc, #424]	; (8005850 <HAL_RCC_OscConfig+0x474>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d0f0      	beq.n	8005692 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	689b      	ldr	r3, [r3, #8]
 80056b4:	2b01      	cmp	r3, #1
 80056b6:	d106      	bne.n	80056c6 <HAL_RCC_OscConfig+0x2ea>
 80056b8:	4b64      	ldr	r3, [pc, #400]	; (800584c <HAL_RCC_OscConfig+0x470>)
 80056ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056bc:	4a63      	ldr	r2, [pc, #396]	; (800584c <HAL_RCC_OscConfig+0x470>)
 80056be:	f043 0301 	orr.w	r3, r3, #1
 80056c2:	6713      	str	r3, [r2, #112]	; 0x70
 80056c4:	e01c      	b.n	8005700 <HAL_RCC_OscConfig+0x324>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	689b      	ldr	r3, [r3, #8]
 80056ca:	2b05      	cmp	r3, #5
 80056cc:	d10c      	bne.n	80056e8 <HAL_RCC_OscConfig+0x30c>
 80056ce:	4b5f      	ldr	r3, [pc, #380]	; (800584c <HAL_RCC_OscConfig+0x470>)
 80056d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056d2:	4a5e      	ldr	r2, [pc, #376]	; (800584c <HAL_RCC_OscConfig+0x470>)
 80056d4:	f043 0304 	orr.w	r3, r3, #4
 80056d8:	6713      	str	r3, [r2, #112]	; 0x70
 80056da:	4b5c      	ldr	r3, [pc, #368]	; (800584c <HAL_RCC_OscConfig+0x470>)
 80056dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056de:	4a5b      	ldr	r2, [pc, #364]	; (800584c <HAL_RCC_OscConfig+0x470>)
 80056e0:	f043 0301 	orr.w	r3, r3, #1
 80056e4:	6713      	str	r3, [r2, #112]	; 0x70
 80056e6:	e00b      	b.n	8005700 <HAL_RCC_OscConfig+0x324>
 80056e8:	4b58      	ldr	r3, [pc, #352]	; (800584c <HAL_RCC_OscConfig+0x470>)
 80056ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056ec:	4a57      	ldr	r2, [pc, #348]	; (800584c <HAL_RCC_OscConfig+0x470>)
 80056ee:	f023 0301 	bic.w	r3, r3, #1
 80056f2:	6713      	str	r3, [r2, #112]	; 0x70
 80056f4:	4b55      	ldr	r3, [pc, #340]	; (800584c <HAL_RCC_OscConfig+0x470>)
 80056f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056f8:	4a54      	ldr	r2, [pc, #336]	; (800584c <HAL_RCC_OscConfig+0x470>)
 80056fa:	f023 0304 	bic.w	r3, r3, #4
 80056fe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	689b      	ldr	r3, [r3, #8]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d015      	beq.n	8005734 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005708:	f7fd ff56 	bl	80035b8 <HAL_GetTick>
 800570c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800570e:	e00a      	b.n	8005726 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005710:	f7fd ff52 	bl	80035b8 <HAL_GetTick>
 8005714:	4602      	mov	r2, r0
 8005716:	693b      	ldr	r3, [r7, #16]
 8005718:	1ad3      	subs	r3, r2, r3
 800571a:	f241 3288 	movw	r2, #5000	; 0x1388
 800571e:	4293      	cmp	r3, r2
 8005720:	d901      	bls.n	8005726 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005722:	2303      	movs	r3, #3
 8005724:	e0cb      	b.n	80058be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005726:	4b49      	ldr	r3, [pc, #292]	; (800584c <HAL_RCC_OscConfig+0x470>)
 8005728:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800572a:	f003 0302 	and.w	r3, r3, #2
 800572e:	2b00      	cmp	r3, #0
 8005730:	d0ee      	beq.n	8005710 <HAL_RCC_OscConfig+0x334>
 8005732:	e014      	b.n	800575e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005734:	f7fd ff40 	bl	80035b8 <HAL_GetTick>
 8005738:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800573a:	e00a      	b.n	8005752 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800573c:	f7fd ff3c 	bl	80035b8 <HAL_GetTick>
 8005740:	4602      	mov	r2, r0
 8005742:	693b      	ldr	r3, [r7, #16]
 8005744:	1ad3      	subs	r3, r2, r3
 8005746:	f241 3288 	movw	r2, #5000	; 0x1388
 800574a:	4293      	cmp	r3, r2
 800574c:	d901      	bls.n	8005752 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800574e:	2303      	movs	r3, #3
 8005750:	e0b5      	b.n	80058be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005752:	4b3e      	ldr	r3, [pc, #248]	; (800584c <HAL_RCC_OscConfig+0x470>)
 8005754:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005756:	f003 0302 	and.w	r3, r3, #2
 800575a:	2b00      	cmp	r3, #0
 800575c:	d1ee      	bne.n	800573c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800575e:	7dfb      	ldrb	r3, [r7, #23]
 8005760:	2b01      	cmp	r3, #1
 8005762:	d105      	bne.n	8005770 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005764:	4b39      	ldr	r3, [pc, #228]	; (800584c <HAL_RCC_OscConfig+0x470>)
 8005766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005768:	4a38      	ldr	r2, [pc, #224]	; (800584c <HAL_RCC_OscConfig+0x470>)
 800576a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800576e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	699b      	ldr	r3, [r3, #24]
 8005774:	2b00      	cmp	r3, #0
 8005776:	f000 80a1 	beq.w	80058bc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800577a:	4b34      	ldr	r3, [pc, #208]	; (800584c <HAL_RCC_OscConfig+0x470>)
 800577c:	689b      	ldr	r3, [r3, #8]
 800577e:	f003 030c 	and.w	r3, r3, #12
 8005782:	2b08      	cmp	r3, #8
 8005784:	d05c      	beq.n	8005840 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	699b      	ldr	r3, [r3, #24]
 800578a:	2b02      	cmp	r3, #2
 800578c:	d141      	bne.n	8005812 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800578e:	4b31      	ldr	r3, [pc, #196]	; (8005854 <HAL_RCC_OscConfig+0x478>)
 8005790:	2200      	movs	r2, #0
 8005792:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005794:	f7fd ff10 	bl	80035b8 <HAL_GetTick>
 8005798:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800579a:	e008      	b.n	80057ae <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800579c:	f7fd ff0c 	bl	80035b8 <HAL_GetTick>
 80057a0:	4602      	mov	r2, r0
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	1ad3      	subs	r3, r2, r3
 80057a6:	2b02      	cmp	r3, #2
 80057a8:	d901      	bls.n	80057ae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80057aa:	2303      	movs	r3, #3
 80057ac:	e087      	b.n	80058be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057ae:	4b27      	ldr	r3, [pc, #156]	; (800584c <HAL_RCC_OscConfig+0x470>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d1f0      	bne.n	800579c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	69da      	ldr	r2, [r3, #28]
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6a1b      	ldr	r3, [r3, #32]
 80057c2:	431a      	orrs	r2, r3
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057c8:	019b      	lsls	r3, r3, #6
 80057ca:	431a      	orrs	r2, r3
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057d0:	085b      	lsrs	r3, r3, #1
 80057d2:	3b01      	subs	r3, #1
 80057d4:	041b      	lsls	r3, r3, #16
 80057d6:	431a      	orrs	r2, r3
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057dc:	061b      	lsls	r3, r3, #24
 80057de:	491b      	ldr	r1, [pc, #108]	; (800584c <HAL_RCC_OscConfig+0x470>)
 80057e0:	4313      	orrs	r3, r2
 80057e2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80057e4:	4b1b      	ldr	r3, [pc, #108]	; (8005854 <HAL_RCC_OscConfig+0x478>)
 80057e6:	2201      	movs	r2, #1
 80057e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057ea:	f7fd fee5 	bl	80035b8 <HAL_GetTick>
 80057ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057f0:	e008      	b.n	8005804 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057f2:	f7fd fee1 	bl	80035b8 <HAL_GetTick>
 80057f6:	4602      	mov	r2, r0
 80057f8:	693b      	ldr	r3, [r7, #16]
 80057fa:	1ad3      	subs	r3, r2, r3
 80057fc:	2b02      	cmp	r3, #2
 80057fe:	d901      	bls.n	8005804 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005800:	2303      	movs	r3, #3
 8005802:	e05c      	b.n	80058be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005804:	4b11      	ldr	r3, [pc, #68]	; (800584c <HAL_RCC_OscConfig+0x470>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800580c:	2b00      	cmp	r3, #0
 800580e:	d0f0      	beq.n	80057f2 <HAL_RCC_OscConfig+0x416>
 8005810:	e054      	b.n	80058bc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005812:	4b10      	ldr	r3, [pc, #64]	; (8005854 <HAL_RCC_OscConfig+0x478>)
 8005814:	2200      	movs	r2, #0
 8005816:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005818:	f7fd fece 	bl	80035b8 <HAL_GetTick>
 800581c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800581e:	e008      	b.n	8005832 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005820:	f7fd feca 	bl	80035b8 <HAL_GetTick>
 8005824:	4602      	mov	r2, r0
 8005826:	693b      	ldr	r3, [r7, #16]
 8005828:	1ad3      	subs	r3, r2, r3
 800582a:	2b02      	cmp	r3, #2
 800582c:	d901      	bls.n	8005832 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800582e:	2303      	movs	r3, #3
 8005830:	e045      	b.n	80058be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005832:	4b06      	ldr	r3, [pc, #24]	; (800584c <HAL_RCC_OscConfig+0x470>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800583a:	2b00      	cmp	r3, #0
 800583c:	d1f0      	bne.n	8005820 <HAL_RCC_OscConfig+0x444>
 800583e:	e03d      	b.n	80058bc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	699b      	ldr	r3, [r3, #24]
 8005844:	2b01      	cmp	r3, #1
 8005846:	d107      	bne.n	8005858 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005848:	2301      	movs	r3, #1
 800584a:	e038      	b.n	80058be <HAL_RCC_OscConfig+0x4e2>
 800584c:	40023800 	.word	0x40023800
 8005850:	40007000 	.word	0x40007000
 8005854:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005858:	4b1b      	ldr	r3, [pc, #108]	; (80058c8 <HAL_RCC_OscConfig+0x4ec>)
 800585a:	685b      	ldr	r3, [r3, #4]
 800585c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	699b      	ldr	r3, [r3, #24]
 8005862:	2b01      	cmp	r3, #1
 8005864:	d028      	beq.n	80058b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005870:	429a      	cmp	r2, r3
 8005872:	d121      	bne.n	80058b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800587e:	429a      	cmp	r2, r3
 8005880:	d11a      	bne.n	80058b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005882:	68fa      	ldr	r2, [r7, #12]
 8005884:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005888:	4013      	ands	r3, r2
 800588a:	687a      	ldr	r2, [r7, #4]
 800588c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800588e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005890:	4293      	cmp	r3, r2
 8005892:	d111      	bne.n	80058b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800589e:	085b      	lsrs	r3, r3, #1
 80058a0:	3b01      	subs	r3, #1
 80058a2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80058a4:	429a      	cmp	r2, r3
 80058a6:	d107      	bne.n	80058b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058b2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80058b4:	429a      	cmp	r2, r3
 80058b6:	d001      	beq.n	80058bc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80058b8:	2301      	movs	r3, #1
 80058ba:	e000      	b.n	80058be <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80058bc:	2300      	movs	r3, #0
}
 80058be:	4618      	mov	r0, r3
 80058c0:	3718      	adds	r7, #24
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bd80      	pop	{r7, pc}
 80058c6:	bf00      	nop
 80058c8:	40023800 	.word	0x40023800

080058cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b084      	sub	sp, #16
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
 80058d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d101      	bne.n	80058e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80058dc:	2301      	movs	r3, #1
 80058de:	e0cc      	b.n	8005a7a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80058e0:	4b68      	ldr	r3, [pc, #416]	; (8005a84 <HAL_RCC_ClockConfig+0x1b8>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f003 030f 	and.w	r3, r3, #15
 80058e8:	683a      	ldr	r2, [r7, #0]
 80058ea:	429a      	cmp	r2, r3
 80058ec:	d90c      	bls.n	8005908 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058ee:	4b65      	ldr	r3, [pc, #404]	; (8005a84 <HAL_RCC_ClockConfig+0x1b8>)
 80058f0:	683a      	ldr	r2, [r7, #0]
 80058f2:	b2d2      	uxtb	r2, r2
 80058f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80058f6:	4b63      	ldr	r3, [pc, #396]	; (8005a84 <HAL_RCC_ClockConfig+0x1b8>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f003 030f 	and.w	r3, r3, #15
 80058fe:	683a      	ldr	r2, [r7, #0]
 8005900:	429a      	cmp	r2, r3
 8005902:	d001      	beq.n	8005908 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005904:	2301      	movs	r3, #1
 8005906:	e0b8      	b.n	8005a7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f003 0302 	and.w	r3, r3, #2
 8005910:	2b00      	cmp	r3, #0
 8005912:	d020      	beq.n	8005956 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f003 0304 	and.w	r3, r3, #4
 800591c:	2b00      	cmp	r3, #0
 800591e:	d005      	beq.n	800592c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005920:	4b59      	ldr	r3, [pc, #356]	; (8005a88 <HAL_RCC_ClockConfig+0x1bc>)
 8005922:	689b      	ldr	r3, [r3, #8]
 8005924:	4a58      	ldr	r2, [pc, #352]	; (8005a88 <HAL_RCC_ClockConfig+0x1bc>)
 8005926:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800592a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f003 0308 	and.w	r3, r3, #8
 8005934:	2b00      	cmp	r3, #0
 8005936:	d005      	beq.n	8005944 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005938:	4b53      	ldr	r3, [pc, #332]	; (8005a88 <HAL_RCC_ClockConfig+0x1bc>)
 800593a:	689b      	ldr	r3, [r3, #8]
 800593c:	4a52      	ldr	r2, [pc, #328]	; (8005a88 <HAL_RCC_ClockConfig+0x1bc>)
 800593e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005942:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005944:	4b50      	ldr	r3, [pc, #320]	; (8005a88 <HAL_RCC_ClockConfig+0x1bc>)
 8005946:	689b      	ldr	r3, [r3, #8]
 8005948:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	689b      	ldr	r3, [r3, #8]
 8005950:	494d      	ldr	r1, [pc, #308]	; (8005a88 <HAL_RCC_ClockConfig+0x1bc>)
 8005952:	4313      	orrs	r3, r2
 8005954:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f003 0301 	and.w	r3, r3, #1
 800595e:	2b00      	cmp	r3, #0
 8005960:	d044      	beq.n	80059ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	685b      	ldr	r3, [r3, #4]
 8005966:	2b01      	cmp	r3, #1
 8005968:	d107      	bne.n	800597a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800596a:	4b47      	ldr	r3, [pc, #284]	; (8005a88 <HAL_RCC_ClockConfig+0x1bc>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005972:	2b00      	cmp	r3, #0
 8005974:	d119      	bne.n	80059aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005976:	2301      	movs	r3, #1
 8005978:	e07f      	b.n	8005a7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	2b02      	cmp	r3, #2
 8005980:	d003      	beq.n	800598a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005986:	2b03      	cmp	r3, #3
 8005988:	d107      	bne.n	800599a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800598a:	4b3f      	ldr	r3, [pc, #252]	; (8005a88 <HAL_RCC_ClockConfig+0x1bc>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005992:	2b00      	cmp	r3, #0
 8005994:	d109      	bne.n	80059aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005996:	2301      	movs	r3, #1
 8005998:	e06f      	b.n	8005a7a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800599a:	4b3b      	ldr	r3, [pc, #236]	; (8005a88 <HAL_RCC_ClockConfig+0x1bc>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f003 0302 	and.w	r3, r3, #2
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d101      	bne.n	80059aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80059a6:	2301      	movs	r3, #1
 80059a8:	e067      	b.n	8005a7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80059aa:	4b37      	ldr	r3, [pc, #220]	; (8005a88 <HAL_RCC_ClockConfig+0x1bc>)
 80059ac:	689b      	ldr	r3, [r3, #8]
 80059ae:	f023 0203 	bic.w	r2, r3, #3
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	685b      	ldr	r3, [r3, #4]
 80059b6:	4934      	ldr	r1, [pc, #208]	; (8005a88 <HAL_RCC_ClockConfig+0x1bc>)
 80059b8:	4313      	orrs	r3, r2
 80059ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80059bc:	f7fd fdfc 	bl	80035b8 <HAL_GetTick>
 80059c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059c2:	e00a      	b.n	80059da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80059c4:	f7fd fdf8 	bl	80035b8 <HAL_GetTick>
 80059c8:	4602      	mov	r2, r0
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	1ad3      	subs	r3, r2, r3
 80059ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d901      	bls.n	80059da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80059d6:	2303      	movs	r3, #3
 80059d8:	e04f      	b.n	8005a7a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059da:	4b2b      	ldr	r3, [pc, #172]	; (8005a88 <HAL_RCC_ClockConfig+0x1bc>)
 80059dc:	689b      	ldr	r3, [r3, #8]
 80059de:	f003 020c 	and.w	r2, r3, #12
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	685b      	ldr	r3, [r3, #4]
 80059e6:	009b      	lsls	r3, r3, #2
 80059e8:	429a      	cmp	r2, r3
 80059ea:	d1eb      	bne.n	80059c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80059ec:	4b25      	ldr	r3, [pc, #148]	; (8005a84 <HAL_RCC_ClockConfig+0x1b8>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f003 030f 	and.w	r3, r3, #15
 80059f4:	683a      	ldr	r2, [r7, #0]
 80059f6:	429a      	cmp	r2, r3
 80059f8:	d20c      	bcs.n	8005a14 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059fa:	4b22      	ldr	r3, [pc, #136]	; (8005a84 <HAL_RCC_ClockConfig+0x1b8>)
 80059fc:	683a      	ldr	r2, [r7, #0]
 80059fe:	b2d2      	uxtb	r2, r2
 8005a00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a02:	4b20      	ldr	r3, [pc, #128]	; (8005a84 <HAL_RCC_ClockConfig+0x1b8>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f003 030f 	and.w	r3, r3, #15
 8005a0a:	683a      	ldr	r2, [r7, #0]
 8005a0c:	429a      	cmp	r2, r3
 8005a0e:	d001      	beq.n	8005a14 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005a10:	2301      	movs	r3, #1
 8005a12:	e032      	b.n	8005a7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f003 0304 	and.w	r3, r3, #4
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d008      	beq.n	8005a32 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005a20:	4b19      	ldr	r3, [pc, #100]	; (8005a88 <HAL_RCC_ClockConfig+0x1bc>)
 8005a22:	689b      	ldr	r3, [r3, #8]
 8005a24:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	68db      	ldr	r3, [r3, #12]
 8005a2c:	4916      	ldr	r1, [pc, #88]	; (8005a88 <HAL_RCC_ClockConfig+0x1bc>)
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f003 0308 	and.w	r3, r3, #8
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d009      	beq.n	8005a52 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005a3e:	4b12      	ldr	r3, [pc, #72]	; (8005a88 <HAL_RCC_ClockConfig+0x1bc>)
 8005a40:	689b      	ldr	r3, [r3, #8]
 8005a42:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	691b      	ldr	r3, [r3, #16]
 8005a4a:	00db      	lsls	r3, r3, #3
 8005a4c:	490e      	ldr	r1, [pc, #56]	; (8005a88 <HAL_RCC_ClockConfig+0x1bc>)
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005a52:	f000 f821 	bl	8005a98 <HAL_RCC_GetSysClockFreq>
 8005a56:	4602      	mov	r2, r0
 8005a58:	4b0b      	ldr	r3, [pc, #44]	; (8005a88 <HAL_RCC_ClockConfig+0x1bc>)
 8005a5a:	689b      	ldr	r3, [r3, #8]
 8005a5c:	091b      	lsrs	r3, r3, #4
 8005a5e:	f003 030f 	and.w	r3, r3, #15
 8005a62:	490a      	ldr	r1, [pc, #40]	; (8005a8c <HAL_RCC_ClockConfig+0x1c0>)
 8005a64:	5ccb      	ldrb	r3, [r1, r3]
 8005a66:	fa22 f303 	lsr.w	r3, r2, r3
 8005a6a:	4a09      	ldr	r2, [pc, #36]	; (8005a90 <HAL_RCC_ClockConfig+0x1c4>)
 8005a6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005a6e:	4b09      	ldr	r3, [pc, #36]	; (8005a94 <HAL_RCC_ClockConfig+0x1c8>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4618      	mov	r0, r3
 8005a74:	f7fb fd0a 	bl	800148c <HAL_InitTick>

  return HAL_OK;
 8005a78:	2300      	movs	r3, #0
}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	3710      	adds	r7, #16
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bd80      	pop	{r7, pc}
 8005a82:	bf00      	nop
 8005a84:	40023c00 	.word	0x40023c00
 8005a88:	40023800 	.word	0x40023800
 8005a8c:	080116a0 	.word	0x080116a0
 8005a90:	2000000c 	.word	0x2000000c
 8005a94:	20000084 	.word	0x20000084

08005a98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a9c:	b094      	sub	sp, #80	; 0x50
 8005a9e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	647b      	str	r3, [r7, #68]	; 0x44
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005aac:	2300      	movs	r3, #0
 8005aae:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005ab0:	4b79      	ldr	r3, [pc, #484]	; (8005c98 <HAL_RCC_GetSysClockFreq+0x200>)
 8005ab2:	689b      	ldr	r3, [r3, #8]
 8005ab4:	f003 030c 	and.w	r3, r3, #12
 8005ab8:	2b08      	cmp	r3, #8
 8005aba:	d00d      	beq.n	8005ad8 <HAL_RCC_GetSysClockFreq+0x40>
 8005abc:	2b08      	cmp	r3, #8
 8005abe:	f200 80e1 	bhi.w	8005c84 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d002      	beq.n	8005acc <HAL_RCC_GetSysClockFreq+0x34>
 8005ac6:	2b04      	cmp	r3, #4
 8005ac8:	d003      	beq.n	8005ad2 <HAL_RCC_GetSysClockFreq+0x3a>
 8005aca:	e0db      	b.n	8005c84 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005acc:	4b73      	ldr	r3, [pc, #460]	; (8005c9c <HAL_RCC_GetSysClockFreq+0x204>)
 8005ace:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005ad0:	e0db      	b.n	8005c8a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005ad2:	4b73      	ldr	r3, [pc, #460]	; (8005ca0 <HAL_RCC_GetSysClockFreq+0x208>)
 8005ad4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005ad6:	e0d8      	b.n	8005c8a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005ad8:	4b6f      	ldr	r3, [pc, #444]	; (8005c98 <HAL_RCC_GetSysClockFreq+0x200>)
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ae0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005ae2:	4b6d      	ldr	r3, [pc, #436]	; (8005c98 <HAL_RCC_GetSysClockFreq+0x200>)
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d063      	beq.n	8005bb6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005aee:	4b6a      	ldr	r3, [pc, #424]	; (8005c98 <HAL_RCC_GetSysClockFreq+0x200>)
 8005af0:	685b      	ldr	r3, [r3, #4]
 8005af2:	099b      	lsrs	r3, r3, #6
 8005af4:	2200      	movs	r2, #0
 8005af6:	63bb      	str	r3, [r7, #56]	; 0x38
 8005af8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005afa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005afc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b00:	633b      	str	r3, [r7, #48]	; 0x30
 8005b02:	2300      	movs	r3, #0
 8005b04:	637b      	str	r3, [r7, #52]	; 0x34
 8005b06:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005b0a:	4622      	mov	r2, r4
 8005b0c:	462b      	mov	r3, r5
 8005b0e:	f04f 0000 	mov.w	r0, #0
 8005b12:	f04f 0100 	mov.w	r1, #0
 8005b16:	0159      	lsls	r1, r3, #5
 8005b18:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005b1c:	0150      	lsls	r0, r2, #5
 8005b1e:	4602      	mov	r2, r0
 8005b20:	460b      	mov	r3, r1
 8005b22:	4621      	mov	r1, r4
 8005b24:	1a51      	subs	r1, r2, r1
 8005b26:	6139      	str	r1, [r7, #16]
 8005b28:	4629      	mov	r1, r5
 8005b2a:	eb63 0301 	sbc.w	r3, r3, r1
 8005b2e:	617b      	str	r3, [r7, #20]
 8005b30:	f04f 0200 	mov.w	r2, #0
 8005b34:	f04f 0300 	mov.w	r3, #0
 8005b38:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005b3c:	4659      	mov	r1, fp
 8005b3e:	018b      	lsls	r3, r1, #6
 8005b40:	4651      	mov	r1, sl
 8005b42:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005b46:	4651      	mov	r1, sl
 8005b48:	018a      	lsls	r2, r1, #6
 8005b4a:	4651      	mov	r1, sl
 8005b4c:	ebb2 0801 	subs.w	r8, r2, r1
 8005b50:	4659      	mov	r1, fp
 8005b52:	eb63 0901 	sbc.w	r9, r3, r1
 8005b56:	f04f 0200 	mov.w	r2, #0
 8005b5a:	f04f 0300 	mov.w	r3, #0
 8005b5e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005b62:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005b66:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005b6a:	4690      	mov	r8, r2
 8005b6c:	4699      	mov	r9, r3
 8005b6e:	4623      	mov	r3, r4
 8005b70:	eb18 0303 	adds.w	r3, r8, r3
 8005b74:	60bb      	str	r3, [r7, #8]
 8005b76:	462b      	mov	r3, r5
 8005b78:	eb49 0303 	adc.w	r3, r9, r3
 8005b7c:	60fb      	str	r3, [r7, #12]
 8005b7e:	f04f 0200 	mov.w	r2, #0
 8005b82:	f04f 0300 	mov.w	r3, #0
 8005b86:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005b8a:	4629      	mov	r1, r5
 8005b8c:	024b      	lsls	r3, r1, #9
 8005b8e:	4621      	mov	r1, r4
 8005b90:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005b94:	4621      	mov	r1, r4
 8005b96:	024a      	lsls	r2, r1, #9
 8005b98:	4610      	mov	r0, r2
 8005b9a:	4619      	mov	r1, r3
 8005b9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ba2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005ba4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005ba8:	f7fb f80e 	bl	8000bc8 <__aeabi_uldivmod>
 8005bac:	4602      	mov	r2, r0
 8005bae:	460b      	mov	r3, r1
 8005bb0:	4613      	mov	r3, r2
 8005bb2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005bb4:	e058      	b.n	8005c68 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005bb6:	4b38      	ldr	r3, [pc, #224]	; (8005c98 <HAL_RCC_GetSysClockFreq+0x200>)
 8005bb8:	685b      	ldr	r3, [r3, #4]
 8005bba:	099b      	lsrs	r3, r3, #6
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	4611      	mov	r1, r2
 8005bc2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005bc6:	623b      	str	r3, [r7, #32]
 8005bc8:	2300      	movs	r3, #0
 8005bca:	627b      	str	r3, [r7, #36]	; 0x24
 8005bcc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005bd0:	4642      	mov	r2, r8
 8005bd2:	464b      	mov	r3, r9
 8005bd4:	f04f 0000 	mov.w	r0, #0
 8005bd8:	f04f 0100 	mov.w	r1, #0
 8005bdc:	0159      	lsls	r1, r3, #5
 8005bde:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005be2:	0150      	lsls	r0, r2, #5
 8005be4:	4602      	mov	r2, r0
 8005be6:	460b      	mov	r3, r1
 8005be8:	4641      	mov	r1, r8
 8005bea:	ebb2 0a01 	subs.w	sl, r2, r1
 8005bee:	4649      	mov	r1, r9
 8005bf0:	eb63 0b01 	sbc.w	fp, r3, r1
 8005bf4:	f04f 0200 	mov.w	r2, #0
 8005bf8:	f04f 0300 	mov.w	r3, #0
 8005bfc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005c00:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005c04:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005c08:	ebb2 040a 	subs.w	r4, r2, sl
 8005c0c:	eb63 050b 	sbc.w	r5, r3, fp
 8005c10:	f04f 0200 	mov.w	r2, #0
 8005c14:	f04f 0300 	mov.w	r3, #0
 8005c18:	00eb      	lsls	r3, r5, #3
 8005c1a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005c1e:	00e2      	lsls	r2, r4, #3
 8005c20:	4614      	mov	r4, r2
 8005c22:	461d      	mov	r5, r3
 8005c24:	4643      	mov	r3, r8
 8005c26:	18e3      	adds	r3, r4, r3
 8005c28:	603b      	str	r3, [r7, #0]
 8005c2a:	464b      	mov	r3, r9
 8005c2c:	eb45 0303 	adc.w	r3, r5, r3
 8005c30:	607b      	str	r3, [r7, #4]
 8005c32:	f04f 0200 	mov.w	r2, #0
 8005c36:	f04f 0300 	mov.w	r3, #0
 8005c3a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005c3e:	4629      	mov	r1, r5
 8005c40:	028b      	lsls	r3, r1, #10
 8005c42:	4621      	mov	r1, r4
 8005c44:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005c48:	4621      	mov	r1, r4
 8005c4a:	028a      	lsls	r2, r1, #10
 8005c4c:	4610      	mov	r0, r2
 8005c4e:	4619      	mov	r1, r3
 8005c50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c52:	2200      	movs	r2, #0
 8005c54:	61bb      	str	r3, [r7, #24]
 8005c56:	61fa      	str	r2, [r7, #28]
 8005c58:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005c5c:	f7fa ffb4 	bl	8000bc8 <__aeabi_uldivmod>
 8005c60:	4602      	mov	r2, r0
 8005c62:	460b      	mov	r3, r1
 8005c64:	4613      	mov	r3, r2
 8005c66:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005c68:	4b0b      	ldr	r3, [pc, #44]	; (8005c98 <HAL_RCC_GetSysClockFreq+0x200>)
 8005c6a:	685b      	ldr	r3, [r3, #4]
 8005c6c:	0c1b      	lsrs	r3, r3, #16
 8005c6e:	f003 0303 	and.w	r3, r3, #3
 8005c72:	3301      	adds	r3, #1
 8005c74:	005b      	lsls	r3, r3, #1
 8005c76:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005c78:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005c7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c80:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005c82:	e002      	b.n	8005c8a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005c84:	4b05      	ldr	r3, [pc, #20]	; (8005c9c <HAL_RCC_GetSysClockFreq+0x204>)
 8005c86:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005c88:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005c8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	3750      	adds	r7, #80	; 0x50
 8005c90:	46bd      	mov	sp, r7
 8005c92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c96:	bf00      	nop
 8005c98:	40023800 	.word	0x40023800
 8005c9c:	00f42400 	.word	0x00f42400
 8005ca0:	007a1200 	.word	0x007a1200

08005ca4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005ca8:	4b03      	ldr	r3, [pc, #12]	; (8005cb8 <HAL_RCC_GetHCLKFreq+0x14>)
 8005caa:	681b      	ldr	r3, [r3, #0]
}
 8005cac:	4618      	mov	r0, r3
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb4:	4770      	bx	lr
 8005cb6:	bf00      	nop
 8005cb8:	2000000c 	.word	0x2000000c

08005cbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005cc0:	f7ff fff0 	bl	8005ca4 <HAL_RCC_GetHCLKFreq>
 8005cc4:	4602      	mov	r2, r0
 8005cc6:	4b05      	ldr	r3, [pc, #20]	; (8005cdc <HAL_RCC_GetPCLK1Freq+0x20>)
 8005cc8:	689b      	ldr	r3, [r3, #8]
 8005cca:	0a9b      	lsrs	r3, r3, #10
 8005ccc:	f003 0307 	and.w	r3, r3, #7
 8005cd0:	4903      	ldr	r1, [pc, #12]	; (8005ce0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005cd2:	5ccb      	ldrb	r3, [r1, r3]
 8005cd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005cd8:	4618      	mov	r0, r3
 8005cda:	bd80      	pop	{r7, pc}
 8005cdc:	40023800 	.word	0x40023800
 8005ce0:	080116b0 	.word	0x080116b0

08005ce4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b083      	sub	sp, #12
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
 8005cec:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	220f      	movs	r2, #15
 8005cf2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005cf4:	4b12      	ldr	r3, [pc, #72]	; (8005d40 <HAL_RCC_GetClockConfig+0x5c>)
 8005cf6:	689b      	ldr	r3, [r3, #8]
 8005cf8:	f003 0203 	and.w	r2, r3, #3
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005d00:	4b0f      	ldr	r3, [pc, #60]	; (8005d40 <HAL_RCC_GetClockConfig+0x5c>)
 8005d02:	689b      	ldr	r3, [r3, #8]
 8005d04:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005d0c:	4b0c      	ldr	r3, [pc, #48]	; (8005d40 <HAL_RCC_GetClockConfig+0x5c>)
 8005d0e:	689b      	ldr	r3, [r3, #8]
 8005d10:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005d18:	4b09      	ldr	r3, [pc, #36]	; (8005d40 <HAL_RCC_GetClockConfig+0x5c>)
 8005d1a:	689b      	ldr	r3, [r3, #8]
 8005d1c:	08db      	lsrs	r3, r3, #3
 8005d1e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005d26:	4b07      	ldr	r3, [pc, #28]	; (8005d44 <HAL_RCC_GetClockConfig+0x60>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f003 020f 	and.w	r2, r3, #15
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	601a      	str	r2, [r3, #0]
}
 8005d32:	bf00      	nop
 8005d34:	370c      	adds	r7, #12
 8005d36:	46bd      	mov	sp, r7
 8005d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3c:	4770      	bx	lr
 8005d3e:	bf00      	nop
 8005d40:	40023800 	.word	0x40023800
 8005d44:	40023c00 	.word	0x40023c00

08005d48 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b086      	sub	sp, #24
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005d50:	2300      	movs	r3, #0
 8005d52:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005d54:	2300      	movs	r3, #0
 8005d56:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f003 0301 	and.w	r3, r3, #1
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d10b      	bne.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d105      	bne.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d075      	beq.n	8005e68 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005d7c:	4b91      	ldr	r3, [pc, #580]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005d7e:	2200      	movs	r2, #0
 8005d80:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005d82:	f7fd fc19 	bl	80035b8 <HAL_GetTick>
 8005d86:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005d88:	e008      	b.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005d8a:	f7fd fc15 	bl	80035b8 <HAL_GetTick>
 8005d8e:	4602      	mov	r2, r0
 8005d90:	697b      	ldr	r3, [r7, #20]
 8005d92:	1ad3      	subs	r3, r2, r3
 8005d94:	2b02      	cmp	r3, #2
 8005d96:	d901      	bls.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005d98:	2303      	movs	r3, #3
 8005d9a:	e189      	b.n	80060b0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005d9c:	4b8a      	ldr	r3, [pc, #552]	; (8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d1f0      	bne.n	8005d8a <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f003 0301 	and.w	r3, r3, #1
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d009      	beq.n	8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	685b      	ldr	r3, [r3, #4]
 8005db8:	019a      	lsls	r2, r3, #6
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	689b      	ldr	r3, [r3, #8]
 8005dbe:	071b      	lsls	r3, r3, #28
 8005dc0:	4981      	ldr	r1, [pc, #516]	; (8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f003 0302 	and.w	r3, r3, #2
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d01f      	beq.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005dd4:	4b7c      	ldr	r3, [pc, #496]	; (8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005dd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005dda:	0f1b      	lsrs	r3, r3, #28
 8005ddc:	f003 0307 	and.w	r3, r3, #7
 8005de0:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	685b      	ldr	r3, [r3, #4]
 8005de6:	019a      	lsls	r2, r3, #6
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	68db      	ldr	r3, [r3, #12]
 8005dec:	061b      	lsls	r3, r3, #24
 8005dee:	431a      	orrs	r2, r3
 8005df0:	693b      	ldr	r3, [r7, #16]
 8005df2:	071b      	lsls	r3, r3, #28
 8005df4:	4974      	ldr	r1, [pc, #464]	; (8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005df6:	4313      	orrs	r3, r2
 8005df8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005dfc:	4b72      	ldr	r3, [pc, #456]	; (8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005dfe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e02:	f023 021f 	bic.w	r2, r3, #31
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	69db      	ldr	r3, [r3, #28]
 8005e0a:	3b01      	subs	r3, #1
 8005e0c:	496e      	ldr	r1, [pc, #440]	; (8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005e0e:	4313      	orrs	r3, r2
 8005e10:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d00d      	beq.n	8005e3c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	685b      	ldr	r3, [r3, #4]
 8005e24:	019a      	lsls	r2, r3, #6
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	68db      	ldr	r3, [r3, #12]
 8005e2a:	061b      	lsls	r3, r3, #24
 8005e2c:	431a      	orrs	r2, r3
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	689b      	ldr	r3, [r3, #8]
 8005e32:	071b      	lsls	r3, r3, #28
 8005e34:	4964      	ldr	r1, [pc, #400]	; (8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005e36:	4313      	orrs	r3, r2
 8005e38:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005e3c:	4b61      	ldr	r3, [pc, #388]	; (8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005e3e:	2201      	movs	r2, #1
 8005e40:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005e42:	f7fd fbb9 	bl	80035b8 <HAL_GetTick>
 8005e46:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005e48:	e008      	b.n	8005e5c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005e4a:	f7fd fbb5 	bl	80035b8 <HAL_GetTick>
 8005e4e:	4602      	mov	r2, r0
 8005e50:	697b      	ldr	r3, [r7, #20]
 8005e52:	1ad3      	subs	r3, r2, r3
 8005e54:	2b02      	cmp	r3, #2
 8005e56:	d901      	bls.n	8005e5c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005e58:	2303      	movs	r3, #3
 8005e5a:	e129      	b.n	80060b0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005e5c:	4b5a      	ldr	r3, [pc, #360]	; (8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d0f0      	beq.n	8005e4a <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f003 0304 	and.w	r3, r3, #4
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d105      	bne.n	8005e80 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d079      	beq.n	8005f74 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005e80:	4b52      	ldr	r3, [pc, #328]	; (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005e82:	2200      	movs	r2, #0
 8005e84:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005e86:	f7fd fb97 	bl	80035b8 <HAL_GetTick>
 8005e8a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005e8c:	e008      	b.n	8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005e8e:	f7fd fb93 	bl	80035b8 <HAL_GetTick>
 8005e92:	4602      	mov	r2, r0
 8005e94:	697b      	ldr	r3, [r7, #20]
 8005e96:	1ad3      	subs	r3, r2, r3
 8005e98:	2b02      	cmp	r3, #2
 8005e9a:	d901      	bls.n	8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005e9c:	2303      	movs	r3, #3
 8005e9e:	e107      	b.n	80060b0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005ea0:	4b49      	ldr	r3, [pc, #292]	; (8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005ea8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005eac:	d0ef      	beq.n	8005e8e <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f003 0304 	and.w	r3, r3, #4
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d020      	beq.n	8005efc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005eba:	4b43      	ldr	r3, [pc, #268]	; (8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005ebc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ec0:	0f1b      	lsrs	r3, r3, #28
 8005ec2:	f003 0307 	and.w	r3, r3, #7
 8005ec6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	691b      	ldr	r3, [r3, #16]
 8005ecc:	019a      	lsls	r2, r3, #6
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	695b      	ldr	r3, [r3, #20]
 8005ed2:	061b      	lsls	r3, r3, #24
 8005ed4:	431a      	orrs	r2, r3
 8005ed6:	693b      	ldr	r3, [r7, #16]
 8005ed8:	071b      	lsls	r3, r3, #28
 8005eda:	493b      	ldr	r1, [pc, #236]	; (8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005edc:	4313      	orrs	r3, r2
 8005ede:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005ee2:	4b39      	ldr	r3, [pc, #228]	; (8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005ee4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ee8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6a1b      	ldr	r3, [r3, #32]
 8005ef0:	3b01      	subs	r3, #1
 8005ef2:	021b      	lsls	r3, r3, #8
 8005ef4:	4934      	ldr	r1, [pc, #208]	; (8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005ef6:	4313      	orrs	r3, r2
 8005ef8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f003 0308 	and.w	r3, r3, #8
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d01e      	beq.n	8005f46 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005f08:	4b2f      	ldr	r3, [pc, #188]	; (8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f0e:	0e1b      	lsrs	r3, r3, #24
 8005f10:	f003 030f 	and.w	r3, r3, #15
 8005f14:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	691b      	ldr	r3, [r3, #16]
 8005f1a:	019a      	lsls	r2, r3, #6
 8005f1c:	693b      	ldr	r3, [r7, #16]
 8005f1e:	061b      	lsls	r3, r3, #24
 8005f20:	431a      	orrs	r2, r3
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	699b      	ldr	r3, [r3, #24]
 8005f26:	071b      	lsls	r3, r3, #28
 8005f28:	4927      	ldr	r1, [pc, #156]	; (8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005f2a:	4313      	orrs	r3, r2
 8005f2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005f30:	4b25      	ldr	r3, [pc, #148]	; (8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005f32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f36:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f3e:	4922      	ldr	r1, [pc, #136]	; (8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005f40:	4313      	orrs	r3, r2
 8005f42:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005f46:	4b21      	ldr	r3, [pc, #132]	; (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005f48:	2201      	movs	r2, #1
 8005f4a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005f4c:	f7fd fb34 	bl	80035b8 <HAL_GetTick>
 8005f50:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005f52:	e008      	b.n	8005f66 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005f54:	f7fd fb30 	bl	80035b8 <HAL_GetTick>
 8005f58:	4602      	mov	r2, r0
 8005f5a:	697b      	ldr	r3, [r7, #20]
 8005f5c:	1ad3      	subs	r3, r2, r3
 8005f5e:	2b02      	cmp	r3, #2
 8005f60:	d901      	bls.n	8005f66 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005f62:	2303      	movs	r3, #3
 8005f64:	e0a4      	b.n	80060b0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005f66:	4b18      	ldr	r3, [pc, #96]	; (8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005f6e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f72:	d1ef      	bne.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f003 0320 	and.w	r3, r3, #32
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	f000 808b 	beq.w	8006098 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005f82:	2300      	movs	r3, #0
 8005f84:	60fb      	str	r3, [r7, #12]
 8005f86:	4b10      	ldr	r3, [pc, #64]	; (8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f8a:	4a0f      	ldr	r2, [pc, #60]	; (8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005f8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f90:	6413      	str	r3, [r2, #64]	; 0x40
 8005f92:	4b0d      	ldr	r3, [pc, #52]	; (8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f9a:	60fb      	str	r3, [r7, #12]
 8005f9c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005f9e:	4b0c      	ldr	r3, [pc, #48]	; (8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4a0b      	ldr	r2, [pc, #44]	; (8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005fa4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fa8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005faa:	f7fd fb05 	bl	80035b8 <HAL_GetTick>
 8005fae:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005fb0:	e010      	b.n	8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005fb2:	f7fd fb01 	bl	80035b8 <HAL_GetTick>
 8005fb6:	4602      	mov	r2, r0
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	1ad3      	subs	r3, r2, r3
 8005fbc:	2b02      	cmp	r3, #2
 8005fbe:	d909      	bls.n	8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8005fc0:	2303      	movs	r3, #3
 8005fc2:	e075      	b.n	80060b0 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8005fc4:	42470068 	.word	0x42470068
 8005fc8:	40023800 	.word	0x40023800
 8005fcc:	42470070 	.word	0x42470070
 8005fd0:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005fd4:	4b38      	ldr	r3, [pc, #224]	; (80060b8 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d0e8      	beq.n	8005fb2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005fe0:	4b36      	ldr	r3, [pc, #216]	; (80060bc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005fe2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fe4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fe8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005fea:	693b      	ldr	r3, [r7, #16]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d02f      	beq.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ff4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ff8:	693a      	ldr	r2, [r7, #16]
 8005ffa:	429a      	cmp	r2, r3
 8005ffc:	d028      	beq.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005ffe:	4b2f      	ldr	r3, [pc, #188]	; (80060bc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006000:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006002:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006006:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006008:	4b2d      	ldr	r3, [pc, #180]	; (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800600a:	2201      	movs	r2, #1
 800600c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800600e:	4b2c      	ldr	r3, [pc, #176]	; (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8006010:	2200      	movs	r2, #0
 8006012:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006014:	4a29      	ldr	r2, [pc, #164]	; (80060bc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006016:	693b      	ldr	r3, [r7, #16]
 8006018:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800601a:	4b28      	ldr	r3, [pc, #160]	; (80060bc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800601c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800601e:	f003 0301 	and.w	r3, r3, #1
 8006022:	2b01      	cmp	r3, #1
 8006024:	d114      	bne.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006026:	f7fd fac7 	bl	80035b8 <HAL_GetTick>
 800602a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800602c:	e00a      	b.n	8006044 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800602e:	f7fd fac3 	bl	80035b8 <HAL_GetTick>
 8006032:	4602      	mov	r2, r0
 8006034:	697b      	ldr	r3, [r7, #20]
 8006036:	1ad3      	subs	r3, r2, r3
 8006038:	f241 3288 	movw	r2, #5000	; 0x1388
 800603c:	4293      	cmp	r3, r2
 800603e:	d901      	bls.n	8006044 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8006040:	2303      	movs	r3, #3
 8006042:	e035      	b.n	80060b0 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006044:	4b1d      	ldr	r3, [pc, #116]	; (80060bc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006046:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006048:	f003 0302 	and.w	r3, r3, #2
 800604c:	2b00      	cmp	r3, #0
 800604e:	d0ee      	beq.n	800602e <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006054:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006058:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800605c:	d10d      	bne.n	800607a <HAL_RCCEx_PeriphCLKConfig+0x332>
 800605e:	4b17      	ldr	r3, [pc, #92]	; (80060bc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006060:	689b      	ldr	r3, [r3, #8]
 8006062:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800606a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800606e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006072:	4912      	ldr	r1, [pc, #72]	; (80060bc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006074:	4313      	orrs	r3, r2
 8006076:	608b      	str	r3, [r1, #8]
 8006078:	e005      	b.n	8006086 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 800607a:	4b10      	ldr	r3, [pc, #64]	; (80060bc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800607c:	689b      	ldr	r3, [r3, #8]
 800607e:	4a0f      	ldr	r2, [pc, #60]	; (80060bc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006080:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006084:	6093      	str	r3, [r2, #8]
 8006086:	4b0d      	ldr	r3, [pc, #52]	; (80060bc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006088:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800608e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006092:	490a      	ldr	r1, [pc, #40]	; (80060bc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006094:	4313      	orrs	r3, r2
 8006096:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f003 0310 	and.w	r3, r3, #16
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d004      	beq.n	80060ae <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80060aa:	4b06      	ldr	r3, [pc, #24]	; (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 80060ac:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80060ae:	2300      	movs	r3, #0
}
 80060b0:	4618      	mov	r0, r3
 80060b2:	3718      	adds	r7, #24
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bd80      	pop	{r7, pc}
 80060b8:	40007000 	.word	0x40007000
 80060bc:	40023800 	.word	0x40023800
 80060c0:	42470e40 	.word	0x42470e40
 80060c4:	424711e0 	.word	0x424711e0

080060c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b082      	sub	sp, #8
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d101      	bne.n	80060da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80060d6:	2301      	movs	r3, #1
 80060d8:	e041      	b.n	800615e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060e0:	b2db      	uxtb	r3, r3
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d106      	bne.n	80060f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2200      	movs	r2, #0
 80060ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80060ee:	6878      	ldr	r0, [r7, #4]
 80060f0:	f000 f839 	bl	8006166 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2202      	movs	r2, #2
 80060f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681a      	ldr	r2, [r3, #0]
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	3304      	adds	r3, #4
 8006104:	4619      	mov	r1, r3
 8006106:	4610      	mov	r0, r2
 8006108:	f000 f9d8 	bl	80064bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2201      	movs	r2, #1
 8006110:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2201      	movs	r2, #1
 8006118:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2201      	movs	r2, #1
 8006120:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2201      	movs	r2, #1
 8006128:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2201      	movs	r2, #1
 8006130:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2201      	movs	r2, #1
 8006138:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2201      	movs	r2, #1
 8006140:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2201      	movs	r2, #1
 8006148:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2201      	movs	r2, #1
 8006150:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2201      	movs	r2, #1
 8006158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800615c:	2300      	movs	r3, #0
}
 800615e:	4618      	mov	r0, r3
 8006160:	3708      	adds	r7, #8
 8006162:	46bd      	mov	sp, r7
 8006164:	bd80      	pop	{r7, pc}

08006166 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006166:	b480      	push	{r7}
 8006168:	b083      	sub	sp, #12
 800616a:	af00      	add	r7, sp, #0
 800616c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800616e:	bf00      	nop
 8006170:	370c      	adds	r7, #12
 8006172:	46bd      	mov	sp, r7
 8006174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006178:	4770      	bx	lr
	...

0800617c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800617c:	b480      	push	{r7}
 800617e:	b085      	sub	sp, #20
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800618a:	b2db      	uxtb	r3, r3
 800618c:	2b01      	cmp	r3, #1
 800618e:	d001      	beq.n	8006194 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006190:	2301      	movs	r3, #1
 8006192:	e04e      	b.n	8006232 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2202      	movs	r2, #2
 8006198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	68da      	ldr	r2, [r3, #12]
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f042 0201 	orr.w	r2, r2, #1
 80061aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4a23      	ldr	r2, [pc, #140]	; (8006240 <HAL_TIM_Base_Start_IT+0xc4>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d022      	beq.n	80061fc <HAL_TIM_Base_Start_IT+0x80>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061be:	d01d      	beq.n	80061fc <HAL_TIM_Base_Start_IT+0x80>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	4a1f      	ldr	r2, [pc, #124]	; (8006244 <HAL_TIM_Base_Start_IT+0xc8>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d018      	beq.n	80061fc <HAL_TIM_Base_Start_IT+0x80>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	4a1e      	ldr	r2, [pc, #120]	; (8006248 <HAL_TIM_Base_Start_IT+0xcc>)
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d013      	beq.n	80061fc <HAL_TIM_Base_Start_IT+0x80>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	4a1c      	ldr	r2, [pc, #112]	; (800624c <HAL_TIM_Base_Start_IT+0xd0>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d00e      	beq.n	80061fc <HAL_TIM_Base_Start_IT+0x80>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	4a1b      	ldr	r2, [pc, #108]	; (8006250 <HAL_TIM_Base_Start_IT+0xd4>)
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d009      	beq.n	80061fc <HAL_TIM_Base_Start_IT+0x80>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	4a19      	ldr	r2, [pc, #100]	; (8006254 <HAL_TIM_Base_Start_IT+0xd8>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d004      	beq.n	80061fc <HAL_TIM_Base_Start_IT+0x80>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	4a18      	ldr	r2, [pc, #96]	; (8006258 <HAL_TIM_Base_Start_IT+0xdc>)
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d111      	bne.n	8006220 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	689b      	ldr	r3, [r3, #8]
 8006202:	f003 0307 	and.w	r3, r3, #7
 8006206:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	2b06      	cmp	r3, #6
 800620c:	d010      	beq.n	8006230 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	681a      	ldr	r2, [r3, #0]
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f042 0201 	orr.w	r2, r2, #1
 800621c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800621e:	e007      	b.n	8006230 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	681a      	ldr	r2, [r3, #0]
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f042 0201 	orr.w	r2, r2, #1
 800622e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006230:	2300      	movs	r3, #0
}
 8006232:	4618      	mov	r0, r3
 8006234:	3714      	adds	r7, #20
 8006236:	46bd      	mov	sp, r7
 8006238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623c:	4770      	bx	lr
 800623e:	bf00      	nop
 8006240:	40010000 	.word	0x40010000
 8006244:	40000400 	.word	0x40000400
 8006248:	40000800 	.word	0x40000800
 800624c:	40000c00 	.word	0x40000c00
 8006250:	40010400 	.word	0x40010400
 8006254:	40014000 	.word	0x40014000
 8006258:	40001800 	.word	0x40001800

0800625c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b082      	sub	sp, #8
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	691b      	ldr	r3, [r3, #16]
 800626a:	f003 0302 	and.w	r3, r3, #2
 800626e:	2b02      	cmp	r3, #2
 8006270:	d122      	bne.n	80062b8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	68db      	ldr	r3, [r3, #12]
 8006278:	f003 0302 	and.w	r3, r3, #2
 800627c:	2b02      	cmp	r3, #2
 800627e:	d11b      	bne.n	80062b8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f06f 0202 	mvn.w	r2, #2
 8006288:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2201      	movs	r2, #1
 800628e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	699b      	ldr	r3, [r3, #24]
 8006296:	f003 0303 	and.w	r3, r3, #3
 800629a:	2b00      	cmp	r3, #0
 800629c:	d003      	beq.n	80062a6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	f000 f8ee 	bl	8006480 <HAL_TIM_IC_CaptureCallback>
 80062a4:	e005      	b.n	80062b2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f000 f8e0 	bl	800646c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062ac:	6878      	ldr	r0, [r7, #4]
 80062ae:	f000 f8f1 	bl	8006494 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2200      	movs	r2, #0
 80062b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	691b      	ldr	r3, [r3, #16]
 80062be:	f003 0304 	and.w	r3, r3, #4
 80062c2:	2b04      	cmp	r3, #4
 80062c4:	d122      	bne.n	800630c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	68db      	ldr	r3, [r3, #12]
 80062cc:	f003 0304 	and.w	r3, r3, #4
 80062d0:	2b04      	cmp	r3, #4
 80062d2:	d11b      	bne.n	800630c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f06f 0204 	mvn.w	r2, #4
 80062dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2202      	movs	r2, #2
 80062e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	699b      	ldr	r3, [r3, #24]
 80062ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d003      	beq.n	80062fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062f2:	6878      	ldr	r0, [r7, #4]
 80062f4:	f000 f8c4 	bl	8006480 <HAL_TIM_IC_CaptureCallback>
 80062f8:	e005      	b.n	8006306 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062fa:	6878      	ldr	r0, [r7, #4]
 80062fc:	f000 f8b6 	bl	800646c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006300:	6878      	ldr	r0, [r7, #4]
 8006302:	f000 f8c7 	bl	8006494 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2200      	movs	r2, #0
 800630a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	691b      	ldr	r3, [r3, #16]
 8006312:	f003 0308 	and.w	r3, r3, #8
 8006316:	2b08      	cmp	r3, #8
 8006318:	d122      	bne.n	8006360 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	68db      	ldr	r3, [r3, #12]
 8006320:	f003 0308 	and.w	r3, r3, #8
 8006324:	2b08      	cmp	r3, #8
 8006326:	d11b      	bne.n	8006360 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f06f 0208 	mvn.w	r2, #8
 8006330:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2204      	movs	r2, #4
 8006336:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	69db      	ldr	r3, [r3, #28]
 800633e:	f003 0303 	and.w	r3, r3, #3
 8006342:	2b00      	cmp	r3, #0
 8006344:	d003      	beq.n	800634e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006346:	6878      	ldr	r0, [r7, #4]
 8006348:	f000 f89a 	bl	8006480 <HAL_TIM_IC_CaptureCallback>
 800634c:	e005      	b.n	800635a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800634e:	6878      	ldr	r0, [r7, #4]
 8006350:	f000 f88c 	bl	800646c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006354:	6878      	ldr	r0, [r7, #4]
 8006356:	f000 f89d 	bl	8006494 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2200      	movs	r2, #0
 800635e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	691b      	ldr	r3, [r3, #16]
 8006366:	f003 0310 	and.w	r3, r3, #16
 800636a:	2b10      	cmp	r3, #16
 800636c:	d122      	bne.n	80063b4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	68db      	ldr	r3, [r3, #12]
 8006374:	f003 0310 	and.w	r3, r3, #16
 8006378:	2b10      	cmp	r3, #16
 800637a:	d11b      	bne.n	80063b4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f06f 0210 	mvn.w	r2, #16
 8006384:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2208      	movs	r2, #8
 800638a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	69db      	ldr	r3, [r3, #28]
 8006392:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006396:	2b00      	cmp	r3, #0
 8006398:	d003      	beq.n	80063a2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800639a:	6878      	ldr	r0, [r7, #4]
 800639c:	f000 f870 	bl	8006480 <HAL_TIM_IC_CaptureCallback>
 80063a0:	e005      	b.n	80063ae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	f000 f862 	bl	800646c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063a8:	6878      	ldr	r0, [r7, #4]
 80063aa:	f000 f873 	bl	8006494 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2200      	movs	r2, #0
 80063b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	691b      	ldr	r3, [r3, #16]
 80063ba:	f003 0301 	and.w	r3, r3, #1
 80063be:	2b01      	cmp	r3, #1
 80063c0:	d10e      	bne.n	80063e0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	68db      	ldr	r3, [r3, #12]
 80063c8:	f003 0301 	and.w	r3, r3, #1
 80063cc:	2b01      	cmp	r3, #1
 80063ce:	d107      	bne.n	80063e0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f06f 0201 	mvn.w	r2, #1
 80063d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80063da:	6878      	ldr	r0, [r7, #4]
 80063dc:	f7fb f812 	bl	8001404 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	691b      	ldr	r3, [r3, #16]
 80063e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063ea:	2b80      	cmp	r3, #128	; 0x80
 80063ec:	d10e      	bne.n	800640c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	68db      	ldr	r3, [r3, #12]
 80063f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063f8:	2b80      	cmp	r3, #128	; 0x80
 80063fa:	d107      	bne.n	800640c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006404:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006406:	6878      	ldr	r0, [r7, #4]
 8006408:	f000 f902 	bl	8006610 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	691b      	ldr	r3, [r3, #16]
 8006412:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006416:	2b40      	cmp	r3, #64	; 0x40
 8006418:	d10e      	bne.n	8006438 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	68db      	ldr	r3, [r3, #12]
 8006420:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006424:	2b40      	cmp	r3, #64	; 0x40
 8006426:	d107      	bne.n	8006438 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006430:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006432:	6878      	ldr	r0, [r7, #4]
 8006434:	f000 f838 	bl	80064a8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	691b      	ldr	r3, [r3, #16]
 800643e:	f003 0320 	and.w	r3, r3, #32
 8006442:	2b20      	cmp	r3, #32
 8006444:	d10e      	bne.n	8006464 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	68db      	ldr	r3, [r3, #12]
 800644c:	f003 0320 	and.w	r3, r3, #32
 8006450:	2b20      	cmp	r3, #32
 8006452:	d107      	bne.n	8006464 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f06f 0220 	mvn.w	r2, #32
 800645c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800645e:	6878      	ldr	r0, [r7, #4]
 8006460:	f000 f8cc 	bl	80065fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006464:	bf00      	nop
 8006466:	3708      	adds	r7, #8
 8006468:	46bd      	mov	sp, r7
 800646a:	bd80      	pop	{r7, pc}

0800646c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800646c:	b480      	push	{r7}
 800646e:	b083      	sub	sp, #12
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006474:	bf00      	nop
 8006476:	370c      	adds	r7, #12
 8006478:	46bd      	mov	sp, r7
 800647a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647e:	4770      	bx	lr

08006480 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006480:	b480      	push	{r7}
 8006482:	b083      	sub	sp, #12
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006488:	bf00      	nop
 800648a:	370c      	adds	r7, #12
 800648c:	46bd      	mov	sp, r7
 800648e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006492:	4770      	bx	lr

08006494 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006494:	b480      	push	{r7}
 8006496:	b083      	sub	sp, #12
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800649c:	bf00      	nop
 800649e:	370c      	adds	r7, #12
 80064a0:	46bd      	mov	sp, r7
 80064a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a6:	4770      	bx	lr

080064a8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80064a8:	b480      	push	{r7}
 80064aa:	b083      	sub	sp, #12
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80064b0:	bf00      	nop
 80064b2:	370c      	adds	r7, #12
 80064b4:	46bd      	mov	sp, r7
 80064b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ba:	4770      	bx	lr

080064bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80064bc:	b480      	push	{r7}
 80064be:	b085      	sub	sp, #20
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
 80064c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	4a40      	ldr	r2, [pc, #256]	; (80065d0 <TIM_Base_SetConfig+0x114>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d013      	beq.n	80064fc <TIM_Base_SetConfig+0x40>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064da:	d00f      	beq.n	80064fc <TIM_Base_SetConfig+0x40>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	4a3d      	ldr	r2, [pc, #244]	; (80065d4 <TIM_Base_SetConfig+0x118>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d00b      	beq.n	80064fc <TIM_Base_SetConfig+0x40>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	4a3c      	ldr	r2, [pc, #240]	; (80065d8 <TIM_Base_SetConfig+0x11c>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d007      	beq.n	80064fc <TIM_Base_SetConfig+0x40>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	4a3b      	ldr	r2, [pc, #236]	; (80065dc <TIM_Base_SetConfig+0x120>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d003      	beq.n	80064fc <TIM_Base_SetConfig+0x40>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	4a3a      	ldr	r2, [pc, #232]	; (80065e0 <TIM_Base_SetConfig+0x124>)
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d108      	bne.n	800650e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006502:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	685b      	ldr	r3, [r3, #4]
 8006508:	68fa      	ldr	r2, [r7, #12]
 800650a:	4313      	orrs	r3, r2
 800650c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	4a2f      	ldr	r2, [pc, #188]	; (80065d0 <TIM_Base_SetConfig+0x114>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d02b      	beq.n	800656e <TIM_Base_SetConfig+0xb2>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800651c:	d027      	beq.n	800656e <TIM_Base_SetConfig+0xb2>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	4a2c      	ldr	r2, [pc, #176]	; (80065d4 <TIM_Base_SetConfig+0x118>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d023      	beq.n	800656e <TIM_Base_SetConfig+0xb2>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	4a2b      	ldr	r2, [pc, #172]	; (80065d8 <TIM_Base_SetConfig+0x11c>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d01f      	beq.n	800656e <TIM_Base_SetConfig+0xb2>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	4a2a      	ldr	r2, [pc, #168]	; (80065dc <TIM_Base_SetConfig+0x120>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d01b      	beq.n	800656e <TIM_Base_SetConfig+0xb2>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	4a29      	ldr	r2, [pc, #164]	; (80065e0 <TIM_Base_SetConfig+0x124>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d017      	beq.n	800656e <TIM_Base_SetConfig+0xb2>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	4a28      	ldr	r2, [pc, #160]	; (80065e4 <TIM_Base_SetConfig+0x128>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d013      	beq.n	800656e <TIM_Base_SetConfig+0xb2>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	4a27      	ldr	r2, [pc, #156]	; (80065e8 <TIM_Base_SetConfig+0x12c>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d00f      	beq.n	800656e <TIM_Base_SetConfig+0xb2>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	4a26      	ldr	r2, [pc, #152]	; (80065ec <TIM_Base_SetConfig+0x130>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d00b      	beq.n	800656e <TIM_Base_SetConfig+0xb2>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	4a25      	ldr	r2, [pc, #148]	; (80065f0 <TIM_Base_SetConfig+0x134>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d007      	beq.n	800656e <TIM_Base_SetConfig+0xb2>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	4a24      	ldr	r2, [pc, #144]	; (80065f4 <TIM_Base_SetConfig+0x138>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d003      	beq.n	800656e <TIM_Base_SetConfig+0xb2>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	4a23      	ldr	r2, [pc, #140]	; (80065f8 <TIM_Base_SetConfig+0x13c>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d108      	bne.n	8006580 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006574:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	68db      	ldr	r3, [r3, #12]
 800657a:	68fa      	ldr	r2, [r7, #12]
 800657c:	4313      	orrs	r3, r2
 800657e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	695b      	ldr	r3, [r3, #20]
 800658a:	4313      	orrs	r3, r2
 800658c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	68fa      	ldr	r2, [r7, #12]
 8006592:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	689a      	ldr	r2, [r3, #8]
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	681a      	ldr	r2, [r3, #0]
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	4a0a      	ldr	r2, [pc, #40]	; (80065d0 <TIM_Base_SetConfig+0x114>)
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d003      	beq.n	80065b4 <TIM_Base_SetConfig+0xf8>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	4a0c      	ldr	r2, [pc, #48]	; (80065e0 <TIM_Base_SetConfig+0x124>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d103      	bne.n	80065bc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	691a      	ldr	r2, [r3, #16]
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2201      	movs	r2, #1
 80065c0:	615a      	str	r2, [r3, #20]
}
 80065c2:	bf00      	nop
 80065c4:	3714      	adds	r7, #20
 80065c6:	46bd      	mov	sp, r7
 80065c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065cc:	4770      	bx	lr
 80065ce:	bf00      	nop
 80065d0:	40010000 	.word	0x40010000
 80065d4:	40000400 	.word	0x40000400
 80065d8:	40000800 	.word	0x40000800
 80065dc:	40000c00 	.word	0x40000c00
 80065e0:	40010400 	.word	0x40010400
 80065e4:	40014000 	.word	0x40014000
 80065e8:	40014400 	.word	0x40014400
 80065ec:	40014800 	.word	0x40014800
 80065f0:	40001800 	.word	0x40001800
 80065f4:	40001c00 	.word	0x40001c00
 80065f8:	40002000 	.word	0x40002000

080065fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80065fc:	b480      	push	{r7}
 80065fe:	b083      	sub	sp, #12
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006604:	bf00      	nop
 8006606:	370c      	adds	r7, #12
 8006608:	46bd      	mov	sp, r7
 800660a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660e:	4770      	bx	lr

08006610 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006610:	b480      	push	{r7}
 8006612:	b083      	sub	sp, #12
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006618:	bf00      	nop
 800661a:	370c      	adds	r7, #12
 800661c:	46bd      	mov	sp, r7
 800661e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006622:	4770      	bx	lr

08006624 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006624:	b084      	sub	sp, #16
 8006626:	b580      	push	{r7, lr}
 8006628:	b084      	sub	sp, #16
 800662a:	af00      	add	r7, sp, #0
 800662c:	6078      	str	r0, [r7, #4]
 800662e:	f107 001c 	add.w	r0, r7, #28
 8006632:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006638:	2b01      	cmp	r3, #1
 800663a:	d122      	bne.n	8006682 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006640:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	68db      	ldr	r3, [r3, #12]
 800664c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006650:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006654:	687a      	ldr	r2, [r7, #4]
 8006656:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	68db      	ldr	r3, [r3, #12]
 800665c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006664:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006666:	2b01      	cmp	r3, #1
 8006668:	d105      	bne.n	8006676 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	68db      	ldr	r3, [r3, #12]
 800666e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006676:	6878      	ldr	r0, [r7, #4]
 8006678:	f001 fbee 	bl	8007e58 <USB_CoreReset>
 800667c:	4603      	mov	r3, r0
 800667e:	73fb      	strb	r3, [r7, #15]
 8006680:	e01a      	b.n	80066b8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	68db      	ldr	r3, [r3, #12]
 8006686:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	f001 fbe2 	bl	8007e58 <USB_CoreReset>
 8006694:	4603      	mov	r3, r0
 8006696:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006698:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800669a:	2b00      	cmp	r3, #0
 800669c:	d106      	bne.n	80066ac <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066a2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	639a      	str	r2, [r3, #56]	; 0x38
 80066aa:	e005      	b.n	80066b8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066b0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80066b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066ba:	2b01      	cmp	r3, #1
 80066bc:	d10b      	bne.n	80066d6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	689b      	ldr	r3, [r3, #8]
 80066c2:	f043 0206 	orr.w	r2, r3, #6
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	689b      	ldr	r3, [r3, #8]
 80066ce:	f043 0220 	orr.w	r2, r3, #32
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80066d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80066d8:	4618      	mov	r0, r3
 80066da:	3710      	adds	r7, #16
 80066dc:	46bd      	mov	sp, r7
 80066de:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80066e2:	b004      	add	sp, #16
 80066e4:	4770      	bx	lr
	...

080066e8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80066e8:	b480      	push	{r7}
 80066ea:	b087      	sub	sp, #28
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	60f8      	str	r0, [r7, #12]
 80066f0:	60b9      	str	r1, [r7, #8]
 80066f2:	4613      	mov	r3, r2
 80066f4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80066f6:	79fb      	ldrb	r3, [r7, #7]
 80066f8:	2b02      	cmp	r3, #2
 80066fa:	d165      	bne.n	80067c8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	4a41      	ldr	r2, [pc, #260]	; (8006804 <USB_SetTurnaroundTime+0x11c>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d906      	bls.n	8006712 <USB_SetTurnaroundTime+0x2a>
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	4a40      	ldr	r2, [pc, #256]	; (8006808 <USB_SetTurnaroundTime+0x120>)
 8006708:	4293      	cmp	r3, r2
 800670a:	d202      	bcs.n	8006712 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800670c:	230f      	movs	r3, #15
 800670e:	617b      	str	r3, [r7, #20]
 8006710:	e062      	b.n	80067d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006712:	68bb      	ldr	r3, [r7, #8]
 8006714:	4a3c      	ldr	r2, [pc, #240]	; (8006808 <USB_SetTurnaroundTime+0x120>)
 8006716:	4293      	cmp	r3, r2
 8006718:	d306      	bcc.n	8006728 <USB_SetTurnaroundTime+0x40>
 800671a:	68bb      	ldr	r3, [r7, #8]
 800671c:	4a3b      	ldr	r2, [pc, #236]	; (800680c <USB_SetTurnaroundTime+0x124>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d202      	bcs.n	8006728 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006722:	230e      	movs	r3, #14
 8006724:	617b      	str	r3, [r7, #20]
 8006726:	e057      	b.n	80067d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006728:	68bb      	ldr	r3, [r7, #8]
 800672a:	4a38      	ldr	r2, [pc, #224]	; (800680c <USB_SetTurnaroundTime+0x124>)
 800672c:	4293      	cmp	r3, r2
 800672e:	d306      	bcc.n	800673e <USB_SetTurnaroundTime+0x56>
 8006730:	68bb      	ldr	r3, [r7, #8]
 8006732:	4a37      	ldr	r2, [pc, #220]	; (8006810 <USB_SetTurnaroundTime+0x128>)
 8006734:	4293      	cmp	r3, r2
 8006736:	d202      	bcs.n	800673e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006738:	230d      	movs	r3, #13
 800673a:	617b      	str	r3, [r7, #20]
 800673c:	e04c      	b.n	80067d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	4a33      	ldr	r2, [pc, #204]	; (8006810 <USB_SetTurnaroundTime+0x128>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d306      	bcc.n	8006754 <USB_SetTurnaroundTime+0x6c>
 8006746:	68bb      	ldr	r3, [r7, #8]
 8006748:	4a32      	ldr	r2, [pc, #200]	; (8006814 <USB_SetTurnaroundTime+0x12c>)
 800674a:	4293      	cmp	r3, r2
 800674c:	d802      	bhi.n	8006754 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800674e:	230c      	movs	r3, #12
 8006750:	617b      	str	r3, [r7, #20]
 8006752:	e041      	b.n	80067d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	4a2f      	ldr	r2, [pc, #188]	; (8006814 <USB_SetTurnaroundTime+0x12c>)
 8006758:	4293      	cmp	r3, r2
 800675a:	d906      	bls.n	800676a <USB_SetTurnaroundTime+0x82>
 800675c:	68bb      	ldr	r3, [r7, #8]
 800675e:	4a2e      	ldr	r2, [pc, #184]	; (8006818 <USB_SetTurnaroundTime+0x130>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d802      	bhi.n	800676a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006764:	230b      	movs	r3, #11
 8006766:	617b      	str	r3, [r7, #20]
 8006768:	e036      	b.n	80067d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800676a:	68bb      	ldr	r3, [r7, #8]
 800676c:	4a2a      	ldr	r2, [pc, #168]	; (8006818 <USB_SetTurnaroundTime+0x130>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d906      	bls.n	8006780 <USB_SetTurnaroundTime+0x98>
 8006772:	68bb      	ldr	r3, [r7, #8]
 8006774:	4a29      	ldr	r2, [pc, #164]	; (800681c <USB_SetTurnaroundTime+0x134>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d802      	bhi.n	8006780 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800677a:	230a      	movs	r3, #10
 800677c:	617b      	str	r3, [r7, #20]
 800677e:	e02b      	b.n	80067d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006780:	68bb      	ldr	r3, [r7, #8]
 8006782:	4a26      	ldr	r2, [pc, #152]	; (800681c <USB_SetTurnaroundTime+0x134>)
 8006784:	4293      	cmp	r3, r2
 8006786:	d906      	bls.n	8006796 <USB_SetTurnaroundTime+0xae>
 8006788:	68bb      	ldr	r3, [r7, #8]
 800678a:	4a25      	ldr	r2, [pc, #148]	; (8006820 <USB_SetTurnaroundTime+0x138>)
 800678c:	4293      	cmp	r3, r2
 800678e:	d202      	bcs.n	8006796 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006790:	2309      	movs	r3, #9
 8006792:	617b      	str	r3, [r7, #20]
 8006794:	e020      	b.n	80067d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006796:	68bb      	ldr	r3, [r7, #8]
 8006798:	4a21      	ldr	r2, [pc, #132]	; (8006820 <USB_SetTurnaroundTime+0x138>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d306      	bcc.n	80067ac <USB_SetTurnaroundTime+0xc4>
 800679e:	68bb      	ldr	r3, [r7, #8]
 80067a0:	4a20      	ldr	r2, [pc, #128]	; (8006824 <USB_SetTurnaroundTime+0x13c>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d802      	bhi.n	80067ac <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80067a6:	2308      	movs	r3, #8
 80067a8:	617b      	str	r3, [r7, #20]
 80067aa:	e015      	b.n	80067d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80067ac:	68bb      	ldr	r3, [r7, #8]
 80067ae:	4a1d      	ldr	r2, [pc, #116]	; (8006824 <USB_SetTurnaroundTime+0x13c>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d906      	bls.n	80067c2 <USB_SetTurnaroundTime+0xda>
 80067b4:	68bb      	ldr	r3, [r7, #8]
 80067b6:	4a1c      	ldr	r2, [pc, #112]	; (8006828 <USB_SetTurnaroundTime+0x140>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d202      	bcs.n	80067c2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80067bc:	2307      	movs	r3, #7
 80067be:	617b      	str	r3, [r7, #20]
 80067c0:	e00a      	b.n	80067d8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80067c2:	2306      	movs	r3, #6
 80067c4:	617b      	str	r3, [r7, #20]
 80067c6:	e007      	b.n	80067d8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80067c8:	79fb      	ldrb	r3, [r7, #7]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d102      	bne.n	80067d4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80067ce:	2309      	movs	r3, #9
 80067d0:	617b      	str	r3, [r7, #20]
 80067d2:	e001      	b.n	80067d8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80067d4:	2309      	movs	r3, #9
 80067d6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	68db      	ldr	r3, [r3, #12]
 80067dc:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	68da      	ldr	r2, [r3, #12]
 80067e8:	697b      	ldr	r3, [r7, #20]
 80067ea:	029b      	lsls	r3, r3, #10
 80067ec:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80067f0:	431a      	orrs	r2, r3
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80067f6:	2300      	movs	r3, #0
}
 80067f8:	4618      	mov	r0, r3
 80067fa:	371c      	adds	r7, #28
 80067fc:	46bd      	mov	sp, r7
 80067fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006802:	4770      	bx	lr
 8006804:	00d8acbf 	.word	0x00d8acbf
 8006808:	00e4e1c0 	.word	0x00e4e1c0
 800680c:	00f42400 	.word	0x00f42400
 8006810:	01067380 	.word	0x01067380
 8006814:	011a499f 	.word	0x011a499f
 8006818:	01312cff 	.word	0x01312cff
 800681c:	014ca43f 	.word	0x014ca43f
 8006820:	016e3600 	.word	0x016e3600
 8006824:	01a6ab1f 	.word	0x01a6ab1f
 8006828:	01e84800 	.word	0x01e84800

0800682c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800682c:	b480      	push	{r7}
 800682e:	b083      	sub	sp, #12
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	689b      	ldr	r3, [r3, #8]
 8006838:	f043 0201 	orr.w	r2, r3, #1
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006840:	2300      	movs	r3, #0
}
 8006842:	4618      	mov	r0, r3
 8006844:	370c      	adds	r7, #12
 8006846:	46bd      	mov	sp, r7
 8006848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684c:	4770      	bx	lr

0800684e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800684e:	b480      	push	{r7}
 8006850:	b083      	sub	sp, #12
 8006852:	af00      	add	r7, sp, #0
 8006854:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	689b      	ldr	r3, [r3, #8]
 800685a:	f023 0201 	bic.w	r2, r3, #1
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006862:	2300      	movs	r3, #0
}
 8006864:	4618      	mov	r0, r3
 8006866:	370c      	adds	r7, #12
 8006868:	46bd      	mov	sp, r7
 800686a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686e:	4770      	bx	lr

08006870 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b084      	sub	sp, #16
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
 8006878:	460b      	mov	r3, r1
 800687a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800687c:	2300      	movs	r3, #0
 800687e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	68db      	ldr	r3, [r3, #12]
 8006884:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800688c:	78fb      	ldrb	r3, [r7, #3]
 800688e:	2b01      	cmp	r3, #1
 8006890:	d115      	bne.n	80068be <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	68db      	ldr	r3, [r3, #12]
 8006896:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800689e:	2001      	movs	r0, #1
 80068a0:	f7fc fe96 	bl	80035d0 <HAL_Delay>
      ms++;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	3301      	adds	r3, #1
 80068a8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80068aa:	6878      	ldr	r0, [r7, #4]
 80068ac:	f001 fa45 	bl	8007d3a <USB_GetMode>
 80068b0:	4603      	mov	r3, r0
 80068b2:	2b01      	cmp	r3, #1
 80068b4:	d01e      	beq.n	80068f4 <USB_SetCurrentMode+0x84>
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	2b31      	cmp	r3, #49	; 0x31
 80068ba:	d9f0      	bls.n	800689e <USB_SetCurrentMode+0x2e>
 80068bc:	e01a      	b.n	80068f4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80068be:	78fb      	ldrb	r3, [r7, #3]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d115      	bne.n	80068f0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	68db      	ldr	r3, [r3, #12]
 80068c8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80068d0:	2001      	movs	r0, #1
 80068d2:	f7fc fe7d 	bl	80035d0 <HAL_Delay>
      ms++;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	3301      	adds	r3, #1
 80068da:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80068dc:	6878      	ldr	r0, [r7, #4]
 80068de:	f001 fa2c 	bl	8007d3a <USB_GetMode>
 80068e2:	4603      	mov	r3, r0
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d005      	beq.n	80068f4 <USB_SetCurrentMode+0x84>
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	2b31      	cmp	r3, #49	; 0x31
 80068ec:	d9f0      	bls.n	80068d0 <USB_SetCurrentMode+0x60>
 80068ee:	e001      	b.n	80068f4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80068f0:	2301      	movs	r3, #1
 80068f2:	e005      	b.n	8006900 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	2b32      	cmp	r3, #50	; 0x32
 80068f8:	d101      	bne.n	80068fe <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80068fa:	2301      	movs	r3, #1
 80068fc:	e000      	b.n	8006900 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80068fe:	2300      	movs	r3, #0
}
 8006900:	4618      	mov	r0, r3
 8006902:	3710      	adds	r7, #16
 8006904:	46bd      	mov	sp, r7
 8006906:	bd80      	pop	{r7, pc}

08006908 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006908:	b084      	sub	sp, #16
 800690a:	b580      	push	{r7, lr}
 800690c:	b086      	sub	sp, #24
 800690e:	af00      	add	r7, sp, #0
 8006910:	6078      	str	r0, [r7, #4]
 8006912:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006916:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800691a:	2300      	movs	r3, #0
 800691c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006922:	2300      	movs	r3, #0
 8006924:	613b      	str	r3, [r7, #16]
 8006926:	e009      	b.n	800693c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006928:	687a      	ldr	r2, [r7, #4]
 800692a:	693b      	ldr	r3, [r7, #16]
 800692c:	3340      	adds	r3, #64	; 0x40
 800692e:	009b      	lsls	r3, r3, #2
 8006930:	4413      	add	r3, r2
 8006932:	2200      	movs	r2, #0
 8006934:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006936:	693b      	ldr	r3, [r7, #16]
 8006938:	3301      	adds	r3, #1
 800693a:	613b      	str	r3, [r7, #16]
 800693c:	693b      	ldr	r3, [r7, #16]
 800693e:	2b0e      	cmp	r3, #14
 8006940:	d9f2      	bls.n	8006928 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006942:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006944:	2b00      	cmp	r3, #0
 8006946:	d11c      	bne.n	8006982 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800694e:	685b      	ldr	r3, [r3, #4]
 8006950:	68fa      	ldr	r2, [r7, #12]
 8006952:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006956:	f043 0302 	orr.w	r3, r3, #2
 800695a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006960:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800696c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006978:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	639a      	str	r2, [r3, #56]	; 0x38
 8006980:	e00b      	b.n	800699a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006986:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006992:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80069a0:	461a      	mov	r2, r3
 80069a2:	2300      	movs	r3, #0
 80069a4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069ac:	4619      	mov	r1, r3
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069b4:	461a      	mov	r2, r3
 80069b6:	680b      	ldr	r3, [r1, #0]
 80069b8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80069ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069bc:	2b01      	cmp	r3, #1
 80069be:	d10c      	bne.n	80069da <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80069c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d104      	bne.n	80069d0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80069c6:	2100      	movs	r1, #0
 80069c8:	6878      	ldr	r0, [r7, #4]
 80069ca:	f000 f965 	bl	8006c98 <USB_SetDevSpeed>
 80069ce:	e008      	b.n	80069e2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80069d0:	2101      	movs	r1, #1
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	f000 f960 	bl	8006c98 <USB_SetDevSpeed>
 80069d8:	e003      	b.n	80069e2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80069da:	2103      	movs	r1, #3
 80069dc:	6878      	ldr	r0, [r7, #4]
 80069de:	f000 f95b 	bl	8006c98 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80069e2:	2110      	movs	r1, #16
 80069e4:	6878      	ldr	r0, [r7, #4]
 80069e6:	f000 f8f3 	bl	8006bd0 <USB_FlushTxFifo>
 80069ea:	4603      	mov	r3, r0
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d001      	beq.n	80069f4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80069f0:	2301      	movs	r3, #1
 80069f2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80069f4:	6878      	ldr	r0, [r7, #4]
 80069f6:	f000 f91f 	bl	8006c38 <USB_FlushRxFifo>
 80069fa:	4603      	mov	r3, r0
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d001      	beq.n	8006a04 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8006a00:	2301      	movs	r3, #1
 8006a02:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a0a:	461a      	mov	r2, r3
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a16:	461a      	mov	r2, r3
 8006a18:	2300      	movs	r3, #0
 8006a1a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a22:	461a      	mov	r2, r3
 8006a24:	2300      	movs	r3, #0
 8006a26:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006a28:	2300      	movs	r3, #0
 8006a2a:	613b      	str	r3, [r7, #16]
 8006a2c:	e043      	b.n	8006ab6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006a2e:	693b      	ldr	r3, [r7, #16]
 8006a30:	015a      	lsls	r2, r3, #5
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	4413      	add	r3, r2
 8006a36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a40:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a44:	d118      	bne.n	8006a78 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8006a46:	693b      	ldr	r3, [r7, #16]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d10a      	bne.n	8006a62 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006a4c:	693b      	ldr	r3, [r7, #16]
 8006a4e:	015a      	lsls	r2, r3, #5
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	4413      	add	r3, r2
 8006a54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a58:	461a      	mov	r2, r3
 8006a5a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006a5e:	6013      	str	r3, [r2, #0]
 8006a60:	e013      	b.n	8006a8a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006a62:	693b      	ldr	r3, [r7, #16]
 8006a64:	015a      	lsls	r2, r3, #5
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	4413      	add	r3, r2
 8006a6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a6e:	461a      	mov	r2, r3
 8006a70:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006a74:	6013      	str	r3, [r2, #0]
 8006a76:	e008      	b.n	8006a8a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006a78:	693b      	ldr	r3, [r7, #16]
 8006a7a:	015a      	lsls	r2, r3, #5
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	4413      	add	r3, r2
 8006a80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a84:	461a      	mov	r2, r3
 8006a86:	2300      	movs	r3, #0
 8006a88:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006a8a:	693b      	ldr	r3, [r7, #16]
 8006a8c:	015a      	lsls	r2, r3, #5
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	4413      	add	r3, r2
 8006a92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a96:	461a      	mov	r2, r3
 8006a98:	2300      	movs	r3, #0
 8006a9a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006a9c:	693b      	ldr	r3, [r7, #16]
 8006a9e:	015a      	lsls	r2, r3, #5
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	4413      	add	r3, r2
 8006aa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006aa8:	461a      	mov	r2, r3
 8006aaa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006aae:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006ab0:	693b      	ldr	r3, [r7, #16]
 8006ab2:	3301      	adds	r3, #1
 8006ab4:	613b      	str	r3, [r7, #16]
 8006ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ab8:	693a      	ldr	r2, [r7, #16]
 8006aba:	429a      	cmp	r2, r3
 8006abc:	d3b7      	bcc.n	8006a2e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006abe:	2300      	movs	r3, #0
 8006ac0:	613b      	str	r3, [r7, #16]
 8006ac2:	e043      	b.n	8006b4c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006ac4:	693b      	ldr	r3, [r7, #16]
 8006ac6:	015a      	lsls	r2, r3, #5
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	4413      	add	r3, r2
 8006acc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006ad6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006ada:	d118      	bne.n	8006b0e <USB_DevInit+0x206>
    {
      if (i == 0U)
 8006adc:	693b      	ldr	r3, [r7, #16]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d10a      	bne.n	8006af8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006ae2:	693b      	ldr	r3, [r7, #16]
 8006ae4:	015a      	lsls	r2, r3, #5
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	4413      	add	r3, r2
 8006aea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006aee:	461a      	mov	r2, r3
 8006af0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006af4:	6013      	str	r3, [r2, #0]
 8006af6:	e013      	b.n	8006b20 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006af8:	693b      	ldr	r3, [r7, #16]
 8006afa:	015a      	lsls	r2, r3, #5
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	4413      	add	r3, r2
 8006b00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b04:	461a      	mov	r2, r3
 8006b06:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006b0a:	6013      	str	r3, [r2, #0]
 8006b0c:	e008      	b.n	8006b20 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006b0e:	693b      	ldr	r3, [r7, #16]
 8006b10:	015a      	lsls	r2, r3, #5
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	4413      	add	r3, r2
 8006b16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b1a:	461a      	mov	r2, r3
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006b20:	693b      	ldr	r3, [r7, #16]
 8006b22:	015a      	lsls	r2, r3, #5
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	4413      	add	r3, r2
 8006b28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b2c:	461a      	mov	r2, r3
 8006b2e:	2300      	movs	r3, #0
 8006b30:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006b32:	693b      	ldr	r3, [r7, #16]
 8006b34:	015a      	lsls	r2, r3, #5
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	4413      	add	r3, r2
 8006b3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b3e:	461a      	mov	r2, r3
 8006b40:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006b44:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006b46:	693b      	ldr	r3, [r7, #16]
 8006b48:	3301      	adds	r3, #1
 8006b4a:	613b      	str	r3, [r7, #16]
 8006b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b4e:	693a      	ldr	r2, [r7, #16]
 8006b50:	429a      	cmp	r2, r3
 8006b52:	d3b7      	bcc.n	8006ac4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b5a:	691b      	ldr	r3, [r3, #16]
 8006b5c:	68fa      	ldr	r2, [r7, #12]
 8006b5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006b62:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b66:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006b74:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d105      	bne.n	8006b88 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	699b      	ldr	r3, [r3, #24]
 8006b80:	f043 0210 	orr.w	r2, r3, #16
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	699a      	ldr	r2, [r3, #24]
 8006b8c:	4b0f      	ldr	r3, [pc, #60]	; (8006bcc <USB_DevInit+0x2c4>)
 8006b8e:	4313      	orrs	r3, r2
 8006b90:	687a      	ldr	r2, [r7, #4]
 8006b92:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006b94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d005      	beq.n	8006ba6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	699b      	ldr	r3, [r3, #24]
 8006b9e:	f043 0208 	orr.w	r2, r3, #8
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006ba6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ba8:	2b01      	cmp	r3, #1
 8006baa:	d107      	bne.n	8006bbc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	699b      	ldr	r3, [r3, #24]
 8006bb0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006bb4:	f043 0304 	orr.w	r3, r3, #4
 8006bb8:	687a      	ldr	r2, [r7, #4]
 8006bba:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006bbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	3718      	adds	r7, #24
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006bc8:	b004      	add	sp, #16
 8006bca:	4770      	bx	lr
 8006bcc:	803c3800 	.word	0x803c3800

08006bd0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006bd0:	b480      	push	{r7}
 8006bd2:	b085      	sub	sp, #20
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
 8006bd8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006bda:	2300      	movs	r3, #0
 8006bdc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	3301      	adds	r3, #1
 8006be2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	4a13      	ldr	r2, [pc, #76]	; (8006c34 <USB_FlushTxFifo+0x64>)
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d901      	bls.n	8006bf0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006bec:	2303      	movs	r3, #3
 8006bee:	e01b      	b.n	8006c28 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	691b      	ldr	r3, [r3, #16]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	daf2      	bge.n	8006bde <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	019b      	lsls	r3, r3, #6
 8006c00:	f043 0220 	orr.w	r2, r3, #32
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	3301      	adds	r3, #1
 8006c0c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	4a08      	ldr	r2, [pc, #32]	; (8006c34 <USB_FlushTxFifo+0x64>)
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d901      	bls.n	8006c1a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006c16:	2303      	movs	r3, #3
 8006c18:	e006      	b.n	8006c28 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	691b      	ldr	r3, [r3, #16]
 8006c1e:	f003 0320 	and.w	r3, r3, #32
 8006c22:	2b20      	cmp	r3, #32
 8006c24:	d0f0      	beq.n	8006c08 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006c26:	2300      	movs	r3, #0
}
 8006c28:	4618      	mov	r0, r3
 8006c2a:	3714      	adds	r7, #20
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c32:	4770      	bx	lr
 8006c34:	00030d40 	.word	0x00030d40

08006c38 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006c38:	b480      	push	{r7}
 8006c3a:	b085      	sub	sp, #20
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006c40:	2300      	movs	r3, #0
 8006c42:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	3301      	adds	r3, #1
 8006c48:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	4a11      	ldr	r2, [pc, #68]	; (8006c94 <USB_FlushRxFifo+0x5c>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d901      	bls.n	8006c56 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006c52:	2303      	movs	r3, #3
 8006c54:	e018      	b.n	8006c88 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	691b      	ldr	r3, [r3, #16]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	daf2      	bge.n	8006c44 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006c5e:	2300      	movs	r3, #0
 8006c60:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2210      	movs	r2, #16
 8006c66:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	3301      	adds	r3, #1
 8006c6c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	4a08      	ldr	r2, [pc, #32]	; (8006c94 <USB_FlushRxFifo+0x5c>)
 8006c72:	4293      	cmp	r3, r2
 8006c74:	d901      	bls.n	8006c7a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006c76:	2303      	movs	r3, #3
 8006c78:	e006      	b.n	8006c88 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	691b      	ldr	r3, [r3, #16]
 8006c7e:	f003 0310 	and.w	r3, r3, #16
 8006c82:	2b10      	cmp	r3, #16
 8006c84:	d0f0      	beq.n	8006c68 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006c86:	2300      	movs	r3, #0
}
 8006c88:	4618      	mov	r0, r3
 8006c8a:	3714      	adds	r7, #20
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c92:	4770      	bx	lr
 8006c94:	00030d40 	.word	0x00030d40

08006c98 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006c98:	b480      	push	{r7}
 8006c9a:	b085      	sub	sp, #20
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
 8006ca0:	460b      	mov	r3, r1
 8006ca2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cae:	681a      	ldr	r2, [r3, #0]
 8006cb0:	78fb      	ldrb	r3, [r7, #3]
 8006cb2:	68f9      	ldr	r1, [r7, #12]
 8006cb4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006cb8:	4313      	orrs	r3, r2
 8006cba:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006cbc:	2300      	movs	r3, #0
}
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	3714      	adds	r7, #20
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc8:	4770      	bx	lr

08006cca <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006cca:	b480      	push	{r7}
 8006ccc:	b087      	sub	sp, #28
 8006cce:	af00      	add	r7, sp, #0
 8006cd0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006cd6:	693b      	ldr	r3, [r7, #16]
 8006cd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cdc:	689b      	ldr	r3, [r3, #8]
 8006cde:	f003 0306 	and.w	r3, r3, #6
 8006ce2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d102      	bne.n	8006cf0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006cea:	2300      	movs	r3, #0
 8006cec:	75fb      	strb	r3, [r7, #23]
 8006cee:	e00a      	b.n	8006d06 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	2b02      	cmp	r3, #2
 8006cf4:	d002      	beq.n	8006cfc <USB_GetDevSpeed+0x32>
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	2b06      	cmp	r3, #6
 8006cfa:	d102      	bne.n	8006d02 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006cfc:	2302      	movs	r3, #2
 8006cfe:	75fb      	strb	r3, [r7, #23]
 8006d00:	e001      	b.n	8006d06 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006d02:	230f      	movs	r3, #15
 8006d04:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006d06:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d08:	4618      	mov	r0, r3
 8006d0a:	371c      	adds	r7, #28
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d12:	4770      	bx	lr

08006d14 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006d14:	b480      	push	{r7}
 8006d16:	b085      	sub	sp, #20
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
 8006d1c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	781b      	ldrb	r3, [r3, #0]
 8006d26:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	785b      	ldrb	r3, [r3, #1]
 8006d2c:	2b01      	cmp	r3, #1
 8006d2e:	d13a      	bne.n	8006da6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d36:	69da      	ldr	r2, [r3, #28]
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	781b      	ldrb	r3, [r3, #0]
 8006d3c:	f003 030f 	and.w	r3, r3, #15
 8006d40:	2101      	movs	r1, #1
 8006d42:	fa01 f303 	lsl.w	r3, r1, r3
 8006d46:	b29b      	uxth	r3, r3
 8006d48:	68f9      	ldr	r1, [r7, #12]
 8006d4a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006d4e:	4313      	orrs	r3, r2
 8006d50:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006d52:	68bb      	ldr	r3, [r7, #8]
 8006d54:	015a      	lsls	r2, r3, #5
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	4413      	add	r3, r2
 8006d5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d155      	bne.n	8006e14 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006d68:	68bb      	ldr	r3, [r7, #8]
 8006d6a:	015a      	lsls	r2, r3, #5
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	4413      	add	r3, r2
 8006d70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d74:	681a      	ldr	r2, [r3, #0]
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	68db      	ldr	r3, [r3, #12]
 8006d7a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	791b      	ldrb	r3, [r3, #4]
 8006d82:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006d84:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006d86:	68bb      	ldr	r3, [r7, #8]
 8006d88:	059b      	lsls	r3, r3, #22
 8006d8a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006d8c:	4313      	orrs	r3, r2
 8006d8e:	68ba      	ldr	r2, [r7, #8]
 8006d90:	0151      	lsls	r1, r2, #5
 8006d92:	68fa      	ldr	r2, [r7, #12]
 8006d94:	440a      	add	r2, r1
 8006d96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006da2:	6013      	str	r3, [r2, #0]
 8006da4:	e036      	b.n	8006e14 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dac:	69da      	ldr	r2, [r3, #28]
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	781b      	ldrb	r3, [r3, #0]
 8006db2:	f003 030f 	and.w	r3, r3, #15
 8006db6:	2101      	movs	r1, #1
 8006db8:	fa01 f303 	lsl.w	r3, r1, r3
 8006dbc:	041b      	lsls	r3, r3, #16
 8006dbe:	68f9      	ldr	r1, [r7, #12]
 8006dc0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006dc4:	4313      	orrs	r3, r2
 8006dc6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006dc8:	68bb      	ldr	r3, [r7, #8]
 8006dca:	015a      	lsls	r2, r3, #5
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	4413      	add	r3, r2
 8006dd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d11a      	bne.n	8006e14 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006dde:	68bb      	ldr	r3, [r7, #8]
 8006de0:	015a      	lsls	r2, r3, #5
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	4413      	add	r3, r2
 8006de6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dea:	681a      	ldr	r2, [r3, #0]
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	68db      	ldr	r3, [r3, #12]
 8006df0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	791b      	ldrb	r3, [r3, #4]
 8006df8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006dfa:	430b      	orrs	r3, r1
 8006dfc:	4313      	orrs	r3, r2
 8006dfe:	68ba      	ldr	r2, [r7, #8]
 8006e00:	0151      	lsls	r1, r2, #5
 8006e02:	68fa      	ldr	r2, [r7, #12]
 8006e04:	440a      	add	r2, r1
 8006e06:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e12:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006e14:	2300      	movs	r3, #0
}
 8006e16:	4618      	mov	r0, r3
 8006e18:	3714      	adds	r7, #20
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e20:	4770      	bx	lr
	...

08006e24 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006e24:	b480      	push	{r7}
 8006e26:	b085      	sub	sp, #20
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
 8006e2c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	781b      	ldrb	r3, [r3, #0]
 8006e36:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	785b      	ldrb	r3, [r3, #1]
 8006e3c:	2b01      	cmp	r3, #1
 8006e3e:	d161      	bne.n	8006f04 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	015a      	lsls	r2, r3, #5
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	4413      	add	r3, r2
 8006e48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006e52:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006e56:	d11f      	bne.n	8006e98 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006e58:	68bb      	ldr	r3, [r7, #8]
 8006e5a:	015a      	lsls	r2, r3, #5
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	4413      	add	r3, r2
 8006e60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	68ba      	ldr	r2, [r7, #8]
 8006e68:	0151      	lsls	r1, r2, #5
 8006e6a:	68fa      	ldr	r2, [r7, #12]
 8006e6c:	440a      	add	r2, r1
 8006e6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e72:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006e76:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	015a      	lsls	r2, r3, #5
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	4413      	add	r3, r2
 8006e80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	68ba      	ldr	r2, [r7, #8]
 8006e88:	0151      	lsls	r1, r2, #5
 8006e8a:	68fa      	ldr	r2, [r7, #12]
 8006e8c:	440a      	add	r2, r1
 8006e8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e92:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006e96:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e9e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	781b      	ldrb	r3, [r3, #0]
 8006ea4:	f003 030f 	and.w	r3, r3, #15
 8006ea8:	2101      	movs	r1, #1
 8006eaa:	fa01 f303 	lsl.w	r3, r1, r3
 8006eae:	b29b      	uxth	r3, r3
 8006eb0:	43db      	mvns	r3, r3
 8006eb2:	68f9      	ldr	r1, [r7, #12]
 8006eb4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006eb8:	4013      	ands	r3, r2
 8006eba:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ec2:	69da      	ldr	r2, [r3, #28]
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	781b      	ldrb	r3, [r3, #0]
 8006ec8:	f003 030f 	and.w	r3, r3, #15
 8006ecc:	2101      	movs	r1, #1
 8006ece:	fa01 f303 	lsl.w	r3, r1, r3
 8006ed2:	b29b      	uxth	r3, r3
 8006ed4:	43db      	mvns	r3, r3
 8006ed6:	68f9      	ldr	r1, [r7, #12]
 8006ed8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006edc:	4013      	ands	r3, r2
 8006ede:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006ee0:	68bb      	ldr	r3, [r7, #8]
 8006ee2:	015a      	lsls	r2, r3, #5
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	4413      	add	r3, r2
 8006ee8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006eec:	681a      	ldr	r2, [r3, #0]
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	0159      	lsls	r1, r3, #5
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	440b      	add	r3, r1
 8006ef6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006efa:	4619      	mov	r1, r3
 8006efc:	4b35      	ldr	r3, [pc, #212]	; (8006fd4 <USB_DeactivateEndpoint+0x1b0>)
 8006efe:	4013      	ands	r3, r2
 8006f00:	600b      	str	r3, [r1, #0]
 8006f02:	e060      	b.n	8006fc6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	015a      	lsls	r2, r3, #5
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	4413      	add	r3, r2
 8006f0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006f16:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006f1a:	d11f      	bne.n	8006f5c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006f1c:	68bb      	ldr	r3, [r7, #8]
 8006f1e:	015a      	lsls	r2, r3, #5
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	4413      	add	r3, r2
 8006f24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	68ba      	ldr	r2, [r7, #8]
 8006f2c:	0151      	lsls	r1, r2, #5
 8006f2e:	68fa      	ldr	r2, [r7, #12]
 8006f30:	440a      	add	r2, r1
 8006f32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f36:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006f3a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006f3c:	68bb      	ldr	r3, [r7, #8]
 8006f3e:	015a      	lsls	r2, r3, #5
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	4413      	add	r3, r2
 8006f44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	68ba      	ldr	r2, [r7, #8]
 8006f4c:	0151      	lsls	r1, r2, #5
 8006f4e:	68fa      	ldr	r2, [r7, #12]
 8006f50:	440a      	add	r2, r1
 8006f52:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f56:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006f5a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f62:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	781b      	ldrb	r3, [r3, #0]
 8006f68:	f003 030f 	and.w	r3, r3, #15
 8006f6c:	2101      	movs	r1, #1
 8006f6e:	fa01 f303 	lsl.w	r3, r1, r3
 8006f72:	041b      	lsls	r3, r3, #16
 8006f74:	43db      	mvns	r3, r3
 8006f76:	68f9      	ldr	r1, [r7, #12]
 8006f78:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006f7c:	4013      	ands	r3, r2
 8006f7e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f86:	69da      	ldr	r2, [r3, #28]
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	781b      	ldrb	r3, [r3, #0]
 8006f8c:	f003 030f 	and.w	r3, r3, #15
 8006f90:	2101      	movs	r1, #1
 8006f92:	fa01 f303 	lsl.w	r3, r1, r3
 8006f96:	041b      	lsls	r3, r3, #16
 8006f98:	43db      	mvns	r3, r3
 8006f9a:	68f9      	ldr	r1, [r7, #12]
 8006f9c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006fa0:	4013      	ands	r3, r2
 8006fa2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	015a      	lsls	r2, r3, #5
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	4413      	add	r3, r2
 8006fac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fb0:	681a      	ldr	r2, [r3, #0]
 8006fb2:	68bb      	ldr	r3, [r7, #8]
 8006fb4:	0159      	lsls	r1, r3, #5
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	440b      	add	r3, r1
 8006fba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fbe:	4619      	mov	r1, r3
 8006fc0:	4b05      	ldr	r3, [pc, #20]	; (8006fd8 <USB_DeactivateEndpoint+0x1b4>)
 8006fc2:	4013      	ands	r3, r2
 8006fc4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006fc6:	2300      	movs	r3, #0
}
 8006fc8:	4618      	mov	r0, r3
 8006fca:	3714      	adds	r7, #20
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd2:	4770      	bx	lr
 8006fd4:	ec337800 	.word	0xec337800
 8006fd8:	eff37800 	.word	0xeff37800

08006fdc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b08a      	sub	sp, #40	; 0x28
 8006fe0:	af02      	add	r7, sp, #8
 8006fe2:	60f8      	str	r0, [r7, #12]
 8006fe4:	60b9      	str	r1, [r7, #8]
 8006fe6:	4613      	mov	r3, r2
 8006fe8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006fee:	68bb      	ldr	r3, [r7, #8]
 8006ff0:	781b      	ldrb	r3, [r3, #0]
 8006ff2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006ff4:	68bb      	ldr	r3, [r7, #8]
 8006ff6:	785b      	ldrb	r3, [r3, #1]
 8006ff8:	2b01      	cmp	r3, #1
 8006ffa:	f040 815c 	bne.w	80072b6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006ffe:	68bb      	ldr	r3, [r7, #8]
 8007000:	699b      	ldr	r3, [r3, #24]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d132      	bne.n	800706c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007006:	69bb      	ldr	r3, [r7, #24]
 8007008:	015a      	lsls	r2, r3, #5
 800700a:	69fb      	ldr	r3, [r7, #28]
 800700c:	4413      	add	r3, r2
 800700e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007012:	691b      	ldr	r3, [r3, #16]
 8007014:	69ba      	ldr	r2, [r7, #24]
 8007016:	0151      	lsls	r1, r2, #5
 8007018:	69fa      	ldr	r2, [r7, #28]
 800701a:	440a      	add	r2, r1
 800701c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007020:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007024:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007028:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800702a:	69bb      	ldr	r3, [r7, #24]
 800702c:	015a      	lsls	r2, r3, #5
 800702e:	69fb      	ldr	r3, [r7, #28]
 8007030:	4413      	add	r3, r2
 8007032:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007036:	691b      	ldr	r3, [r3, #16]
 8007038:	69ba      	ldr	r2, [r7, #24]
 800703a:	0151      	lsls	r1, r2, #5
 800703c:	69fa      	ldr	r2, [r7, #28]
 800703e:	440a      	add	r2, r1
 8007040:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007044:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007048:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800704a:	69bb      	ldr	r3, [r7, #24]
 800704c:	015a      	lsls	r2, r3, #5
 800704e:	69fb      	ldr	r3, [r7, #28]
 8007050:	4413      	add	r3, r2
 8007052:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007056:	691b      	ldr	r3, [r3, #16]
 8007058:	69ba      	ldr	r2, [r7, #24]
 800705a:	0151      	lsls	r1, r2, #5
 800705c:	69fa      	ldr	r2, [r7, #28]
 800705e:	440a      	add	r2, r1
 8007060:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007064:	0cdb      	lsrs	r3, r3, #19
 8007066:	04db      	lsls	r3, r3, #19
 8007068:	6113      	str	r3, [r2, #16]
 800706a:	e074      	b.n	8007156 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800706c:	69bb      	ldr	r3, [r7, #24]
 800706e:	015a      	lsls	r2, r3, #5
 8007070:	69fb      	ldr	r3, [r7, #28]
 8007072:	4413      	add	r3, r2
 8007074:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007078:	691b      	ldr	r3, [r3, #16]
 800707a:	69ba      	ldr	r2, [r7, #24]
 800707c:	0151      	lsls	r1, r2, #5
 800707e:	69fa      	ldr	r2, [r7, #28]
 8007080:	440a      	add	r2, r1
 8007082:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007086:	0cdb      	lsrs	r3, r3, #19
 8007088:	04db      	lsls	r3, r3, #19
 800708a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800708c:	69bb      	ldr	r3, [r7, #24]
 800708e:	015a      	lsls	r2, r3, #5
 8007090:	69fb      	ldr	r3, [r7, #28]
 8007092:	4413      	add	r3, r2
 8007094:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007098:	691b      	ldr	r3, [r3, #16]
 800709a:	69ba      	ldr	r2, [r7, #24]
 800709c:	0151      	lsls	r1, r2, #5
 800709e:	69fa      	ldr	r2, [r7, #28]
 80070a0:	440a      	add	r2, r1
 80070a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070a6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80070aa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80070ae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80070b0:	69bb      	ldr	r3, [r7, #24]
 80070b2:	015a      	lsls	r2, r3, #5
 80070b4:	69fb      	ldr	r3, [r7, #28]
 80070b6:	4413      	add	r3, r2
 80070b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070bc:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80070be:	68bb      	ldr	r3, [r7, #8]
 80070c0:	6999      	ldr	r1, [r3, #24]
 80070c2:	68bb      	ldr	r3, [r7, #8]
 80070c4:	68db      	ldr	r3, [r3, #12]
 80070c6:	440b      	add	r3, r1
 80070c8:	1e59      	subs	r1, r3, #1
 80070ca:	68bb      	ldr	r3, [r7, #8]
 80070cc:	68db      	ldr	r3, [r3, #12]
 80070ce:	fbb1 f3f3 	udiv	r3, r1, r3
 80070d2:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80070d4:	4b9d      	ldr	r3, [pc, #628]	; (800734c <USB_EPStartXfer+0x370>)
 80070d6:	400b      	ands	r3, r1
 80070d8:	69b9      	ldr	r1, [r7, #24]
 80070da:	0148      	lsls	r0, r1, #5
 80070dc:	69f9      	ldr	r1, [r7, #28]
 80070de:	4401      	add	r1, r0
 80070e0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80070e4:	4313      	orrs	r3, r2
 80070e6:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80070e8:	69bb      	ldr	r3, [r7, #24]
 80070ea:	015a      	lsls	r2, r3, #5
 80070ec:	69fb      	ldr	r3, [r7, #28]
 80070ee:	4413      	add	r3, r2
 80070f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070f4:	691a      	ldr	r2, [r3, #16]
 80070f6:	68bb      	ldr	r3, [r7, #8]
 80070f8:	699b      	ldr	r3, [r3, #24]
 80070fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80070fe:	69b9      	ldr	r1, [r7, #24]
 8007100:	0148      	lsls	r0, r1, #5
 8007102:	69f9      	ldr	r1, [r7, #28]
 8007104:	4401      	add	r1, r0
 8007106:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800710a:	4313      	orrs	r3, r2
 800710c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800710e:	68bb      	ldr	r3, [r7, #8]
 8007110:	791b      	ldrb	r3, [r3, #4]
 8007112:	2b01      	cmp	r3, #1
 8007114:	d11f      	bne.n	8007156 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007116:	69bb      	ldr	r3, [r7, #24]
 8007118:	015a      	lsls	r2, r3, #5
 800711a:	69fb      	ldr	r3, [r7, #28]
 800711c:	4413      	add	r3, r2
 800711e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007122:	691b      	ldr	r3, [r3, #16]
 8007124:	69ba      	ldr	r2, [r7, #24]
 8007126:	0151      	lsls	r1, r2, #5
 8007128:	69fa      	ldr	r2, [r7, #28]
 800712a:	440a      	add	r2, r1
 800712c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007130:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007134:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8007136:	69bb      	ldr	r3, [r7, #24]
 8007138:	015a      	lsls	r2, r3, #5
 800713a:	69fb      	ldr	r3, [r7, #28]
 800713c:	4413      	add	r3, r2
 800713e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007142:	691b      	ldr	r3, [r3, #16]
 8007144:	69ba      	ldr	r2, [r7, #24]
 8007146:	0151      	lsls	r1, r2, #5
 8007148:	69fa      	ldr	r2, [r7, #28]
 800714a:	440a      	add	r2, r1
 800714c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007150:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007154:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8007156:	79fb      	ldrb	r3, [r7, #7]
 8007158:	2b01      	cmp	r3, #1
 800715a:	d14b      	bne.n	80071f4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	695b      	ldr	r3, [r3, #20]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d009      	beq.n	8007178 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007164:	69bb      	ldr	r3, [r7, #24]
 8007166:	015a      	lsls	r2, r3, #5
 8007168:	69fb      	ldr	r3, [r7, #28]
 800716a:	4413      	add	r3, r2
 800716c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007170:	461a      	mov	r2, r3
 8007172:	68bb      	ldr	r3, [r7, #8]
 8007174:	695b      	ldr	r3, [r3, #20]
 8007176:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007178:	68bb      	ldr	r3, [r7, #8]
 800717a:	791b      	ldrb	r3, [r3, #4]
 800717c:	2b01      	cmp	r3, #1
 800717e:	d128      	bne.n	80071d2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007180:	69fb      	ldr	r3, [r7, #28]
 8007182:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007186:	689b      	ldr	r3, [r3, #8]
 8007188:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800718c:	2b00      	cmp	r3, #0
 800718e:	d110      	bne.n	80071b2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007190:	69bb      	ldr	r3, [r7, #24]
 8007192:	015a      	lsls	r2, r3, #5
 8007194:	69fb      	ldr	r3, [r7, #28]
 8007196:	4413      	add	r3, r2
 8007198:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	69ba      	ldr	r2, [r7, #24]
 80071a0:	0151      	lsls	r1, r2, #5
 80071a2:	69fa      	ldr	r2, [r7, #28]
 80071a4:	440a      	add	r2, r1
 80071a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071aa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80071ae:	6013      	str	r3, [r2, #0]
 80071b0:	e00f      	b.n	80071d2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80071b2:	69bb      	ldr	r3, [r7, #24]
 80071b4:	015a      	lsls	r2, r3, #5
 80071b6:	69fb      	ldr	r3, [r7, #28]
 80071b8:	4413      	add	r3, r2
 80071ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	69ba      	ldr	r2, [r7, #24]
 80071c2:	0151      	lsls	r1, r2, #5
 80071c4:	69fa      	ldr	r2, [r7, #28]
 80071c6:	440a      	add	r2, r1
 80071c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80071d0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80071d2:	69bb      	ldr	r3, [r7, #24]
 80071d4:	015a      	lsls	r2, r3, #5
 80071d6:	69fb      	ldr	r3, [r7, #28]
 80071d8:	4413      	add	r3, r2
 80071da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	69ba      	ldr	r2, [r7, #24]
 80071e2:	0151      	lsls	r1, r2, #5
 80071e4:	69fa      	ldr	r2, [r7, #28]
 80071e6:	440a      	add	r2, r1
 80071e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071ec:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80071f0:	6013      	str	r3, [r2, #0]
 80071f2:	e133      	b.n	800745c <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80071f4:	69bb      	ldr	r3, [r7, #24]
 80071f6:	015a      	lsls	r2, r3, #5
 80071f8:	69fb      	ldr	r3, [r7, #28]
 80071fa:	4413      	add	r3, r2
 80071fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	69ba      	ldr	r2, [r7, #24]
 8007204:	0151      	lsls	r1, r2, #5
 8007206:	69fa      	ldr	r2, [r7, #28]
 8007208:	440a      	add	r2, r1
 800720a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800720e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007212:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007214:	68bb      	ldr	r3, [r7, #8]
 8007216:	791b      	ldrb	r3, [r3, #4]
 8007218:	2b01      	cmp	r3, #1
 800721a:	d015      	beq.n	8007248 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800721c:	68bb      	ldr	r3, [r7, #8]
 800721e:	699b      	ldr	r3, [r3, #24]
 8007220:	2b00      	cmp	r3, #0
 8007222:	f000 811b 	beq.w	800745c <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007226:	69fb      	ldr	r3, [r7, #28]
 8007228:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800722c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800722e:	68bb      	ldr	r3, [r7, #8]
 8007230:	781b      	ldrb	r3, [r3, #0]
 8007232:	f003 030f 	and.w	r3, r3, #15
 8007236:	2101      	movs	r1, #1
 8007238:	fa01 f303 	lsl.w	r3, r1, r3
 800723c:	69f9      	ldr	r1, [r7, #28]
 800723e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007242:	4313      	orrs	r3, r2
 8007244:	634b      	str	r3, [r1, #52]	; 0x34
 8007246:	e109      	b.n	800745c <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007248:	69fb      	ldr	r3, [r7, #28]
 800724a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800724e:	689b      	ldr	r3, [r3, #8]
 8007250:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007254:	2b00      	cmp	r3, #0
 8007256:	d110      	bne.n	800727a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007258:	69bb      	ldr	r3, [r7, #24]
 800725a:	015a      	lsls	r2, r3, #5
 800725c:	69fb      	ldr	r3, [r7, #28]
 800725e:	4413      	add	r3, r2
 8007260:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	69ba      	ldr	r2, [r7, #24]
 8007268:	0151      	lsls	r1, r2, #5
 800726a:	69fa      	ldr	r2, [r7, #28]
 800726c:	440a      	add	r2, r1
 800726e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007272:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007276:	6013      	str	r3, [r2, #0]
 8007278:	e00f      	b.n	800729a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800727a:	69bb      	ldr	r3, [r7, #24]
 800727c:	015a      	lsls	r2, r3, #5
 800727e:	69fb      	ldr	r3, [r7, #28]
 8007280:	4413      	add	r3, r2
 8007282:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	69ba      	ldr	r2, [r7, #24]
 800728a:	0151      	lsls	r1, r2, #5
 800728c:	69fa      	ldr	r2, [r7, #28]
 800728e:	440a      	add	r2, r1
 8007290:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007294:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007298:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800729a:	68bb      	ldr	r3, [r7, #8]
 800729c:	6919      	ldr	r1, [r3, #16]
 800729e:	68bb      	ldr	r3, [r7, #8]
 80072a0:	781a      	ldrb	r2, [r3, #0]
 80072a2:	68bb      	ldr	r3, [r7, #8]
 80072a4:	699b      	ldr	r3, [r3, #24]
 80072a6:	b298      	uxth	r0, r3
 80072a8:	79fb      	ldrb	r3, [r7, #7]
 80072aa:	9300      	str	r3, [sp, #0]
 80072ac:	4603      	mov	r3, r0
 80072ae:	68f8      	ldr	r0, [r7, #12]
 80072b0:	f000 fade 	bl	8007870 <USB_WritePacket>
 80072b4:	e0d2      	b.n	800745c <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80072b6:	69bb      	ldr	r3, [r7, #24]
 80072b8:	015a      	lsls	r2, r3, #5
 80072ba:	69fb      	ldr	r3, [r7, #28]
 80072bc:	4413      	add	r3, r2
 80072be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072c2:	691b      	ldr	r3, [r3, #16]
 80072c4:	69ba      	ldr	r2, [r7, #24]
 80072c6:	0151      	lsls	r1, r2, #5
 80072c8:	69fa      	ldr	r2, [r7, #28]
 80072ca:	440a      	add	r2, r1
 80072cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072d0:	0cdb      	lsrs	r3, r3, #19
 80072d2:	04db      	lsls	r3, r3, #19
 80072d4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80072d6:	69bb      	ldr	r3, [r7, #24]
 80072d8:	015a      	lsls	r2, r3, #5
 80072da:	69fb      	ldr	r3, [r7, #28]
 80072dc:	4413      	add	r3, r2
 80072de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072e2:	691b      	ldr	r3, [r3, #16]
 80072e4:	69ba      	ldr	r2, [r7, #24]
 80072e6:	0151      	lsls	r1, r2, #5
 80072e8:	69fa      	ldr	r2, [r7, #28]
 80072ea:	440a      	add	r2, r1
 80072ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072f0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80072f4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80072f8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80072fa:	68bb      	ldr	r3, [r7, #8]
 80072fc:	699b      	ldr	r3, [r3, #24]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d126      	bne.n	8007350 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007302:	69bb      	ldr	r3, [r7, #24]
 8007304:	015a      	lsls	r2, r3, #5
 8007306:	69fb      	ldr	r3, [r7, #28]
 8007308:	4413      	add	r3, r2
 800730a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800730e:	691a      	ldr	r2, [r3, #16]
 8007310:	68bb      	ldr	r3, [r7, #8]
 8007312:	68db      	ldr	r3, [r3, #12]
 8007314:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007318:	69b9      	ldr	r1, [r7, #24]
 800731a:	0148      	lsls	r0, r1, #5
 800731c:	69f9      	ldr	r1, [r7, #28]
 800731e:	4401      	add	r1, r0
 8007320:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007324:	4313      	orrs	r3, r2
 8007326:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007328:	69bb      	ldr	r3, [r7, #24]
 800732a:	015a      	lsls	r2, r3, #5
 800732c:	69fb      	ldr	r3, [r7, #28]
 800732e:	4413      	add	r3, r2
 8007330:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007334:	691b      	ldr	r3, [r3, #16]
 8007336:	69ba      	ldr	r2, [r7, #24]
 8007338:	0151      	lsls	r1, r2, #5
 800733a:	69fa      	ldr	r2, [r7, #28]
 800733c:	440a      	add	r2, r1
 800733e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007342:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007346:	6113      	str	r3, [r2, #16]
 8007348:	e03a      	b.n	80073c0 <USB_EPStartXfer+0x3e4>
 800734a:	bf00      	nop
 800734c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007350:	68bb      	ldr	r3, [r7, #8]
 8007352:	699a      	ldr	r2, [r3, #24]
 8007354:	68bb      	ldr	r3, [r7, #8]
 8007356:	68db      	ldr	r3, [r3, #12]
 8007358:	4413      	add	r3, r2
 800735a:	1e5a      	subs	r2, r3, #1
 800735c:	68bb      	ldr	r3, [r7, #8]
 800735e:	68db      	ldr	r3, [r3, #12]
 8007360:	fbb2 f3f3 	udiv	r3, r2, r3
 8007364:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8007366:	68bb      	ldr	r3, [r7, #8]
 8007368:	68db      	ldr	r3, [r3, #12]
 800736a:	8afa      	ldrh	r2, [r7, #22]
 800736c:	fb03 f202 	mul.w	r2, r3, r2
 8007370:	68bb      	ldr	r3, [r7, #8]
 8007372:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007374:	69bb      	ldr	r3, [r7, #24]
 8007376:	015a      	lsls	r2, r3, #5
 8007378:	69fb      	ldr	r3, [r7, #28]
 800737a:	4413      	add	r3, r2
 800737c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007380:	691a      	ldr	r2, [r3, #16]
 8007382:	8afb      	ldrh	r3, [r7, #22]
 8007384:	04d9      	lsls	r1, r3, #19
 8007386:	4b38      	ldr	r3, [pc, #224]	; (8007468 <USB_EPStartXfer+0x48c>)
 8007388:	400b      	ands	r3, r1
 800738a:	69b9      	ldr	r1, [r7, #24]
 800738c:	0148      	lsls	r0, r1, #5
 800738e:	69f9      	ldr	r1, [r7, #28]
 8007390:	4401      	add	r1, r0
 8007392:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007396:	4313      	orrs	r3, r2
 8007398:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800739a:	69bb      	ldr	r3, [r7, #24]
 800739c:	015a      	lsls	r2, r3, #5
 800739e:	69fb      	ldr	r3, [r7, #28]
 80073a0:	4413      	add	r3, r2
 80073a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073a6:	691a      	ldr	r2, [r3, #16]
 80073a8:	68bb      	ldr	r3, [r7, #8]
 80073aa:	69db      	ldr	r3, [r3, #28]
 80073ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80073b0:	69b9      	ldr	r1, [r7, #24]
 80073b2:	0148      	lsls	r0, r1, #5
 80073b4:	69f9      	ldr	r1, [r7, #28]
 80073b6:	4401      	add	r1, r0
 80073b8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80073bc:	4313      	orrs	r3, r2
 80073be:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80073c0:	79fb      	ldrb	r3, [r7, #7]
 80073c2:	2b01      	cmp	r3, #1
 80073c4:	d10d      	bne.n	80073e2 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80073c6:	68bb      	ldr	r3, [r7, #8]
 80073c8:	691b      	ldr	r3, [r3, #16]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d009      	beq.n	80073e2 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80073ce:	68bb      	ldr	r3, [r7, #8]
 80073d0:	6919      	ldr	r1, [r3, #16]
 80073d2:	69bb      	ldr	r3, [r7, #24]
 80073d4:	015a      	lsls	r2, r3, #5
 80073d6:	69fb      	ldr	r3, [r7, #28]
 80073d8:	4413      	add	r3, r2
 80073da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073de:	460a      	mov	r2, r1
 80073e0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80073e2:	68bb      	ldr	r3, [r7, #8]
 80073e4:	791b      	ldrb	r3, [r3, #4]
 80073e6:	2b01      	cmp	r3, #1
 80073e8:	d128      	bne.n	800743c <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80073ea:	69fb      	ldr	r3, [r7, #28]
 80073ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073f0:	689b      	ldr	r3, [r3, #8]
 80073f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d110      	bne.n	800741c <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80073fa:	69bb      	ldr	r3, [r7, #24]
 80073fc:	015a      	lsls	r2, r3, #5
 80073fe:	69fb      	ldr	r3, [r7, #28]
 8007400:	4413      	add	r3, r2
 8007402:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	69ba      	ldr	r2, [r7, #24]
 800740a:	0151      	lsls	r1, r2, #5
 800740c:	69fa      	ldr	r2, [r7, #28]
 800740e:	440a      	add	r2, r1
 8007410:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007414:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007418:	6013      	str	r3, [r2, #0]
 800741a:	e00f      	b.n	800743c <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800741c:	69bb      	ldr	r3, [r7, #24]
 800741e:	015a      	lsls	r2, r3, #5
 8007420:	69fb      	ldr	r3, [r7, #28]
 8007422:	4413      	add	r3, r2
 8007424:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	69ba      	ldr	r2, [r7, #24]
 800742c:	0151      	lsls	r1, r2, #5
 800742e:	69fa      	ldr	r2, [r7, #28]
 8007430:	440a      	add	r2, r1
 8007432:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007436:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800743a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800743c:	69bb      	ldr	r3, [r7, #24]
 800743e:	015a      	lsls	r2, r3, #5
 8007440:	69fb      	ldr	r3, [r7, #28]
 8007442:	4413      	add	r3, r2
 8007444:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	69ba      	ldr	r2, [r7, #24]
 800744c:	0151      	lsls	r1, r2, #5
 800744e:	69fa      	ldr	r2, [r7, #28]
 8007450:	440a      	add	r2, r1
 8007452:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007456:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800745a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800745c:	2300      	movs	r3, #0
}
 800745e:	4618      	mov	r0, r3
 8007460:	3720      	adds	r7, #32
 8007462:	46bd      	mov	sp, r7
 8007464:	bd80      	pop	{r7, pc}
 8007466:	bf00      	nop
 8007468:	1ff80000 	.word	0x1ff80000

0800746c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800746c:	b480      	push	{r7}
 800746e:	b087      	sub	sp, #28
 8007470:	af00      	add	r7, sp, #0
 8007472:	60f8      	str	r0, [r7, #12]
 8007474:	60b9      	str	r1, [r7, #8]
 8007476:	4613      	mov	r3, r2
 8007478:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800747e:	68bb      	ldr	r3, [r7, #8]
 8007480:	781b      	ldrb	r3, [r3, #0]
 8007482:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	785b      	ldrb	r3, [r3, #1]
 8007488:	2b01      	cmp	r3, #1
 800748a:	f040 80ce 	bne.w	800762a <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800748e:	68bb      	ldr	r3, [r7, #8]
 8007490:	699b      	ldr	r3, [r3, #24]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d132      	bne.n	80074fc <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007496:	693b      	ldr	r3, [r7, #16]
 8007498:	015a      	lsls	r2, r3, #5
 800749a:	697b      	ldr	r3, [r7, #20]
 800749c:	4413      	add	r3, r2
 800749e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074a2:	691b      	ldr	r3, [r3, #16]
 80074a4:	693a      	ldr	r2, [r7, #16]
 80074a6:	0151      	lsls	r1, r2, #5
 80074a8:	697a      	ldr	r2, [r7, #20]
 80074aa:	440a      	add	r2, r1
 80074ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074b0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80074b4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80074b8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80074ba:	693b      	ldr	r3, [r7, #16]
 80074bc:	015a      	lsls	r2, r3, #5
 80074be:	697b      	ldr	r3, [r7, #20]
 80074c0:	4413      	add	r3, r2
 80074c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074c6:	691b      	ldr	r3, [r3, #16]
 80074c8:	693a      	ldr	r2, [r7, #16]
 80074ca:	0151      	lsls	r1, r2, #5
 80074cc:	697a      	ldr	r2, [r7, #20]
 80074ce:	440a      	add	r2, r1
 80074d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074d4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80074d8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80074da:	693b      	ldr	r3, [r7, #16]
 80074dc:	015a      	lsls	r2, r3, #5
 80074de:	697b      	ldr	r3, [r7, #20]
 80074e0:	4413      	add	r3, r2
 80074e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074e6:	691b      	ldr	r3, [r3, #16]
 80074e8:	693a      	ldr	r2, [r7, #16]
 80074ea:	0151      	lsls	r1, r2, #5
 80074ec:	697a      	ldr	r2, [r7, #20]
 80074ee:	440a      	add	r2, r1
 80074f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074f4:	0cdb      	lsrs	r3, r3, #19
 80074f6:	04db      	lsls	r3, r3, #19
 80074f8:	6113      	str	r3, [r2, #16]
 80074fa:	e04e      	b.n	800759a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80074fc:	693b      	ldr	r3, [r7, #16]
 80074fe:	015a      	lsls	r2, r3, #5
 8007500:	697b      	ldr	r3, [r7, #20]
 8007502:	4413      	add	r3, r2
 8007504:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007508:	691b      	ldr	r3, [r3, #16]
 800750a:	693a      	ldr	r2, [r7, #16]
 800750c:	0151      	lsls	r1, r2, #5
 800750e:	697a      	ldr	r2, [r7, #20]
 8007510:	440a      	add	r2, r1
 8007512:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007516:	0cdb      	lsrs	r3, r3, #19
 8007518:	04db      	lsls	r3, r3, #19
 800751a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800751c:	693b      	ldr	r3, [r7, #16]
 800751e:	015a      	lsls	r2, r3, #5
 8007520:	697b      	ldr	r3, [r7, #20]
 8007522:	4413      	add	r3, r2
 8007524:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007528:	691b      	ldr	r3, [r3, #16]
 800752a:	693a      	ldr	r2, [r7, #16]
 800752c:	0151      	lsls	r1, r2, #5
 800752e:	697a      	ldr	r2, [r7, #20]
 8007530:	440a      	add	r2, r1
 8007532:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007536:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800753a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800753e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8007540:	68bb      	ldr	r3, [r7, #8]
 8007542:	699a      	ldr	r2, [r3, #24]
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	68db      	ldr	r3, [r3, #12]
 8007548:	429a      	cmp	r2, r3
 800754a:	d903      	bls.n	8007554 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800754c:	68bb      	ldr	r3, [r7, #8]
 800754e:	68da      	ldr	r2, [r3, #12]
 8007550:	68bb      	ldr	r3, [r7, #8]
 8007552:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007554:	693b      	ldr	r3, [r7, #16]
 8007556:	015a      	lsls	r2, r3, #5
 8007558:	697b      	ldr	r3, [r7, #20]
 800755a:	4413      	add	r3, r2
 800755c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007560:	691b      	ldr	r3, [r3, #16]
 8007562:	693a      	ldr	r2, [r7, #16]
 8007564:	0151      	lsls	r1, r2, #5
 8007566:	697a      	ldr	r2, [r7, #20]
 8007568:	440a      	add	r2, r1
 800756a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800756e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007572:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007574:	693b      	ldr	r3, [r7, #16]
 8007576:	015a      	lsls	r2, r3, #5
 8007578:	697b      	ldr	r3, [r7, #20]
 800757a:	4413      	add	r3, r2
 800757c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007580:	691a      	ldr	r2, [r3, #16]
 8007582:	68bb      	ldr	r3, [r7, #8]
 8007584:	699b      	ldr	r3, [r3, #24]
 8007586:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800758a:	6939      	ldr	r1, [r7, #16]
 800758c:	0148      	lsls	r0, r1, #5
 800758e:	6979      	ldr	r1, [r7, #20]
 8007590:	4401      	add	r1, r0
 8007592:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007596:	4313      	orrs	r3, r2
 8007598:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800759a:	79fb      	ldrb	r3, [r7, #7]
 800759c:	2b01      	cmp	r3, #1
 800759e:	d11e      	bne.n	80075de <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	695b      	ldr	r3, [r3, #20]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d009      	beq.n	80075bc <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80075a8:	693b      	ldr	r3, [r7, #16]
 80075aa:	015a      	lsls	r2, r3, #5
 80075ac:	697b      	ldr	r3, [r7, #20]
 80075ae:	4413      	add	r3, r2
 80075b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075b4:	461a      	mov	r2, r3
 80075b6:	68bb      	ldr	r3, [r7, #8]
 80075b8:	695b      	ldr	r3, [r3, #20]
 80075ba:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80075bc:	693b      	ldr	r3, [r7, #16]
 80075be:	015a      	lsls	r2, r3, #5
 80075c0:	697b      	ldr	r3, [r7, #20]
 80075c2:	4413      	add	r3, r2
 80075c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	693a      	ldr	r2, [r7, #16]
 80075cc:	0151      	lsls	r1, r2, #5
 80075ce:	697a      	ldr	r2, [r7, #20]
 80075d0:	440a      	add	r2, r1
 80075d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075d6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80075da:	6013      	str	r3, [r2, #0]
 80075dc:	e097      	b.n	800770e <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80075de:	693b      	ldr	r3, [r7, #16]
 80075e0:	015a      	lsls	r2, r3, #5
 80075e2:	697b      	ldr	r3, [r7, #20]
 80075e4:	4413      	add	r3, r2
 80075e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	693a      	ldr	r2, [r7, #16]
 80075ee:	0151      	lsls	r1, r2, #5
 80075f0:	697a      	ldr	r2, [r7, #20]
 80075f2:	440a      	add	r2, r1
 80075f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075f8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80075fc:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80075fe:	68bb      	ldr	r3, [r7, #8]
 8007600:	699b      	ldr	r3, [r3, #24]
 8007602:	2b00      	cmp	r3, #0
 8007604:	f000 8083 	beq.w	800770e <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007608:	697b      	ldr	r3, [r7, #20]
 800760a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800760e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007610:	68bb      	ldr	r3, [r7, #8]
 8007612:	781b      	ldrb	r3, [r3, #0]
 8007614:	f003 030f 	and.w	r3, r3, #15
 8007618:	2101      	movs	r1, #1
 800761a:	fa01 f303 	lsl.w	r3, r1, r3
 800761e:	6979      	ldr	r1, [r7, #20]
 8007620:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007624:	4313      	orrs	r3, r2
 8007626:	634b      	str	r3, [r1, #52]	; 0x34
 8007628:	e071      	b.n	800770e <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800762a:	693b      	ldr	r3, [r7, #16]
 800762c:	015a      	lsls	r2, r3, #5
 800762e:	697b      	ldr	r3, [r7, #20]
 8007630:	4413      	add	r3, r2
 8007632:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007636:	691b      	ldr	r3, [r3, #16]
 8007638:	693a      	ldr	r2, [r7, #16]
 800763a:	0151      	lsls	r1, r2, #5
 800763c:	697a      	ldr	r2, [r7, #20]
 800763e:	440a      	add	r2, r1
 8007640:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007644:	0cdb      	lsrs	r3, r3, #19
 8007646:	04db      	lsls	r3, r3, #19
 8007648:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800764a:	693b      	ldr	r3, [r7, #16]
 800764c:	015a      	lsls	r2, r3, #5
 800764e:	697b      	ldr	r3, [r7, #20]
 8007650:	4413      	add	r3, r2
 8007652:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007656:	691b      	ldr	r3, [r3, #16]
 8007658:	693a      	ldr	r2, [r7, #16]
 800765a:	0151      	lsls	r1, r2, #5
 800765c:	697a      	ldr	r2, [r7, #20]
 800765e:	440a      	add	r2, r1
 8007660:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007664:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007668:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800766c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800766e:	68bb      	ldr	r3, [r7, #8]
 8007670:	699b      	ldr	r3, [r3, #24]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d003      	beq.n	800767e <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8007676:	68bb      	ldr	r3, [r7, #8]
 8007678:	68da      	ldr	r2, [r3, #12]
 800767a:	68bb      	ldr	r3, [r7, #8]
 800767c:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800767e:	68bb      	ldr	r3, [r7, #8]
 8007680:	68da      	ldr	r2, [r3, #12]
 8007682:	68bb      	ldr	r3, [r7, #8]
 8007684:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007686:	693b      	ldr	r3, [r7, #16]
 8007688:	015a      	lsls	r2, r3, #5
 800768a:	697b      	ldr	r3, [r7, #20]
 800768c:	4413      	add	r3, r2
 800768e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007692:	691b      	ldr	r3, [r3, #16]
 8007694:	693a      	ldr	r2, [r7, #16]
 8007696:	0151      	lsls	r1, r2, #5
 8007698:	697a      	ldr	r2, [r7, #20]
 800769a:	440a      	add	r2, r1
 800769c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80076a0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80076a4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80076a6:	693b      	ldr	r3, [r7, #16]
 80076a8:	015a      	lsls	r2, r3, #5
 80076aa:	697b      	ldr	r3, [r7, #20]
 80076ac:	4413      	add	r3, r2
 80076ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076b2:	691a      	ldr	r2, [r3, #16]
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	69db      	ldr	r3, [r3, #28]
 80076b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80076bc:	6939      	ldr	r1, [r7, #16]
 80076be:	0148      	lsls	r0, r1, #5
 80076c0:	6979      	ldr	r1, [r7, #20]
 80076c2:	4401      	add	r1, r0
 80076c4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80076c8:	4313      	orrs	r3, r2
 80076ca:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80076cc:	79fb      	ldrb	r3, [r7, #7]
 80076ce:	2b01      	cmp	r3, #1
 80076d0:	d10d      	bne.n	80076ee <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80076d2:	68bb      	ldr	r3, [r7, #8]
 80076d4:	691b      	ldr	r3, [r3, #16]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d009      	beq.n	80076ee <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80076da:	68bb      	ldr	r3, [r7, #8]
 80076dc:	6919      	ldr	r1, [r3, #16]
 80076de:	693b      	ldr	r3, [r7, #16]
 80076e0:	015a      	lsls	r2, r3, #5
 80076e2:	697b      	ldr	r3, [r7, #20]
 80076e4:	4413      	add	r3, r2
 80076e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076ea:	460a      	mov	r2, r1
 80076ec:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80076ee:	693b      	ldr	r3, [r7, #16]
 80076f0:	015a      	lsls	r2, r3, #5
 80076f2:	697b      	ldr	r3, [r7, #20]
 80076f4:	4413      	add	r3, r2
 80076f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	693a      	ldr	r2, [r7, #16]
 80076fe:	0151      	lsls	r1, r2, #5
 8007700:	697a      	ldr	r2, [r7, #20]
 8007702:	440a      	add	r2, r1
 8007704:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007708:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800770c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800770e:	2300      	movs	r3, #0
}
 8007710:	4618      	mov	r0, r3
 8007712:	371c      	adds	r7, #28
 8007714:	46bd      	mov	sp, r7
 8007716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771a:	4770      	bx	lr

0800771c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800771c:	b480      	push	{r7}
 800771e:	b087      	sub	sp, #28
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
 8007724:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007726:	2300      	movs	r3, #0
 8007728:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800772a:	2300      	movs	r3, #0
 800772c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	785b      	ldrb	r3, [r3, #1]
 8007736:	2b01      	cmp	r3, #1
 8007738:	d14a      	bne.n	80077d0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	781b      	ldrb	r3, [r3, #0]
 800773e:	015a      	lsls	r2, r3, #5
 8007740:	693b      	ldr	r3, [r7, #16]
 8007742:	4413      	add	r3, r2
 8007744:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800774e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007752:	f040 8086 	bne.w	8007862 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8007756:	683b      	ldr	r3, [r7, #0]
 8007758:	781b      	ldrb	r3, [r3, #0]
 800775a:	015a      	lsls	r2, r3, #5
 800775c:	693b      	ldr	r3, [r7, #16]
 800775e:	4413      	add	r3, r2
 8007760:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	683a      	ldr	r2, [r7, #0]
 8007768:	7812      	ldrb	r2, [r2, #0]
 800776a:	0151      	lsls	r1, r2, #5
 800776c:	693a      	ldr	r2, [r7, #16]
 800776e:	440a      	add	r2, r1
 8007770:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007774:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007778:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	781b      	ldrb	r3, [r3, #0]
 800777e:	015a      	lsls	r2, r3, #5
 8007780:	693b      	ldr	r3, [r7, #16]
 8007782:	4413      	add	r3, r2
 8007784:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	683a      	ldr	r2, [r7, #0]
 800778c:	7812      	ldrb	r2, [r2, #0]
 800778e:	0151      	lsls	r1, r2, #5
 8007790:	693a      	ldr	r2, [r7, #16]
 8007792:	440a      	add	r2, r1
 8007794:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007798:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800779c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	3301      	adds	r3, #1
 80077a2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	f242 7210 	movw	r2, #10000	; 0x2710
 80077aa:	4293      	cmp	r3, r2
 80077ac:	d902      	bls.n	80077b4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80077ae:	2301      	movs	r3, #1
 80077b0:	75fb      	strb	r3, [r7, #23]
          break;
 80077b2:	e056      	b.n	8007862 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	781b      	ldrb	r3, [r3, #0]
 80077b8:	015a      	lsls	r2, r3, #5
 80077ba:	693b      	ldr	r3, [r7, #16]
 80077bc:	4413      	add	r3, r2
 80077be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80077c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80077cc:	d0e7      	beq.n	800779e <USB_EPStopXfer+0x82>
 80077ce:	e048      	b.n	8007862 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	781b      	ldrb	r3, [r3, #0]
 80077d4:	015a      	lsls	r2, r3, #5
 80077d6:	693b      	ldr	r3, [r7, #16]
 80077d8:	4413      	add	r3, r2
 80077da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80077e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80077e8:	d13b      	bne.n	8007862 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	781b      	ldrb	r3, [r3, #0]
 80077ee:	015a      	lsls	r2, r3, #5
 80077f0:	693b      	ldr	r3, [r7, #16]
 80077f2:	4413      	add	r3, r2
 80077f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	683a      	ldr	r2, [r7, #0]
 80077fc:	7812      	ldrb	r2, [r2, #0]
 80077fe:	0151      	lsls	r1, r2, #5
 8007800:	693a      	ldr	r2, [r7, #16]
 8007802:	440a      	add	r2, r1
 8007804:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007808:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800780c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	781b      	ldrb	r3, [r3, #0]
 8007812:	015a      	lsls	r2, r3, #5
 8007814:	693b      	ldr	r3, [r7, #16]
 8007816:	4413      	add	r3, r2
 8007818:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	683a      	ldr	r2, [r7, #0]
 8007820:	7812      	ldrb	r2, [r2, #0]
 8007822:	0151      	lsls	r1, r2, #5
 8007824:	693a      	ldr	r2, [r7, #16]
 8007826:	440a      	add	r2, r1
 8007828:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800782c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007830:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	3301      	adds	r3, #1
 8007836:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	f242 7210 	movw	r2, #10000	; 0x2710
 800783e:	4293      	cmp	r3, r2
 8007840:	d902      	bls.n	8007848 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8007842:	2301      	movs	r3, #1
 8007844:	75fb      	strb	r3, [r7, #23]
          break;
 8007846:	e00c      	b.n	8007862 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	781b      	ldrb	r3, [r3, #0]
 800784c:	015a      	lsls	r2, r3, #5
 800784e:	693b      	ldr	r3, [r7, #16]
 8007850:	4413      	add	r3, r2
 8007852:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800785c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007860:	d0e7      	beq.n	8007832 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8007862:	7dfb      	ldrb	r3, [r7, #23]
}
 8007864:	4618      	mov	r0, r3
 8007866:	371c      	adds	r7, #28
 8007868:	46bd      	mov	sp, r7
 800786a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786e:	4770      	bx	lr

08007870 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007870:	b480      	push	{r7}
 8007872:	b089      	sub	sp, #36	; 0x24
 8007874:	af00      	add	r7, sp, #0
 8007876:	60f8      	str	r0, [r7, #12]
 8007878:	60b9      	str	r1, [r7, #8]
 800787a:	4611      	mov	r1, r2
 800787c:	461a      	mov	r2, r3
 800787e:	460b      	mov	r3, r1
 8007880:	71fb      	strb	r3, [r7, #7]
 8007882:	4613      	mov	r3, r2
 8007884:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800788a:	68bb      	ldr	r3, [r7, #8]
 800788c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800788e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007892:	2b00      	cmp	r3, #0
 8007894:	d123      	bne.n	80078de <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007896:	88bb      	ldrh	r3, [r7, #4]
 8007898:	3303      	adds	r3, #3
 800789a:	089b      	lsrs	r3, r3, #2
 800789c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800789e:	2300      	movs	r3, #0
 80078a0:	61bb      	str	r3, [r7, #24]
 80078a2:	e018      	b.n	80078d6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80078a4:	79fb      	ldrb	r3, [r7, #7]
 80078a6:	031a      	lsls	r2, r3, #12
 80078a8:	697b      	ldr	r3, [r7, #20]
 80078aa:	4413      	add	r3, r2
 80078ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078b0:	461a      	mov	r2, r3
 80078b2:	69fb      	ldr	r3, [r7, #28]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	6013      	str	r3, [r2, #0]
      pSrc++;
 80078b8:	69fb      	ldr	r3, [r7, #28]
 80078ba:	3301      	adds	r3, #1
 80078bc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80078be:	69fb      	ldr	r3, [r7, #28]
 80078c0:	3301      	adds	r3, #1
 80078c2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80078c4:	69fb      	ldr	r3, [r7, #28]
 80078c6:	3301      	adds	r3, #1
 80078c8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80078ca:	69fb      	ldr	r3, [r7, #28]
 80078cc:	3301      	adds	r3, #1
 80078ce:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80078d0:	69bb      	ldr	r3, [r7, #24]
 80078d2:	3301      	adds	r3, #1
 80078d4:	61bb      	str	r3, [r7, #24]
 80078d6:	69ba      	ldr	r2, [r7, #24]
 80078d8:	693b      	ldr	r3, [r7, #16]
 80078da:	429a      	cmp	r2, r3
 80078dc:	d3e2      	bcc.n	80078a4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80078de:	2300      	movs	r3, #0
}
 80078e0:	4618      	mov	r0, r3
 80078e2:	3724      	adds	r7, #36	; 0x24
 80078e4:	46bd      	mov	sp, r7
 80078e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ea:	4770      	bx	lr

080078ec <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80078ec:	b480      	push	{r7}
 80078ee:	b08b      	sub	sp, #44	; 0x2c
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	60f8      	str	r0, [r7, #12]
 80078f4:	60b9      	str	r1, [r7, #8]
 80078f6:	4613      	mov	r3, r2
 80078f8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80078fe:	68bb      	ldr	r3, [r7, #8]
 8007900:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007902:	88fb      	ldrh	r3, [r7, #6]
 8007904:	089b      	lsrs	r3, r3, #2
 8007906:	b29b      	uxth	r3, r3
 8007908:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800790a:	88fb      	ldrh	r3, [r7, #6]
 800790c:	f003 0303 	and.w	r3, r3, #3
 8007910:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007912:	2300      	movs	r3, #0
 8007914:	623b      	str	r3, [r7, #32]
 8007916:	e014      	b.n	8007942 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007918:	69bb      	ldr	r3, [r7, #24]
 800791a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800791e:	681a      	ldr	r2, [r3, #0]
 8007920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007922:	601a      	str	r2, [r3, #0]
    pDest++;
 8007924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007926:	3301      	adds	r3, #1
 8007928:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800792a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800792c:	3301      	adds	r3, #1
 800792e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007932:	3301      	adds	r3, #1
 8007934:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007938:	3301      	adds	r3, #1
 800793a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800793c:	6a3b      	ldr	r3, [r7, #32]
 800793e:	3301      	adds	r3, #1
 8007940:	623b      	str	r3, [r7, #32]
 8007942:	6a3a      	ldr	r2, [r7, #32]
 8007944:	697b      	ldr	r3, [r7, #20]
 8007946:	429a      	cmp	r2, r3
 8007948:	d3e6      	bcc.n	8007918 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800794a:	8bfb      	ldrh	r3, [r7, #30]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d01e      	beq.n	800798e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007950:	2300      	movs	r3, #0
 8007952:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007954:	69bb      	ldr	r3, [r7, #24]
 8007956:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800795a:	461a      	mov	r2, r3
 800795c:	f107 0310 	add.w	r3, r7, #16
 8007960:	6812      	ldr	r2, [r2, #0]
 8007962:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007964:	693a      	ldr	r2, [r7, #16]
 8007966:	6a3b      	ldr	r3, [r7, #32]
 8007968:	b2db      	uxtb	r3, r3
 800796a:	00db      	lsls	r3, r3, #3
 800796c:	fa22 f303 	lsr.w	r3, r2, r3
 8007970:	b2da      	uxtb	r2, r3
 8007972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007974:	701a      	strb	r2, [r3, #0]
      i++;
 8007976:	6a3b      	ldr	r3, [r7, #32]
 8007978:	3301      	adds	r3, #1
 800797a:	623b      	str	r3, [r7, #32]
      pDest++;
 800797c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800797e:	3301      	adds	r3, #1
 8007980:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007982:	8bfb      	ldrh	r3, [r7, #30]
 8007984:	3b01      	subs	r3, #1
 8007986:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007988:	8bfb      	ldrh	r3, [r7, #30]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d1ea      	bne.n	8007964 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800798e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007990:	4618      	mov	r0, r3
 8007992:	372c      	adds	r7, #44	; 0x2c
 8007994:	46bd      	mov	sp, r7
 8007996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799a:	4770      	bx	lr

0800799c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800799c:	b480      	push	{r7}
 800799e:	b085      	sub	sp, #20
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
 80079a4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	781b      	ldrb	r3, [r3, #0]
 80079ae:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	785b      	ldrb	r3, [r3, #1]
 80079b4:	2b01      	cmp	r3, #1
 80079b6:	d12c      	bne.n	8007a12 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80079b8:	68bb      	ldr	r3, [r7, #8]
 80079ba:	015a      	lsls	r2, r3, #5
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	4413      	add	r3, r2
 80079c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	db12      	blt.n	80079f0 <USB_EPSetStall+0x54>
 80079ca:	68bb      	ldr	r3, [r7, #8]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d00f      	beq.n	80079f0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80079d0:	68bb      	ldr	r3, [r7, #8]
 80079d2:	015a      	lsls	r2, r3, #5
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	4413      	add	r3, r2
 80079d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	68ba      	ldr	r2, [r7, #8]
 80079e0:	0151      	lsls	r1, r2, #5
 80079e2:	68fa      	ldr	r2, [r7, #12]
 80079e4:	440a      	add	r2, r1
 80079e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80079ea:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80079ee:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80079f0:	68bb      	ldr	r3, [r7, #8]
 80079f2:	015a      	lsls	r2, r3, #5
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	4413      	add	r3, r2
 80079f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	68ba      	ldr	r2, [r7, #8]
 8007a00:	0151      	lsls	r1, r2, #5
 8007a02:	68fa      	ldr	r2, [r7, #12]
 8007a04:	440a      	add	r2, r1
 8007a06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a0a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007a0e:	6013      	str	r3, [r2, #0]
 8007a10:	e02b      	b.n	8007a6a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007a12:	68bb      	ldr	r3, [r7, #8]
 8007a14:	015a      	lsls	r2, r3, #5
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	4413      	add	r3, r2
 8007a1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	db12      	blt.n	8007a4a <USB_EPSetStall+0xae>
 8007a24:	68bb      	ldr	r3, [r7, #8]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d00f      	beq.n	8007a4a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007a2a:	68bb      	ldr	r3, [r7, #8]
 8007a2c:	015a      	lsls	r2, r3, #5
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	4413      	add	r3, r2
 8007a32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	68ba      	ldr	r2, [r7, #8]
 8007a3a:	0151      	lsls	r1, r2, #5
 8007a3c:	68fa      	ldr	r2, [r7, #12]
 8007a3e:	440a      	add	r2, r1
 8007a40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a44:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007a48:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007a4a:	68bb      	ldr	r3, [r7, #8]
 8007a4c:	015a      	lsls	r2, r3, #5
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	4413      	add	r3, r2
 8007a52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	68ba      	ldr	r2, [r7, #8]
 8007a5a:	0151      	lsls	r1, r2, #5
 8007a5c:	68fa      	ldr	r2, [r7, #12]
 8007a5e:	440a      	add	r2, r1
 8007a60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a64:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007a68:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007a6a:	2300      	movs	r3, #0
}
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	3714      	adds	r7, #20
 8007a70:	46bd      	mov	sp, r7
 8007a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a76:	4770      	bx	lr

08007a78 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007a78:	b480      	push	{r7}
 8007a7a:	b085      	sub	sp, #20
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
 8007a80:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	781b      	ldrb	r3, [r3, #0]
 8007a8a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	785b      	ldrb	r3, [r3, #1]
 8007a90:	2b01      	cmp	r3, #1
 8007a92:	d128      	bne.n	8007ae6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007a94:	68bb      	ldr	r3, [r7, #8]
 8007a96:	015a      	lsls	r2, r3, #5
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	4413      	add	r3, r2
 8007a9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	68ba      	ldr	r2, [r7, #8]
 8007aa4:	0151      	lsls	r1, r2, #5
 8007aa6:	68fa      	ldr	r2, [r7, #12]
 8007aa8:	440a      	add	r2, r1
 8007aaa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007aae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007ab2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	791b      	ldrb	r3, [r3, #4]
 8007ab8:	2b03      	cmp	r3, #3
 8007aba:	d003      	beq.n	8007ac4 <USB_EPClearStall+0x4c>
 8007abc:	683b      	ldr	r3, [r7, #0]
 8007abe:	791b      	ldrb	r3, [r3, #4]
 8007ac0:	2b02      	cmp	r3, #2
 8007ac2:	d138      	bne.n	8007b36 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007ac4:	68bb      	ldr	r3, [r7, #8]
 8007ac6:	015a      	lsls	r2, r3, #5
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	4413      	add	r3, r2
 8007acc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	68ba      	ldr	r2, [r7, #8]
 8007ad4:	0151      	lsls	r1, r2, #5
 8007ad6:	68fa      	ldr	r2, [r7, #12]
 8007ad8:	440a      	add	r2, r1
 8007ada:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ade:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ae2:	6013      	str	r3, [r2, #0]
 8007ae4:	e027      	b.n	8007b36 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007ae6:	68bb      	ldr	r3, [r7, #8]
 8007ae8:	015a      	lsls	r2, r3, #5
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	4413      	add	r3, r2
 8007aee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	68ba      	ldr	r2, [r7, #8]
 8007af6:	0151      	lsls	r1, r2, #5
 8007af8:	68fa      	ldr	r2, [r7, #12]
 8007afa:	440a      	add	r2, r1
 8007afc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b00:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007b04:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007b06:	683b      	ldr	r3, [r7, #0]
 8007b08:	791b      	ldrb	r3, [r3, #4]
 8007b0a:	2b03      	cmp	r3, #3
 8007b0c:	d003      	beq.n	8007b16 <USB_EPClearStall+0x9e>
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	791b      	ldrb	r3, [r3, #4]
 8007b12:	2b02      	cmp	r3, #2
 8007b14:	d10f      	bne.n	8007b36 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007b16:	68bb      	ldr	r3, [r7, #8]
 8007b18:	015a      	lsls	r2, r3, #5
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	4413      	add	r3, r2
 8007b1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	68ba      	ldr	r2, [r7, #8]
 8007b26:	0151      	lsls	r1, r2, #5
 8007b28:	68fa      	ldr	r2, [r7, #12]
 8007b2a:	440a      	add	r2, r1
 8007b2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b34:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007b36:	2300      	movs	r3, #0
}
 8007b38:	4618      	mov	r0, r3
 8007b3a:	3714      	adds	r7, #20
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b42:	4770      	bx	lr

08007b44 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007b44:	b480      	push	{r7}
 8007b46:	b085      	sub	sp, #20
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
 8007b4c:	460b      	mov	r3, r1
 8007b4e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	68fa      	ldr	r2, [r7, #12]
 8007b5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007b62:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007b66:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b6e:	681a      	ldr	r2, [r3, #0]
 8007b70:	78fb      	ldrb	r3, [r7, #3]
 8007b72:	011b      	lsls	r3, r3, #4
 8007b74:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007b78:	68f9      	ldr	r1, [r7, #12]
 8007b7a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007b7e:	4313      	orrs	r3, r2
 8007b80:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007b82:	2300      	movs	r3, #0
}
 8007b84:	4618      	mov	r0, r3
 8007b86:	3714      	adds	r7, #20
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8e:	4770      	bx	lr

08007b90 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007b90:	b480      	push	{r7}
 8007b92:	b085      	sub	sp, #20
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	68fa      	ldr	r2, [r7, #12]
 8007ba6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007baa:	f023 0303 	bic.w	r3, r3, #3
 8007bae:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bb6:	685b      	ldr	r3, [r3, #4]
 8007bb8:	68fa      	ldr	r2, [r7, #12]
 8007bba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007bbe:	f023 0302 	bic.w	r3, r3, #2
 8007bc2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007bc4:	2300      	movs	r3, #0
}
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	3714      	adds	r7, #20
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd0:	4770      	bx	lr

08007bd2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007bd2:	b480      	push	{r7}
 8007bd4:	b085      	sub	sp, #20
 8007bd6:	af00      	add	r7, sp, #0
 8007bd8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	68fa      	ldr	r2, [r7, #12]
 8007be8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007bec:	f023 0303 	bic.w	r3, r3, #3
 8007bf0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bf8:	685b      	ldr	r3, [r3, #4]
 8007bfa:	68fa      	ldr	r2, [r7, #12]
 8007bfc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007c00:	f043 0302 	orr.w	r3, r3, #2
 8007c04:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007c06:	2300      	movs	r3, #0
}
 8007c08:	4618      	mov	r0, r3
 8007c0a:	3714      	adds	r7, #20
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c12:	4770      	bx	lr

08007c14 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007c14:	b480      	push	{r7}
 8007c16:	b085      	sub	sp, #20
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	695b      	ldr	r3, [r3, #20]
 8007c20:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	699b      	ldr	r3, [r3, #24]
 8007c26:	68fa      	ldr	r2, [r7, #12]
 8007c28:	4013      	ands	r3, r2
 8007c2a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
}
 8007c2e:	4618      	mov	r0, r3
 8007c30:	3714      	adds	r7, #20
 8007c32:	46bd      	mov	sp, r7
 8007c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c38:	4770      	bx	lr

08007c3a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007c3a:	b480      	push	{r7}
 8007c3c:	b085      	sub	sp, #20
 8007c3e:	af00      	add	r7, sp, #0
 8007c40:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c4c:	699b      	ldr	r3, [r3, #24]
 8007c4e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c56:	69db      	ldr	r3, [r3, #28]
 8007c58:	68ba      	ldr	r2, [r7, #8]
 8007c5a:	4013      	ands	r3, r2
 8007c5c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007c5e:	68bb      	ldr	r3, [r7, #8]
 8007c60:	0c1b      	lsrs	r3, r3, #16
}
 8007c62:	4618      	mov	r0, r3
 8007c64:	3714      	adds	r7, #20
 8007c66:	46bd      	mov	sp, r7
 8007c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6c:	4770      	bx	lr

08007c6e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007c6e:	b480      	push	{r7}
 8007c70:	b085      	sub	sp, #20
 8007c72:	af00      	add	r7, sp, #0
 8007c74:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c80:	699b      	ldr	r3, [r3, #24]
 8007c82:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c8a:	69db      	ldr	r3, [r3, #28]
 8007c8c:	68ba      	ldr	r2, [r7, #8]
 8007c8e:	4013      	ands	r3, r2
 8007c90:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007c92:	68bb      	ldr	r3, [r7, #8]
 8007c94:	b29b      	uxth	r3, r3
}
 8007c96:	4618      	mov	r0, r3
 8007c98:	3714      	adds	r7, #20
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca0:	4770      	bx	lr

08007ca2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007ca2:	b480      	push	{r7}
 8007ca4:	b085      	sub	sp, #20
 8007ca6:	af00      	add	r7, sp, #0
 8007ca8:	6078      	str	r0, [r7, #4]
 8007caa:	460b      	mov	r3, r1
 8007cac:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007cb2:	78fb      	ldrb	r3, [r7, #3]
 8007cb4:	015a      	lsls	r2, r3, #5
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	4413      	add	r3, r2
 8007cba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cbe:	689b      	ldr	r3, [r3, #8]
 8007cc0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cc8:	695b      	ldr	r3, [r3, #20]
 8007cca:	68ba      	ldr	r2, [r7, #8]
 8007ccc:	4013      	ands	r3, r2
 8007cce:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007cd0:	68bb      	ldr	r3, [r7, #8]
}
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	3714      	adds	r7, #20
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cdc:	4770      	bx	lr

08007cde <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007cde:	b480      	push	{r7}
 8007ce0:	b087      	sub	sp, #28
 8007ce2:	af00      	add	r7, sp, #0
 8007ce4:	6078      	str	r0, [r7, #4]
 8007ce6:	460b      	mov	r3, r1
 8007ce8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007cee:	697b      	ldr	r3, [r7, #20]
 8007cf0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cf4:	691b      	ldr	r3, [r3, #16]
 8007cf6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007cf8:	697b      	ldr	r3, [r7, #20]
 8007cfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d00:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007d02:	78fb      	ldrb	r3, [r7, #3]
 8007d04:	f003 030f 	and.w	r3, r3, #15
 8007d08:	68fa      	ldr	r2, [r7, #12]
 8007d0a:	fa22 f303 	lsr.w	r3, r2, r3
 8007d0e:	01db      	lsls	r3, r3, #7
 8007d10:	b2db      	uxtb	r3, r3
 8007d12:	693a      	ldr	r2, [r7, #16]
 8007d14:	4313      	orrs	r3, r2
 8007d16:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007d18:	78fb      	ldrb	r3, [r7, #3]
 8007d1a:	015a      	lsls	r2, r3, #5
 8007d1c:	697b      	ldr	r3, [r7, #20]
 8007d1e:	4413      	add	r3, r2
 8007d20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d24:	689b      	ldr	r3, [r3, #8]
 8007d26:	693a      	ldr	r2, [r7, #16]
 8007d28:	4013      	ands	r3, r2
 8007d2a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007d2c:	68bb      	ldr	r3, [r7, #8]
}
 8007d2e:	4618      	mov	r0, r3
 8007d30:	371c      	adds	r7, #28
 8007d32:	46bd      	mov	sp, r7
 8007d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d38:	4770      	bx	lr

08007d3a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007d3a:	b480      	push	{r7}
 8007d3c:	b083      	sub	sp, #12
 8007d3e:	af00      	add	r7, sp, #0
 8007d40:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	695b      	ldr	r3, [r3, #20]
 8007d46:	f003 0301 	and.w	r3, r3, #1
}
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	370c      	adds	r7, #12
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d54:	4770      	bx	lr

08007d56 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007d56:	b480      	push	{r7}
 8007d58:	b085      	sub	sp, #20
 8007d5a:	af00      	add	r7, sp, #0
 8007d5c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	68fa      	ldr	r2, [r7, #12]
 8007d6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d70:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007d74:	f023 0307 	bic.w	r3, r3, #7
 8007d78:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d80:	685b      	ldr	r3, [r3, #4]
 8007d82:	68fa      	ldr	r2, [r7, #12]
 8007d84:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007d88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007d8c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007d8e:	2300      	movs	r3, #0
}
 8007d90:	4618      	mov	r0, r3
 8007d92:	3714      	adds	r7, #20
 8007d94:	46bd      	mov	sp, r7
 8007d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9a:	4770      	bx	lr

08007d9c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007d9c:	b480      	push	{r7}
 8007d9e:	b087      	sub	sp, #28
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	60f8      	str	r0, [r7, #12]
 8007da4:	460b      	mov	r3, r1
 8007da6:	607a      	str	r2, [r7, #4]
 8007da8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	333c      	adds	r3, #60	; 0x3c
 8007db2:	3304      	adds	r3, #4
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007db8:	693b      	ldr	r3, [r7, #16]
 8007dba:	4a26      	ldr	r2, [pc, #152]	; (8007e54 <USB_EP0_OutStart+0xb8>)
 8007dbc:	4293      	cmp	r3, r2
 8007dbe:	d90a      	bls.n	8007dd6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007dc0:	697b      	ldr	r3, [r7, #20]
 8007dc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007dcc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007dd0:	d101      	bne.n	8007dd6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	e037      	b.n	8007e46 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007dd6:	697b      	ldr	r3, [r7, #20]
 8007dd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ddc:	461a      	mov	r2, r3
 8007dde:	2300      	movs	r3, #0
 8007de0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007de2:	697b      	ldr	r3, [r7, #20]
 8007de4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007de8:	691b      	ldr	r3, [r3, #16]
 8007dea:	697a      	ldr	r2, [r7, #20]
 8007dec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007df0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007df4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007df6:	697b      	ldr	r3, [r7, #20]
 8007df8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007dfc:	691b      	ldr	r3, [r3, #16]
 8007dfe:	697a      	ldr	r2, [r7, #20]
 8007e00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e04:	f043 0318 	orr.w	r3, r3, #24
 8007e08:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007e0a:	697b      	ldr	r3, [r7, #20]
 8007e0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e10:	691b      	ldr	r3, [r3, #16]
 8007e12:	697a      	ldr	r2, [r7, #20]
 8007e14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e18:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007e1c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007e1e:	7afb      	ldrb	r3, [r7, #11]
 8007e20:	2b01      	cmp	r3, #1
 8007e22:	d10f      	bne.n	8007e44 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007e24:	697b      	ldr	r3, [r7, #20]
 8007e26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e2a:	461a      	mov	r2, r3
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007e30:	697b      	ldr	r3, [r7, #20]
 8007e32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	697a      	ldr	r2, [r7, #20]
 8007e3a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e3e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007e42:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007e44:	2300      	movs	r3, #0
}
 8007e46:	4618      	mov	r0, r3
 8007e48:	371c      	adds	r7, #28
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e50:	4770      	bx	lr
 8007e52:	bf00      	nop
 8007e54:	4f54300a 	.word	0x4f54300a

08007e58 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007e58:	b480      	push	{r7}
 8007e5a:	b085      	sub	sp, #20
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007e60:	2300      	movs	r3, #0
 8007e62:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	3301      	adds	r3, #1
 8007e68:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	4a13      	ldr	r2, [pc, #76]	; (8007ebc <USB_CoreReset+0x64>)
 8007e6e:	4293      	cmp	r3, r2
 8007e70:	d901      	bls.n	8007e76 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007e72:	2303      	movs	r3, #3
 8007e74:	e01b      	b.n	8007eae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	691b      	ldr	r3, [r3, #16]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	daf2      	bge.n	8007e64 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007e7e:	2300      	movs	r3, #0
 8007e80:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	691b      	ldr	r3, [r3, #16]
 8007e86:	f043 0201 	orr.w	r2, r3, #1
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	3301      	adds	r3, #1
 8007e92:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	4a09      	ldr	r2, [pc, #36]	; (8007ebc <USB_CoreReset+0x64>)
 8007e98:	4293      	cmp	r3, r2
 8007e9a:	d901      	bls.n	8007ea0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007e9c:	2303      	movs	r3, #3
 8007e9e:	e006      	b.n	8007eae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	691b      	ldr	r3, [r3, #16]
 8007ea4:	f003 0301 	and.w	r3, r3, #1
 8007ea8:	2b01      	cmp	r3, #1
 8007eaa:	d0f0      	beq.n	8007e8e <USB_CoreReset+0x36>

  return HAL_OK;
 8007eac:	2300      	movs	r3, #0
}
 8007eae:	4618      	mov	r0, r3
 8007eb0:	3714      	adds	r7, #20
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb8:	4770      	bx	lr
 8007eba:	bf00      	nop
 8007ebc:	00030d40 	.word	0x00030d40

08007ec0 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b082      	sub	sp, #8
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d101      	bne.n	8007ed2 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8007ece:	2301      	movs	r3, #1
 8007ed0:	e03b      	b.n	8007f4a <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007ed8:	b2db      	uxtb	r3, r3
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d106      	bne.n	8007eec <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8007ee6:	6878      	ldr	r0, [r7, #4]
 8007ee8:	f000 f833 	bl	8007f52 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2202      	movs	r2, #2
 8007ef0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	685a      	ldr	r2, [r3, #4]
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	430a      	orrs	r2, r1
 8007f08:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f10:	f023 0107 	bic.w	r1, r3, #7
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	689a      	ldr	r2, [r3, #8]
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	430a      	orrs	r2, r1
 8007f1e:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f26:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8007f2a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007f2e:	687a      	ldr	r2, [r7, #4]
 8007f30:	68d1      	ldr	r1, [r2, #12]
 8007f32:	687a      	ldr	r2, [r7, #4]
 8007f34:	6812      	ldr	r2, [r2, #0]
 8007f36:	430b      	orrs	r3, r1
 8007f38:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2201      	movs	r2, #1
 8007f44:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8007f48:	2300      	movs	r3, #0
}
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	3708      	adds	r7, #8
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	bd80      	pop	{r7, pc}

08007f52 <HAL_DMA2D_MspInit>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
 8007f52:	b480      	push	{r7}
 8007f54:	b083      	sub	sp, #12
 8007f56:	af00      	add	r7, sp, #0
 8007f58:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
 8007f5a:	bf00      	nop
 8007f5c:	370c      	adds	r7, #12
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f64:	4770      	bx	lr

08007f66 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8007f66:	b580      	push	{r7, lr}
 8007f68:	b086      	sub	sp, #24
 8007f6a:	af02      	add	r7, sp, #8
 8007f6c:	60f8      	str	r0, [r7, #12]
 8007f6e:	60b9      	str	r1, [r7, #8]
 8007f70:	607a      	str	r2, [r7, #4]
 8007f72:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007f7a:	2b01      	cmp	r3, #1
 8007f7c:	d101      	bne.n	8007f82 <HAL_DMA2D_Start+0x1c>
 8007f7e:	2302      	movs	r3, #2
 8007f80:	e018      	b.n	8007fb4 <HAL_DMA2D_Start+0x4e>
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	2201      	movs	r2, #1
 8007f86:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	2202      	movs	r2, #2
 8007f8e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8007f92:	69bb      	ldr	r3, [r7, #24]
 8007f94:	9300      	str	r3, [sp, #0]
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	687a      	ldr	r2, [r7, #4]
 8007f9a:	68b9      	ldr	r1, [r7, #8]
 8007f9c:	68f8      	ldr	r0, [r7, #12]
 8007f9e:	f000 f989 	bl	80082b4 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	681a      	ldr	r2, [r3, #0]
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f042 0201 	orr.w	r2, r2, #1
 8007fb0:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8007fb2:	2300      	movs	r3, #0
}
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	3710      	adds	r7, #16
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	bd80      	pop	{r7, pc}

08007fbc <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b086      	sub	sp, #24
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
 8007fc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f003 0301 	and.w	r3, r3, #1
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d056      	beq.n	8008086 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8007fd8:	f7fb faee 	bl	80035b8 <HAL_GetTick>
 8007fdc:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8007fde:	e04b      	b.n	8008078 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	685b      	ldr	r3, [r3, #4]
 8007fe6:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d023      	beq.n	800803a <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	f003 0320 	and.w	r3, r3, #32
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d005      	beq.n	8008008 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008000:	f043 0202 	orr.w	r2, r3, #2
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	f003 0301 	and.w	r3, r3, #1
 800800e:	2b00      	cmp	r3, #0
 8008010:	d005      	beq.n	800801e <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008016:	f043 0201 	orr.w	r2, r3, #1
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	2221      	movs	r2, #33	; 0x21
 8008024:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2204      	movs	r2, #4
 800802a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	2200      	movs	r2, #0
 8008032:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8008036:	2301      	movs	r3, #1
 8008038:	e0a5      	b.n	8008186 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008040:	d01a      	beq.n	8008078 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008042:	f7fb fab9 	bl	80035b8 <HAL_GetTick>
 8008046:	4602      	mov	r2, r0
 8008048:	697b      	ldr	r3, [r7, #20]
 800804a:	1ad3      	subs	r3, r2, r3
 800804c:	683a      	ldr	r2, [r7, #0]
 800804e:	429a      	cmp	r2, r3
 8008050:	d302      	bcc.n	8008058 <HAL_DMA2D_PollForTransfer+0x9c>
 8008052:	683b      	ldr	r3, [r7, #0]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d10f      	bne.n	8008078 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800805c:	f043 0220 	orr.w	r2, r3, #32
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2203      	movs	r2, #3
 8008068:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2200      	movs	r2, #0
 8008070:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8008074:	2303      	movs	r3, #3
 8008076:	e086      	b.n	8008186 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	685b      	ldr	r3, [r3, #4]
 800807e:	f003 0302 	and.w	r3, r3, #2
 8008082:	2b00      	cmp	r3, #0
 8008084:	d0ac      	beq.n	8007fe0 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	69db      	ldr	r3, [r3, #28]
 800808c:	f003 0320 	and.w	r3, r3, #32
 8008090:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008098:	f003 0320 	and.w	r3, r3, #32
 800809c:	693a      	ldr	r2, [r7, #16]
 800809e:	4313      	orrs	r3, r2
 80080a0:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 80080a2:	693b      	ldr	r3, [r7, #16]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d061      	beq.n	800816c <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80080a8:	f7fb fa86 	bl	80035b8 <HAL_GetTick>
 80080ac:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80080ae:	e056      	b.n	800815e <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	685b      	ldr	r3, [r3, #4]
 80080b6:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	f003 0329 	and.w	r3, r3, #41	; 0x29
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d02e      	beq.n	8008120 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	f003 0308 	and.w	r3, r3, #8
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d005      	beq.n	80080d8 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080d0:	f043 0204 	orr.w	r2, r3, #4
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	f003 0320 	and.w	r3, r3, #32
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d005      	beq.n	80080ee <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080e6:	f043 0202 	orr.w	r2, r3, #2
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	f003 0301 	and.w	r3, r3, #1
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d005      	beq.n	8008104 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080fc:	f043 0201 	orr.w	r2, r3, #1
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	2229      	movs	r2, #41	; 0x29
 800810a:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2204      	movs	r2, #4
 8008110:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2200      	movs	r2, #0
 8008118:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 800811c:	2301      	movs	r3, #1
 800811e:	e032      	b.n	8008186 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8008120:	683b      	ldr	r3, [r7, #0]
 8008122:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008126:	d01a      	beq.n	800815e <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008128:	f7fb fa46 	bl	80035b8 <HAL_GetTick>
 800812c:	4602      	mov	r2, r0
 800812e:	697b      	ldr	r3, [r7, #20]
 8008130:	1ad3      	subs	r3, r2, r3
 8008132:	683a      	ldr	r2, [r7, #0]
 8008134:	429a      	cmp	r2, r3
 8008136:	d302      	bcc.n	800813e <HAL_DMA2D_PollForTransfer+0x182>
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d10f      	bne.n	800815e <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008142:	f043 0220 	orr.w	r2, r3, #32
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	2203      	movs	r2, #3
 800814e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	2200      	movs	r2, #0
 8008156:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 800815a:	2303      	movs	r3, #3
 800815c:	e013      	b.n	8008186 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	685b      	ldr	r3, [r3, #4]
 8008164:	f003 0310 	and.w	r3, r3, #16
 8008168:	2b00      	cmp	r3, #0
 800816a:	d0a1      	beq.n	80080b0 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	2212      	movs	r2, #18
 8008172:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2201      	movs	r2, #1
 8008178:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2200      	movs	r2, #0
 8008180:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8008184:	2300      	movs	r3, #0
}
 8008186:	4618      	mov	r0, r3
 8008188:	3718      	adds	r7, #24
 800818a:	46bd      	mov	sp, r7
 800818c:	bd80      	pop	{r7, pc}
	...

08008190 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8008190:	b480      	push	{r7}
 8008192:	b087      	sub	sp, #28
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
 8008198:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	685b      	ldr	r3, [r3, #4]
 800819e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80081a8:	2b01      	cmp	r3, #1
 80081aa:	d101      	bne.n	80081b0 <HAL_DMA2D_ConfigLayer+0x20>
 80081ac:	2302      	movs	r3, #2
 80081ae:	e079      	b.n	80082a4 <HAL_DMA2D_ConfigLayer+0x114>
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2201      	movs	r2, #1
 80081b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2202      	movs	r2, #2
 80081bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	011b      	lsls	r3, r3, #4
 80081c4:	3318      	adds	r3, #24
 80081c6:	687a      	ldr	r2, [r7, #4]
 80081c8:	4413      	add	r3, r2
 80081ca:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80081cc:	693b      	ldr	r3, [r7, #16]
 80081ce:	685a      	ldr	r2, [r3, #4]
 80081d0:	693b      	ldr	r3, [r7, #16]
 80081d2:	689b      	ldr	r3, [r3, #8]
 80081d4:	041b      	lsls	r3, r3, #16
 80081d6:	4313      	orrs	r3, r2
 80081d8:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 80081da:	4b35      	ldr	r3, [pc, #212]	; (80082b0 <HAL_DMA2D_ConfigLayer+0x120>)
 80081dc:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80081de:	693b      	ldr	r3, [r7, #16]
 80081e0:	685b      	ldr	r3, [r3, #4]
 80081e2:	2b0a      	cmp	r3, #10
 80081e4:	d003      	beq.n	80081ee <HAL_DMA2D_ConfigLayer+0x5e>
 80081e6:	693b      	ldr	r3, [r7, #16]
 80081e8:	685b      	ldr	r3, [r3, #4]
 80081ea:	2b09      	cmp	r3, #9
 80081ec:	d107      	bne.n	80081fe <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80081ee:	693b      	ldr	r3, [r7, #16]
 80081f0:	68db      	ldr	r3, [r3, #12]
 80081f2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80081f6:	697a      	ldr	r2, [r7, #20]
 80081f8:	4313      	orrs	r3, r2
 80081fa:	617b      	str	r3, [r7, #20]
 80081fc:	e005      	b.n	800820a <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80081fe:	693b      	ldr	r3, [r7, #16]
 8008200:	68db      	ldr	r3, [r3, #12]
 8008202:	061b      	lsls	r3, r3, #24
 8008204:	697a      	ldr	r2, [r7, #20]
 8008206:	4313      	orrs	r3, r2
 8008208:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d120      	bne.n	8008252 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	43db      	mvns	r3, r3
 800821a:	ea02 0103 	and.w	r1, r2, r3
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	697a      	ldr	r2, [r7, #20]
 8008224:	430a      	orrs	r2, r1
 8008226:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	693a      	ldr	r2, [r7, #16]
 800822e:	6812      	ldr	r2, [r2, #0]
 8008230:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8008232:	693b      	ldr	r3, [r7, #16]
 8008234:	685b      	ldr	r3, [r3, #4]
 8008236:	2b0a      	cmp	r3, #10
 8008238:	d003      	beq.n	8008242 <HAL_DMA2D_ConfigLayer+0xb2>
 800823a:	693b      	ldr	r3, [r7, #16]
 800823c:	685b      	ldr	r3, [r3, #4]
 800823e:	2b09      	cmp	r3, #9
 8008240:	d127      	bne.n	8008292 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8008242:	693b      	ldr	r3, [r7, #16]
 8008244:	68da      	ldr	r2, [r3, #12]
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800824e:	629a      	str	r2, [r3, #40]	; 0x28
 8008250:	e01f      	b.n	8008292 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	69da      	ldr	r2, [r3, #28]
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	43db      	mvns	r3, r3
 800825c:	ea02 0103 	and.w	r1, r2, r3
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	697a      	ldr	r2, [r7, #20]
 8008266:	430a      	orrs	r2, r1
 8008268:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	693a      	ldr	r2, [r7, #16]
 8008270:	6812      	ldr	r2, [r2, #0]
 8008272:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8008274:	693b      	ldr	r3, [r7, #16]
 8008276:	685b      	ldr	r3, [r3, #4]
 8008278:	2b0a      	cmp	r3, #10
 800827a:	d003      	beq.n	8008284 <HAL_DMA2D_ConfigLayer+0xf4>
 800827c:	693b      	ldr	r3, [r7, #16]
 800827e:	685b      	ldr	r3, [r3, #4]
 8008280:	2b09      	cmp	r3, #9
 8008282:	d106      	bne.n	8008292 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8008284:	693b      	ldr	r3, [r7, #16]
 8008286:	68da      	ldr	r2, [r3, #12]
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8008290:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	2201      	movs	r2, #1
 8008296:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	2200      	movs	r2, #0
 800829e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80082a2:	2300      	movs	r3, #0
}
 80082a4:	4618      	mov	r0, r3
 80082a6:	371c      	adds	r7, #28
 80082a8:	46bd      	mov	sp, r7
 80082aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ae:	4770      	bx	lr
 80082b0:	ff03000f 	.word	0xff03000f

080082b4 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 80082b4:	b480      	push	{r7}
 80082b6:	b08b      	sub	sp, #44	; 0x2c
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	60f8      	str	r0, [r7, #12]
 80082bc:	60b9      	str	r1, [r7, #8]
 80082be:	607a      	str	r2, [r7, #4]
 80082c0:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082c8:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80082cc:	683b      	ldr	r3, [r7, #0]
 80082ce:	041a      	lsls	r2, r3, #16
 80082d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082d2:	431a      	orrs	r2, r3
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	430a      	orrs	r2, r1
 80082da:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	687a      	ldr	r2, [r7, #4]
 80082e2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	685b      	ldr	r3, [r3, #4]
 80082e8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80082ec:	d174      	bne.n	80083d8 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80082ee:	68bb      	ldr	r3, [r7, #8]
 80082f0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80082f4:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80082f6:	68bb      	ldr	r3, [r7, #8]
 80082f8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80082fc:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80082fe:	68bb      	ldr	r3, [r7, #8]
 8008300:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008304:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8008306:	68bb      	ldr	r3, [r7, #8]
 8008308:	b2db      	uxtb	r3, r3
 800830a:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	689b      	ldr	r3, [r3, #8]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d108      	bne.n	8008326 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8008314:	69ba      	ldr	r2, [r7, #24]
 8008316:	69fb      	ldr	r3, [r7, #28]
 8008318:	431a      	orrs	r2, r3
 800831a:	6a3b      	ldr	r3, [r7, #32]
 800831c:	4313      	orrs	r3, r2
 800831e:	697a      	ldr	r2, [r7, #20]
 8008320:	4313      	orrs	r3, r2
 8008322:	627b      	str	r3, [r7, #36]	; 0x24
 8008324:	e053      	b.n	80083ce <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	689b      	ldr	r3, [r3, #8]
 800832a:	2b01      	cmp	r3, #1
 800832c:	d106      	bne.n	800833c <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 800832e:	69ba      	ldr	r2, [r7, #24]
 8008330:	69fb      	ldr	r3, [r7, #28]
 8008332:	4313      	orrs	r3, r2
 8008334:	697a      	ldr	r2, [r7, #20]
 8008336:	4313      	orrs	r3, r2
 8008338:	627b      	str	r3, [r7, #36]	; 0x24
 800833a:	e048      	b.n	80083ce <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	689b      	ldr	r3, [r3, #8]
 8008340:	2b02      	cmp	r3, #2
 8008342:	d111      	bne.n	8008368 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8008344:	69fb      	ldr	r3, [r7, #28]
 8008346:	0cdb      	lsrs	r3, r3, #19
 8008348:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 800834a:	69bb      	ldr	r3, [r7, #24]
 800834c:	0a9b      	lsrs	r3, r3, #10
 800834e:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8008350:	697b      	ldr	r3, [r7, #20]
 8008352:	08db      	lsrs	r3, r3, #3
 8008354:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8008356:	69bb      	ldr	r3, [r7, #24]
 8008358:	015a      	lsls	r2, r3, #5
 800835a:	69fb      	ldr	r3, [r7, #28]
 800835c:	02db      	lsls	r3, r3, #11
 800835e:	4313      	orrs	r3, r2
 8008360:	697a      	ldr	r2, [r7, #20]
 8008362:	4313      	orrs	r3, r2
 8008364:	627b      	str	r3, [r7, #36]	; 0x24
 8008366:	e032      	b.n	80083ce <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	689b      	ldr	r3, [r3, #8]
 800836c:	2b03      	cmp	r3, #3
 800836e:	d117      	bne.n	80083a0 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8008370:	6a3b      	ldr	r3, [r7, #32]
 8008372:	0fdb      	lsrs	r3, r3, #31
 8008374:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8008376:	69fb      	ldr	r3, [r7, #28]
 8008378:	0cdb      	lsrs	r3, r3, #19
 800837a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 800837c:	69bb      	ldr	r3, [r7, #24]
 800837e:	0adb      	lsrs	r3, r3, #11
 8008380:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8008382:	697b      	ldr	r3, [r7, #20]
 8008384:	08db      	lsrs	r3, r3, #3
 8008386:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8008388:	69bb      	ldr	r3, [r7, #24]
 800838a:	015a      	lsls	r2, r3, #5
 800838c:	69fb      	ldr	r3, [r7, #28]
 800838e:	029b      	lsls	r3, r3, #10
 8008390:	431a      	orrs	r2, r3
 8008392:	6a3b      	ldr	r3, [r7, #32]
 8008394:	03db      	lsls	r3, r3, #15
 8008396:	4313      	orrs	r3, r2
 8008398:	697a      	ldr	r2, [r7, #20]
 800839a:	4313      	orrs	r3, r2
 800839c:	627b      	str	r3, [r7, #36]	; 0x24
 800839e:	e016      	b.n	80083ce <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 80083a0:	6a3b      	ldr	r3, [r7, #32]
 80083a2:	0f1b      	lsrs	r3, r3, #28
 80083a4:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 80083a6:	69fb      	ldr	r3, [r7, #28]
 80083a8:	0d1b      	lsrs	r3, r3, #20
 80083aa:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 80083ac:	69bb      	ldr	r3, [r7, #24]
 80083ae:	0b1b      	lsrs	r3, r3, #12
 80083b0:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 80083b2:	697b      	ldr	r3, [r7, #20]
 80083b4:	091b      	lsrs	r3, r3, #4
 80083b6:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80083b8:	69bb      	ldr	r3, [r7, #24]
 80083ba:	011a      	lsls	r2, r3, #4
 80083bc:	69fb      	ldr	r3, [r7, #28]
 80083be:	021b      	lsls	r3, r3, #8
 80083c0:	431a      	orrs	r2, r3
 80083c2:	6a3b      	ldr	r3, [r7, #32]
 80083c4:	031b      	lsls	r3, r3, #12
 80083c6:	4313      	orrs	r3, r2
 80083c8:	697a      	ldr	r2, [r7, #20]
 80083ca:	4313      	orrs	r3, r2
 80083cc:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083d4:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 80083d6:	e003      	b.n	80083e0 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	68ba      	ldr	r2, [r7, #8]
 80083de:	60da      	str	r2, [r3, #12]
}
 80083e0:	bf00      	nop
 80083e2:	372c      	adds	r7, #44	; 0x2c
 80083e4:	46bd      	mov	sp, r7
 80083e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ea:	4770      	bx	lr

080083ec <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b084      	sub	sp, #16
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d101      	bne.n	80083fe <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80083fa:	2301      	movs	r3, #1
 80083fc:	e0bf      	b.n	800857e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8008404:	b2db      	uxtb	r3, r3
 8008406:	2b00      	cmp	r3, #0
 8008408:	d106      	bne.n	8008418 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	2200      	movs	r2, #0
 800840e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8008412:	6878      	ldr	r0, [r7, #4]
 8008414:	f000 f8ba 	bl	800858c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2202      	movs	r2, #2
 800841c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	699a      	ldr	r2, [r3, #24]
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800842e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	6999      	ldr	r1, [r3, #24]
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	685a      	ldr	r2, [r3, #4]
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	689b      	ldr	r3, [r3, #8]
 800843e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008444:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	691b      	ldr	r3, [r3, #16]
 800844a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	430a      	orrs	r2, r1
 8008452:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	6899      	ldr	r1, [r3, #8]
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681a      	ldr	r2, [r3, #0]
 800845e:	4b4a      	ldr	r3, [pc, #296]	; (8008588 <HAL_LTDC_Init+0x19c>)
 8008460:	400b      	ands	r3, r1
 8008462:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	695b      	ldr	r3, [r3, #20]
 8008468:	041b      	lsls	r3, r3, #16
 800846a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	6899      	ldr	r1, [r3, #8]
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	699a      	ldr	r2, [r3, #24]
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	431a      	orrs	r2, r3
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	430a      	orrs	r2, r1
 8008480:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	68d9      	ldr	r1, [r3, #12]
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681a      	ldr	r2, [r3, #0]
 800848c:	4b3e      	ldr	r3, [pc, #248]	; (8008588 <HAL_LTDC_Init+0x19c>)
 800848e:	400b      	ands	r3, r1
 8008490:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	69db      	ldr	r3, [r3, #28]
 8008496:	041b      	lsls	r3, r3, #16
 8008498:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	68d9      	ldr	r1, [r3, #12]
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	6a1a      	ldr	r2, [r3, #32]
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	431a      	orrs	r2, r3
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	430a      	orrs	r2, r1
 80084ae:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	6919      	ldr	r1, [r3, #16]
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681a      	ldr	r2, [r3, #0]
 80084ba:	4b33      	ldr	r3, [pc, #204]	; (8008588 <HAL_LTDC_Init+0x19c>)
 80084bc:	400b      	ands	r3, r1
 80084be:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084c4:	041b      	lsls	r3, r3, #16
 80084c6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	6919      	ldr	r1, [r3, #16]
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	431a      	orrs	r2, r3
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	430a      	orrs	r2, r1
 80084dc:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	6959      	ldr	r1, [r3, #20]
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681a      	ldr	r2, [r3, #0]
 80084e8:	4b27      	ldr	r3, [pc, #156]	; (8008588 <HAL_LTDC_Init+0x19c>)
 80084ea:	400b      	ands	r3, r1
 80084ec:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084f2:	041b      	lsls	r3, r3, #16
 80084f4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	6959      	ldr	r1, [r3, #20]
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	431a      	orrs	r2, r3
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	430a      	orrs	r2, r1
 800850a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008512:	021b      	lsls	r3, r3, #8
 8008514:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800851c:	041b      	lsls	r3, r3, #16
 800851e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800852e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8008536:	68ba      	ldr	r2, [r7, #8]
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	4313      	orrs	r3, r2
 800853c:	687a      	ldr	r2, [r7, #4]
 800853e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8008542:	431a      	orrs	r2, r3
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	430a      	orrs	r2, r1
 800854a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	f042 0206 	orr.w	r2, r2, #6
 800855a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	699a      	ldr	r2, [r3, #24]
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	f042 0201 	orr.w	r2, r2, #1
 800856a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2200      	movs	r2, #0
 8008570:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2201      	movs	r2, #1
 8008578:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 800857c:	2300      	movs	r3, #0
}
 800857e:	4618      	mov	r0, r3
 8008580:	3710      	adds	r7, #16
 8008582:	46bd      	mov	sp, r7
 8008584:	bd80      	pop	{r7, pc}
 8008586:	bf00      	nop
 8008588:	f000f800 	.word	0xf000f800

0800858c <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 800858c:	b480      	push	{r7}
 800858e:	b083      	sub	sp, #12
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
 8008594:	bf00      	nop
 8008596:	370c      	adds	r7, #12
 8008598:	46bd      	mov	sp, r7
 800859a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859e:	4770      	bx	lr

080085a0 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80085a0:	b5b0      	push	{r4, r5, r7, lr}
 80085a2:	b084      	sub	sp, #16
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	60f8      	str	r0, [r7, #12]
 80085a8:	60b9      	str	r1, [r7, #8]
 80085aa:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80085b2:	2b01      	cmp	r3, #1
 80085b4:	d101      	bne.n	80085ba <HAL_LTDC_ConfigLayer+0x1a>
 80085b6:	2302      	movs	r3, #2
 80085b8:	e02c      	b.n	8008614 <HAL_LTDC_ConfigLayer+0x74>
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	2201      	movs	r2, #1
 80085be:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	2202      	movs	r2, #2
 80085c6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80085ca:	68fa      	ldr	r2, [r7, #12]
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2134      	movs	r1, #52	; 0x34
 80085d0:	fb01 f303 	mul.w	r3, r1, r3
 80085d4:	4413      	add	r3, r2
 80085d6:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80085da:	68bb      	ldr	r3, [r7, #8]
 80085dc:	4614      	mov	r4, r2
 80085de:	461d      	mov	r5, r3
 80085e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80085e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80085e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80085e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80085e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80085ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80085ec:	682b      	ldr	r3, [r5, #0]
 80085ee:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80085f0:	687a      	ldr	r2, [r7, #4]
 80085f2:	68b9      	ldr	r1, [r7, #8]
 80085f4:	68f8      	ldr	r0, [r7, #12]
 80085f6:	f000 f83b 	bl	8008670 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	2201      	movs	r2, #1
 8008600:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	2201      	movs	r2, #1
 8008606:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	2200      	movs	r2, #0
 800860e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8008612:	2300      	movs	r3, #0
}
 8008614:	4618      	mov	r0, r3
 8008616:	3710      	adds	r7, #16
 8008618:	46bd      	mov	sp, r7
 800861a:	bdb0      	pop	{r4, r5, r7, pc}

0800861c <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 800861c:	b480      	push	{r7}
 800861e:	b083      	sub	sp, #12
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800862a:	2b01      	cmp	r3, #1
 800862c:	d101      	bne.n	8008632 <HAL_LTDC_EnableDither+0x16>
 800862e:	2302      	movs	r3, #2
 8008630:	e016      	b.n	8008660 <HAL_LTDC_EnableDither+0x44>
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	2201      	movs	r2, #1
 8008636:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	2202      	movs	r2, #2
 800863e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 8008642:	4b0a      	ldr	r3, [pc, #40]	; (800866c <HAL_LTDC_EnableDither+0x50>)
 8008644:	699b      	ldr	r3, [r3, #24]
 8008646:	4a09      	ldr	r2, [pc, #36]	; (800866c <HAL_LTDC_EnableDither+0x50>)
 8008648:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800864c:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	2201      	movs	r2, #1
 8008652:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	2200      	movs	r2, #0
 800865a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800865e:	2300      	movs	r3, #0
}
 8008660:	4618      	mov	r0, r3
 8008662:	370c      	adds	r7, #12
 8008664:	46bd      	mov	sp, r7
 8008666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866a:	4770      	bx	lr
 800866c:	40016800 	.word	0x40016800

08008670 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8008670:	b480      	push	{r7}
 8008672:	b089      	sub	sp, #36	; 0x24
 8008674:	af00      	add	r7, sp, #0
 8008676:	60f8      	str	r0, [r7, #12]
 8008678:	60b9      	str	r1, [r7, #8]
 800867a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800867c:	68bb      	ldr	r3, [r7, #8]
 800867e:	685a      	ldr	r2, [r3, #4]
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	68db      	ldr	r3, [r3, #12]
 8008686:	0c1b      	lsrs	r3, r3, #16
 8008688:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800868c:	4413      	add	r3, r2
 800868e:	041b      	lsls	r3, r3, #16
 8008690:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	461a      	mov	r2, r3
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	01db      	lsls	r3, r3, #7
 800869c:	4413      	add	r3, r2
 800869e:	3384      	adds	r3, #132	; 0x84
 80086a0:	685b      	ldr	r3, [r3, #4]
 80086a2:	68fa      	ldr	r2, [r7, #12]
 80086a4:	6812      	ldr	r2, [r2, #0]
 80086a6:	4611      	mov	r1, r2
 80086a8:	687a      	ldr	r2, [r7, #4]
 80086aa:	01d2      	lsls	r2, r2, #7
 80086ac:	440a      	add	r2, r1
 80086ae:	3284      	adds	r2, #132	; 0x84
 80086b0:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80086b4:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80086b6:	68bb      	ldr	r3, [r7, #8]
 80086b8:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	68db      	ldr	r3, [r3, #12]
 80086c0:	0c1b      	lsrs	r3, r3, #16
 80086c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80086c6:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80086c8:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	4619      	mov	r1, r3
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	01db      	lsls	r3, r3, #7
 80086d4:	440b      	add	r3, r1
 80086d6:	3384      	adds	r3, #132	; 0x84
 80086d8:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80086da:	69fb      	ldr	r3, [r7, #28]
 80086dc:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80086de:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80086e0:	68bb      	ldr	r3, [r7, #8]
 80086e2:	68da      	ldr	r2, [r3, #12]
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	68db      	ldr	r3, [r3, #12]
 80086ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80086ee:	4413      	add	r3, r2
 80086f0:	041b      	lsls	r3, r3, #16
 80086f2:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	461a      	mov	r2, r3
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	01db      	lsls	r3, r3, #7
 80086fe:	4413      	add	r3, r2
 8008700:	3384      	adds	r3, #132	; 0x84
 8008702:	689b      	ldr	r3, [r3, #8]
 8008704:	68fa      	ldr	r2, [r7, #12]
 8008706:	6812      	ldr	r2, [r2, #0]
 8008708:	4611      	mov	r1, r2
 800870a:	687a      	ldr	r2, [r7, #4]
 800870c:	01d2      	lsls	r2, r2, #7
 800870e:	440a      	add	r2, r1
 8008710:	3284      	adds	r2, #132	; 0x84
 8008712:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8008716:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8008718:	68bb      	ldr	r3, [r7, #8]
 800871a:	689a      	ldr	r2, [r3, #8]
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	68db      	ldr	r3, [r3, #12]
 8008722:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008726:	4413      	add	r3, r2
 8008728:	1c5a      	adds	r2, r3, #1
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	4619      	mov	r1, r3
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	01db      	lsls	r3, r3, #7
 8008734:	440b      	add	r3, r1
 8008736:	3384      	adds	r3, #132	; 0x84
 8008738:	4619      	mov	r1, r3
 800873a:	69fb      	ldr	r3, [r7, #28]
 800873c:	4313      	orrs	r3, r2
 800873e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	461a      	mov	r2, r3
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	01db      	lsls	r3, r3, #7
 800874a:	4413      	add	r3, r2
 800874c:	3384      	adds	r3, #132	; 0x84
 800874e:	691b      	ldr	r3, [r3, #16]
 8008750:	68fa      	ldr	r2, [r7, #12]
 8008752:	6812      	ldr	r2, [r2, #0]
 8008754:	4611      	mov	r1, r2
 8008756:	687a      	ldr	r2, [r7, #4]
 8008758:	01d2      	lsls	r2, r2, #7
 800875a:	440a      	add	r2, r1
 800875c:	3284      	adds	r2, #132	; 0x84
 800875e:	f023 0307 	bic.w	r3, r3, #7
 8008762:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	461a      	mov	r2, r3
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	01db      	lsls	r3, r3, #7
 800876e:	4413      	add	r3, r2
 8008770:	3384      	adds	r3, #132	; 0x84
 8008772:	461a      	mov	r2, r3
 8008774:	68bb      	ldr	r3, [r7, #8]
 8008776:	691b      	ldr	r3, [r3, #16]
 8008778:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800877a:	68bb      	ldr	r3, [r7, #8]
 800877c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008780:	021b      	lsls	r3, r3, #8
 8008782:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8008784:	68bb      	ldr	r3, [r7, #8]
 8008786:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800878a:	041b      	lsls	r3, r3, #16
 800878c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800878e:	68bb      	ldr	r3, [r7, #8]
 8008790:	699b      	ldr	r3, [r3, #24]
 8008792:	061b      	lsls	r3, r3, #24
 8008794:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	461a      	mov	r2, r3
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	01db      	lsls	r3, r3, #7
 80087a0:	4413      	add	r3, r2
 80087a2:	3384      	adds	r3, #132	; 0x84
 80087a4:	699b      	ldr	r3, [r3, #24]
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	461a      	mov	r2, r3
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	01db      	lsls	r3, r3, #7
 80087b0:	4413      	add	r3, r2
 80087b2:	3384      	adds	r3, #132	; 0x84
 80087b4:	461a      	mov	r2, r3
 80087b6:	2300      	movs	r3, #0
 80087b8:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80087ba:	68bb      	ldr	r3, [r7, #8]
 80087bc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80087c0:	461a      	mov	r2, r3
 80087c2:	69fb      	ldr	r3, [r7, #28]
 80087c4:	431a      	orrs	r2, r3
 80087c6:	69bb      	ldr	r3, [r7, #24]
 80087c8:	431a      	orrs	r2, r3
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	4619      	mov	r1, r3
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	01db      	lsls	r3, r3, #7
 80087d4:	440b      	add	r3, r1
 80087d6:	3384      	adds	r3, #132	; 0x84
 80087d8:	4619      	mov	r1, r3
 80087da:	697b      	ldr	r3, [r7, #20]
 80087dc:	4313      	orrs	r3, r2
 80087de:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	461a      	mov	r2, r3
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	01db      	lsls	r3, r3, #7
 80087ea:	4413      	add	r3, r2
 80087ec:	3384      	adds	r3, #132	; 0x84
 80087ee:	695b      	ldr	r3, [r3, #20]
 80087f0:	68fa      	ldr	r2, [r7, #12]
 80087f2:	6812      	ldr	r2, [r2, #0]
 80087f4:	4611      	mov	r1, r2
 80087f6:	687a      	ldr	r2, [r7, #4]
 80087f8:	01d2      	lsls	r2, r2, #7
 80087fa:	440a      	add	r2, r1
 80087fc:	3284      	adds	r2, #132	; 0x84
 80087fe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008802:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	461a      	mov	r2, r3
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	01db      	lsls	r3, r3, #7
 800880e:	4413      	add	r3, r2
 8008810:	3384      	adds	r3, #132	; 0x84
 8008812:	461a      	mov	r2, r3
 8008814:	68bb      	ldr	r3, [r7, #8]
 8008816:	695b      	ldr	r3, [r3, #20]
 8008818:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	461a      	mov	r2, r3
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	01db      	lsls	r3, r3, #7
 8008824:	4413      	add	r3, r2
 8008826:	3384      	adds	r3, #132	; 0x84
 8008828:	69db      	ldr	r3, [r3, #28]
 800882a:	68fa      	ldr	r2, [r7, #12]
 800882c:	6812      	ldr	r2, [r2, #0]
 800882e:	4611      	mov	r1, r2
 8008830:	687a      	ldr	r2, [r7, #4]
 8008832:	01d2      	lsls	r2, r2, #7
 8008834:	440a      	add	r2, r1
 8008836:	3284      	adds	r2, #132	; 0x84
 8008838:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800883c:	f023 0307 	bic.w	r3, r3, #7
 8008840:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8008842:	68bb      	ldr	r3, [r7, #8]
 8008844:	69da      	ldr	r2, [r3, #28]
 8008846:	68bb      	ldr	r3, [r7, #8]
 8008848:	6a1b      	ldr	r3, [r3, #32]
 800884a:	68f9      	ldr	r1, [r7, #12]
 800884c:	6809      	ldr	r1, [r1, #0]
 800884e:	4608      	mov	r0, r1
 8008850:	6879      	ldr	r1, [r7, #4]
 8008852:	01c9      	lsls	r1, r1, #7
 8008854:	4401      	add	r1, r0
 8008856:	3184      	adds	r1, #132	; 0x84
 8008858:	4313      	orrs	r3, r2
 800885a:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	461a      	mov	r2, r3
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	01db      	lsls	r3, r3, #7
 8008866:	4413      	add	r3, r2
 8008868:	3384      	adds	r3, #132	; 0x84
 800886a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	461a      	mov	r2, r3
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	01db      	lsls	r3, r3, #7
 8008876:	4413      	add	r3, r2
 8008878:	3384      	adds	r3, #132	; 0x84
 800887a:	461a      	mov	r2, r3
 800887c:	2300      	movs	r3, #0
 800887e:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	461a      	mov	r2, r3
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	01db      	lsls	r3, r3, #7
 800888a:	4413      	add	r3, r2
 800888c:	3384      	adds	r3, #132	; 0x84
 800888e:	461a      	mov	r2, r3
 8008890:	68bb      	ldr	r3, [r7, #8]
 8008892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008894:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8008896:	68bb      	ldr	r3, [r7, #8]
 8008898:	691b      	ldr	r3, [r3, #16]
 800889a:	2b00      	cmp	r3, #0
 800889c:	d102      	bne.n	80088a4 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 800889e:	2304      	movs	r3, #4
 80088a0:	61fb      	str	r3, [r7, #28]
 80088a2:	e01b      	b.n	80088dc <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80088a4:	68bb      	ldr	r3, [r7, #8]
 80088a6:	691b      	ldr	r3, [r3, #16]
 80088a8:	2b01      	cmp	r3, #1
 80088aa:	d102      	bne.n	80088b2 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 80088ac:	2303      	movs	r3, #3
 80088ae:	61fb      	str	r3, [r7, #28]
 80088b0:	e014      	b.n	80088dc <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80088b2:	68bb      	ldr	r3, [r7, #8]
 80088b4:	691b      	ldr	r3, [r3, #16]
 80088b6:	2b04      	cmp	r3, #4
 80088b8:	d00b      	beq.n	80088d2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80088ba:	68bb      	ldr	r3, [r7, #8]
 80088bc:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80088be:	2b02      	cmp	r3, #2
 80088c0:	d007      	beq.n	80088d2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80088c2:	68bb      	ldr	r3, [r7, #8]
 80088c4:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80088c6:	2b03      	cmp	r3, #3
 80088c8:	d003      	beq.n	80088d2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80088ca:	68bb      	ldr	r3, [r7, #8]
 80088cc:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80088ce:	2b07      	cmp	r3, #7
 80088d0:	d102      	bne.n	80088d8 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 80088d2:	2302      	movs	r3, #2
 80088d4:	61fb      	str	r3, [r7, #28]
 80088d6:	e001      	b.n	80088dc <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 80088d8:	2301      	movs	r3, #1
 80088da:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	461a      	mov	r2, r3
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	01db      	lsls	r3, r3, #7
 80088e6:	4413      	add	r3, r2
 80088e8:	3384      	adds	r3, #132	; 0x84
 80088ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088ec:	68fa      	ldr	r2, [r7, #12]
 80088ee:	6812      	ldr	r2, [r2, #0]
 80088f0:	4611      	mov	r1, r2
 80088f2:	687a      	ldr	r2, [r7, #4]
 80088f4:	01d2      	lsls	r2, r2, #7
 80088f6:	440a      	add	r2, r1
 80088f8:	3284      	adds	r2, #132	; 0x84
 80088fa:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80088fe:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8008900:	68bb      	ldr	r3, [r7, #8]
 8008902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008904:	69fa      	ldr	r2, [r7, #28]
 8008906:	fb02 f303 	mul.w	r3, r2, r3
 800890a:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800890c:	68bb      	ldr	r3, [r7, #8]
 800890e:	6859      	ldr	r1, [r3, #4]
 8008910:	68bb      	ldr	r3, [r7, #8]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	1acb      	subs	r3, r1, r3
 8008916:	69f9      	ldr	r1, [r7, #28]
 8008918:	fb01 f303 	mul.w	r3, r1, r3
 800891c:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800891e:	68f9      	ldr	r1, [r7, #12]
 8008920:	6809      	ldr	r1, [r1, #0]
 8008922:	4608      	mov	r0, r1
 8008924:	6879      	ldr	r1, [r7, #4]
 8008926:	01c9      	lsls	r1, r1, #7
 8008928:	4401      	add	r1, r0
 800892a:	3184      	adds	r1, #132	; 0x84
 800892c:	4313      	orrs	r3, r2
 800892e:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	461a      	mov	r2, r3
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	01db      	lsls	r3, r3, #7
 800893a:	4413      	add	r3, r2
 800893c:	3384      	adds	r3, #132	; 0x84
 800893e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008940:	68fa      	ldr	r2, [r7, #12]
 8008942:	6812      	ldr	r2, [r2, #0]
 8008944:	4611      	mov	r1, r2
 8008946:	687a      	ldr	r2, [r7, #4]
 8008948:	01d2      	lsls	r2, r2, #7
 800894a:	440a      	add	r2, r1
 800894c:	3284      	adds	r2, #132	; 0x84
 800894e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008952:	f023 0307 	bic.w	r3, r3, #7
 8008956:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	461a      	mov	r2, r3
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	01db      	lsls	r3, r3, #7
 8008962:	4413      	add	r3, r2
 8008964:	3384      	adds	r3, #132	; 0x84
 8008966:	461a      	mov	r2, r3
 8008968:	68bb      	ldr	r3, [r7, #8]
 800896a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800896c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	461a      	mov	r2, r3
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	01db      	lsls	r3, r3, #7
 8008978:	4413      	add	r3, r2
 800897a:	3384      	adds	r3, #132	; 0x84
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	68fa      	ldr	r2, [r7, #12]
 8008980:	6812      	ldr	r2, [r2, #0]
 8008982:	4611      	mov	r1, r2
 8008984:	687a      	ldr	r2, [r7, #4]
 8008986:	01d2      	lsls	r2, r2, #7
 8008988:	440a      	add	r2, r1
 800898a:	3284      	adds	r2, #132	; 0x84
 800898c:	f043 0301 	orr.w	r3, r3, #1
 8008990:	6013      	str	r3, [r2, #0]
}
 8008992:	bf00      	nop
 8008994:	3724      	adds	r7, #36	; 0x24
 8008996:	46bd      	mov	sp, r7
 8008998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899c:	4770      	bx	lr

0800899e <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800899e:	b580      	push	{r7, lr}
 80089a0:	b082      	sub	sp, #8
 80089a2:	af00      	add	r7, sp, #0
 80089a4:	6078      	str	r0, [r7, #4]
 80089a6:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d101      	bne.n	80089b2 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80089ae:	2301      	movs	r3, #1
 80089b0:	e025      	b.n	80089fe <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80089b8:	b2db      	uxtb	r3, r3
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d106      	bne.n	80089cc <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	2200      	movs	r2, #0
 80089c2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80089c6:	6878      	ldr	r0, [r7, #4]
 80089c8:	f000 f81d 	bl	8008a06 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	2202      	movs	r2, #2
 80089d0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681a      	ldr	r2, [r3, #0]
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	3304      	adds	r3, #4
 80089dc:	4619      	mov	r1, r3
 80089de:	4610      	mov	r0, r2
 80089e0:	f000 fe6a 	bl	80096b8 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	6818      	ldr	r0, [r3, #0]
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	685b      	ldr	r3, [r3, #4]
 80089ec:	461a      	mov	r2, r3
 80089ee:	6839      	ldr	r1, [r7, #0]
 80089f0:	f000 febf 	bl	8009772 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2201      	movs	r2, #1
 80089f8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80089fc:	2300      	movs	r3, #0
}
 80089fe:	4618      	mov	r0, r3
 8008a00:	3708      	adds	r7, #8
 8008a02:	46bd      	mov	sp, r7
 8008a04:	bd80      	pop	{r7, pc}

08008a06 <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 8008a06:	b480      	push	{r7}
 8008a08:	b083      	sub	sp, #12
 8008a0a:	af00      	add	r7, sp, #0
 8008a0c:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */
}
 8008a0e:	bf00      	nop
 8008a10:	370c      	adds	r7, #12
 8008a12:	46bd      	mov	sp, r7
 8008a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a18:	4770      	bx	lr

08008a1a <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8008a1a:	b580      	push	{r7, lr}
 8008a1c:	b086      	sub	sp, #24
 8008a1e:	af00      	add	r7, sp, #0
 8008a20:	60f8      	str	r0, [r7, #12]
 8008a22:	60b9      	str	r1, [r7, #8]
 8008a24:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008a2c:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8008a2e:	7dfb      	ldrb	r3, [r7, #23]
 8008a30:	2b02      	cmp	r3, #2
 8008a32:	d101      	bne.n	8008a38 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8008a34:	2302      	movs	r3, #2
 8008a36:	e021      	b.n	8008a7c <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8008a38:	7dfb      	ldrb	r3, [r7, #23]
 8008a3a:	2b01      	cmp	r3, #1
 8008a3c:	d002      	beq.n	8008a44 <HAL_SDRAM_SendCommand+0x2a>
 8008a3e:	7dfb      	ldrb	r3, [r7, #23]
 8008a40:	2b05      	cmp	r3, #5
 8008a42:	d118      	bne.n	8008a76 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	2202      	movs	r2, #2
 8008a48:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	687a      	ldr	r2, [r7, #4]
 8008a52:	68b9      	ldr	r1, [r7, #8]
 8008a54:	4618      	mov	r0, r3
 8008a56:	f000 fef5 	bl	8009844 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8008a5a:	68bb      	ldr	r3, [r7, #8]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	2b02      	cmp	r3, #2
 8008a60:	d104      	bne.n	8008a6c <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	2205      	movs	r2, #5
 8008a66:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8008a6a:	e006      	b.n	8008a7a <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	2201      	movs	r2, #1
 8008a70:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8008a74:	e001      	b.n	8008a7a <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8008a76:	2301      	movs	r3, #1
 8008a78:	e000      	b.n	8008a7c <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8008a7a:	2300      	movs	r3, #0
}
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	3718      	adds	r7, #24
 8008a80:	46bd      	mov	sp, r7
 8008a82:	bd80      	pop	{r7, pc}

08008a84 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b082      	sub	sp, #8
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
 8008a8c:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008a94:	b2db      	uxtb	r3, r3
 8008a96:	2b02      	cmp	r3, #2
 8008a98:	d101      	bne.n	8008a9e <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8008a9a:	2302      	movs	r3, #2
 8008a9c:	e016      	b.n	8008acc <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008aa4:	b2db      	uxtb	r3, r3
 8008aa6:	2b01      	cmp	r3, #1
 8008aa8:	d10f      	bne.n	8008aca <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	2202      	movs	r2, #2
 8008aae:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	6839      	ldr	r1, [r7, #0]
 8008ab8:	4618      	mov	r0, r3
 8008aba:	f000 ff00 	bl	80098be <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	2201      	movs	r2, #1
 8008ac2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	e000      	b.n	8008acc <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8008aca:	2301      	movs	r3, #1
}
 8008acc:	4618      	mov	r0, r3
 8008ace:	3708      	adds	r7, #8
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	bd80      	pop	{r7, pc}

08008ad4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b082      	sub	sp, #8
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d101      	bne.n	8008ae6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008ae2:	2301      	movs	r3, #1
 8008ae4:	e07b      	b.n	8008bde <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d108      	bne.n	8008b00 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	685b      	ldr	r3, [r3, #4]
 8008af2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008af6:	d009      	beq.n	8008b0c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	2200      	movs	r2, #0
 8008afc:	61da      	str	r2, [r3, #28]
 8008afe:	e005      	b.n	8008b0c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	2200      	movs	r2, #0
 8008b04:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	2200      	movs	r2, #0
 8008b0a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	2200      	movs	r2, #0
 8008b10:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008b18:	b2db      	uxtb	r3, r3
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d106      	bne.n	8008b2c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	2200      	movs	r2, #0
 8008b22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008b26:	6878      	ldr	r0, [r7, #4]
 8008b28:	f000 f885 	bl	8008c36 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	2202      	movs	r2, #2
 8008b30:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	681a      	ldr	r2, [r3, #0]
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008b42:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	685b      	ldr	r3, [r3, #4]
 8008b48:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	689b      	ldr	r3, [r3, #8]
 8008b50:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008b54:	431a      	orrs	r2, r3
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	68db      	ldr	r3, [r3, #12]
 8008b5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008b5e:	431a      	orrs	r2, r3
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	691b      	ldr	r3, [r3, #16]
 8008b64:	f003 0302 	and.w	r3, r3, #2
 8008b68:	431a      	orrs	r2, r3
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	695b      	ldr	r3, [r3, #20]
 8008b6e:	f003 0301 	and.w	r3, r3, #1
 8008b72:	431a      	orrs	r2, r3
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	699b      	ldr	r3, [r3, #24]
 8008b78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008b7c:	431a      	orrs	r2, r3
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	69db      	ldr	r3, [r3, #28]
 8008b82:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008b86:	431a      	orrs	r2, r3
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	6a1b      	ldr	r3, [r3, #32]
 8008b8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b90:	ea42 0103 	orr.w	r1, r2, r3
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b98:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	430a      	orrs	r2, r1
 8008ba2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	699b      	ldr	r3, [r3, #24]
 8008ba8:	0c1b      	lsrs	r3, r3, #16
 8008baa:	f003 0104 	and.w	r1, r3, #4
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bb2:	f003 0210 	and.w	r2, r3, #16
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	430a      	orrs	r2, r1
 8008bbc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	69da      	ldr	r2, [r3, #28]
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008bcc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	2200      	movs	r2, #0
 8008bd2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	2201      	movs	r2, #1
 8008bd8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008bdc:	2300      	movs	r3, #0
}
 8008bde:	4618      	mov	r0, r3
 8008be0:	3708      	adds	r7, #8
 8008be2:	46bd      	mov	sp, r7
 8008be4:	bd80      	pop	{r7, pc}

08008be6 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8008be6:	b580      	push	{r7, lr}
 8008be8:	b082      	sub	sp, #8
 8008bea:	af00      	add	r7, sp, #0
 8008bec:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d101      	bne.n	8008bf8 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8008bf4:	2301      	movs	r3, #1
 8008bf6:	e01a      	b.n	8008c2e <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	2202      	movs	r2, #2
 8008bfc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	681a      	ldr	r2, [r3, #0]
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008c0e:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8008c10:	6878      	ldr	r0, [r7, #4]
 8008c12:	f000 f81a 	bl	8008c4a <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	2200      	movs	r2, #0
 8008c1a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	2200      	movs	r2, #0
 8008c20:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	2200      	movs	r2, #0
 8008c28:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8008c2c:	2300      	movs	r3, #0
}
 8008c2e:	4618      	mov	r0, r3
 8008c30:	3708      	adds	r7, #8
 8008c32:	46bd      	mov	sp, r7
 8008c34:	bd80      	pop	{r7, pc}

08008c36 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8008c36:	b480      	push	{r7}
 8008c38:	b083      	sub	sp, #12
 8008c3a:	af00      	add	r7, sp, #0
 8008c3c:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8008c3e:	bf00      	nop
 8008c40:	370c      	adds	r7, #12
 8008c42:	46bd      	mov	sp, r7
 8008c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c48:	4770      	bx	lr

08008c4a <HAL_SPI_MspDeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspDeInit(SPI_HandleTypeDef *hspi)
{
 8008c4a:	b480      	push	{r7}
 8008c4c:	b083      	sub	sp, #12
 8008c4e:	af00      	add	r7, sp, #0
 8008c50:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspDeInit should be implemented in the user file
   */
}
 8008c52:	bf00      	nop
 8008c54:	370c      	adds	r7, #12
 8008c56:	46bd      	mov	sp, r7
 8008c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5c:	4770      	bx	lr

08008c5e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008c5e:	b580      	push	{r7, lr}
 8008c60:	b088      	sub	sp, #32
 8008c62:	af00      	add	r7, sp, #0
 8008c64:	60f8      	str	r0, [r7, #12]
 8008c66:	60b9      	str	r1, [r7, #8]
 8008c68:	603b      	str	r3, [r7, #0]
 8008c6a:	4613      	mov	r3, r2
 8008c6c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008c6e:	2300      	movs	r3, #0
 8008c70:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008c78:	2b01      	cmp	r3, #1
 8008c7a:	d101      	bne.n	8008c80 <HAL_SPI_Transmit+0x22>
 8008c7c:	2302      	movs	r3, #2
 8008c7e:	e126      	b.n	8008ece <HAL_SPI_Transmit+0x270>
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	2201      	movs	r2, #1
 8008c84:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008c88:	f7fa fc96 	bl	80035b8 <HAL_GetTick>
 8008c8c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8008c8e:	88fb      	ldrh	r3, [r7, #6]
 8008c90:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008c98:	b2db      	uxtb	r3, r3
 8008c9a:	2b01      	cmp	r3, #1
 8008c9c:	d002      	beq.n	8008ca4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8008c9e:	2302      	movs	r3, #2
 8008ca0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008ca2:	e10b      	b.n	8008ebc <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8008ca4:	68bb      	ldr	r3, [r7, #8]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d002      	beq.n	8008cb0 <HAL_SPI_Transmit+0x52>
 8008caa:	88fb      	ldrh	r3, [r7, #6]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d102      	bne.n	8008cb6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008cb0:	2301      	movs	r3, #1
 8008cb2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008cb4:	e102      	b.n	8008ebc <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	2203      	movs	r2, #3
 8008cba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	68ba      	ldr	r2, [r7, #8]
 8008cc8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	88fa      	ldrh	r2, [r7, #6]
 8008cce:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	88fa      	ldrh	r2, [r7, #6]
 8008cd4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	2200      	movs	r2, #0
 8008cda:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	2200      	movs	r2, #0
 8008ce0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	2200      	movs	r2, #0
 8008cec:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	689b      	ldr	r3, [r3, #8]
 8008cf8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008cfc:	d10f      	bne.n	8008d1e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	681a      	ldr	r2, [r3, #0]
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008d0c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	681a      	ldr	r2, [r3, #0]
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008d1c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d28:	2b40      	cmp	r3, #64	; 0x40
 8008d2a:	d007      	beq.n	8008d3c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	681a      	ldr	r2, [r3, #0]
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008d3a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	68db      	ldr	r3, [r3, #12]
 8008d40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008d44:	d14b      	bne.n	8008dde <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	685b      	ldr	r3, [r3, #4]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d002      	beq.n	8008d54 <HAL_SPI_Transmit+0xf6>
 8008d4e:	8afb      	ldrh	r3, [r7, #22]
 8008d50:	2b01      	cmp	r3, #1
 8008d52:	d13e      	bne.n	8008dd2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d58:	881a      	ldrh	r2, [r3, #0]
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d64:	1c9a      	adds	r2, r3, #2
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008d6e:	b29b      	uxth	r3, r3
 8008d70:	3b01      	subs	r3, #1
 8008d72:	b29a      	uxth	r2, r3
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008d78:	e02b      	b.n	8008dd2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	689b      	ldr	r3, [r3, #8]
 8008d80:	f003 0302 	and.w	r3, r3, #2
 8008d84:	2b02      	cmp	r3, #2
 8008d86:	d112      	bne.n	8008dae <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d8c:	881a      	ldrh	r2, [r3, #0]
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d98:	1c9a      	adds	r2, r3, #2
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008da2:	b29b      	uxth	r3, r3
 8008da4:	3b01      	subs	r3, #1
 8008da6:	b29a      	uxth	r2, r3
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	86da      	strh	r2, [r3, #54]	; 0x36
 8008dac:	e011      	b.n	8008dd2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008dae:	f7fa fc03 	bl	80035b8 <HAL_GetTick>
 8008db2:	4602      	mov	r2, r0
 8008db4:	69bb      	ldr	r3, [r7, #24]
 8008db6:	1ad3      	subs	r3, r2, r3
 8008db8:	683a      	ldr	r2, [r7, #0]
 8008dba:	429a      	cmp	r2, r3
 8008dbc:	d803      	bhi.n	8008dc6 <HAL_SPI_Transmit+0x168>
 8008dbe:	683b      	ldr	r3, [r7, #0]
 8008dc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dc4:	d102      	bne.n	8008dcc <HAL_SPI_Transmit+0x16e>
 8008dc6:	683b      	ldr	r3, [r7, #0]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d102      	bne.n	8008dd2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8008dcc:	2303      	movs	r3, #3
 8008dce:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008dd0:	e074      	b.n	8008ebc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008dd6:	b29b      	uxth	r3, r3
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d1ce      	bne.n	8008d7a <HAL_SPI_Transmit+0x11c>
 8008ddc:	e04c      	b.n	8008e78 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	685b      	ldr	r3, [r3, #4]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d002      	beq.n	8008dec <HAL_SPI_Transmit+0x18e>
 8008de6:	8afb      	ldrh	r3, [r7, #22]
 8008de8:	2b01      	cmp	r3, #1
 8008dea:	d140      	bne.n	8008e6e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	330c      	adds	r3, #12
 8008df6:	7812      	ldrb	r2, [r2, #0]
 8008df8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dfe:	1c5a      	adds	r2, r3, #1
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008e08:	b29b      	uxth	r3, r3
 8008e0a:	3b01      	subs	r3, #1
 8008e0c:	b29a      	uxth	r2, r3
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8008e12:	e02c      	b.n	8008e6e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	689b      	ldr	r3, [r3, #8]
 8008e1a:	f003 0302 	and.w	r3, r3, #2
 8008e1e:	2b02      	cmp	r3, #2
 8008e20:	d113      	bne.n	8008e4a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	330c      	adds	r3, #12
 8008e2c:	7812      	ldrb	r2, [r2, #0]
 8008e2e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e34:	1c5a      	adds	r2, r3, #1
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008e3e:	b29b      	uxth	r3, r3
 8008e40:	3b01      	subs	r3, #1
 8008e42:	b29a      	uxth	r2, r3
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	86da      	strh	r2, [r3, #54]	; 0x36
 8008e48:	e011      	b.n	8008e6e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008e4a:	f7fa fbb5 	bl	80035b8 <HAL_GetTick>
 8008e4e:	4602      	mov	r2, r0
 8008e50:	69bb      	ldr	r3, [r7, #24]
 8008e52:	1ad3      	subs	r3, r2, r3
 8008e54:	683a      	ldr	r2, [r7, #0]
 8008e56:	429a      	cmp	r2, r3
 8008e58:	d803      	bhi.n	8008e62 <HAL_SPI_Transmit+0x204>
 8008e5a:	683b      	ldr	r3, [r7, #0]
 8008e5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e60:	d102      	bne.n	8008e68 <HAL_SPI_Transmit+0x20a>
 8008e62:	683b      	ldr	r3, [r7, #0]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d102      	bne.n	8008e6e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8008e68:	2303      	movs	r3, #3
 8008e6a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008e6c:	e026      	b.n	8008ebc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008e72:	b29b      	uxth	r3, r3
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d1cd      	bne.n	8008e14 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008e78:	69ba      	ldr	r2, [r7, #24]
 8008e7a:	6839      	ldr	r1, [r7, #0]
 8008e7c:	68f8      	ldr	r0, [r7, #12]
 8008e7e:	f000 fbd9 	bl	8009634 <SPI_EndRxTxTransaction>
 8008e82:	4603      	mov	r3, r0
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d002      	beq.n	8008e8e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	2220      	movs	r2, #32
 8008e8c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	689b      	ldr	r3, [r3, #8]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d10a      	bne.n	8008eac <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008e96:	2300      	movs	r3, #0
 8008e98:	613b      	str	r3, [r7, #16]
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	68db      	ldr	r3, [r3, #12]
 8008ea0:	613b      	str	r3, [r7, #16]
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	689b      	ldr	r3, [r3, #8]
 8008ea8:	613b      	str	r3, [r7, #16]
 8008eaa:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d002      	beq.n	8008eba <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8008eb4:	2301      	movs	r3, #1
 8008eb6:	77fb      	strb	r3, [r7, #31]
 8008eb8:	e000      	b.n	8008ebc <HAL_SPI_Transmit+0x25e>
  }

error:
 8008eba:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	2201      	movs	r2, #1
 8008ec0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	2200      	movs	r2, #0
 8008ec8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008ecc:	7ffb      	ldrb	r3, [r7, #31]
}
 8008ece:	4618      	mov	r0, r3
 8008ed0:	3720      	adds	r7, #32
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	bd80      	pop	{r7, pc}

08008ed6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008ed6:	b580      	push	{r7, lr}
 8008ed8:	b088      	sub	sp, #32
 8008eda:	af02      	add	r7, sp, #8
 8008edc:	60f8      	str	r0, [r7, #12]
 8008ede:	60b9      	str	r1, [r7, #8]
 8008ee0:	603b      	str	r3, [r7, #0]
 8008ee2:	4613      	mov	r3, r2
 8008ee4:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008ee6:	2300      	movs	r3, #0
 8008ee8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	685b      	ldr	r3, [r3, #4]
 8008eee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008ef2:	d112      	bne.n	8008f1a <HAL_SPI_Receive+0x44>
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	689b      	ldr	r3, [r3, #8]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d10e      	bne.n	8008f1a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	2204      	movs	r2, #4
 8008f00:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8008f04:	88fa      	ldrh	r2, [r7, #6]
 8008f06:	683b      	ldr	r3, [r7, #0]
 8008f08:	9300      	str	r3, [sp, #0]
 8008f0a:	4613      	mov	r3, r2
 8008f0c:	68ba      	ldr	r2, [r7, #8]
 8008f0e:	68b9      	ldr	r1, [r7, #8]
 8008f10:	68f8      	ldr	r0, [r7, #12]
 8008f12:	f000 f8f1 	bl	80090f8 <HAL_SPI_TransmitReceive>
 8008f16:	4603      	mov	r3, r0
 8008f18:	e0ea      	b.n	80090f0 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008f20:	2b01      	cmp	r3, #1
 8008f22:	d101      	bne.n	8008f28 <HAL_SPI_Receive+0x52>
 8008f24:	2302      	movs	r3, #2
 8008f26:	e0e3      	b.n	80090f0 <HAL_SPI_Receive+0x21a>
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	2201      	movs	r2, #1
 8008f2c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008f30:	f7fa fb42 	bl	80035b8 <HAL_GetTick>
 8008f34:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008f3c:	b2db      	uxtb	r3, r3
 8008f3e:	2b01      	cmp	r3, #1
 8008f40:	d002      	beq.n	8008f48 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8008f42:	2302      	movs	r3, #2
 8008f44:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008f46:	e0ca      	b.n	80090de <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8008f48:	68bb      	ldr	r3, [r7, #8]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d002      	beq.n	8008f54 <HAL_SPI_Receive+0x7e>
 8008f4e:	88fb      	ldrh	r3, [r7, #6]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d102      	bne.n	8008f5a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8008f54:	2301      	movs	r3, #1
 8008f56:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008f58:	e0c1      	b.n	80090de <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	2204      	movs	r2, #4
 8008f5e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	2200      	movs	r2, #0
 8008f66:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	68ba      	ldr	r2, [r7, #8]
 8008f6c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	88fa      	ldrh	r2, [r7, #6]
 8008f72:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	88fa      	ldrh	r2, [r7, #6]
 8008f78:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	2200      	movs	r2, #0
 8008f84:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	2200      	movs	r2, #0
 8008f8a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	2200      	movs	r2, #0
 8008f90:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	2200      	movs	r2, #0
 8008f96:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	689b      	ldr	r3, [r3, #8]
 8008f9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008fa0:	d10f      	bne.n	8008fc2 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	681a      	ldr	r2, [r3, #0]
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008fb0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	681a      	ldr	r2, [r3, #0]
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008fc0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fcc:	2b40      	cmp	r3, #64	; 0x40
 8008fce:	d007      	beq.n	8008fe0 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	681a      	ldr	r2, [r3, #0]
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008fde:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	68db      	ldr	r3, [r3, #12]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d162      	bne.n	80090ae <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8008fe8:	e02e      	b.n	8009048 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	689b      	ldr	r3, [r3, #8]
 8008ff0:	f003 0301 	and.w	r3, r3, #1
 8008ff4:	2b01      	cmp	r3, #1
 8008ff6:	d115      	bne.n	8009024 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	f103 020c 	add.w	r2, r3, #12
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009004:	7812      	ldrb	r2, [r2, #0]
 8009006:	b2d2      	uxtb	r2, r2
 8009008:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800900e:	1c5a      	adds	r2, r3, #1
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009018:	b29b      	uxth	r3, r3
 800901a:	3b01      	subs	r3, #1
 800901c:	b29a      	uxth	r2, r3
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009022:	e011      	b.n	8009048 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009024:	f7fa fac8 	bl	80035b8 <HAL_GetTick>
 8009028:	4602      	mov	r2, r0
 800902a:	693b      	ldr	r3, [r7, #16]
 800902c:	1ad3      	subs	r3, r2, r3
 800902e:	683a      	ldr	r2, [r7, #0]
 8009030:	429a      	cmp	r2, r3
 8009032:	d803      	bhi.n	800903c <HAL_SPI_Receive+0x166>
 8009034:	683b      	ldr	r3, [r7, #0]
 8009036:	f1b3 3fff 	cmp.w	r3, #4294967295
 800903a:	d102      	bne.n	8009042 <HAL_SPI_Receive+0x16c>
 800903c:	683b      	ldr	r3, [r7, #0]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d102      	bne.n	8009048 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8009042:	2303      	movs	r3, #3
 8009044:	75fb      	strb	r3, [r7, #23]
          goto error;
 8009046:	e04a      	b.n	80090de <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800904c:	b29b      	uxth	r3, r3
 800904e:	2b00      	cmp	r3, #0
 8009050:	d1cb      	bne.n	8008fea <HAL_SPI_Receive+0x114>
 8009052:	e031      	b.n	80090b8 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	689b      	ldr	r3, [r3, #8]
 800905a:	f003 0301 	and.w	r3, r3, #1
 800905e:	2b01      	cmp	r3, #1
 8009060:	d113      	bne.n	800908a <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	68da      	ldr	r2, [r3, #12]
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800906c:	b292      	uxth	r2, r2
 800906e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009074:	1c9a      	adds	r2, r3, #2
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800907e:	b29b      	uxth	r3, r3
 8009080:	3b01      	subs	r3, #1
 8009082:	b29a      	uxth	r2, r3
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009088:	e011      	b.n	80090ae <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800908a:	f7fa fa95 	bl	80035b8 <HAL_GetTick>
 800908e:	4602      	mov	r2, r0
 8009090:	693b      	ldr	r3, [r7, #16]
 8009092:	1ad3      	subs	r3, r2, r3
 8009094:	683a      	ldr	r2, [r7, #0]
 8009096:	429a      	cmp	r2, r3
 8009098:	d803      	bhi.n	80090a2 <HAL_SPI_Receive+0x1cc>
 800909a:	683b      	ldr	r3, [r7, #0]
 800909c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090a0:	d102      	bne.n	80090a8 <HAL_SPI_Receive+0x1d2>
 80090a2:	683b      	ldr	r3, [r7, #0]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d102      	bne.n	80090ae <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80090a8:	2303      	movs	r3, #3
 80090aa:	75fb      	strb	r3, [r7, #23]
          goto error;
 80090ac:	e017      	b.n	80090de <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80090b2:	b29b      	uxth	r3, r3
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d1cd      	bne.n	8009054 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80090b8:	693a      	ldr	r2, [r7, #16]
 80090ba:	6839      	ldr	r1, [r7, #0]
 80090bc:	68f8      	ldr	r0, [r7, #12]
 80090be:	f000 fa53 	bl	8009568 <SPI_EndRxTransaction>
 80090c2:	4603      	mov	r3, r0
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d002      	beq.n	80090ce <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	2220      	movs	r2, #32
 80090cc:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d002      	beq.n	80090dc <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80090d6:	2301      	movs	r3, #1
 80090d8:	75fb      	strb	r3, [r7, #23]
 80090da:	e000      	b.n	80090de <HAL_SPI_Receive+0x208>
  }

error :
 80090dc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	2201      	movs	r2, #1
 80090e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	2200      	movs	r2, #0
 80090ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80090ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80090f0:	4618      	mov	r0, r3
 80090f2:	3718      	adds	r7, #24
 80090f4:	46bd      	mov	sp, r7
 80090f6:	bd80      	pop	{r7, pc}

080090f8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b08c      	sub	sp, #48	; 0x30
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	60f8      	str	r0, [r7, #12]
 8009100:	60b9      	str	r1, [r7, #8]
 8009102:	607a      	str	r2, [r7, #4]
 8009104:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8009106:	2301      	movs	r3, #1
 8009108:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800910a:	2300      	movs	r3, #0
 800910c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009116:	2b01      	cmp	r3, #1
 8009118:	d101      	bne.n	800911e <HAL_SPI_TransmitReceive+0x26>
 800911a:	2302      	movs	r3, #2
 800911c:	e18a      	b.n	8009434 <HAL_SPI_TransmitReceive+0x33c>
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	2201      	movs	r2, #1
 8009122:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009126:	f7fa fa47 	bl	80035b8 <HAL_GetTick>
 800912a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009132:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	685b      	ldr	r3, [r3, #4]
 800913a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800913c:	887b      	ldrh	r3, [r7, #2]
 800913e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009140:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009144:	2b01      	cmp	r3, #1
 8009146:	d00f      	beq.n	8009168 <HAL_SPI_TransmitReceive+0x70>
 8009148:	69fb      	ldr	r3, [r7, #28]
 800914a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800914e:	d107      	bne.n	8009160 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	689b      	ldr	r3, [r3, #8]
 8009154:	2b00      	cmp	r3, #0
 8009156:	d103      	bne.n	8009160 <HAL_SPI_TransmitReceive+0x68>
 8009158:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800915c:	2b04      	cmp	r3, #4
 800915e:	d003      	beq.n	8009168 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8009160:	2302      	movs	r3, #2
 8009162:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009166:	e15b      	b.n	8009420 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009168:	68bb      	ldr	r3, [r7, #8]
 800916a:	2b00      	cmp	r3, #0
 800916c:	d005      	beq.n	800917a <HAL_SPI_TransmitReceive+0x82>
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	2b00      	cmp	r3, #0
 8009172:	d002      	beq.n	800917a <HAL_SPI_TransmitReceive+0x82>
 8009174:	887b      	ldrh	r3, [r7, #2]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d103      	bne.n	8009182 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800917a:	2301      	movs	r3, #1
 800917c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009180:	e14e      	b.n	8009420 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009188:	b2db      	uxtb	r3, r3
 800918a:	2b04      	cmp	r3, #4
 800918c:	d003      	beq.n	8009196 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	2205      	movs	r2, #5
 8009192:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	2200      	movs	r2, #0
 800919a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	687a      	ldr	r2, [r7, #4]
 80091a0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	887a      	ldrh	r2, [r7, #2]
 80091a6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	887a      	ldrh	r2, [r7, #2]
 80091ac:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	68ba      	ldr	r2, [r7, #8]
 80091b2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	887a      	ldrh	r2, [r7, #2]
 80091b8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	887a      	ldrh	r2, [r7, #2]
 80091be:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	2200      	movs	r2, #0
 80091c4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	2200      	movs	r2, #0
 80091ca:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091d6:	2b40      	cmp	r3, #64	; 0x40
 80091d8:	d007      	beq.n	80091ea <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	681a      	ldr	r2, [r3, #0]
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80091e8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	68db      	ldr	r3, [r3, #12]
 80091ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80091f2:	d178      	bne.n	80092e6 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	685b      	ldr	r3, [r3, #4]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d002      	beq.n	8009202 <HAL_SPI_TransmitReceive+0x10a>
 80091fc:	8b7b      	ldrh	r3, [r7, #26]
 80091fe:	2b01      	cmp	r3, #1
 8009200:	d166      	bne.n	80092d0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009206:	881a      	ldrh	r2, [r3, #0]
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009212:	1c9a      	adds	r2, r3, #2
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800921c:	b29b      	uxth	r3, r3
 800921e:	3b01      	subs	r3, #1
 8009220:	b29a      	uxth	r2, r3
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009226:	e053      	b.n	80092d0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	689b      	ldr	r3, [r3, #8]
 800922e:	f003 0302 	and.w	r3, r3, #2
 8009232:	2b02      	cmp	r3, #2
 8009234:	d11b      	bne.n	800926e <HAL_SPI_TransmitReceive+0x176>
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800923a:	b29b      	uxth	r3, r3
 800923c:	2b00      	cmp	r3, #0
 800923e:	d016      	beq.n	800926e <HAL_SPI_TransmitReceive+0x176>
 8009240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009242:	2b01      	cmp	r3, #1
 8009244:	d113      	bne.n	800926e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800924a:	881a      	ldrh	r2, [r3, #0]
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009256:	1c9a      	adds	r2, r3, #2
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009260:	b29b      	uxth	r3, r3
 8009262:	3b01      	subs	r3, #1
 8009264:	b29a      	uxth	r2, r3
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800926a:	2300      	movs	r3, #0
 800926c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	689b      	ldr	r3, [r3, #8]
 8009274:	f003 0301 	and.w	r3, r3, #1
 8009278:	2b01      	cmp	r3, #1
 800927a:	d119      	bne.n	80092b0 <HAL_SPI_TransmitReceive+0x1b8>
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009280:	b29b      	uxth	r3, r3
 8009282:	2b00      	cmp	r3, #0
 8009284:	d014      	beq.n	80092b0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	68da      	ldr	r2, [r3, #12]
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009290:	b292      	uxth	r2, r2
 8009292:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009298:	1c9a      	adds	r2, r3, #2
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80092a2:	b29b      	uxth	r3, r3
 80092a4:	3b01      	subs	r3, #1
 80092a6:	b29a      	uxth	r2, r3
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80092ac:	2301      	movs	r3, #1
 80092ae:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80092b0:	f7fa f982 	bl	80035b8 <HAL_GetTick>
 80092b4:	4602      	mov	r2, r0
 80092b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092b8:	1ad3      	subs	r3, r2, r3
 80092ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80092bc:	429a      	cmp	r2, r3
 80092be:	d807      	bhi.n	80092d0 <HAL_SPI_TransmitReceive+0x1d8>
 80092c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092c6:	d003      	beq.n	80092d0 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80092c8:	2303      	movs	r3, #3
 80092ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80092ce:	e0a7      	b.n	8009420 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80092d4:	b29b      	uxth	r3, r3
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d1a6      	bne.n	8009228 <HAL_SPI_TransmitReceive+0x130>
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80092de:	b29b      	uxth	r3, r3
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d1a1      	bne.n	8009228 <HAL_SPI_TransmitReceive+0x130>
 80092e4:	e07c      	b.n	80093e0 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	685b      	ldr	r3, [r3, #4]
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d002      	beq.n	80092f4 <HAL_SPI_TransmitReceive+0x1fc>
 80092ee:	8b7b      	ldrh	r3, [r7, #26]
 80092f0:	2b01      	cmp	r3, #1
 80092f2:	d16b      	bne.n	80093cc <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	330c      	adds	r3, #12
 80092fe:	7812      	ldrb	r2, [r2, #0]
 8009300:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009306:	1c5a      	adds	r2, r3, #1
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009310:	b29b      	uxth	r3, r3
 8009312:	3b01      	subs	r3, #1
 8009314:	b29a      	uxth	r2, r3
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800931a:	e057      	b.n	80093cc <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	689b      	ldr	r3, [r3, #8]
 8009322:	f003 0302 	and.w	r3, r3, #2
 8009326:	2b02      	cmp	r3, #2
 8009328:	d11c      	bne.n	8009364 <HAL_SPI_TransmitReceive+0x26c>
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800932e:	b29b      	uxth	r3, r3
 8009330:	2b00      	cmp	r3, #0
 8009332:	d017      	beq.n	8009364 <HAL_SPI_TransmitReceive+0x26c>
 8009334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009336:	2b01      	cmp	r3, #1
 8009338:	d114      	bne.n	8009364 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	330c      	adds	r3, #12
 8009344:	7812      	ldrb	r2, [r2, #0]
 8009346:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800934c:	1c5a      	adds	r2, r3, #1
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009356:	b29b      	uxth	r3, r3
 8009358:	3b01      	subs	r3, #1
 800935a:	b29a      	uxth	r2, r3
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009360:	2300      	movs	r3, #0
 8009362:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	689b      	ldr	r3, [r3, #8]
 800936a:	f003 0301 	and.w	r3, r3, #1
 800936e:	2b01      	cmp	r3, #1
 8009370:	d119      	bne.n	80093a6 <HAL_SPI_TransmitReceive+0x2ae>
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009376:	b29b      	uxth	r3, r3
 8009378:	2b00      	cmp	r3, #0
 800937a:	d014      	beq.n	80093a6 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	68da      	ldr	r2, [r3, #12]
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009386:	b2d2      	uxtb	r2, r2
 8009388:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800938e:	1c5a      	adds	r2, r3, #1
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009398:	b29b      	uxth	r3, r3
 800939a:	3b01      	subs	r3, #1
 800939c:	b29a      	uxth	r2, r3
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80093a2:	2301      	movs	r3, #1
 80093a4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80093a6:	f7fa f907 	bl	80035b8 <HAL_GetTick>
 80093aa:	4602      	mov	r2, r0
 80093ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093ae:	1ad3      	subs	r3, r2, r3
 80093b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80093b2:	429a      	cmp	r2, r3
 80093b4:	d803      	bhi.n	80093be <HAL_SPI_TransmitReceive+0x2c6>
 80093b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093bc:	d102      	bne.n	80093c4 <HAL_SPI_TransmitReceive+0x2cc>
 80093be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d103      	bne.n	80093cc <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80093c4:	2303      	movs	r3, #3
 80093c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80093ca:	e029      	b.n	8009420 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80093d0:	b29b      	uxth	r3, r3
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d1a2      	bne.n	800931c <HAL_SPI_TransmitReceive+0x224>
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80093da:	b29b      	uxth	r3, r3
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d19d      	bne.n	800931c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80093e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80093e2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80093e4:	68f8      	ldr	r0, [r7, #12]
 80093e6:	f000 f925 	bl	8009634 <SPI_EndRxTxTransaction>
 80093ea:	4603      	mov	r3, r0
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d006      	beq.n	80093fe <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80093f0:	2301      	movs	r3, #1
 80093f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	2220      	movs	r2, #32
 80093fa:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80093fc:	e010      	b.n	8009420 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	689b      	ldr	r3, [r3, #8]
 8009402:	2b00      	cmp	r3, #0
 8009404:	d10b      	bne.n	800941e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009406:	2300      	movs	r3, #0
 8009408:	617b      	str	r3, [r7, #20]
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	68db      	ldr	r3, [r3, #12]
 8009410:	617b      	str	r3, [r7, #20]
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	689b      	ldr	r3, [r3, #8]
 8009418:	617b      	str	r3, [r7, #20]
 800941a:	697b      	ldr	r3, [r7, #20]
 800941c:	e000      	b.n	8009420 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800941e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	2201      	movs	r2, #1
 8009424:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	2200      	movs	r2, #0
 800942c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009430:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8009434:	4618      	mov	r0, r3
 8009436:	3730      	adds	r7, #48	; 0x30
 8009438:	46bd      	mov	sp, r7
 800943a:	bd80      	pop	{r7, pc}

0800943c <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800943c:	b480      	push	{r7}
 800943e:	b083      	sub	sp, #12
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800944a:	b2db      	uxtb	r3, r3
}
 800944c:	4618      	mov	r0, r3
 800944e:	370c      	adds	r7, #12
 8009450:	46bd      	mov	sp, r7
 8009452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009456:	4770      	bx	lr

08009458 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009458:	b580      	push	{r7, lr}
 800945a:	b088      	sub	sp, #32
 800945c:	af00      	add	r7, sp, #0
 800945e:	60f8      	str	r0, [r7, #12]
 8009460:	60b9      	str	r1, [r7, #8]
 8009462:	603b      	str	r3, [r7, #0]
 8009464:	4613      	mov	r3, r2
 8009466:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009468:	f7fa f8a6 	bl	80035b8 <HAL_GetTick>
 800946c:	4602      	mov	r2, r0
 800946e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009470:	1a9b      	subs	r3, r3, r2
 8009472:	683a      	ldr	r2, [r7, #0]
 8009474:	4413      	add	r3, r2
 8009476:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009478:	f7fa f89e 	bl	80035b8 <HAL_GetTick>
 800947c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800947e:	4b39      	ldr	r3, [pc, #228]	; (8009564 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	015b      	lsls	r3, r3, #5
 8009484:	0d1b      	lsrs	r3, r3, #20
 8009486:	69fa      	ldr	r2, [r7, #28]
 8009488:	fb02 f303 	mul.w	r3, r2, r3
 800948c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800948e:	e054      	b.n	800953a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009490:	683b      	ldr	r3, [r7, #0]
 8009492:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009496:	d050      	beq.n	800953a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009498:	f7fa f88e 	bl	80035b8 <HAL_GetTick>
 800949c:	4602      	mov	r2, r0
 800949e:	69bb      	ldr	r3, [r7, #24]
 80094a0:	1ad3      	subs	r3, r2, r3
 80094a2:	69fa      	ldr	r2, [r7, #28]
 80094a4:	429a      	cmp	r2, r3
 80094a6:	d902      	bls.n	80094ae <SPI_WaitFlagStateUntilTimeout+0x56>
 80094a8:	69fb      	ldr	r3, [r7, #28]
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d13d      	bne.n	800952a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	685a      	ldr	r2, [r3, #4]
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80094bc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	685b      	ldr	r3, [r3, #4]
 80094c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80094c6:	d111      	bne.n	80094ec <SPI_WaitFlagStateUntilTimeout+0x94>
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	689b      	ldr	r3, [r3, #8]
 80094cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80094d0:	d004      	beq.n	80094dc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	689b      	ldr	r3, [r3, #8]
 80094d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80094da:	d107      	bne.n	80094ec <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	681a      	ldr	r2, [r3, #0]
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80094ea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80094f4:	d10f      	bne.n	8009516 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	681a      	ldr	r2, [r3, #0]
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009504:	601a      	str	r2, [r3, #0]
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	681a      	ldr	r2, [r3, #0]
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009514:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	2201      	movs	r2, #1
 800951a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	2200      	movs	r2, #0
 8009522:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8009526:	2303      	movs	r3, #3
 8009528:	e017      	b.n	800955a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800952a:	697b      	ldr	r3, [r7, #20]
 800952c:	2b00      	cmp	r3, #0
 800952e:	d101      	bne.n	8009534 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009530:	2300      	movs	r3, #0
 8009532:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009534:	697b      	ldr	r3, [r7, #20]
 8009536:	3b01      	subs	r3, #1
 8009538:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	689a      	ldr	r2, [r3, #8]
 8009540:	68bb      	ldr	r3, [r7, #8]
 8009542:	4013      	ands	r3, r2
 8009544:	68ba      	ldr	r2, [r7, #8]
 8009546:	429a      	cmp	r2, r3
 8009548:	bf0c      	ite	eq
 800954a:	2301      	moveq	r3, #1
 800954c:	2300      	movne	r3, #0
 800954e:	b2db      	uxtb	r3, r3
 8009550:	461a      	mov	r2, r3
 8009552:	79fb      	ldrb	r3, [r7, #7]
 8009554:	429a      	cmp	r2, r3
 8009556:	d19b      	bne.n	8009490 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009558:	2300      	movs	r3, #0
}
 800955a:	4618      	mov	r0, r3
 800955c:	3720      	adds	r7, #32
 800955e:	46bd      	mov	sp, r7
 8009560:	bd80      	pop	{r7, pc}
 8009562:	bf00      	nop
 8009564:	2000000c 	.word	0x2000000c

08009568 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8009568:	b580      	push	{r7, lr}
 800956a:	b086      	sub	sp, #24
 800956c:	af02      	add	r7, sp, #8
 800956e:	60f8      	str	r0, [r7, #12]
 8009570:	60b9      	str	r1, [r7, #8]
 8009572:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	685b      	ldr	r3, [r3, #4]
 8009578:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800957c:	d111      	bne.n	80095a2 <SPI_EndRxTransaction+0x3a>
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	689b      	ldr	r3, [r3, #8]
 8009582:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009586:	d004      	beq.n	8009592 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	689b      	ldr	r3, [r3, #8]
 800958c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009590:	d107      	bne.n	80095a2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	681a      	ldr	r2, [r3, #0]
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80095a0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	685b      	ldr	r3, [r3, #4]
 80095a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80095aa:	d12a      	bne.n	8009602 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	689b      	ldr	r3, [r3, #8]
 80095b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80095b4:	d012      	beq.n	80095dc <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	9300      	str	r3, [sp, #0]
 80095ba:	68bb      	ldr	r3, [r7, #8]
 80095bc:	2200      	movs	r2, #0
 80095be:	2180      	movs	r1, #128	; 0x80
 80095c0:	68f8      	ldr	r0, [r7, #12]
 80095c2:	f7ff ff49 	bl	8009458 <SPI_WaitFlagStateUntilTimeout>
 80095c6:	4603      	mov	r3, r0
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d02d      	beq.n	8009628 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095d0:	f043 0220 	orr.w	r2, r3, #32
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80095d8:	2303      	movs	r3, #3
 80095da:	e026      	b.n	800962a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	9300      	str	r3, [sp, #0]
 80095e0:	68bb      	ldr	r3, [r7, #8]
 80095e2:	2200      	movs	r2, #0
 80095e4:	2101      	movs	r1, #1
 80095e6:	68f8      	ldr	r0, [r7, #12]
 80095e8:	f7ff ff36 	bl	8009458 <SPI_WaitFlagStateUntilTimeout>
 80095ec:	4603      	mov	r3, r0
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d01a      	beq.n	8009628 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095f6:	f043 0220 	orr.w	r2, r3, #32
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80095fe:	2303      	movs	r3, #3
 8009600:	e013      	b.n	800962a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	9300      	str	r3, [sp, #0]
 8009606:	68bb      	ldr	r3, [r7, #8]
 8009608:	2200      	movs	r2, #0
 800960a:	2101      	movs	r1, #1
 800960c:	68f8      	ldr	r0, [r7, #12]
 800960e:	f7ff ff23 	bl	8009458 <SPI_WaitFlagStateUntilTimeout>
 8009612:	4603      	mov	r3, r0
 8009614:	2b00      	cmp	r3, #0
 8009616:	d007      	beq.n	8009628 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800961c:	f043 0220 	orr.w	r2, r3, #32
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009624:	2303      	movs	r3, #3
 8009626:	e000      	b.n	800962a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8009628:	2300      	movs	r3, #0
}
 800962a:	4618      	mov	r0, r3
 800962c:	3710      	adds	r7, #16
 800962e:	46bd      	mov	sp, r7
 8009630:	bd80      	pop	{r7, pc}
	...

08009634 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009634:	b580      	push	{r7, lr}
 8009636:	b088      	sub	sp, #32
 8009638:	af02      	add	r7, sp, #8
 800963a:	60f8      	str	r0, [r7, #12]
 800963c:	60b9      	str	r1, [r7, #8]
 800963e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009640:	4b1b      	ldr	r3, [pc, #108]	; (80096b0 <SPI_EndRxTxTransaction+0x7c>)
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	4a1b      	ldr	r2, [pc, #108]	; (80096b4 <SPI_EndRxTxTransaction+0x80>)
 8009646:	fba2 2303 	umull	r2, r3, r2, r3
 800964a:	0d5b      	lsrs	r3, r3, #21
 800964c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009650:	fb02 f303 	mul.w	r3, r2, r3
 8009654:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	685b      	ldr	r3, [r3, #4]
 800965a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800965e:	d112      	bne.n	8009686 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	9300      	str	r3, [sp, #0]
 8009664:	68bb      	ldr	r3, [r7, #8]
 8009666:	2200      	movs	r2, #0
 8009668:	2180      	movs	r1, #128	; 0x80
 800966a:	68f8      	ldr	r0, [r7, #12]
 800966c:	f7ff fef4 	bl	8009458 <SPI_WaitFlagStateUntilTimeout>
 8009670:	4603      	mov	r3, r0
 8009672:	2b00      	cmp	r3, #0
 8009674:	d016      	beq.n	80096a4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800967a:	f043 0220 	orr.w	r2, r3, #32
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009682:	2303      	movs	r3, #3
 8009684:	e00f      	b.n	80096a6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009686:	697b      	ldr	r3, [r7, #20]
 8009688:	2b00      	cmp	r3, #0
 800968a:	d00a      	beq.n	80096a2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800968c:	697b      	ldr	r3, [r7, #20]
 800968e:	3b01      	subs	r3, #1
 8009690:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	689b      	ldr	r3, [r3, #8]
 8009698:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800969c:	2b80      	cmp	r3, #128	; 0x80
 800969e:	d0f2      	beq.n	8009686 <SPI_EndRxTxTransaction+0x52>
 80096a0:	e000      	b.n	80096a4 <SPI_EndRxTxTransaction+0x70>
        break;
 80096a2:	bf00      	nop
  }

  return HAL_OK;
 80096a4:	2300      	movs	r3, #0
}
 80096a6:	4618      	mov	r0, r3
 80096a8:	3718      	adds	r7, #24
 80096aa:	46bd      	mov	sp, r7
 80096ac:	bd80      	pop	{r7, pc}
 80096ae:	bf00      	nop
 80096b0:	2000000c 	.word	0x2000000c
 80096b4:	165e9f81 	.word	0x165e9f81

080096b8 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80096b8:	b480      	push	{r7}
 80096ba:	b083      	sub	sp, #12
 80096bc:	af00      	add	r7, sp, #0
 80096be:	6078      	str	r0, [r7, #4]
 80096c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 80096c2:	683b      	ldr	r3, [r7, #0]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d123      	bne.n	8009712 <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80096d2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80096d6:	683a      	ldr	r2, [r7, #0]
 80096d8:	6851      	ldr	r1, [r2, #4]
 80096da:	683a      	ldr	r2, [r7, #0]
 80096dc:	6892      	ldr	r2, [r2, #8]
 80096de:	4311      	orrs	r1, r2
 80096e0:	683a      	ldr	r2, [r7, #0]
 80096e2:	68d2      	ldr	r2, [r2, #12]
 80096e4:	4311      	orrs	r1, r2
 80096e6:	683a      	ldr	r2, [r7, #0]
 80096e8:	6912      	ldr	r2, [r2, #16]
 80096ea:	4311      	orrs	r1, r2
 80096ec:	683a      	ldr	r2, [r7, #0]
 80096ee:	6952      	ldr	r2, [r2, #20]
 80096f0:	4311      	orrs	r1, r2
 80096f2:	683a      	ldr	r2, [r7, #0]
 80096f4:	6992      	ldr	r2, [r2, #24]
 80096f6:	4311      	orrs	r1, r2
 80096f8:	683a      	ldr	r2, [r7, #0]
 80096fa:	69d2      	ldr	r2, [r2, #28]
 80096fc:	4311      	orrs	r1, r2
 80096fe:	683a      	ldr	r2, [r7, #0]
 8009700:	6a12      	ldr	r2, [r2, #32]
 8009702:	4311      	orrs	r1, r2
 8009704:	683a      	ldr	r2, [r7, #0]
 8009706:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009708:	430a      	orrs	r2, r1
 800970a:	431a      	orrs	r2, r3
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	601a      	str	r2, [r3, #0]
 8009710:	e028      	b.n	8009764 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800971a:	683b      	ldr	r3, [r7, #0]
 800971c:	69d9      	ldr	r1, [r3, #28]
 800971e:	683b      	ldr	r3, [r7, #0]
 8009720:	6a1b      	ldr	r3, [r3, #32]
 8009722:	4319      	orrs	r1, r3
 8009724:	683b      	ldr	r3, [r7, #0]
 8009726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009728:	430b      	orrs	r3, r1
 800972a:	431a      	orrs	r2, r3
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	685b      	ldr	r3, [r3, #4]
 8009734:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8009738:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800973c:	683a      	ldr	r2, [r7, #0]
 800973e:	6851      	ldr	r1, [r2, #4]
 8009740:	683a      	ldr	r2, [r7, #0]
 8009742:	6892      	ldr	r2, [r2, #8]
 8009744:	4311      	orrs	r1, r2
 8009746:	683a      	ldr	r2, [r7, #0]
 8009748:	68d2      	ldr	r2, [r2, #12]
 800974a:	4311      	orrs	r1, r2
 800974c:	683a      	ldr	r2, [r7, #0]
 800974e:	6912      	ldr	r2, [r2, #16]
 8009750:	4311      	orrs	r1, r2
 8009752:	683a      	ldr	r2, [r7, #0]
 8009754:	6952      	ldr	r2, [r2, #20]
 8009756:	4311      	orrs	r1, r2
 8009758:	683a      	ldr	r2, [r7, #0]
 800975a:	6992      	ldr	r2, [r2, #24]
 800975c:	430a      	orrs	r2, r1
 800975e:	431a      	orrs	r2, r3
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8009764:	2300      	movs	r3, #0
}
 8009766:	4618      	mov	r0, r3
 8009768:	370c      	adds	r7, #12
 800976a:	46bd      	mov	sp, r7
 800976c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009770:	4770      	bx	lr

08009772 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8009772:	b480      	push	{r7}
 8009774:	b085      	sub	sp, #20
 8009776:	af00      	add	r7, sp, #0
 8009778:	60f8      	str	r0, [r7, #12]
 800977a:	60b9      	str	r1, [r7, #8]
 800977c:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	2b00      	cmp	r3, #0
 8009782:	d128      	bne.n	80097d6 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	689b      	ldr	r3, [r3, #8]
 8009788:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800978c:	68bb      	ldr	r3, [r7, #8]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	1e59      	subs	r1, r3, #1
 8009792:	68bb      	ldr	r3, [r7, #8]
 8009794:	685b      	ldr	r3, [r3, #4]
 8009796:	3b01      	subs	r3, #1
 8009798:	011b      	lsls	r3, r3, #4
 800979a:	4319      	orrs	r1, r3
 800979c:	68bb      	ldr	r3, [r7, #8]
 800979e:	689b      	ldr	r3, [r3, #8]
 80097a0:	3b01      	subs	r3, #1
 80097a2:	021b      	lsls	r3, r3, #8
 80097a4:	4319      	orrs	r1, r3
 80097a6:	68bb      	ldr	r3, [r7, #8]
 80097a8:	68db      	ldr	r3, [r3, #12]
 80097aa:	3b01      	subs	r3, #1
 80097ac:	031b      	lsls	r3, r3, #12
 80097ae:	4319      	orrs	r1, r3
 80097b0:	68bb      	ldr	r3, [r7, #8]
 80097b2:	691b      	ldr	r3, [r3, #16]
 80097b4:	3b01      	subs	r3, #1
 80097b6:	041b      	lsls	r3, r3, #16
 80097b8:	4319      	orrs	r1, r3
 80097ba:	68bb      	ldr	r3, [r7, #8]
 80097bc:	695b      	ldr	r3, [r3, #20]
 80097be:	3b01      	subs	r3, #1
 80097c0:	051b      	lsls	r3, r3, #20
 80097c2:	4319      	orrs	r1, r3
 80097c4:	68bb      	ldr	r3, [r7, #8]
 80097c6:	699b      	ldr	r3, [r3, #24]
 80097c8:	3b01      	subs	r3, #1
 80097ca:	061b      	lsls	r3, r3, #24
 80097cc:	430b      	orrs	r3, r1
 80097ce:	431a      	orrs	r2, r3
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	609a      	str	r2, [r3, #8]
 80097d4:	e02f      	b.n	8009836 <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	689b      	ldr	r3, [r3, #8]
 80097da:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80097de:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80097e2:	68ba      	ldr	r2, [r7, #8]
 80097e4:	68d2      	ldr	r2, [r2, #12]
 80097e6:	3a01      	subs	r2, #1
 80097e8:	0311      	lsls	r1, r2, #12
 80097ea:	68ba      	ldr	r2, [r7, #8]
 80097ec:	6952      	ldr	r2, [r2, #20]
 80097ee:	3a01      	subs	r2, #1
 80097f0:	0512      	lsls	r2, r2, #20
 80097f2:	430a      	orrs	r2, r1
 80097f4:	431a      	orrs	r2, r3
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	68db      	ldr	r3, [r3, #12]
 80097fe:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8009802:	68bb      	ldr	r3, [r7, #8]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	1e59      	subs	r1, r3, #1
 8009808:	68bb      	ldr	r3, [r7, #8]
 800980a:	685b      	ldr	r3, [r3, #4]
 800980c:	3b01      	subs	r3, #1
 800980e:	011b      	lsls	r3, r3, #4
 8009810:	4319      	orrs	r1, r3
 8009812:	68bb      	ldr	r3, [r7, #8]
 8009814:	689b      	ldr	r3, [r3, #8]
 8009816:	3b01      	subs	r3, #1
 8009818:	021b      	lsls	r3, r3, #8
 800981a:	4319      	orrs	r1, r3
 800981c:	68bb      	ldr	r3, [r7, #8]
 800981e:	691b      	ldr	r3, [r3, #16]
 8009820:	3b01      	subs	r3, #1
 8009822:	041b      	lsls	r3, r3, #16
 8009824:	4319      	orrs	r1, r3
 8009826:	68bb      	ldr	r3, [r7, #8]
 8009828:	699b      	ldr	r3, [r3, #24]
 800982a:	3b01      	subs	r3, #1
 800982c:	061b      	lsls	r3, r3, #24
 800982e:	430b      	orrs	r3, r1
 8009830:	431a      	orrs	r2, r3
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8009836:	2300      	movs	r3, #0
}
 8009838:	4618      	mov	r0, r3
 800983a:	3714      	adds	r7, #20
 800983c:	46bd      	mov	sp, r7
 800983e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009842:	4770      	bx	lr

08009844 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8009844:	b580      	push	{r7, lr}
 8009846:	b086      	sub	sp, #24
 8009848:	af00      	add	r7, sp, #0
 800984a:	60f8      	str	r0, [r7, #12]
 800984c:	60b9      	str	r1, [r7, #8]
 800984e:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8009850:	2300      	movs	r3, #0
 8009852:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	691b      	ldr	r3, [r3, #16]
 8009858:	0d9b      	lsrs	r3, r3, #22
 800985a:	059b      	lsls	r3, r3, #22
 800985c:	68ba      	ldr	r2, [r7, #8]
 800985e:	6811      	ldr	r1, [r2, #0]
 8009860:	68ba      	ldr	r2, [r7, #8]
 8009862:	6852      	ldr	r2, [r2, #4]
 8009864:	4311      	orrs	r1, r2
 8009866:	68ba      	ldr	r2, [r7, #8]
 8009868:	6892      	ldr	r2, [r2, #8]
 800986a:	3a01      	subs	r2, #1
 800986c:	0152      	lsls	r2, r2, #5
 800986e:	4311      	orrs	r1, r2
 8009870:	68ba      	ldr	r2, [r7, #8]
 8009872:	68d2      	ldr	r2, [r2, #12]
 8009874:	0252      	lsls	r2, r2, #9
 8009876:	430a      	orrs	r2, r1
 8009878:	431a      	orrs	r2, r3
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 800987e:	f7f9 fe9b 	bl	80035b8 <HAL_GetTick>
 8009882:	6178      	str	r0, [r7, #20]

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8009884:	e010      	b.n	80098a8 <FMC_SDRAM_SendCommand+0x64>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	f1b3 3fff 	cmp.w	r3, #4294967295
 800988c:	d00c      	beq.n	80098a8 <FMC_SDRAM_SendCommand+0x64>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	2b00      	cmp	r3, #0
 8009892:	d007      	beq.n	80098a4 <FMC_SDRAM_SendCommand+0x60>
 8009894:	f7f9 fe90 	bl	80035b8 <HAL_GetTick>
 8009898:	4602      	mov	r2, r0
 800989a:	697b      	ldr	r3, [r7, #20]
 800989c:	1ad3      	subs	r3, r2, r3
 800989e:	687a      	ldr	r2, [r7, #4]
 80098a0:	429a      	cmp	r2, r3
 80098a2:	d201      	bcs.n	80098a8 <FMC_SDRAM_SendCommand+0x64>
      {
        return HAL_TIMEOUT;
 80098a4:	2303      	movs	r3, #3
 80098a6:	e006      	b.n	80098b6 <FMC_SDRAM_SendCommand+0x72>
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	699b      	ldr	r3, [r3, #24]
 80098ac:	f003 0320 	and.w	r3, r3, #32
 80098b0:	2b20      	cmp	r3, #32
 80098b2:	d0e8      	beq.n	8009886 <FMC_SDRAM_SendCommand+0x42>
      }
    }
  }
  return HAL_OK;
 80098b4:	2300      	movs	r3, #0
}
 80098b6:	4618      	mov	r0, r3
 80098b8:	3718      	adds	r7, #24
 80098ba:	46bd      	mov	sp, r7
 80098bc:	bd80      	pop	{r7, pc}

080098be <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 80098be:	b480      	push	{r7}
 80098c0:	b083      	sub	sp, #12
 80098c2:	af00      	add	r7, sp, #0
 80098c4:	6078      	str	r0, [r7, #4]
 80098c6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	695b      	ldr	r3, [r3, #20]
 80098cc:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80098d0:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 80098d4:	683a      	ldr	r2, [r7, #0]
 80098d6:	0052      	lsls	r2, r2, #1
 80098d8:	431a      	orrs	r2, r3
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 80098de:	2300      	movs	r3, #0
}
 80098e0:	4618      	mov	r0, r3
 80098e2:	370c      	adds	r7, #12
 80098e4:	46bd      	mov	sp, r7
 80098e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ea:	4770      	bx	lr

080098ec <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b084      	sub	sp, #16
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
 80098f4:	460b      	mov	r3, r1
 80098f6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80098f8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80098fc:	f004 ff2e 	bl	800e75c <USBD_static_malloc>
 8009900:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	2b00      	cmp	r3, #0
 8009906:	d109      	bne.n	800991c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	32b0      	adds	r2, #176	; 0xb0
 8009912:	2100      	movs	r1, #0
 8009914:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8009918:	2302      	movs	r3, #2
 800991a:	e0d4      	b.n	8009ac6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800991c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8009920:	2100      	movs	r1, #0
 8009922:	68f8      	ldr	r0, [r7, #12]
 8009924:	f005 fce9 	bl	800f2fa <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	32b0      	adds	r2, #176	; 0xb0
 8009932:	68f9      	ldr	r1, [r7, #12]
 8009934:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	32b0      	adds	r2, #176	; 0xb0
 8009942:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	7c1b      	ldrb	r3, [r3, #16]
 8009950:	2b00      	cmp	r3, #0
 8009952:	d138      	bne.n	80099c6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009954:	4b5e      	ldr	r3, [pc, #376]	; (8009ad0 <USBD_CDC_Init+0x1e4>)
 8009956:	7819      	ldrb	r1, [r3, #0]
 8009958:	f44f 7300 	mov.w	r3, #512	; 0x200
 800995c:	2202      	movs	r2, #2
 800995e:	6878      	ldr	r0, [r7, #4]
 8009960:	f004 fdd9 	bl	800e516 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009964:	4b5a      	ldr	r3, [pc, #360]	; (8009ad0 <USBD_CDC_Init+0x1e4>)
 8009966:	781b      	ldrb	r3, [r3, #0]
 8009968:	f003 020f 	and.w	r2, r3, #15
 800996c:	6879      	ldr	r1, [r7, #4]
 800996e:	4613      	mov	r3, r2
 8009970:	009b      	lsls	r3, r3, #2
 8009972:	4413      	add	r3, r2
 8009974:	009b      	lsls	r3, r3, #2
 8009976:	440b      	add	r3, r1
 8009978:	3324      	adds	r3, #36	; 0x24
 800997a:	2201      	movs	r2, #1
 800997c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800997e:	4b55      	ldr	r3, [pc, #340]	; (8009ad4 <USBD_CDC_Init+0x1e8>)
 8009980:	7819      	ldrb	r1, [r3, #0]
 8009982:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009986:	2202      	movs	r2, #2
 8009988:	6878      	ldr	r0, [r7, #4]
 800998a:	f004 fdc4 	bl	800e516 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800998e:	4b51      	ldr	r3, [pc, #324]	; (8009ad4 <USBD_CDC_Init+0x1e8>)
 8009990:	781b      	ldrb	r3, [r3, #0]
 8009992:	f003 020f 	and.w	r2, r3, #15
 8009996:	6879      	ldr	r1, [r7, #4]
 8009998:	4613      	mov	r3, r2
 800999a:	009b      	lsls	r3, r3, #2
 800999c:	4413      	add	r3, r2
 800999e:	009b      	lsls	r3, r3, #2
 80099a0:	440b      	add	r3, r1
 80099a2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80099a6:	2201      	movs	r2, #1
 80099a8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80099aa:	4b4b      	ldr	r3, [pc, #300]	; (8009ad8 <USBD_CDC_Init+0x1ec>)
 80099ac:	781b      	ldrb	r3, [r3, #0]
 80099ae:	f003 020f 	and.w	r2, r3, #15
 80099b2:	6879      	ldr	r1, [r7, #4]
 80099b4:	4613      	mov	r3, r2
 80099b6:	009b      	lsls	r3, r3, #2
 80099b8:	4413      	add	r3, r2
 80099ba:	009b      	lsls	r3, r3, #2
 80099bc:	440b      	add	r3, r1
 80099be:	3326      	adds	r3, #38	; 0x26
 80099c0:	2210      	movs	r2, #16
 80099c2:	801a      	strh	r2, [r3, #0]
 80099c4:	e035      	b.n	8009a32 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80099c6:	4b42      	ldr	r3, [pc, #264]	; (8009ad0 <USBD_CDC_Init+0x1e4>)
 80099c8:	7819      	ldrb	r1, [r3, #0]
 80099ca:	2340      	movs	r3, #64	; 0x40
 80099cc:	2202      	movs	r2, #2
 80099ce:	6878      	ldr	r0, [r7, #4]
 80099d0:	f004 fda1 	bl	800e516 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80099d4:	4b3e      	ldr	r3, [pc, #248]	; (8009ad0 <USBD_CDC_Init+0x1e4>)
 80099d6:	781b      	ldrb	r3, [r3, #0]
 80099d8:	f003 020f 	and.w	r2, r3, #15
 80099dc:	6879      	ldr	r1, [r7, #4]
 80099de:	4613      	mov	r3, r2
 80099e0:	009b      	lsls	r3, r3, #2
 80099e2:	4413      	add	r3, r2
 80099e4:	009b      	lsls	r3, r3, #2
 80099e6:	440b      	add	r3, r1
 80099e8:	3324      	adds	r3, #36	; 0x24
 80099ea:	2201      	movs	r2, #1
 80099ec:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80099ee:	4b39      	ldr	r3, [pc, #228]	; (8009ad4 <USBD_CDC_Init+0x1e8>)
 80099f0:	7819      	ldrb	r1, [r3, #0]
 80099f2:	2340      	movs	r3, #64	; 0x40
 80099f4:	2202      	movs	r2, #2
 80099f6:	6878      	ldr	r0, [r7, #4]
 80099f8:	f004 fd8d 	bl	800e516 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80099fc:	4b35      	ldr	r3, [pc, #212]	; (8009ad4 <USBD_CDC_Init+0x1e8>)
 80099fe:	781b      	ldrb	r3, [r3, #0]
 8009a00:	f003 020f 	and.w	r2, r3, #15
 8009a04:	6879      	ldr	r1, [r7, #4]
 8009a06:	4613      	mov	r3, r2
 8009a08:	009b      	lsls	r3, r3, #2
 8009a0a:	4413      	add	r3, r2
 8009a0c:	009b      	lsls	r3, r3, #2
 8009a0e:	440b      	add	r3, r1
 8009a10:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009a14:	2201      	movs	r2, #1
 8009a16:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009a18:	4b2f      	ldr	r3, [pc, #188]	; (8009ad8 <USBD_CDC_Init+0x1ec>)
 8009a1a:	781b      	ldrb	r3, [r3, #0]
 8009a1c:	f003 020f 	and.w	r2, r3, #15
 8009a20:	6879      	ldr	r1, [r7, #4]
 8009a22:	4613      	mov	r3, r2
 8009a24:	009b      	lsls	r3, r3, #2
 8009a26:	4413      	add	r3, r2
 8009a28:	009b      	lsls	r3, r3, #2
 8009a2a:	440b      	add	r3, r1
 8009a2c:	3326      	adds	r3, #38	; 0x26
 8009a2e:	2210      	movs	r2, #16
 8009a30:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009a32:	4b29      	ldr	r3, [pc, #164]	; (8009ad8 <USBD_CDC_Init+0x1ec>)
 8009a34:	7819      	ldrb	r1, [r3, #0]
 8009a36:	2308      	movs	r3, #8
 8009a38:	2203      	movs	r2, #3
 8009a3a:	6878      	ldr	r0, [r7, #4]
 8009a3c:	f004 fd6b 	bl	800e516 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8009a40:	4b25      	ldr	r3, [pc, #148]	; (8009ad8 <USBD_CDC_Init+0x1ec>)
 8009a42:	781b      	ldrb	r3, [r3, #0]
 8009a44:	f003 020f 	and.w	r2, r3, #15
 8009a48:	6879      	ldr	r1, [r7, #4]
 8009a4a:	4613      	mov	r3, r2
 8009a4c:	009b      	lsls	r3, r3, #2
 8009a4e:	4413      	add	r3, r2
 8009a50:	009b      	lsls	r3, r3, #2
 8009a52:	440b      	add	r3, r1
 8009a54:	3324      	adds	r3, #36	; 0x24
 8009a56:	2201      	movs	r2, #1
 8009a58:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	2200      	movs	r2, #0
 8009a5e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009a68:	687a      	ldr	r2, [r7, #4]
 8009a6a:	33b0      	adds	r3, #176	; 0xb0
 8009a6c:	009b      	lsls	r3, r3, #2
 8009a6e:	4413      	add	r3, r2
 8009a70:	685b      	ldr	r3, [r3, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	2200      	movs	r2, #0
 8009a7a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	2200      	movs	r2, #0
 8009a82:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d101      	bne.n	8009a94 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8009a90:	2302      	movs	r3, #2
 8009a92:	e018      	b.n	8009ac6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	7c1b      	ldrb	r3, [r3, #16]
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d10a      	bne.n	8009ab2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009a9c:	4b0d      	ldr	r3, [pc, #52]	; (8009ad4 <USBD_CDC_Init+0x1e8>)
 8009a9e:	7819      	ldrb	r1, [r3, #0]
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009aa6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009aaa:	6878      	ldr	r0, [r7, #4]
 8009aac:	f004 fe22 	bl	800e6f4 <USBD_LL_PrepareReceive>
 8009ab0:	e008      	b.n	8009ac4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009ab2:	4b08      	ldr	r3, [pc, #32]	; (8009ad4 <USBD_CDC_Init+0x1e8>)
 8009ab4:	7819      	ldrb	r1, [r3, #0]
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009abc:	2340      	movs	r3, #64	; 0x40
 8009abe:	6878      	ldr	r0, [r7, #4]
 8009ac0:	f004 fe18 	bl	800e6f4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009ac4:	2300      	movs	r3, #0
}
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	3710      	adds	r7, #16
 8009aca:	46bd      	mov	sp, r7
 8009acc:	bd80      	pop	{r7, pc}
 8009ace:	bf00      	nop
 8009ad0:	2000011b 	.word	0x2000011b
 8009ad4:	2000011c 	.word	0x2000011c
 8009ad8:	2000011d 	.word	0x2000011d

08009adc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009adc:	b580      	push	{r7, lr}
 8009ade:	b082      	sub	sp, #8
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	6078      	str	r0, [r7, #4]
 8009ae4:	460b      	mov	r3, r1
 8009ae6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8009ae8:	4b3a      	ldr	r3, [pc, #232]	; (8009bd4 <USBD_CDC_DeInit+0xf8>)
 8009aea:	781b      	ldrb	r3, [r3, #0]
 8009aec:	4619      	mov	r1, r3
 8009aee:	6878      	ldr	r0, [r7, #4]
 8009af0:	f004 fd37 	bl	800e562 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8009af4:	4b37      	ldr	r3, [pc, #220]	; (8009bd4 <USBD_CDC_DeInit+0xf8>)
 8009af6:	781b      	ldrb	r3, [r3, #0]
 8009af8:	f003 020f 	and.w	r2, r3, #15
 8009afc:	6879      	ldr	r1, [r7, #4]
 8009afe:	4613      	mov	r3, r2
 8009b00:	009b      	lsls	r3, r3, #2
 8009b02:	4413      	add	r3, r2
 8009b04:	009b      	lsls	r3, r3, #2
 8009b06:	440b      	add	r3, r1
 8009b08:	3324      	adds	r3, #36	; 0x24
 8009b0a:	2200      	movs	r2, #0
 8009b0c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8009b0e:	4b32      	ldr	r3, [pc, #200]	; (8009bd8 <USBD_CDC_DeInit+0xfc>)
 8009b10:	781b      	ldrb	r3, [r3, #0]
 8009b12:	4619      	mov	r1, r3
 8009b14:	6878      	ldr	r0, [r7, #4]
 8009b16:	f004 fd24 	bl	800e562 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8009b1a:	4b2f      	ldr	r3, [pc, #188]	; (8009bd8 <USBD_CDC_DeInit+0xfc>)
 8009b1c:	781b      	ldrb	r3, [r3, #0]
 8009b1e:	f003 020f 	and.w	r2, r3, #15
 8009b22:	6879      	ldr	r1, [r7, #4]
 8009b24:	4613      	mov	r3, r2
 8009b26:	009b      	lsls	r3, r3, #2
 8009b28:	4413      	add	r3, r2
 8009b2a:	009b      	lsls	r3, r3, #2
 8009b2c:	440b      	add	r3, r1
 8009b2e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009b32:	2200      	movs	r2, #0
 8009b34:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8009b36:	4b29      	ldr	r3, [pc, #164]	; (8009bdc <USBD_CDC_DeInit+0x100>)
 8009b38:	781b      	ldrb	r3, [r3, #0]
 8009b3a:	4619      	mov	r1, r3
 8009b3c:	6878      	ldr	r0, [r7, #4]
 8009b3e:	f004 fd10 	bl	800e562 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8009b42:	4b26      	ldr	r3, [pc, #152]	; (8009bdc <USBD_CDC_DeInit+0x100>)
 8009b44:	781b      	ldrb	r3, [r3, #0]
 8009b46:	f003 020f 	and.w	r2, r3, #15
 8009b4a:	6879      	ldr	r1, [r7, #4]
 8009b4c:	4613      	mov	r3, r2
 8009b4e:	009b      	lsls	r3, r3, #2
 8009b50:	4413      	add	r3, r2
 8009b52:	009b      	lsls	r3, r3, #2
 8009b54:	440b      	add	r3, r1
 8009b56:	3324      	adds	r3, #36	; 0x24
 8009b58:	2200      	movs	r2, #0
 8009b5a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8009b5c:	4b1f      	ldr	r3, [pc, #124]	; (8009bdc <USBD_CDC_DeInit+0x100>)
 8009b5e:	781b      	ldrb	r3, [r3, #0]
 8009b60:	f003 020f 	and.w	r2, r3, #15
 8009b64:	6879      	ldr	r1, [r7, #4]
 8009b66:	4613      	mov	r3, r2
 8009b68:	009b      	lsls	r3, r3, #2
 8009b6a:	4413      	add	r3, r2
 8009b6c:	009b      	lsls	r3, r3, #2
 8009b6e:	440b      	add	r3, r1
 8009b70:	3326      	adds	r3, #38	; 0x26
 8009b72:	2200      	movs	r2, #0
 8009b74:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	32b0      	adds	r2, #176	; 0xb0
 8009b80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d01f      	beq.n	8009bc8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009b8e:	687a      	ldr	r2, [r7, #4]
 8009b90:	33b0      	adds	r3, #176	; 0xb0
 8009b92:	009b      	lsls	r3, r3, #2
 8009b94:	4413      	add	r3, r2
 8009b96:	685b      	ldr	r3, [r3, #4]
 8009b98:	685b      	ldr	r3, [r3, #4]
 8009b9a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	32b0      	adds	r2, #176	; 0xb0
 8009ba6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009baa:	4618      	mov	r0, r3
 8009bac:	f004 fde4 	bl	800e778 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	32b0      	adds	r2, #176	; 0xb0
 8009bba:	2100      	movs	r1, #0
 8009bbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	2200      	movs	r2, #0
 8009bc4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009bc8:	2300      	movs	r3, #0
}
 8009bca:	4618      	mov	r0, r3
 8009bcc:	3708      	adds	r7, #8
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	bd80      	pop	{r7, pc}
 8009bd2:	bf00      	nop
 8009bd4:	2000011b 	.word	0x2000011b
 8009bd8:	2000011c 	.word	0x2000011c
 8009bdc:	2000011d 	.word	0x2000011d

08009be0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009be0:	b580      	push	{r7, lr}
 8009be2:	b086      	sub	sp, #24
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	6078      	str	r0, [r7, #4]
 8009be8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	32b0      	adds	r2, #176	; 0xb0
 8009bf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bf8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8009bfe:	2300      	movs	r3, #0
 8009c00:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8009c02:	2300      	movs	r3, #0
 8009c04:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8009c06:	693b      	ldr	r3, [r7, #16]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d101      	bne.n	8009c10 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8009c0c:	2303      	movs	r3, #3
 8009c0e:	e0bf      	b.n	8009d90 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009c10:	683b      	ldr	r3, [r7, #0]
 8009c12:	781b      	ldrb	r3, [r3, #0]
 8009c14:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d050      	beq.n	8009cbe <USBD_CDC_Setup+0xde>
 8009c1c:	2b20      	cmp	r3, #32
 8009c1e:	f040 80af 	bne.w	8009d80 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8009c22:	683b      	ldr	r3, [r7, #0]
 8009c24:	88db      	ldrh	r3, [r3, #6]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d03a      	beq.n	8009ca0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8009c2a:	683b      	ldr	r3, [r7, #0]
 8009c2c:	781b      	ldrb	r3, [r3, #0]
 8009c2e:	b25b      	sxtb	r3, r3
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	da1b      	bge.n	8009c6c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009c3a:	687a      	ldr	r2, [r7, #4]
 8009c3c:	33b0      	adds	r3, #176	; 0xb0
 8009c3e:	009b      	lsls	r3, r3, #2
 8009c40:	4413      	add	r3, r2
 8009c42:	685b      	ldr	r3, [r3, #4]
 8009c44:	689b      	ldr	r3, [r3, #8]
 8009c46:	683a      	ldr	r2, [r7, #0]
 8009c48:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8009c4a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009c4c:	683a      	ldr	r2, [r7, #0]
 8009c4e:	88d2      	ldrh	r2, [r2, #6]
 8009c50:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009c52:	683b      	ldr	r3, [r7, #0]
 8009c54:	88db      	ldrh	r3, [r3, #6]
 8009c56:	2b07      	cmp	r3, #7
 8009c58:	bf28      	it	cs
 8009c5a:	2307      	movcs	r3, #7
 8009c5c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8009c5e:	693b      	ldr	r3, [r7, #16]
 8009c60:	89fa      	ldrh	r2, [r7, #14]
 8009c62:	4619      	mov	r1, r3
 8009c64:	6878      	ldr	r0, [r7, #4]
 8009c66:	f001 fd89 	bl	800b77c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8009c6a:	e090      	b.n	8009d8e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8009c6c:	683b      	ldr	r3, [r7, #0]
 8009c6e:	785a      	ldrb	r2, [r3, #1]
 8009c70:	693b      	ldr	r3, [r7, #16]
 8009c72:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8009c76:	683b      	ldr	r3, [r7, #0]
 8009c78:	88db      	ldrh	r3, [r3, #6]
 8009c7a:	2b3f      	cmp	r3, #63	; 0x3f
 8009c7c:	d803      	bhi.n	8009c86 <USBD_CDC_Setup+0xa6>
 8009c7e:	683b      	ldr	r3, [r7, #0]
 8009c80:	88db      	ldrh	r3, [r3, #6]
 8009c82:	b2da      	uxtb	r2, r3
 8009c84:	e000      	b.n	8009c88 <USBD_CDC_Setup+0xa8>
 8009c86:	2240      	movs	r2, #64	; 0x40
 8009c88:	693b      	ldr	r3, [r7, #16]
 8009c8a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8009c8e:	6939      	ldr	r1, [r7, #16]
 8009c90:	693b      	ldr	r3, [r7, #16]
 8009c92:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8009c96:	461a      	mov	r2, r3
 8009c98:	6878      	ldr	r0, [r7, #4]
 8009c9a:	f001 fd9b 	bl	800b7d4 <USBD_CtlPrepareRx>
      break;
 8009c9e:	e076      	b.n	8009d8e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009ca6:	687a      	ldr	r2, [r7, #4]
 8009ca8:	33b0      	adds	r3, #176	; 0xb0
 8009caa:	009b      	lsls	r3, r3, #2
 8009cac:	4413      	add	r3, r2
 8009cae:	685b      	ldr	r3, [r3, #4]
 8009cb0:	689b      	ldr	r3, [r3, #8]
 8009cb2:	683a      	ldr	r2, [r7, #0]
 8009cb4:	7850      	ldrb	r0, [r2, #1]
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	6839      	ldr	r1, [r7, #0]
 8009cba:	4798      	blx	r3
      break;
 8009cbc:	e067      	b.n	8009d8e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009cbe:	683b      	ldr	r3, [r7, #0]
 8009cc0:	785b      	ldrb	r3, [r3, #1]
 8009cc2:	2b0b      	cmp	r3, #11
 8009cc4:	d851      	bhi.n	8009d6a <USBD_CDC_Setup+0x18a>
 8009cc6:	a201      	add	r2, pc, #4	; (adr r2, 8009ccc <USBD_CDC_Setup+0xec>)
 8009cc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ccc:	08009cfd 	.word	0x08009cfd
 8009cd0:	08009d79 	.word	0x08009d79
 8009cd4:	08009d6b 	.word	0x08009d6b
 8009cd8:	08009d6b 	.word	0x08009d6b
 8009cdc:	08009d6b 	.word	0x08009d6b
 8009ce0:	08009d6b 	.word	0x08009d6b
 8009ce4:	08009d6b 	.word	0x08009d6b
 8009ce8:	08009d6b 	.word	0x08009d6b
 8009cec:	08009d6b 	.word	0x08009d6b
 8009cf0:	08009d6b 	.word	0x08009d6b
 8009cf4:	08009d27 	.word	0x08009d27
 8009cf8:	08009d51 	.word	0x08009d51
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d02:	b2db      	uxtb	r3, r3
 8009d04:	2b03      	cmp	r3, #3
 8009d06:	d107      	bne.n	8009d18 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009d08:	f107 030a 	add.w	r3, r7, #10
 8009d0c:	2202      	movs	r2, #2
 8009d0e:	4619      	mov	r1, r3
 8009d10:	6878      	ldr	r0, [r7, #4]
 8009d12:	f001 fd33 	bl	800b77c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009d16:	e032      	b.n	8009d7e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009d18:	6839      	ldr	r1, [r7, #0]
 8009d1a:	6878      	ldr	r0, [r7, #4]
 8009d1c:	f001 fcbd 	bl	800b69a <USBD_CtlError>
            ret = USBD_FAIL;
 8009d20:	2303      	movs	r3, #3
 8009d22:	75fb      	strb	r3, [r7, #23]
          break;
 8009d24:	e02b      	b.n	8009d7e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d2c:	b2db      	uxtb	r3, r3
 8009d2e:	2b03      	cmp	r3, #3
 8009d30:	d107      	bne.n	8009d42 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009d32:	f107 030d 	add.w	r3, r7, #13
 8009d36:	2201      	movs	r2, #1
 8009d38:	4619      	mov	r1, r3
 8009d3a:	6878      	ldr	r0, [r7, #4]
 8009d3c:	f001 fd1e 	bl	800b77c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009d40:	e01d      	b.n	8009d7e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009d42:	6839      	ldr	r1, [r7, #0]
 8009d44:	6878      	ldr	r0, [r7, #4]
 8009d46:	f001 fca8 	bl	800b69a <USBD_CtlError>
            ret = USBD_FAIL;
 8009d4a:	2303      	movs	r3, #3
 8009d4c:	75fb      	strb	r3, [r7, #23]
          break;
 8009d4e:	e016      	b.n	8009d7e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d56:	b2db      	uxtb	r3, r3
 8009d58:	2b03      	cmp	r3, #3
 8009d5a:	d00f      	beq.n	8009d7c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8009d5c:	6839      	ldr	r1, [r7, #0]
 8009d5e:	6878      	ldr	r0, [r7, #4]
 8009d60:	f001 fc9b 	bl	800b69a <USBD_CtlError>
            ret = USBD_FAIL;
 8009d64:	2303      	movs	r3, #3
 8009d66:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009d68:	e008      	b.n	8009d7c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009d6a:	6839      	ldr	r1, [r7, #0]
 8009d6c:	6878      	ldr	r0, [r7, #4]
 8009d6e:	f001 fc94 	bl	800b69a <USBD_CtlError>
          ret = USBD_FAIL;
 8009d72:	2303      	movs	r3, #3
 8009d74:	75fb      	strb	r3, [r7, #23]
          break;
 8009d76:	e002      	b.n	8009d7e <USBD_CDC_Setup+0x19e>
          break;
 8009d78:	bf00      	nop
 8009d7a:	e008      	b.n	8009d8e <USBD_CDC_Setup+0x1ae>
          break;
 8009d7c:	bf00      	nop
      }
      break;
 8009d7e:	e006      	b.n	8009d8e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8009d80:	6839      	ldr	r1, [r7, #0]
 8009d82:	6878      	ldr	r0, [r7, #4]
 8009d84:	f001 fc89 	bl	800b69a <USBD_CtlError>
      ret = USBD_FAIL;
 8009d88:	2303      	movs	r3, #3
 8009d8a:	75fb      	strb	r3, [r7, #23]
      break;
 8009d8c:	bf00      	nop
  }

  return (uint8_t)ret;
 8009d8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d90:	4618      	mov	r0, r3
 8009d92:	3718      	adds	r7, #24
 8009d94:	46bd      	mov	sp, r7
 8009d96:	bd80      	pop	{r7, pc}

08009d98 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009d98:	b580      	push	{r7, lr}
 8009d9a:	b084      	sub	sp, #16
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	6078      	str	r0, [r7, #4]
 8009da0:	460b      	mov	r3, r1
 8009da2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009daa:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	32b0      	adds	r2, #176	; 0xb0
 8009db6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d101      	bne.n	8009dc2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8009dbe:	2303      	movs	r3, #3
 8009dc0:	e065      	b.n	8009e8e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	32b0      	adds	r2, #176	; 0xb0
 8009dcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009dd0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009dd2:	78fb      	ldrb	r3, [r7, #3]
 8009dd4:	f003 020f 	and.w	r2, r3, #15
 8009dd8:	6879      	ldr	r1, [r7, #4]
 8009dda:	4613      	mov	r3, r2
 8009ddc:	009b      	lsls	r3, r3, #2
 8009dde:	4413      	add	r3, r2
 8009de0:	009b      	lsls	r3, r3, #2
 8009de2:	440b      	add	r3, r1
 8009de4:	3318      	adds	r3, #24
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d02f      	beq.n	8009e4c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8009dec:	78fb      	ldrb	r3, [r7, #3]
 8009dee:	f003 020f 	and.w	r2, r3, #15
 8009df2:	6879      	ldr	r1, [r7, #4]
 8009df4:	4613      	mov	r3, r2
 8009df6:	009b      	lsls	r3, r3, #2
 8009df8:	4413      	add	r3, r2
 8009dfa:	009b      	lsls	r3, r3, #2
 8009dfc:	440b      	add	r3, r1
 8009dfe:	3318      	adds	r3, #24
 8009e00:	681a      	ldr	r2, [r3, #0]
 8009e02:	78fb      	ldrb	r3, [r7, #3]
 8009e04:	f003 010f 	and.w	r1, r3, #15
 8009e08:	68f8      	ldr	r0, [r7, #12]
 8009e0a:	460b      	mov	r3, r1
 8009e0c:	00db      	lsls	r3, r3, #3
 8009e0e:	440b      	add	r3, r1
 8009e10:	009b      	lsls	r3, r3, #2
 8009e12:	4403      	add	r3, r0
 8009e14:	3348      	adds	r3, #72	; 0x48
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	fbb2 f1f3 	udiv	r1, r2, r3
 8009e1c:	fb01 f303 	mul.w	r3, r1, r3
 8009e20:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d112      	bne.n	8009e4c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8009e26:	78fb      	ldrb	r3, [r7, #3]
 8009e28:	f003 020f 	and.w	r2, r3, #15
 8009e2c:	6879      	ldr	r1, [r7, #4]
 8009e2e:	4613      	mov	r3, r2
 8009e30:	009b      	lsls	r3, r3, #2
 8009e32:	4413      	add	r3, r2
 8009e34:	009b      	lsls	r3, r3, #2
 8009e36:	440b      	add	r3, r1
 8009e38:	3318      	adds	r3, #24
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009e3e:	78f9      	ldrb	r1, [r7, #3]
 8009e40:	2300      	movs	r3, #0
 8009e42:	2200      	movs	r2, #0
 8009e44:	6878      	ldr	r0, [r7, #4]
 8009e46:	f004 fc34 	bl	800e6b2 <USBD_LL_Transmit>
 8009e4a:	e01f      	b.n	8009e8c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8009e4c:	68bb      	ldr	r3, [r7, #8]
 8009e4e:	2200      	movs	r2, #0
 8009e50:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009e5a:	687a      	ldr	r2, [r7, #4]
 8009e5c:	33b0      	adds	r3, #176	; 0xb0
 8009e5e:	009b      	lsls	r3, r3, #2
 8009e60:	4413      	add	r3, r2
 8009e62:	685b      	ldr	r3, [r3, #4]
 8009e64:	691b      	ldr	r3, [r3, #16]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d010      	beq.n	8009e8c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009e70:	687a      	ldr	r2, [r7, #4]
 8009e72:	33b0      	adds	r3, #176	; 0xb0
 8009e74:	009b      	lsls	r3, r3, #2
 8009e76:	4413      	add	r3, r2
 8009e78:	685b      	ldr	r3, [r3, #4]
 8009e7a:	691b      	ldr	r3, [r3, #16]
 8009e7c:	68ba      	ldr	r2, [r7, #8]
 8009e7e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8009e82:	68ba      	ldr	r2, [r7, #8]
 8009e84:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8009e88:	78fa      	ldrb	r2, [r7, #3]
 8009e8a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8009e8c:	2300      	movs	r3, #0
}
 8009e8e:	4618      	mov	r0, r3
 8009e90:	3710      	adds	r7, #16
 8009e92:	46bd      	mov	sp, r7
 8009e94:	bd80      	pop	{r7, pc}

08009e96 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009e96:	b580      	push	{r7, lr}
 8009e98:	b084      	sub	sp, #16
 8009e9a:	af00      	add	r7, sp, #0
 8009e9c:	6078      	str	r0, [r7, #4]
 8009e9e:	460b      	mov	r3, r1
 8009ea0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	32b0      	adds	r2, #176	; 0xb0
 8009eac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009eb0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	32b0      	adds	r2, #176	; 0xb0
 8009ebc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d101      	bne.n	8009ec8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8009ec4:	2303      	movs	r3, #3
 8009ec6:	e01a      	b.n	8009efe <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009ec8:	78fb      	ldrb	r3, [r7, #3]
 8009eca:	4619      	mov	r1, r3
 8009ecc:	6878      	ldr	r0, [r7, #4]
 8009ece:	f004 fc32 	bl	800e736 <USBD_LL_GetRxDataSize>
 8009ed2:	4602      	mov	r2, r0
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009ee0:	687a      	ldr	r2, [r7, #4]
 8009ee2:	33b0      	adds	r3, #176	; 0xb0
 8009ee4:	009b      	lsls	r3, r3, #2
 8009ee6:	4413      	add	r3, r2
 8009ee8:	685b      	ldr	r3, [r3, #4]
 8009eea:	68db      	ldr	r3, [r3, #12]
 8009eec:	68fa      	ldr	r2, [r7, #12]
 8009eee:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8009ef2:	68fa      	ldr	r2, [r7, #12]
 8009ef4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8009ef8:	4611      	mov	r1, r2
 8009efa:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009efc:	2300      	movs	r3, #0
}
 8009efe:	4618      	mov	r0, r3
 8009f00:	3710      	adds	r7, #16
 8009f02:	46bd      	mov	sp, r7
 8009f04:	bd80      	pop	{r7, pc}

08009f06 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009f06:	b580      	push	{r7, lr}
 8009f08:	b084      	sub	sp, #16
 8009f0a:	af00      	add	r7, sp, #0
 8009f0c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	32b0      	adds	r2, #176	; 0xb0
 8009f18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f1c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d101      	bne.n	8009f28 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009f24:	2303      	movs	r3, #3
 8009f26:	e025      	b.n	8009f74 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009f2e:	687a      	ldr	r2, [r7, #4]
 8009f30:	33b0      	adds	r3, #176	; 0xb0
 8009f32:	009b      	lsls	r3, r3, #2
 8009f34:	4413      	add	r3, r2
 8009f36:	685b      	ldr	r3, [r3, #4]
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d01a      	beq.n	8009f72 <USBD_CDC_EP0_RxReady+0x6c>
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8009f42:	2bff      	cmp	r3, #255	; 0xff
 8009f44:	d015      	beq.n	8009f72 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009f4c:	687a      	ldr	r2, [r7, #4]
 8009f4e:	33b0      	adds	r3, #176	; 0xb0
 8009f50:	009b      	lsls	r3, r3, #2
 8009f52:	4413      	add	r3, r2
 8009f54:	685b      	ldr	r3, [r3, #4]
 8009f56:	689b      	ldr	r3, [r3, #8]
 8009f58:	68fa      	ldr	r2, [r7, #12]
 8009f5a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8009f5e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8009f60:	68fa      	ldr	r2, [r7, #12]
 8009f62:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009f66:	b292      	uxth	r2, r2
 8009f68:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	22ff      	movs	r2, #255	; 0xff
 8009f6e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8009f72:	2300      	movs	r3, #0
}
 8009f74:	4618      	mov	r0, r3
 8009f76:	3710      	adds	r7, #16
 8009f78:	46bd      	mov	sp, r7
 8009f7a:	bd80      	pop	{r7, pc}

08009f7c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009f7c:	b580      	push	{r7, lr}
 8009f7e:	b086      	sub	sp, #24
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009f84:	2182      	movs	r1, #130	; 0x82
 8009f86:	4818      	ldr	r0, [pc, #96]	; (8009fe8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009f88:	f000 fd4f 	bl	800aa2a <USBD_GetEpDesc>
 8009f8c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009f8e:	2101      	movs	r1, #1
 8009f90:	4815      	ldr	r0, [pc, #84]	; (8009fe8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009f92:	f000 fd4a 	bl	800aa2a <USBD_GetEpDesc>
 8009f96:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009f98:	2181      	movs	r1, #129	; 0x81
 8009f9a:	4813      	ldr	r0, [pc, #76]	; (8009fe8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009f9c:	f000 fd45 	bl	800aa2a <USBD_GetEpDesc>
 8009fa0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009fa2:	697b      	ldr	r3, [r7, #20]
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d002      	beq.n	8009fae <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009fa8:	697b      	ldr	r3, [r7, #20]
 8009faa:	2210      	movs	r2, #16
 8009fac:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009fae:	693b      	ldr	r3, [r7, #16]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d006      	beq.n	8009fc2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009fb4:	693b      	ldr	r3, [r7, #16]
 8009fb6:	2200      	movs	r2, #0
 8009fb8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009fbc:	711a      	strb	r2, [r3, #4]
 8009fbe:	2200      	movs	r2, #0
 8009fc0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d006      	beq.n	8009fd6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	2200      	movs	r2, #0
 8009fcc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009fd0:	711a      	strb	r2, [r3, #4]
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	2243      	movs	r2, #67	; 0x43
 8009fda:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009fdc:	4b02      	ldr	r3, [pc, #8]	; (8009fe8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8009fde:	4618      	mov	r0, r3
 8009fe0:	3718      	adds	r7, #24
 8009fe2:	46bd      	mov	sp, r7
 8009fe4:	bd80      	pop	{r7, pc}
 8009fe6:	bf00      	nop
 8009fe8:	200000d8 	.word	0x200000d8

08009fec <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009fec:	b580      	push	{r7, lr}
 8009fee:	b086      	sub	sp, #24
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009ff4:	2182      	movs	r1, #130	; 0x82
 8009ff6:	4818      	ldr	r0, [pc, #96]	; (800a058 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009ff8:	f000 fd17 	bl	800aa2a <USBD_GetEpDesc>
 8009ffc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009ffe:	2101      	movs	r1, #1
 800a000:	4815      	ldr	r0, [pc, #84]	; (800a058 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a002:	f000 fd12 	bl	800aa2a <USBD_GetEpDesc>
 800a006:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a008:	2181      	movs	r1, #129	; 0x81
 800a00a:	4813      	ldr	r0, [pc, #76]	; (800a058 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a00c:	f000 fd0d 	bl	800aa2a <USBD_GetEpDesc>
 800a010:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a012:	697b      	ldr	r3, [r7, #20]
 800a014:	2b00      	cmp	r3, #0
 800a016:	d002      	beq.n	800a01e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800a018:	697b      	ldr	r3, [r7, #20]
 800a01a:	2210      	movs	r2, #16
 800a01c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a01e:	693b      	ldr	r3, [r7, #16]
 800a020:	2b00      	cmp	r3, #0
 800a022:	d006      	beq.n	800a032 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a024:	693b      	ldr	r3, [r7, #16]
 800a026:	2200      	movs	r2, #0
 800a028:	711a      	strb	r2, [r3, #4]
 800a02a:	2200      	movs	r2, #0
 800a02c:	f042 0202 	orr.w	r2, r2, #2
 800a030:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	2b00      	cmp	r3, #0
 800a036:	d006      	beq.n	800a046 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	2200      	movs	r2, #0
 800a03c:	711a      	strb	r2, [r3, #4]
 800a03e:	2200      	movs	r2, #0
 800a040:	f042 0202 	orr.w	r2, r2, #2
 800a044:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	2243      	movs	r2, #67	; 0x43
 800a04a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a04c:	4b02      	ldr	r3, [pc, #8]	; (800a058 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800a04e:	4618      	mov	r0, r3
 800a050:	3718      	adds	r7, #24
 800a052:	46bd      	mov	sp, r7
 800a054:	bd80      	pop	{r7, pc}
 800a056:	bf00      	nop
 800a058:	200000d8 	.word	0x200000d8

0800a05c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a05c:	b580      	push	{r7, lr}
 800a05e:	b086      	sub	sp, #24
 800a060:	af00      	add	r7, sp, #0
 800a062:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a064:	2182      	movs	r1, #130	; 0x82
 800a066:	4818      	ldr	r0, [pc, #96]	; (800a0c8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a068:	f000 fcdf 	bl	800aa2a <USBD_GetEpDesc>
 800a06c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a06e:	2101      	movs	r1, #1
 800a070:	4815      	ldr	r0, [pc, #84]	; (800a0c8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a072:	f000 fcda 	bl	800aa2a <USBD_GetEpDesc>
 800a076:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a078:	2181      	movs	r1, #129	; 0x81
 800a07a:	4813      	ldr	r0, [pc, #76]	; (800a0c8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a07c:	f000 fcd5 	bl	800aa2a <USBD_GetEpDesc>
 800a080:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a082:	697b      	ldr	r3, [r7, #20]
 800a084:	2b00      	cmp	r3, #0
 800a086:	d002      	beq.n	800a08e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a088:	697b      	ldr	r3, [r7, #20]
 800a08a:	2210      	movs	r2, #16
 800a08c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a08e:	693b      	ldr	r3, [r7, #16]
 800a090:	2b00      	cmp	r3, #0
 800a092:	d006      	beq.n	800a0a2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a094:	693b      	ldr	r3, [r7, #16]
 800a096:	2200      	movs	r2, #0
 800a098:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a09c:	711a      	strb	r2, [r3, #4]
 800a09e:	2200      	movs	r2, #0
 800a0a0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d006      	beq.n	800a0b6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	2200      	movs	r2, #0
 800a0ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a0b0:	711a      	strb	r2, [r3, #4]
 800a0b2:	2200      	movs	r2, #0
 800a0b4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	2243      	movs	r2, #67	; 0x43
 800a0ba:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a0bc:	4b02      	ldr	r3, [pc, #8]	; (800a0c8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800a0be:	4618      	mov	r0, r3
 800a0c0:	3718      	adds	r7, #24
 800a0c2:	46bd      	mov	sp, r7
 800a0c4:	bd80      	pop	{r7, pc}
 800a0c6:	bf00      	nop
 800a0c8:	200000d8 	.word	0x200000d8

0800a0cc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a0cc:	b480      	push	{r7}
 800a0ce:	b083      	sub	sp, #12
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	220a      	movs	r2, #10
 800a0d8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a0da:	4b03      	ldr	r3, [pc, #12]	; (800a0e8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a0dc:	4618      	mov	r0, r3
 800a0de:	370c      	adds	r7, #12
 800a0e0:	46bd      	mov	sp, r7
 800a0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e6:	4770      	bx	lr
 800a0e8:	20000094 	.word	0x20000094

0800a0ec <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a0ec:	b480      	push	{r7}
 800a0ee:	b083      	sub	sp, #12
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	6078      	str	r0, [r7, #4]
 800a0f4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a0f6:	683b      	ldr	r3, [r7, #0]
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d101      	bne.n	800a100 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a0fc:	2303      	movs	r3, #3
 800a0fe:	e009      	b.n	800a114 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a106:	687a      	ldr	r2, [r7, #4]
 800a108:	33b0      	adds	r3, #176	; 0xb0
 800a10a:	009b      	lsls	r3, r3, #2
 800a10c:	4413      	add	r3, r2
 800a10e:	683a      	ldr	r2, [r7, #0]
 800a110:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800a112:	2300      	movs	r3, #0
}
 800a114:	4618      	mov	r0, r3
 800a116:	370c      	adds	r7, #12
 800a118:	46bd      	mov	sp, r7
 800a11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a11e:	4770      	bx	lr

0800a120 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a120:	b480      	push	{r7}
 800a122:	b087      	sub	sp, #28
 800a124:	af00      	add	r7, sp, #0
 800a126:	60f8      	str	r0, [r7, #12]
 800a128:	60b9      	str	r1, [r7, #8]
 800a12a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	32b0      	adds	r2, #176	; 0xb0
 800a136:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a13a:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800a13c:	697b      	ldr	r3, [r7, #20]
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d101      	bne.n	800a146 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a142:	2303      	movs	r3, #3
 800a144:	e008      	b.n	800a158 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800a146:	697b      	ldr	r3, [r7, #20]
 800a148:	68ba      	ldr	r2, [r7, #8]
 800a14a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800a14e:	697b      	ldr	r3, [r7, #20]
 800a150:	687a      	ldr	r2, [r7, #4]
 800a152:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800a156:	2300      	movs	r3, #0
}
 800a158:	4618      	mov	r0, r3
 800a15a:	371c      	adds	r7, #28
 800a15c:	46bd      	mov	sp, r7
 800a15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a162:	4770      	bx	lr

0800a164 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a164:	b480      	push	{r7}
 800a166:	b085      	sub	sp, #20
 800a168:	af00      	add	r7, sp, #0
 800a16a:	6078      	str	r0, [r7, #4]
 800a16c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	32b0      	adds	r2, #176	; 0xb0
 800a178:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a17c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	2b00      	cmp	r3, #0
 800a182:	d101      	bne.n	800a188 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800a184:	2303      	movs	r3, #3
 800a186:	e004      	b.n	800a192 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	683a      	ldr	r2, [r7, #0]
 800a18c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800a190:	2300      	movs	r3, #0
}
 800a192:	4618      	mov	r0, r3
 800a194:	3714      	adds	r7, #20
 800a196:	46bd      	mov	sp, r7
 800a198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19c:	4770      	bx	lr
	...

0800a1a0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a1a0:	b580      	push	{r7, lr}
 800a1a2:	b084      	sub	sp, #16
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	32b0      	adds	r2, #176	; 0xb0
 800a1b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1b6:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800a1b8:	2301      	movs	r3, #1
 800a1ba:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	32b0      	adds	r2, #176	; 0xb0
 800a1c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d101      	bne.n	800a1d2 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800a1ce:	2303      	movs	r3, #3
 800a1d0:	e025      	b.n	800a21e <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800a1d2:	68bb      	ldr	r3, [r7, #8]
 800a1d4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d11f      	bne.n	800a21c <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800a1dc:	68bb      	ldr	r3, [r7, #8]
 800a1de:	2201      	movs	r2, #1
 800a1e0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800a1e4:	4b10      	ldr	r3, [pc, #64]	; (800a228 <USBD_CDC_TransmitPacket+0x88>)
 800a1e6:	781b      	ldrb	r3, [r3, #0]
 800a1e8:	f003 020f 	and.w	r2, r3, #15
 800a1ec:	68bb      	ldr	r3, [r7, #8]
 800a1ee:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800a1f2:	6878      	ldr	r0, [r7, #4]
 800a1f4:	4613      	mov	r3, r2
 800a1f6:	009b      	lsls	r3, r3, #2
 800a1f8:	4413      	add	r3, r2
 800a1fa:	009b      	lsls	r3, r3, #2
 800a1fc:	4403      	add	r3, r0
 800a1fe:	3318      	adds	r3, #24
 800a200:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800a202:	4b09      	ldr	r3, [pc, #36]	; (800a228 <USBD_CDC_TransmitPacket+0x88>)
 800a204:	7819      	ldrb	r1, [r3, #0]
 800a206:	68bb      	ldr	r3, [r7, #8]
 800a208:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800a20c:	68bb      	ldr	r3, [r7, #8]
 800a20e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800a212:	6878      	ldr	r0, [r7, #4]
 800a214:	f004 fa4d 	bl	800e6b2 <USBD_LL_Transmit>

    ret = USBD_OK;
 800a218:	2300      	movs	r3, #0
 800a21a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800a21c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a21e:	4618      	mov	r0, r3
 800a220:	3710      	adds	r7, #16
 800a222:	46bd      	mov	sp, r7
 800a224:	bd80      	pop	{r7, pc}
 800a226:	bf00      	nop
 800a228:	2000011b 	.word	0x2000011b

0800a22c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a22c:	b580      	push	{r7, lr}
 800a22e:	b084      	sub	sp, #16
 800a230:	af00      	add	r7, sp, #0
 800a232:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	32b0      	adds	r2, #176	; 0xb0
 800a23e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a242:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	32b0      	adds	r2, #176	; 0xb0
 800a24e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a252:	2b00      	cmp	r3, #0
 800a254:	d101      	bne.n	800a25a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800a256:	2303      	movs	r3, #3
 800a258:	e018      	b.n	800a28c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	7c1b      	ldrb	r3, [r3, #16]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d10a      	bne.n	800a278 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a262:	4b0c      	ldr	r3, [pc, #48]	; (800a294 <USBD_CDC_ReceivePacket+0x68>)
 800a264:	7819      	ldrb	r1, [r3, #0]
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a26c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a270:	6878      	ldr	r0, [r7, #4]
 800a272:	f004 fa3f 	bl	800e6f4 <USBD_LL_PrepareReceive>
 800a276:	e008      	b.n	800a28a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a278:	4b06      	ldr	r3, [pc, #24]	; (800a294 <USBD_CDC_ReceivePacket+0x68>)
 800a27a:	7819      	ldrb	r1, [r3, #0]
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a282:	2340      	movs	r3, #64	; 0x40
 800a284:	6878      	ldr	r0, [r7, #4]
 800a286:	f004 fa35 	bl	800e6f4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a28a:	2300      	movs	r3, #0
}
 800a28c:	4618      	mov	r0, r3
 800a28e:	3710      	adds	r7, #16
 800a290:	46bd      	mov	sp, r7
 800a292:	bd80      	pop	{r7, pc}
 800a294:	2000011c 	.word	0x2000011c

0800a298 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a298:	b580      	push	{r7, lr}
 800a29a:	b086      	sub	sp, #24
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	60f8      	str	r0, [r7, #12]
 800a2a0:	60b9      	str	r1, [r7, #8]
 800a2a2:	4613      	mov	r3, r2
 800a2a4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d101      	bne.n	800a2b0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a2ac:	2303      	movs	r3, #3
 800a2ae:	e01f      	b.n	800a2f0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	2200      	movs	r2, #0
 800a2b4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	2200      	movs	r2, #0
 800a2bc:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	2200      	movs	r2, #0
 800a2c4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a2c8:	68bb      	ldr	r3, [r7, #8]
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d003      	beq.n	800a2d6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	68ba      	ldr	r2, [r7, #8]
 800a2d2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	2201      	movs	r2, #1
 800a2da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	79fa      	ldrb	r2, [r7, #7]
 800a2e2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a2e4:	68f8      	ldr	r0, [r7, #12]
 800a2e6:	f004 f8a9 	bl	800e43c <USBD_LL_Init>
 800a2ea:	4603      	mov	r3, r0
 800a2ec:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a2ee:	7dfb      	ldrb	r3, [r7, #23]
}
 800a2f0:	4618      	mov	r0, r3
 800a2f2:	3718      	adds	r7, #24
 800a2f4:	46bd      	mov	sp, r7
 800a2f6:	bd80      	pop	{r7, pc}

0800a2f8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a2f8:	b580      	push	{r7, lr}
 800a2fa:	b084      	sub	sp, #16
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	6078      	str	r0, [r7, #4]
 800a300:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a302:	2300      	movs	r3, #0
 800a304:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a306:	683b      	ldr	r3, [r7, #0]
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d101      	bne.n	800a310 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a30c:	2303      	movs	r3, #3
 800a30e:	e025      	b.n	800a35c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	683a      	ldr	r2, [r7, #0]
 800a314:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	32ae      	adds	r2, #174	; 0xae
 800a322:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d00f      	beq.n	800a34c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	32ae      	adds	r2, #174	; 0xae
 800a336:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a33a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a33c:	f107 020e 	add.w	r2, r7, #14
 800a340:	4610      	mov	r0, r2
 800a342:	4798      	blx	r3
 800a344:	4602      	mov	r2, r0
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800a352:	1c5a      	adds	r2, r3, #1
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800a35a:	2300      	movs	r3, #0
}
 800a35c:	4618      	mov	r0, r3
 800a35e:	3710      	adds	r7, #16
 800a360:	46bd      	mov	sp, r7
 800a362:	bd80      	pop	{r7, pc}

0800a364 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a364:	b580      	push	{r7, lr}
 800a366:	b082      	sub	sp, #8
 800a368:	af00      	add	r7, sp, #0
 800a36a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a36c:	6878      	ldr	r0, [r7, #4]
 800a36e:	f004 f8b7 	bl	800e4e0 <USBD_LL_Start>
 800a372:	4603      	mov	r3, r0
}
 800a374:	4618      	mov	r0, r3
 800a376:	3708      	adds	r7, #8
 800a378:	46bd      	mov	sp, r7
 800a37a:	bd80      	pop	{r7, pc}

0800a37c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800a37c:	b480      	push	{r7}
 800a37e:	b083      	sub	sp, #12
 800a380:	af00      	add	r7, sp, #0
 800a382:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a384:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800a386:	4618      	mov	r0, r3
 800a388:	370c      	adds	r7, #12
 800a38a:	46bd      	mov	sp, r7
 800a38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a390:	4770      	bx	lr

0800a392 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a392:	b580      	push	{r7, lr}
 800a394:	b084      	sub	sp, #16
 800a396:	af00      	add	r7, sp, #0
 800a398:	6078      	str	r0, [r7, #4]
 800a39a:	460b      	mov	r3, r1
 800a39c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a39e:	2300      	movs	r3, #0
 800a3a0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d009      	beq.n	800a3c0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	78fa      	ldrb	r2, [r7, #3]
 800a3b6:	4611      	mov	r1, r2
 800a3b8:	6878      	ldr	r0, [r7, #4]
 800a3ba:	4798      	blx	r3
 800a3bc:	4603      	mov	r3, r0
 800a3be:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a3c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3c2:	4618      	mov	r0, r3
 800a3c4:	3710      	adds	r7, #16
 800a3c6:	46bd      	mov	sp, r7
 800a3c8:	bd80      	pop	{r7, pc}

0800a3ca <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a3ca:	b580      	push	{r7, lr}
 800a3cc:	b084      	sub	sp, #16
 800a3ce:	af00      	add	r7, sp, #0
 800a3d0:	6078      	str	r0, [r7, #4]
 800a3d2:	460b      	mov	r3, r1
 800a3d4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a3d6:	2300      	movs	r3, #0
 800a3d8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a3e0:	685b      	ldr	r3, [r3, #4]
 800a3e2:	78fa      	ldrb	r2, [r7, #3]
 800a3e4:	4611      	mov	r1, r2
 800a3e6:	6878      	ldr	r0, [r7, #4]
 800a3e8:	4798      	blx	r3
 800a3ea:	4603      	mov	r3, r0
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d001      	beq.n	800a3f4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800a3f0:	2303      	movs	r3, #3
 800a3f2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a3f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	3710      	adds	r7, #16
 800a3fa:	46bd      	mov	sp, r7
 800a3fc:	bd80      	pop	{r7, pc}

0800a3fe <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a3fe:	b580      	push	{r7, lr}
 800a400:	b084      	sub	sp, #16
 800a402:	af00      	add	r7, sp, #0
 800a404:	6078      	str	r0, [r7, #4]
 800a406:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a40e:	6839      	ldr	r1, [r7, #0]
 800a410:	4618      	mov	r0, r3
 800a412:	f001 f908 	bl	800b626 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	2201      	movs	r2, #1
 800a41a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800a424:	461a      	mov	r2, r3
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a432:	f003 031f 	and.w	r3, r3, #31
 800a436:	2b02      	cmp	r3, #2
 800a438:	d01a      	beq.n	800a470 <USBD_LL_SetupStage+0x72>
 800a43a:	2b02      	cmp	r3, #2
 800a43c:	d822      	bhi.n	800a484 <USBD_LL_SetupStage+0x86>
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d002      	beq.n	800a448 <USBD_LL_SetupStage+0x4a>
 800a442:	2b01      	cmp	r3, #1
 800a444:	d00a      	beq.n	800a45c <USBD_LL_SetupStage+0x5e>
 800a446:	e01d      	b.n	800a484 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a44e:	4619      	mov	r1, r3
 800a450:	6878      	ldr	r0, [r7, #4]
 800a452:	f000 fb5f 	bl	800ab14 <USBD_StdDevReq>
 800a456:	4603      	mov	r3, r0
 800a458:	73fb      	strb	r3, [r7, #15]
      break;
 800a45a:	e020      	b.n	800a49e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a462:	4619      	mov	r1, r3
 800a464:	6878      	ldr	r0, [r7, #4]
 800a466:	f000 fbc7 	bl	800abf8 <USBD_StdItfReq>
 800a46a:	4603      	mov	r3, r0
 800a46c:	73fb      	strb	r3, [r7, #15]
      break;
 800a46e:	e016      	b.n	800a49e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a476:	4619      	mov	r1, r3
 800a478:	6878      	ldr	r0, [r7, #4]
 800a47a:	f000 fc29 	bl	800acd0 <USBD_StdEPReq>
 800a47e:	4603      	mov	r3, r0
 800a480:	73fb      	strb	r3, [r7, #15]
      break;
 800a482:	e00c      	b.n	800a49e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a48a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a48e:	b2db      	uxtb	r3, r3
 800a490:	4619      	mov	r1, r3
 800a492:	6878      	ldr	r0, [r7, #4]
 800a494:	f004 f884 	bl	800e5a0 <USBD_LL_StallEP>
 800a498:	4603      	mov	r3, r0
 800a49a:	73fb      	strb	r3, [r7, #15]
      break;
 800a49c:	bf00      	nop
  }

  return ret;
 800a49e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4a0:	4618      	mov	r0, r3
 800a4a2:	3710      	adds	r7, #16
 800a4a4:	46bd      	mov	sp, r7
 800a4a6:	bd80      	pop	{r7, pc}

0800a4a8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a4a8:	b580      	push	{r7, lr}
 800a4aa:	b086      	sub	sp, #24
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	60f8      	str	r0, [r7, #12]
 800a4b0:	460b      	mov	r3, r1
 800a4b2:	607a      	str	r2, [r7, #4]
 800a4b4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800a4b6:	2300      	movs	r3, #0
 800a4b8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800a4ba:	7afb      	ldrb	r3, [r7, #11]
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d16e      	bne.n	800a59e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a4c6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a4ce:	2b03      	cmp	r3, #3
 800a4d0:	f040 8098 	bne.w	800a604 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800a4d4:	693b      	ldr	r3, [r7, #16]
 800a4d6:	689a      	ldr	r2, [r3, #8]
 800a4d8:	693b      	ldr	r3, [r7, #16]
 800a4da:	68db      	ldr	r3, [r3, #12]
 800a4dc:	429a      	cmp	r2, r3
 800a4de:	d913      	bls.n	800a508 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800a4e0:	693b      	ldr	r3, [r7, #16]
 800a4e2:	689a      	ldr	r2, [r3, #8]
 800a4e4:	693b      	ldr	r3, [r7, #16]
 800a4e6:	68db      	ldr	r3, [r3, #12]
 800a4e8:	1ad2      	subs	r2, r2, r3
 800a4ea:	693b      	ldr	r3, [r7, #16]
 800a4ec:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a4ee:	693b      	ldr	r3, [r7, #16]
 800a4f0:	68da      	ldr	r2, [r3, #12]
 800a4f2:	693b      	ldr	r3, [r7, #16]
 800a4f4:	689b      	ldr	r3, [r3, #8]
 800a4f6:	4293      	cmp	r3, r2
 800a4f8:	bf28      	it	cs
 800a4fa:	4613      	movcs	r3, r2
 800a4fc:	461a      	mov	r2, r3
 800a4fe:	6879      	ldr	r1, [r7, #4]
 800a500:	68f8      	ldr	r0, [r7, #12]
 800a502:	f001 f984 	bl	800b80e <USBD_CtlContinueRx>
 800a506:	e07d      	b.n	800a604 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a50e:	f003 031f 	and.w	r3, r3, #31
 800a512:	2b02      	cmp	r3, #2
 800a514:	d014      	beq.n	800a540 <USBD_LL_DataOutStage+0x98>
 800a516:	2b02      	cmp	r3, #2
 800a518:	d81d      	bhi.n	800a556 <USBD_LL_DataOutStage+0xae>
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d002      	beq.n	800a524 <USBD_LL_DataOutStage+0x7c>
 800a51e:	2b01      	cmp	r3, #1
 800a520:	d003      	beq.n	800a52a <USBD_LL_DataOutStage+0x82>
 800a522:	e018      	b.n	800a556 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800a524:	2300      	movs	r3, #0
 800a526:	75bb      	strb	r3, [r7, #22]
            break;
 800a528:	e018      	b.n	800a55c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a530:	b2db      	uxtb	r3, r3
 800a532:	4619      	mov	r1, r3
 800a534:	68f8      	ldr	r0, [r7, #12]
 800a536:	f000 fa5e 	bl	800a9f6 <USBD_CoreFindIF>
 800a53a:	4603      	mov	r3, r0
 800a53c:	75bb      	strb	r3, [r7, #22]
            break;
 800a53e:	e00d      	b.n	800a55c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a546:	b2db      	uxtb	r3, r3
 800a548:	4619      	mov	r1, r3
 800a54a:	68f8      	ldr	r0, [r7, #12]
 800a54c:	f000 fa60 	bl	800aa10 <USBD_CoreFindEP>
 800a550:	4603      	mov	r3, r0
 800a552:	75bb      	strb	r3, [r7, #22]
            break;
 800a554:	e002      	b.n	800a55c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800a556:	2300      	movs	r3, #0
 800a558:	75bb      	strb	r3, [r7, #22]
            break;
 800a55a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800a55c:	7dbb      	ldrb	r3, [r7, #22]
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d119      	bne.n	800a596 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a568:	b2db      	uxtb	r3, r3
 800a56a:	2b03      	cmp	r3, #3
 800a56c:	d113      	bne.n	800a596 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800a56e:	7dba      	ldrb	r2, [r7, #22]
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	32ae      	adds	r2, #174	; 0xae
 800a574:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a578:	691b      	ldr	r3, [r3, #16]
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d00b      	beq.n	800a596 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800a57e:	7dba      	ldrb	r2, [r7, #22]
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800a586:	7dba      	ldrb	r2, [r7, #22]
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	32ae      	adds	r2, #174	; 0xae
 800a58c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a590:	691b      	ldr	r3, [r3, #16]
 800a592:	68f8      	ldr	r0, [r7, #12]
 800a594:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a596:	68f8      	ldr	r0, [r7, #12]
 800a598:	f001 f94a 	bl	800b830 <USBD_CtlSendStatus>
 800a59c:	e032      	b.n	800a604 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800a59e:	7afb      	ldrb	r3, [r7, #11]
 800a5a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a5a4:	b2db      	uxtb	r3, r3
 800a5a6:	4619      	mov	r1, r3
 800a5a8:	68f8      	ldr	r0, [r7, #12]
 800a5aa:	f000 fa31 	bl	800aa10 <USBD_CoreFindEP>
 800a5ae:	4603      	mov	r3, r0
 800a5b0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a5b2:	7dbb      	ldrb	r3, [r7, #22]
 800a5b4:	2bff      	cmp	r3, #255	; 0xff
 800a5b6:	d025      	beq.n	800a604 <USBD_LL_DataOutStage+0x15c>
 800a5b8:	7dbb      	ldrb	r3, [r7, #22]
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d122      	bne.n	800a604 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a5c4:	b2db      	uxtb	r3, r3
 800a5c6:	2b03      	cmp	r3, #3
 800a5c8:	d117      	bne.n	800a5fa <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800a5ca:	7dba      	ldrb	r2, [r7, #22]
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	32ae      	adds	r2, #174	; 0xae
 800a5d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5d4:	699b      	ldr	r3, [r3, #24]
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d00f      	beq.n	800a5fa <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800a5da:	7dba      	ldrb	r2, [r7, #22]
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800a5e2:	7dba      	ldrb	r2, [r7, #22]
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	32ae      	adds	r2, #174	; 0xae
 800a5e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5ec:	699b      	ldr	r3, [r3, #24]
 800a5ee:	7afa      	ldrb	r2, [r7, #11]
 800a5f0:	4611      	mov	r1, r2
 800a5f2:	68f8      	ldr	r0, [r7, #12]
 800a5f4:	4798      	blx	r3
 800a5f6:	4603      	mov	r3, r0
 800a5f8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800a5fa:	7dfb      	ldrb	r3, [r7, #23]
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d001      	beq.n	800a604 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800a600:	7dfb      	ldrb	r3, [r7, #23]
 800a602:	e000      	b.n	800a606 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800a604:	2300      	movs	r3, #0
}
 800a606:	4618      	mov	r0, r3
 800a608:	3718      	adds	r7, #24
 800a60a:	46bd      	mov	sp, r7
 800a60c:	bd80      	pop	{r7, pc}

0800a60e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a60e:	b580      	push	{r7, lr}
 800a610:	b086      	sub	sp, #24
 800a612:	af00      	add	r7, sp, #0
 800a614:	60f8      	str	r0, [r7, #12]
 800a616:	460b      	mov	r3, r1
 800a618:	607a      	str	r2, [r7, #4]
 800a61a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800a61c:	7afb      	ldrb	r3, [r7, #11]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d16f      	bne.n	800a702 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	3314      	adds	r3, #20
 800a626:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a62e:	2b02      	cmp	r3, #2
 800a630:	d15a      	bne.n	800a6e8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800a632:	693b      	ldr	r3, [r7, #16]
 800a634:	689a      	ldr	r2, [r3, #8]
 800a636:	693b      	ldr	r3, [r7, #16]
 800a638:	68db      	ldr	r3, [r3, #12]
 800a63a:	429a      	cmp	r2, r3
 800a63c:	d914      	bls.n	800a668 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a63e:	693b      	ldr	r3, [r7, #16]
 800a640:	689a      	ldr	r2, [r3, #8]
 800a642:	693b      	ldr	r3, [r7, #16]
 800a644:	68db      	ldr	r3, [r3, #12]
 800a646:	1ad2      	subs	r2, r2, r3
 800a648:	693b      	ldr	r3, [r7, #16]
 800a64a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a64c:	693b      	ldr	r3, [r7, #16]
 800a64e:	689b      	ldr	r3, [r3, #8]
 800a650:	461a      	mov	r2, r3
 800a652:	6879      	ldr	r1, [r7, #4]
 800a654:	68f8      	ldr	r0, [r7, #12]
 800a656:	f001 f8ac 	bl	800b7b2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a65a:	2300      	movs	r3, #0
 800a65c:	2200      	movs	r2, #0
 800a65e:	2100      	movs	r1, #0
 800a660:	68f8      	ldr	r0, [r7, #12]
 800a662:	f004 f847 	bl	800e6f4 <USBD_LL_PrepareReceive>
 800a666:	e03f      	b.n	800a6e8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a668:	693b      	ldr	r3, [r7, #16]
 800a66a:	68da      	ldr	r2, [r3, #12]
 800a66c:	693b      	ldr	r3, [r7, #16]
 800a66e:	689b      	ldr	r3, [r3, #8]
 800a670:	429a      	cmp	r2, r3
 800a672:	d11c      	bne.n	800a6ae <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a674:	693b      	ldr	r3, [r7, #16]
 800a676:	685a      	ldr	r2, [r3, #4]
 800a678:	693b      	ldr	r3, [r7, #16]
 800a67a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a67c:	429a      	cmp	r2, r3
 800a67e:	d316      	bcc.n	800a6ae <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a680:	693b      	ldr	r3, [r7, #16]
 800a682:	685a      	ldr	r2, [r3, #4]
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a68a:	429a      	cmp	r2, r3
 800a68c:	d20f      	bcs.n	800a6ae <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a68e:	2200      	movs	r2, #0
 800a690:	2100      	movs	r1, #0
 800a692:	68f8      	ldr	r0, [r7, #12]
 800a694:	f001 f88d 	bl	800b7b2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	2200      	movs	r2, #0
 800a69c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a6a0:	2300      	movs	r3, #0
 800a6a2:	2200      	movs	r2, #0
 800a6a4:	2100      	movs	r1, #0
 800a6a6:	68f8      	ldr	r0, [r7, #12]
 800a6a8:	f004 f824 	bl	800e6f4 <USBD_LL_PrepareReceive>
 800a6ac:	e01c      	b.n	800a6e8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a6b4:	b2db      	uxtb	r3, r3
 800a6b6:	2b03      	cmp	r3, #3
 800a6b8:	d10f      	bne.n	800a6da <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a6c0:	68db      	ldr	r3, [r3, #12]
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d009      	beq.n	800a6da <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	2200      	movs	r2, #0
 800a6ca:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a6d4:	68db      	ldr	r3, [r3, #12]
 800a6d6:	68f8      	ldr	r0, [r7, #12]
 800a6d8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a6da:	2180      	movs	r1, #128	; 0x80
 800a6dc:	68f8      	ldr	r0, [r7, #12]
 800a6de:	f003 ff5f 	bl	800e5a0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a6e2:	68f8      	ldr	r0, [r7, #12]
 800a6e4:	f001 f8b7 	bl	800b856 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d03a      	beq.n	800a768 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800a6f2:	68f8      	ldr	r0, [r7, #12]
 800a6f4:	f7ff fe42 	bl	800a37c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	2200      	movs	r2, #0
 800a6fc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a700:	e032      	b.n	800a768 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800a702:	7afb      	ldrb	r3, [r7, #11]
 800a704:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a708:	b2db      	uxtb	r3, r3
 800a70a:	4619      	mov	r1, r3
 800a70c:	68f8      	ldr	r0, [r7, #12]
 800a70e:	f000 f97f 	bl	800aa10 <USBD_CoreFindEP>
 800a712:	4603      	mov	r3, r0
 800a714:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a716:	7dfb      	ldrb	r3, [r7, #23]
 800a718:	2bff      	cmp	r3, #255	; 0xff
 800a71a:	d025      	beq.n	800a768 <USBD_LL_DataInStage+0x15a>
 800a71c:	7dfb      	ldrb	r3, [r7, #23]
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d122      	bne.n	800a768 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a728:	b2db      	uxtb	r3, r3
 800a72a:	2b03      	cmp	r3, #3
 800a72c:	d11c      	bne.n	800a768 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800a72e:	7dfa      	ldrb	r2, [r7, #23]
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	32ae      	adds	r2, #174	; 0xae
 800a734:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a738:	695b      	ldr	r3, [r3, #20]
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d014      	beq.n	800a768 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800a73e:	7dfa      	ldrb	r2, [r7, #23]
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800a746:	7dfa      	ldrb	r2, [r7, #23]
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	32ae      	adds	r2, #174	; 0xae
 800a74c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a750:	695b      	ldr	r3, [r3, #20]
 800a752:	7afa      	ldrb	r2, [r7, #11]
 800a754:	4611      	mov	r1, r2
 800a756:	68f8      	ldr	r0, [r7, #12]
 800a758:	4798      	blx	r3
 800a75a:	4603      	mov	r3, r0
 800a75c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800a75e:	7dbb      	ldrb	r3, [r7, #22]
 800a760:	2b00      	cmp	r3, #0
 800a762:	d001      	beq.n	800a768 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800a764:	7dbb      	ldrb	r3, [r7, #22]
 800a766:	e000      	b.n	800a76a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800a768:	2300      	movs	r3, #0
}
 800a76a:	4618      	mov	r0, r3
 800a76c:	3718      	adds	r7, #24
 800a76e:	46bd      	mov	sp, r7
 800a770:	bd80      	pop	{r7, pc}

0800a772 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a772:	b580      	push	{r7, lr}
 800a774:	b084      	sub	sp, #16
 800a776:	af00      	add	r7, sp, #0
 800a778:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800a77a:	2300      	movs	r3, #0
 800a77c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	2201      	movs	r2, #1
 800a782:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	2200      	movs	r2, #0
 800a78a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	2200      	movs	r2, #0
 800a792:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	2200      	movs	r2, #0
 800a798:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	2200      	movs	r2, #0
 800a7a0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d014      	beq.n	800a7d8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a7b4:	685b      	ldr	r3, [r3, #4]
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d00e      	beq.n	800a7d8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a7c0:	685b      	ldr	r3, [r3, #4]
 800a7c2:	687a      	ldr	r2, [r7, #4]
 800a7c4:	6852      	ldr	r2, [r2, #4]
 800a7c6:	b2d2      	uxtb	r2, r2
 800a7c8:	4611      	mov	r1, r2
 800a7ca:	6878      	ldr	r0, [r7, #4]
 800a7cc:	4798      	blx	r3
 800a7ce:	4603      	mov	r3, r0
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d001      	beq.n	800a7d8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800a7d4:	2303      	movs	r3, #3
 800a7d6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a7d8:	2340      	movs	r3, #64	; 0x40
 800a7da:	2200      	movs	r2, #0
 800a7dc:	2100      	movs	r1, #0
 800a7de:	6878      	ldr	r0, [r7, #4]
 800a7e0:	f003 fe99 	bl	800e516 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	2201      	movs	r2, #1
 800a7e8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	2240      	movs	r2, #64	; 0x40
 800a7f0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a7f4:	2340      	movs	r3, #64	; 0x40
 800a7f6:	2200      	movs	r2, #0
 800a7f8:	2180      	movs	r1, #128	; 0x80
 800a7fa:	6878      	ldr	r0, [r7, #4]
 800a7fc:	f003 fe8b 	bl	800e516 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	2201      	movs	r2, #1
 800a804:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	2240      	movs	r2, #64	; 0x40
 800a80a:	621a      	str	r2, [r3, #32]

  return ret;
 800a80c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a80e:	4618      	mov	r0, r3
 800a810:	3710      	adds	r7, #16
 800a812:	46bd      	mov	sp, r7
 800a814:	bd80      	pop	{r7, pc}

0800a816 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a816:	b480      	push	{r7}
 800a818:	b083      	sub	sp, #12
 800a81a:	af00      	add	r7, sp, #0
 800a81c:	6078      	str	r0, [r7, #4]
 800a81e:	460b      	mov	r3, r1
 800a820:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	78fa      	ldrb	r2, [r7, #3]
 800a826:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a828:	2300      	movs	r3, #0
}
 800a82a:	4618      	mov	r0, r3
 800a82c:	370c      	adds	r7, #12
 800a82e:	46bd      	mov	sp, r7
 800a830:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a834:	4770      	bx	lr

0800a836 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a836:	b480      	push	{r7}
 800a838:	b083      	sub	sp, #12
 800a83a:	af00      	add	r7, sp, #0
 800a83c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a844:	b2da      	uxtb	r2, r3
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	2204      	movs	r2, #4
 800a850:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a854:	2300      	movs	r3, #0
}
 800a856:	4618      	mov	r0, r3
 800a858:	370c      	adds	r7, #12
 800a85a:	46bd      	mov	sp, r7
 800a85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a860:	4770      	bx	lr

0800a862 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a862:	b480      	push	{r7}
 800a864:	b083      	sub	sp, #12
 800a866:	af00      	add	r7, sp, #0
 800a868:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a870:	b2db      	uxtb	r3, r3
 800a872:	2b04      	cmp	r3, #4
 800a874:	d106      	bne.n	800a884 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800a87c:	b2da      	uxtb	r2, r3
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a884:	2300      	movs	r3, #0
}
 800a886:	4618      	mov	r0, r3
 800a888:	370c      	adds	r7, #12
 800a88a:	46bd      	mov	sp, r7
 800a88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a890:	4770      	bx	lr

0800a892 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a892:	b580      	push	{r7, lr}
 800a894:	b082      	sub	sp, #8
 800a896:	af00      	add	r7, sp, #0
 800a898:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a8a0:	b2db      	uxtb	r3, r3
 800a8a2:	2b03      	cmp	r3, #3
 800a8a4:	d110      	bne.n	800a8c8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d00b      	beq.n	800a8c8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a8b6:	69db      	ldr	r3, [r3, #28]
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d005      	beq.n	800a8c8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a8c2:	69db      	ldr	r3, [r3, #28]
 800a8c4:	6878      	ldr	r0, [r7, #4]
 800a8c6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800a8c8:	2300      	movs	r3, #0
}
 800a8ca:	4618      	mov	r0, r3
 800a8cc:	3708      	adds	r7, #8
 800a8ce:	46bd      	mov	sp, r7
 800a8d0:	bd80      	pop	{r7, pc}

0800a8d2 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800a8d2:	b580      	push	{r7, lr}
 800a8d4:	b082      	sub	sp, #8
 800a8d6:	af00      	add	r7, sp, #0
 800a8d8:	6078      	str	r0, [r7, #4]
 800a8da:	460b      	mov	r3, r1
 800a8dc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	32ae      	adds	r2, #174	; 0xae
 800a8e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d101      	bne.n	800a8f4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800a8f0:	2303      	movs	r3, #3
 800a8f2:	e01c      	b.n	800a92e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a8fa:	b2db      	uxtb	r3, r3
 800a8fc:	2b03      	cmp	r3, #3
 800a8fe:	d115      	bne.n	800a92c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	32ae      	adds	r2, #174	; 0xae
 800a90a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a90e:	6a1b      	ldr	r3, [r3, #32]
 800a910:	2b00      	cmp	r3, #0
 800a912:	d00b      	beq.n	800a92c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	32ae      	adds	r2, #174	; 0xae
 800a91e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a922:	6a1b      	ldr	r3, [r3, #32]
 800a924:	78fa      	ldrb	r2, [r7, #3]
 800a926:	4611      	mov	r1, r2
 800a928:	6878      	ldr	r0, [r7, #4]
 800a92a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a92c:	2300      	movs	r3, #0
}
 800a92e:	4618      	mov	r0, r3
 800a930:	3708      	adds	r7, #8
 800a932:	46bd      	mov	sp, r7
 800a934:	bd80      	pop	{r7, pc}

0800a936 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800a936:	b580      	push	{r7, lr}
 800a938:	b082      	sub	sp, #8
 800a93a:	af00      	add	r7, sp, #0
 800a93c:	6078      	str	r0, [r7, #4]
 800a93e:	460b      	mov	r3, r1
 800a940:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	32ae      	adds	r2, #174	; 0xae
 800a94c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a950:	2b00      	cmp	r3, #0
 800a952:	d101      	bne.n	800a958 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800a954:	2303      	movs	r3, #3
 800a956:	e01c      	b.n	800a992 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a95e:	b2db      	uxtb	r3, r3
 800a960:	2b03      	cmp	r3, #3
 800a962:	d115      	bne.n	800a990 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	32ae      	adds	r2, #174	; 0xae
 800a96e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a974:	2b00      	cmp	r3, #0
 800a976:	d00b      	beq.n	800a990 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	32ae      	adds	r2, #174	; 0xae
 800a982:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a988:	78fa      	ldrb	r2, [r7, #3]
 800a98a:	4611      	mov	r1, r2
 800a98c:	6878      	ldr	r0, [r7, #4]
 800a98e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a990:	2300      	movs	r3, #0
}
 800a992:	4618      	mov	r0, r3
 800a994:	3708      	adds	r7, #8
 800a996:	46bd      	mov	sp, r7
 800a998:	bd80      	pop	{r7, pc}

0800a99a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800a99a:	b480      	push	{r7}
 800a99c:	b083      	sub	sp, #12
 800a99e:	af00      	add	r7, sp, #0
 800a9a0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a9a2:	2300      	movs	r3, #0
}
 800a9a4:	4618      	mov	r0, r3
 800a9a6:	370c      	adds	r7, #12
 800a9a8:	46bd      	mov	sp, r7
 800a9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ae:	4770      	bx	lr

0800a9b0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a9b0:	b580      	push	{r7, lr}
 800a9b2:	b084      	sub	sp, #16
 800a9b4:	af00      	add	r7, sp, #0
 800a9b6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800a9b8:	2300      	movs	r3, #0
 800a9ba:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	2201      	movs	r2, #1
 800a9c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d00e      	beq.n	800a9ec <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a9d4:	685b      	ldr	r3, [r3, #4]
 800a9d6:	687a      	ldr	r2, [r7, #4]
 800a9d8:	6852      	ldr	r2, [r2, #4]
 800a9da:	b2d2      	uxtb	r2, r2
 800a9dc:	4611      	mov	r1, r2
 800a9de:	6878      	ldr	r0, [r7, #4]
 800a9e0:	4798      	blx	r3
 800a9e2:	4603      	mov	r3, r0
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d001      	beq.n	800a9ec <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800a9e8:	2303      	movs	r3, #3
 800a9ea:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a9ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9ee:	4618      	mov	r0, r3
 800a9f0:	3710      	adds	r7, #16
 800a9f2:	46bd      	mov	sp, r7
 800a9f4:	bd80      	pop	{r7, pc}

0800a9f6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a9f6:	b480      	push	{r7}
 800a9f8:	b083      	sub	sp, #12
 800a9fa:	af00      	add	r7, sp, #0
 800a9fc:	6078      	str	r0, [r7, #4]
 800a9fe:	460b      	mov	r3, r1
 800aa00:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800aa02:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800aa04:	4618      	mov	r0, r3
 800aa06:	370c      	adds	r7, #12
 800aa08:	46bd      	mov	sp, r7
 800aa0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa0e:	4770      	bx	lr

0800aa10 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800aa10:	b480      	push	{r7}
 800aa12:	b083      	sub	sp, #12
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	6078      	str	r0, [r7, #4]
 800aa18:	460b      	mov	r3, r1
 800aa1a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800aa1c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800aa1e:	4618      	mov	r0, r3
 800aa20:	370c      	adds	r7, #12
 800aa22:	46bd      	mov	sp, r7
 800aa24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa28:	4770      	bx	lr

0800aa2a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800aa2a:	b580      	push	{r7, lr}
 800aa2c:	b086      	sub	sp, #24
 800aa2e:	af00      	add	r7, sp, #0
 800aa30:	6078      	str	r0, [r7, #4]
 800aa32:	460b      	mov	r3, r1
 800aa34:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800aa3e:	2300      	movs	r3, #0
 800aa40:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	885b      	ldrh	r3, [r3, #2]
 800aa46:	b29a      	uxth	r2, r3
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	781b      	ldrb	r3, [r3, #0]
 800aa4c:	b29b      	uxth	r3, r3
 800aa4e:	429a      	cmp	r2, r3
 800aa50:	d920      	bls.n	800aa94 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	781b      	ldrb	r3, [r3, #0]
 800aa56:	b29b      	uxth	r3, r3
 800aa58:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800aa5a:	e013      	b.n	800aa84 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800aa5c:	f107 030a 	add.w	r3, r7, #10
 800aa60:	4619      	mov	r1, r3
 800aa62:	6978      	ldr	r0, [r7, #20]
 800aa64:	f000 f81b 	bl	800aa9e <USBD_GetNextDesc>
 800aa68:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800aa6a:	697b      	ldr	r3, [r7, #20]
 800aa6c:	785b      	ldrb	r3, [r3, #1]
 800aa6e:	2b05      	cmp	r3, #5
 800aa70:	d108      	bne.n	800aa84 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800aa72:	697b      	ldr	r3, [r7, #20]
 800aa74:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800aa76:	693b      	ldr	r3, [r7, #16]
 800aa78:	789b      	ldrb	r3, [r3, #2]
 800aa7a:	78fa      	ldrb	r2, [r7, #3]
 800aa7c:	429a      	cmp	r2, r3
 800aa7e:	d008      	beq.n	800aa92 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800aa80:	2300      	movs	r3, #0
 800aa82:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	885b      	ldrh	r3, [r3, #2]
 800aa88:	b29a      	uxth	r2, r3
 800aa8a:	897b      	ldrh	r3, [r7, #10]
 800aa8c:	429a      	cmp	r2, r3
 800aa8e:	d8e5      	bhi.n	800aa5c <USBD_GetEpDesc+0x32>
 800aa90:	e000      	b.n	800aa94 <USBD_GetEpDesc+0x6a>
          break;
 800aa92:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800aa94:	693b      	ldr	r3, [r7, #16]
}
 800aa96:	4618      	mov	r0, r3
 800aa98:	3718      	adds	r7, #24
 800aa9a:	46bd      	mov	sp, r7
 800aa9c:	bd80      	pop	{r7, pc}

0800aa9e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800aa9e:	b480      	push	{r7}
 800aaa0:	b085      	sub	sp, #20
 800aaa2:	af00      	add	r7, sp, #0
 800aaa4:	6078      	str	r0, [r7, #4]
 800aaa6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800aaac:	683b      	ldr	r3, [r7, #0]
 800aaae:	881a      	ldrh	r2, [r3, #0]
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	781b      	ldrb	r3, [r3, #0]
 800aab4:	b29b      	uxth	r3, r3
 800aab6:	4413      	add	r3, r2
 800aab8:	b29a      	uxth	r2, r3
 800aaba:	683b      	ldr	r3, [r7, #0]
 800aabc:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	781b      	ldrb	r3, [r3, #0]
 800aac2:	461a      	mov	r2, r3
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	4413      	add	r3, r2
 800aac8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800aaca:	68fb      	ldr	r3, [r7, #12]
}
 800aacc:	4618      	mov	r0, r3
 800aace:	3714      	adds	r7, #20
 800aad0:	46bd      	mov	sp, r7
 800aad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad6:	4770      	bx	lr

0800aad8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800aad8:	b480      	push	{r7}
 800aada:	b087      	sub	sp, #28
 800aadc:	af00      	add	r7, sp, #0
 800aade:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800aae4:	697b      	ldr	r3, [r7, #20]
 800aae6:	781b      	ldrb	r3, [r3, #0]
 800aae8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800aaea:	697b      	ldr	r3, [r7, #20]
 800aaec:	3301      	adds	r3, #1
 800aaee:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800aaf0:	697b      	ldr	r3, [r7, #20]
 800aaf2:	781b      	ldrb	r3, [r3, #0]
 800aaf4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800aaf6:	8a3b      	ldrh	r3, [r7, #16]
 800aaf8:	021b      	lsls	r3, r3, #8
 800aafa:	b21a      	sxth	r2, r3
 800aafc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ab00:	4313      	orrs	r3, r2
 800ab02:	b21b      	sxth	r3, r3
 800ab04:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800ab06:	89fb      	ldrh	r3, [r7, #14]
}
 800ab08:	4618      	mov	r0, r3
 800ab0a:	371c      	adds	r7, #28
 800ab0c:	46bd      	mov	sp, r7
 800ab0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab12:	4770      	bx	lr

0800ab14 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ab14:	b580      	push	{r7, lr}
 800ab16:	b084      	sub	sp, #16
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	6078      	str	r0, [r7, #4]
 800ab1c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ab1e:	2300      	movs	r3, #0
 800ab20:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ab22:	683b      	ldr	r3, [r7, #0]
 800ab24:	781b      	ldrb	r3, [r3, #0]
 800ab26:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ab2a:	2b40      	cmp	r3, #64	; 0x40
 800ab2c:	d005      	beq.n	800ab3a <USBD_StdDevReq+0x26>
 800ab2e:	2b40      	cmp	r3, #64	; 0x40
 800ab30:	d857      	bhi.n	800abe2 <USBD_StdDevReq+0xce>
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d00f      	beq.n	800ab56 <USBD_StdDevReq+0x42>
 800ab36:	2b20      	cmp	r3, #32
 800ab38:	d153      	bne.n	800abe2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	32ae      	adds	r2, #174	; 0xae
 800ab44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab48:	689b      	ldr	r3, [r3, #8]
 800ab4a:	6839      	ldr	r1, [r7, #0]
 800ab4c:	6878      	ldr	r0, [r7, #4]
 800ab4e:	4798      	blx	r3
 800ab50:	4603      	mov	r3, r0
 800ab52:	73fb      	strb	r3, [r7, #15]
      break;
 800ab54:	e04a      	b.n	800abec <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ab56:	683b      	ldr	r3, [r7, #0]
 800ab58:	785b      	ldrb	r3, [r3, #1]
 800ab5a:	2b09      	cmp	r3, #9
 800ab5c:	d83b      	bhi.n	800abd6 <USBD_StdDevReq+0xc2>
 800ab5e:	a201      	add	r2, pc, #4	; (adr r2, 800ab64 <USBD_StdDevReq+0x50>)
 800ab60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab64:	0800abb9 	.word	0x0800abb9
 800ab68:	0800abcd 	.word	0x0800abcd
 800ab6c:	0800abd7 	.word	0x0800abd7
 800ab70:	0800abc3 	.word	0x0800abc3
 800ab74:	0800abd7 	.word	0x0800abd7
 800ab78:	0800ab97 	.word	0x0800ab97
 800ab7c:	0800ab8d 	.word	0x0800ab8d
 800ab80:	0800abd7 	.word	0x0800abd7
 800ab84:	0800abaf 	.word	0x0800abaf
 800ab88:	0800aba1 	.word	0x0800aba1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800ab8c:	6839      	ldr	r1, [r7, #0]
 800ab8e:	6878      	ldr	r0, [r7, #4]
 800ab90:	f000 fa3c 	bl	800b00c <USBD_GetDescriptor>
          break;
 800ab94:	e024      	b.n	800abe0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800ab96:	6839      	ldr	r1, [r7, #0]
 800ab98:	6878      	ldr	r0, [r7, #4]
 800ab9a:	f000 fba1 	bl	800b2e0 <USBD_SetAddress>
          break;
 800ab9e:	e01f      	b.n	800abe0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800aba0:	6839      	ldr	r1, [r7, #0]
 800aba2:	6878      	ldr	r0, [r7, #4]
 800aba4:	f000 fbe0 	bl	800b368 <USBD_SetConfig>
 800aba8:	4603      	mov	r3, r0
 800abaa:	73fb      	strb	r3, [r7, #15]
          break;
 800abac:	e018      	b.n	800abe0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800abae:	6839      	ldr	r1, [r7, #0]
 800abb0:	6878      	ldr	r0, [r7, #4]
 800abb2:	f000 fc83 	bl	800b4bc <USBD_GetConfig>
          break;
 800abb6:	e013      	b.n	800abe0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800abb8:	6839      	ldr	r1, [r7, #0]
 800abba:	6878      	ldr	r0, [r7, #4]
 800abbc:	f000 fcb4 	bl	800b528 <USBD_GetStatus>
          break;
 800abc0:	e00e      	b.n	800abe0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800abc2:	6839      	ldr	r1, [r7, #0]
 800abc4:	6878      	ldr	r0, [r7, #4]
 800abc6:	f000 fce3 	bl	800b590 <USBD_SetFeature>
          break;
 800abca:	e009      	b.n	800abe0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800abcc:	6839      	ldr	r1, [r7, #0]
 800abce:	6878      	ldr	r0, [r7, #4]
 800abd0:	f000 fd07 	bl	800b5e2 <USBD_ClrFeature>
          break;
 800abd4:	e004      	b.n	800abe0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800abd6:	6839      	ldr	r1, [r7, #0]
 800abd8:	6878      	ldr	r0, [r7, #4]
 800abda:	f000 fd5e 	bl	800b69a <USBD_CtlError>
          break;
 800abde:	bf00      	nop
      }
      break;
 800abe0:	e004      	b.n	800abec <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800abe2:	6839      	ldr	r1, [r7, #0]
 800abe4:	6878      	ldr	r0, [r7, #4]
 800abe6:	f000 fd58 	bl	800b69a <USBD_CtlError>
      break;
 800abea:	bf00      	nop
  }

  return ret;
 800abec:	7bfb      	ldrb	r3, [r7, #15]
}
 800abee:	4618      	mov	r0, r3
 800abf0:	3710      	adds	r7, #16
 800abf2:	46bd      	mov	sp, r7
 800abf4:	bd80      	pop	{r7, pc}
 800abf6:	bf00      	nop

0800abf8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800abf8:	b580      	push	{r7, lr}
 800abfa:	b084      	sub	sp, #16
 800abfc:	af00      	add	r7, sp, #0
 800abfe:	6078      	str	r0, [r7, #4]
 800ac00:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ac02:	2300      	movs	r3, #0
 800ac04:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ac06:	683b      	ldr	r3, [r7, #0]
 800ac08:	781b      	ldrb	r3, [r3, #0]
 800ac0a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ac0e:	2b40      	cmp	r3, #64	; 0x40
 800ac10:	d005      	beq.n	800ac1e <USBD_StdItfReq+0x26>
 800ac12:	2b40      	cmp	r3, #64	; 0x40
 800ac14:	d852      	bhi.n	800acbc <USBD_StdItfReq+0xc4>
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d001      	beq.n	800ac1e <USBD_StdItfReq+0x26>
 800ac1a:	2b20      	cmp	r3, #32
 800ac1c:	d14e      	bne.n	800acbc <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac24:	b2db      	uxtb	r3, r3
 800ac26:	3b01      	subs	r3, #1
 800ac28:	2b02      	cmp	r3, #2
 800ac2a:	d840      	bhi.n	800acae <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ac2c:	683b      	ldr	r3, [r7, #0]
 800ac2e:	889b      	ldrh	r3, [r3, #4]
 800ac30:	b2db      	uxtb	r3, r3
 800ac32:	2b01      	cmp	r3, #1
 800ac34:	d836      	bhi.n	800aca4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800ac36:	683b      	ldr	r3, [r7, #0]
 800ac38:	889b      	ldrh	r3, [r3, #4]
 800ac3a:	b2db      	uxtb	r3, r3
 800ac3c:	4619      	mov	r1, r3
 800ac3e:	6878      	ldr	r0, [r7, #4]
 800ac40:	f7ff fed9 	bl	800a9f6 <USBD_CoreFindIF>
 800ac44:	4603      	mov	r3, r0
 800ac46:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ac48:	7bbb      	ldrb	r3, [r7, #14]
 800ac4a:	2bff      	cmp	r3, #255	; 0xff
 800ac4c:	d01d      	beq.n	800ac8a <USBD_StdItfReq+0x92>
 800ac4e:	7bbb      	ldrb	r3, [r7, #14]
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d11a      	bne.n	800ac8a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800ac54:	7bba      	ldrb	r2, [r7, #14]
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	32ae      	adds	r2, #174	; 0xae
 800ac5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac5e:	689b      	ldr	r3, [r3, #8]
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d00f      	beq.n	800ac84 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800ac64:	7bba      	ldrb	r2, [r7, #14]
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ac6c:	7bba      	ldrb	r2, [r7, #14]
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	32ae      	adds	r2, #174	; 0xae
 800ac72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac76:	689b      	ldr	r3, [r3, #8]
 800ac78:	6839      	ldr	r1, [r7, #0]
 800ac7a:	6878      	ldr	r0, [r7, #4]
 800ac7c:	4798      	blx	r3
 800ac7e:	4603      	mov	r3, r0
 800ac80:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800ac82:	e004      	b.n	800ac8e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800ac84:	2303      	movs	r3, #3
 800ac86:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800ac88:	e001      	b.n	800ac8e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800ac8a:	2303      	movs	r3, #3
 800ac8c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800ac8e:	683b      	ldr	r3, [r7, #0]
 800ac90:	88db      	ldrh	r3, [r3, #6]
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d110      	bne.n	800acb8 <USBD_StdItfReq+0xc0>
 800ac96:	7bfb      	ldrb	r3, [r7, #15]
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d10d      	bne.n	800acb8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800ac9c:	6878      	ldr	r0, [r7, #4]
 800ac9e:	f000 fdc7 	bl	800b830 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800aca2:	e009      	b.n	800acb8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800aca4:	6839      	ldr	r1, [r7, #0]
 800aca6:	6878      	ldr	r0, [r7, #4]
 800aca8:	f000 fcf7 	bl	800b69a <USBD_CtlError>
          break;
 800acac:	e004      	b.n	800acb8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800acae:	6839      	ldr	r1, [r7, #0]
 800acb0:	6878      	ldr	r0, [r7, #4]
 800acb2:	f000 fcf2 	bl	800b69a <USBD_CtlError>
          break;
 800acb6:	e000      	b.n	800acba <USBD_StdItfReq+0xc2>
          break;
 800acb8:	bf00      	nop
      }
      break;
 800acba:	e004      	b.n	800acc6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800acbc:	6839      	ldr	r1, [r7, #0]
 800acbe:	6878      	ldr	r0, [r7, #4]
 800acc0:	f000 fceb 	bl	800b69a <USBD_CtlError>
      break;
 800acc4:	bf00      	nop
  }

  return ret;
 800acc6:	7bfb      	ldrb	r3, [r7, #15]
}
 800acc8:	4618      	mov	r0, r3
 800acca:	3710      	adds	r7, #16
 800accc:	46bd      	mov	sp, r7
 800acce:	bd80      	pop	{r7, pc}

0800acd0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800acd0:	b580      	push	{r7, lr}
 800acd2:	b084      	sub	sp, #16
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	6078      	str	r0, [r7, #4]
 800acd8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800acda:	2300      	movs	r3, #0
 800acdc:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800acde:	683b      	ldr	r3, [r7, #0]
 800ace0:	889b      	ldrh	r3, [r3, #4]
 800ace2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ace4:	683b      	ldr	r3, [r7, #0]
 800ace6:	781b      	ldrb	r3, [r3, #0]
 800ace8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800acec:	2b40      	cmp	r3, #64	; 0x40
 800acee:	d007      	beq.n	800ad00 <USBD_StdEPReq+0x30>
 800acf0:	2b40      	cmp	r3, #64	; 0x40
 800acf2:	f200 817f 	bhi.w	800aff4 <USBD_StdEPReq+0x324>
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d02a      	beq.n	800ad50 <USBD_StdEPReq+0x80>
 800acfa:	2b20      	cmp	r3, #32
 800acfc:	f040 817a 	bne.w	800aff4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800ad00:	7bbb      	ldrb	r3, [r7, #14]
 800ad02:	4619      	mov	r1, r3
 800ad04:	6878      	ldr	r0, [r7, #4]
 800ad06:	f7ff fe83 	bl	800aa10 <USBD_CoreFindEP>
 800ad0a:	4603      	mov	r3, r0
 800ad0c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ad0e:	7b7b      	ldrb	r3, [r7, #13]
 800ad10:	2bff      	cmp	r3, #255	; 0xff
 800ad12:	f000 8174 	beq.w	800affe <USBD_StdEPReq+0x32e>
 800ad16:	7b7b      	ldrb	r3, [r7, #13]
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	f040 8170 	bne.w	800affe <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800ad1e:	7b7a      	ldrb	r2, [r7, #13]
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800ad26:	7b7a      	ldrb	r2, [r7, #13]
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	32ae      	adds	r2, #174	; 0xae
 800ad2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad30:	689b      	ldr	r3, [r3, #8]
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	f000 8163 	beq.w	800affe <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800ad38:	7b7a      	ldrb	r2, [r7, #13]
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	32ae      	adds	r2, #174	; 0xae
 800ad3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad42:	689b      	ldr	r3, [r3, #8]
 800ad44:	6839      	ldr	r1, [r7, #0]
 800ad46:	6878      	ldr	r0, [r7, #4]
 800ad48:	4798      	blx	r3
 800ad4a:	4603      	mov	r3, r0
 800ad4c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800ad4e:	e156      	b.n	800affe <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ad50:	683b      	ldr	r3, [r7, #0]
 800ad52:	785b      	ldrb	r3, [r3, #1]
 800ad54:	2b03      	cmp	r3, #3
 800ad56:	d008      	beq.n	800ad6a <USBD_StdEPReq+0x9a>
 800ad58:	2b03      	cmp	r3, #3
 800ad5a:	f300 8145 	bgt.w	800afe8 <USBD_StdEPReq+0x318>
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	f000 809b 	beq.w	800ae9a <USBD_StdEPReq+0x1ca>
 800ad64:	2b01      	cmp	r3, #1
 800ad66:	d03c      	beq.n	800ade2 <USBD_StdEPReq+0x112>
 800ad68:	e13e      	b.n	800afe8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad70:	b2db      	uxtb	r3, r3
 800ad72:	2b02      	cmp	r3, #2
 800ad74:	d002      	beq.n	800ad7c <USBD_StdEPReq+0xac>
 800ad76:	2b03      	cmp	r3, #3
 800ad78:	d016      	beq.n	800ada8 <USBD_StdEPReq+0xd8>
 800ad7a:	e02c      	b.n	800add6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ad7c:	7bbb      	ldrb	r3, [r7, #14]
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d00d      	beq.n	800ad9e <USBD_StdEPReq+0xce>
 800ad82:	7bbb      	ldrb	r3, [r7, #14]
 800ad84:	2b80      	cmp	r3, #128	; 0x80
 800ad86:	d00a      	beq.n	800ad9e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ad88:	7bbb      	ldrb	r3, [r7, #14]
 800ad8a:	4619      	mov	r1, r3
 800ad8c:	6878      	ldr	r0, [r7, #4]
 800ad8e:	f003 fc07 	bl	800e5a0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ad92:	2180      	movs	r1, #128	; 0x80
 800ad94:	6878      	ldr	r0, [r7, #4]
 800ad96:	f003 fc03 	bl	800e5a0 <USBD_LL_StallEP>
 800ad9a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ad9c:	e020      	b.n	800ade0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800ad9e:	6839      	ldr	r1, [r7, #0]
 800ada0:	6878      	ldr	r0, [r7, #4]
 800ada2:	f000 fc7a 	bl	800b69a <USBD_CtlError>
              break;
 800ada6:	e01b      	b.n	800ade0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ada8:	683b      	ldr	r3, [r7, #0]
 800adaa:	885b      	ldrh	r3, [r3, #2]
 800adac:	2b00      	cmp	r3, #0
 800adae:	d10e      	bne.n	800adce <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800adb0:	7bbb      	ldrb	r3, [r7, #14]
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d00b      	beq.n	800adce <USBD_StdEPReq+0xfe>
 800adb6:	7bbb      	ldrb	r3, [r7, #14]
 800adb8:	2b80      	cmp	r3, #128	; 0x80
 800adba:	d008      	beq.n	800adce <USBD_StdEPReq+0xfe>
 800adbc:	683b      	ldr	r3, [r7, #0]
 800adbe:	88db      	ldrh	r3, [r3, #6]
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d104      	bne.n	800adce <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800adc4:	7bbb      	ldrb	r3, [r7, #14]
 800adc6:	4619      	mov	r1, r3
 800adc8:	6878      	ldr	r0, [r7, #4]
 800adca:	f003 fbe9 	bl	800e5a0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800adce:	6878      	ldr	r0, [r7, #4]
 800add0:	f000 fd2e 	bl	800b830 <USBD_CtlSendStatus>

              break;
 800add4:	e004      	b.n	800ade0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800add6:	6839      	ldr	r1, [r7, #0]
 800add8:	6878      	ldr	r0, [r7, #4]
 800adda:	f000 fc5e 	bl	800b69a <USBD_CtlError>
              break;
 800adde:	bf00      	nop
          }
          break;
 800ade0:	e107      	b.n	800aff2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ade8:	b2db      	uxtb	r3, r3
 800adea:	2b02      	cmp	r3, #2
 800adec:	d002      	beq.n	800adf4 <USBD_StdEPReq+0x124>
 800adee:	2b03      	cmp	r3, #3
 800adf0:	d016      	beq.n	800ae20 <USBD_StdEPReq+0x150>
 800adf2:	e04b      	b.n	800ae8c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800adf4:	7bbb      	ldrb	r3, [r7, #14]
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d00d      	beq.n	800ae16 <USBD_StdEPReq+0x146>
 800adfa:	7bbb      	ldrb	r3, [r7, #14]
 800adfc:	2b80      	cmp	r3, #128	; 0x80
 800adfe:	d00a      	beq.n	800ae16 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ae00:	7bbb      	ldrb	r3, [r7, #14]
 800ae02:	4619      	mov	r1, r3
 800ae04:	6878      	ldr	r0, [r7, #4]
 800ae06:	f003 fbcb 	bl	800e5a0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ae0a:	2180      	movs	r1, #128	; 0x80
 800ae0c:	6878      	ldr	r0, [r7, #4]
 800ae0e:	f003 fbc7 	bl	800e5a0 <USBD_LL_StallEP>
 800ae12:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ae14:	e040      	b.n	800ae98 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800ae16:	6839      	ldr	r1, [r7, #0]
 800ae18:	6878      	ldr	r0, [r7, #4]
 800ae1a:	f000 fc3e 	bl	800b69a <USBD_CtlError>
              break;
 800ae1e:	e03b      	b.n	800ae98 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ae20:	683b      	ldr	r3, [r7, #0]
 800ae22:	885b      	ldrh	r3, [r3, #2]
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d136      	bne.n	800ae96 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800ae28:	7bbb      	ldrb	r3, [r7, #14]
 800ae2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d004      	beq.n	800ae3c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800ae32:	7bbb      	ldrb	r3, [r7, #14]
 800ae34:	4619      	mov	r1, r3
 800ae36:	6878      	ldr	r0, [r7, #4]
 800ae38:	f003 fbd1 	bl	800e5de <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800ae3c:	6878      	ldr	r0, [r7, #4]
 800ae3e:	f000 fcf7 	bl	800b830 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800ae42:	7bbb      	ldrb	r3, [r7, #14]
 800ae44:	4619      	mov	r1, r3
 800ae46:	6878      	ldr	r0, [r7, #4]
 800ae48:	f7ff fde2 	bl	800aa10 <USBD_CoreFindEP>
 800ae4c:	4603      	mov	r3, r0
 800ae4e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ae50:	7b7b      	ldrb	r3, [r7, #13]
 800ae52:	2bff      	cmp	r3, #255	; 0xff
 800ae54:	d01f      	beq.n	800ae96 <USBD_StdEPReq+0x1c6>
 800ae56:	7b7b      	ldrb	r3, [r7, #13]
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d11c      	bne.n	800ae96 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800ae5c:	7b7a      	ldrb	r2, [r7, #13]
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800ae64:	7b7a      	ldrb	r2, [r7, #13]
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	32ae      	adds	r2, #174	; 0xae
 800ae6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae6e:	689b      	ldr	r3, [r3, #8]
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d010      	beq.n	800ae96 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ae74:	7b7a      	ldrb	r2, [r7, #13]
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	32ae      	adds	r2, #174	; 0xae
 800ae7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae7e:	689b      	ldr	r3, [r3, #8]
 800ae80:	6839      	ldr	r1, [r7, #0]
 800ae82:	6878      	ldr	r0, [r7, #4]
 800ae84:	4798      	blx	r3
 800ae86:	4603      	mov	r3, r0
 800ae88:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800ae8a:	e004      	b.n	800ae96 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800ae8c:	6839      	ldr	r1, [r7, #0]
 800ae8e:	6878      	ldr	r0, [r7, #4]
 800ae90:	f000 fc03 	bl	800b69a <USBD_CtlError>
              break;
 800ae94:	e000      	b.n	800ae98 <USBD_StdEPReq+0x1c8>
              break;
 800ae96:	bf00      	nop
          }
          break;
 800ae98:	e0ab      	b.n	800aff2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aea0:	b2db      	uxtb	r3, r3
 800aea2:	2b02      	cmp	r3, #2
 800aea4:	d002      	beq.n	800aeac <USBD_StdEPReq+0x1dc>
 800aea6:	2b03      	cmp	r3, #3
 800aea8:	d032      	beq.n	800af10 <USBD_StdEPReq+0x240>
 800aeaa:	e097      	b.n	800afdc <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800aeac:	7bbb      	ldrb	r3, [r7, #14]
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d007      	beq.n	800aec2 <USBD_StdEPReq+0x1f2>
 800aeb2:	7bbb      	ldrb	r3, [r7, #14]
 800aeb4:	2b80      	cmp	r3, #128	; 0x80
 800aeb6:	d004      	beq.n	800aec2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800aeb8:	6839      	ldr	r1, [r7, #0]
 800aeba:	6878      	ldr	r0, [r7, #4]
 800aebc:	f000 fbed 	bl	800b69a <USBD_CtlError>
                break;
 800aec0:	e091      	b.n	800afe6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aec2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	da0b      	bge.n	800aee2 <USBD_StdEPReq+0x212>
 800aeca:	7bbb      	ldrb	r3, [r7, #14]
 800aecc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800aed0:	4613      	mov	r3, r2
 800aed2:	009b      	lsls	r3, r3, #2
 800aed4:	4413      	add	r3, r2
 800aed6:	009b      	lsls	r3, r3, #2
 800aed8:	3310      	adds	r3, #16
 800aeda:	687a      	ldr	r2, [r7, #4]
 800aedc:	4413      	add	r3, r2
 800aede:	3304      	adds	r3, #4
 800aee0:	e00b      	b.n	800aefa <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800aee2:	7bbb      	ldrb	r3, [r7, #14]
 800aee4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aee8:	4613      	mov	r3, r2
 800aeea:	009b      	lsls	r3, r3, #2
 800aeec:	4413      	add	r3, r2
 800aeee:	009b      	lsls	r3, r3, #2
 800aef0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800aef4:	687a      	ldr	r2, [r7, #4]
 800aef6:	4413      	add	r3, r2
 800aef8:	3304      	adds	r3, #4
 800aefa:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800aefc:	68bb      	ldr	r3, [r7, #8]
 800aefe:	2200      	movs	r2, #0
 800af00:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800af02:	68bb      	ldr	r3, [r7, #8]
 800af04:	2202      	movs	r2, #2
 800af06:	4619      	mov	r1, r3
 800af08:	6878      	ldr	r0, [r7, #4]
 800af0a:	f000 fc37 	bl	800b77c <USBD_CtlSendData>
              break;
 800af0e:	e06a      	b.n	800afe6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800af10:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800af14:	2b00      	cmp	r3, #0
 800af16:	da11      	bge.n	800af3c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800af18:	7bbb      	ldrb	r3, [r7, #14]
 800af1a:	f003 020f 	and.w	r2, r3, #15
 800af1e:	6879      	ldr	r1, [r7, #4]
 800af20:	4613      	mov	r3, r2
 800af22:	009b      	lsls	r3, r3, #2
 800af24:	4413      	add	r3, r2
 800af26:	009b      	lsls	r3, r3, #2
 800af28:	440b      	add	r3, r1
 800af2a:	3324      	adds	r3, #36	; 0x24
 800af2c:	881b      	ldrh	r3, [r3, #0]
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d117      	bne.n	800af62 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800af32:	6839      	ldr	r1, [r7, #0]
 800af34:	6878      	ldr	r0, [r7, #4]
 800af36:	f000 fbb0 	bl	800b69a <USBD_CtlError>
                  break;
 800af3a:	e054      	b.n	800afe6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800af3c:	7bbb      	ldrb	r3, [r7, #14]
 800af3e:	f003 020f 	and.w	r2, r3, #15
 800af42:	6879      	ldr	r1, [r7, #4]
 800af44:	4613      	mov	r3, r2
 800af46:	009b      	lsls	r3, r3, #2
 800af48:	4413      	add	r3, r2
 800af4a:	009b      	lsls	r3, r3, #2
 800af4c:	440b      	add	r3, r1
 800af4e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800af52:	881b      	ldrh	r3, [r3, #0]
 800af54:	2b00      	cmp	r3, #0
 800af56:	d104      	bne.n	800af62 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800af58:	6839      	ldr	r1, [r7, #0]
 800af5a:	6878      	ldr	r0, [r7, #4]
 800af5c:	f000 fb9d 	bl	800b69a <USBD_CtlError>
                  break;
 800af60:	e041      	b.n	800afe6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800af62:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800af66:	2b00      	cmp	r3, #0
 800af68:	da0b      	bge.n	800af82 <USBD_StdEPReq+0x2b2>
 800af6a:	7bbb      	ldrb	r3, [r7, #14]
 800af6c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800af70:	4613      	mov	r3, r2
 800af72:	009b      	lsls	r3, r3, #2
 800af74:	4413      	add	r3, r2
 800af76:	009b      	lsls	r3, r3, #2
 800af78:	3310      	adds	r3, #16
 800af7a:	687a      	ldr	r2, [r7, #4]
 800af7c:	4413      	add	r3, r2
 800af7e:	3304      	adds	r3, #4
 800af80:	e00b      	b.n	800af9a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800af82:	7bbb      	ldrb	r3, [r7, #14]
 800af84:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800af88:	4613      	mov	r3, r2
 800af8a:	009b      	lsls	r3, r3, #2
 800af8c:	4413      	add	r3, r2
 800af8e:	009b      	lsls	r3, r3, #2
 800af90:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800af94:	687a      	ldr	r2, [r7, #4]
 800af96:	4413      	add	r3, r2
 800af98:	3304      	adds	r3, #4
 800af9a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800af9c:	7bbb      	ldrb	r3, [r7, #14]
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d002      	beq.n	800afa8 <USBD_StdEPReq+0x2d8>
 800afa2:	7bbb      	ldrb	r3, [r7, #14]
 800afa4:	2b80      	cmp	r3, #128	; 0x80
 800afa6:	d103      	bne.n	800afb0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800afa8:	68bb      	ldr	r3, [r7, #8]
 800afaa:	2200      	movs	r2, #0
 800afac:	601a      	str	r2, [r3, #0]
 800afae:	e00e      	b.n	800afce <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800afb0:	7bbb      	ldrb	r3, [r7, #14]
 800afb2:	4619      	mov	r1, r3
 800afb4:	6878      	ldr	r0, [r7, #4]
 800afb6:	f003 fb31 	bl	800e61c <USBD_LL_IsStallEP>
 800afba:	4603      	mov	r3, r0
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d003      	beq.n	800afc8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800afc0:	68bb      	ldr	r3, [r7, #8]
 800afc2:	2201      	movs	r2, #1
 800afc4:	601a      	str	r2, [r3, #0]
 800afc6:	e002      	b.n	800afce <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800afc8:	68bb      	ldr	r3, [r7, #8]
 800afca:	2200      	movs	r2, #0
 800afcc:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800afce:	68bb      	ldr	r3, [r7, #8]
 800afd0:	2202      	movs	r2, #2
 800afd2:	4619      	mov	r1, r3
 800afd4:	6878      	ldr	r0, [r7, #4]
 800afd6:	f000 fbd1 	bl	800b77c <USBD_CtlSendData>
              break;
 800afda:	e004      	b.n	800afe6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800afdc:	6839      	ldr	r1, [r7, #0]
 800afde:	6878      	ldr	r0, [r7, #4]
 800afe0:	f000 fb5b 	bl	800b69a <USBD_CtlError>
              break;
 800afe4:	bf00      	nop
          }
          break;
 800afe6:	e004      	b.n	800aff2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800afe8:	6839      	ldr	r1, [r7, #0]
 800afea:	6878      	ldr	r0, [r7, #4]
 800afec:	f000 fb55 	bl	800b69a <USBD_CtlError>
          break;
 800aff0:	bf00      	nop
      }
      break;
 800aff2:	e005      	b.n	800b000 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800aff4:	6839      	ldr	r1, [r7, #0]
 800aff6:	6878      	ldr	r0, [r7, #4]
 800aff8:	f000 fb4f 	bl	800b69a <USBD_CtlError>
      break;
 800affc:	e000      	b.n	800b000 <USBD_StdEPReq+0x330>
      break;
 800affe:	bf00      	nop
  }

  return ret;
 800b000:	7bfb      	ldrb	r3, [r7, #15]
}
 800b002:	4618      	mov	r0, r3
 800b004:	3710      	adds	r7, #16
 800b006:	46bd      	mov	sp, r7
 800b008:	bd80      	pop	{r7, pc}
	...

0800b00c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b00c:	b580      	push	{r7, lr}
 800b00e:	b084      	sub	sp, #16
 800b010:	af00      	add	r7, sp, #0
 800b012:	6078      	str	r0, [r7, #4]
 800b014:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b016:	2300      	movs	r3, #0
 800b018:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b01a:	2300      	movs	r3, #0
 800b01c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b01e:	2300      	movs	r3, #0
 800b020:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b022:	683b      	ldr	r3, [r7, #0]
 800b024:	885b      	ldrh	r3, [r3, #2]
 800b026:	0a1b      	lsrs	r3, r3, #8
 800b028:	b29b      	uxth	r3, r3
 800b02a:	3b01      	subs	r3, #1
 800b02c:	2b06      	cmp	r3, #6
 800b02e:	f200 8128 	bhi.w	800b282 <USBD_GetDescriptor+0x276>
 800b032:	a201      	add	r2, pc, #4	; (adr r2, 800b038 <USBD_GetDescriptor+0x2c>)
 800b034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b038:	0800b055 	.word	0x0800b055
 800b03c:	0800b06d 	.word	0x0800b06d
 800b040:	0800b0ad 	.word	0x0800b0ad
 800b044:	0800b283 	.word	0x0800b283
 800b048:	0800b283 	.word	0x0800b283
 800b04c:	0800b223 	.word	0x0800b223
 800b050:	0800b24f 	.word	0x0800b24f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	687a      	ldr	r2, [r7, #4]
 800b05e:	7c12      	ldrb	r2, [r2, #16]
 800b060:	f107 0108 	add.w	r1, r7, #8
 800b064:	4610      	mov	r0, r2
 800b066:	4798      	blx	r3
 800b068:	60f8      	str	r0, [r7, #12]
      break;
 800b06a:	e112      	b.n	800b292 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	7c1b      	ldrb	r3, [r3, #16]
 800b070:	2b00      	cmp	r3, #0
 800b072:	d10d      	bne.n	800b090 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b07a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b07c:	f107 0208 	add.w	r2, r7, #8
 800b080:	4610      	mov	r0, r2
 800b082:	4798      	blx	r3
 800b084:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	3301      	adds	r3, #1
 800b08a:	2202      	movs	r2, #2
 800b08c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b08e:	e100      	b.n	800b292 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b098:	f107 0208 	add.w	r2, r7, #8
 800b09c:	4610      	mov	r0, r2
 800b09e:	4798      	blx	r3
 800b0a0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	3301      	adds	r3, #1
 800b0a6:	2202      	movs	r2, #2
 800b0a8:	701a      	strb	r2, [r3, #0]
      break;
 800b0aa:	e0f2      	b.n	800b292 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b0ac:	683b      	ldr	r3, [r7, #0]
 800b0ae:	885b      	ldrh	r3, [r3, #2]
 800b0b0:	b2db      	uxtb	r3, r3
 800b0b2:	2b05      	cmp	r3, #5
 800b0b4:	f200 80ac 	bhi.w	800b210 <USBD_GetDescriptor+0x204>
 800b0b8:	a201      	add	r2, pc, #4	; (adr r2, 800b0c0 <USBD_GetDescriptor+0xb4>)
 800b0ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0be:	bf00      	nop
 800b0c0:	0800b0d9 	.word	0x0800b0d9
 800b0c4:	0800b10d 	.word	0x0800b10d
 800b0c8:	0800b141 	.word	0x0800b141
 800b0cc:	0800b175 	.word	0x0800b175
 800b0d0:	0800b1a9 	.word	0x0800b1a9
 800b0d4:	0800b1dd 	.word	0x0800b1dd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b0de:	685b      	ldr	r3, [r3, #4]
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d00b      	beq.n	800b0fc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b0ea:	685b      	ldr	r3, [r3, #4]
 800b0ec:	687a      	ldr	r2, [r7, #4]
 800b0ee:	7c12      	ldrb	r2, [r2, #16]
 800b0f0:	f107 0108 	add.w	r1, r7, #8
 800b0f4:	4610      	mov	r0, r2
 800b0f6:	4798      	blx	r3
 800b0f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b0fa:	e091      	b.n	800b220 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b0fc:	6839      	ldr	r1, [r7, #0]
 800b0fe:	6878      	ldr	r0, [r7, #4]
 800b100:	f000 facb 	bl	800b69a <USBD_CtlError>
            err++;
 800b104:	7afb      	ldrb	r3, [r7, #11]
 800b106:	3301      	adds	r3, #1
 800b108:	72fb      	strb	r3, [r7, #11]
          break;
 800b10a:	e089      	b.n	800b220 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b112:	689b      	ldr	r3, [r3, #8]
 800b114:	2b00      	cmp	r3, #0
 800b116:	d00b      	beq.n	800b130 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b11e:	689b      	ldr	r3, [r3, #8]
 800b120:	687a      	ldr	r2, [r7, #4]
 800b122:	7c12      	ldrb	r2, [r2, #16]
 800b124:	f107 0108 	add.w	r1, r7, #8
 800b128:	4610      	mov	r0, r2
 800b12a:	4798      	blx	r3
 800b12c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b12e:	e077      	b.n	800b220 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b130:	6839      	ldr	r1, [r7, #0]
 800b132:	6878      	ldr	r0, [r7, #4]
 800b134:	f000 fab1 	bl	800b69a <USBD_CtlError>
            err++;
 800b138:	7afb      	ldrb	r3, [r7, #11]
 800b13a:	3301      	adds	r3, #1
 800b13c:	72fb      	strb	r3, [r7, #11]
          break;
 800b13e:	e06f      	b.n	800b220 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b146:	68db      	ldr	r3, [r3, #12]
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d00b      	beq.n	800b164 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b152:	68db      	ldr	r3, [r3, #12]
 800b154:	687a      	ldr	r2, [r7, #4]
 800b156:	7c12      	ldrb	r2, [r2, #16]
 800b158:	f107 0108 	add.w	r1, r7, #8
 800b15c:	4610      	mov	r0, r2
 800b15e:	4798      	blx	r3
 800b160:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b162:	e05d      	b.n	800b220 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b164:	6839      	ldr	r1, [r7, #0]
 800b166:	6878      	ldr	r0, [r7, #4]
 800b168:	f000 fa97 	bl	800b69a <USBD_CtlError>
            err++;
 800b16c:	7afb      	ldrb	r3, [r7, #11]
 800b16e:	3301      	adds	r3, #1
 800b170:	72fb      	strb	r3, [r7, #11]
          break;
 800b172:	e055      	b.n	800b220 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b17a:	691b      	ldr	r3, [r3, #16]
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d00b      	beq.n	800b198 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b186:	691b      	ldr	r3, [r3, #16]
 800b188:	687a      	ldr	r2, [r7, #4]
 800b18a:	7c12      	ldrb	r2, [r2, #16]
 800b18c:	f107 0108 	add.w	r1, r7, #8
 800b190:	4610      	mov	r0, r2
 800b192:	4798      	blx	r3
 800b194:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b196:	e043      	b.n	800b220 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b198:	6839      	ldr	r1, [r7, #0]
 800b19a:	6878      	ldr	r0, [r7, #4]
 800b19c:	f000 fa7d 	bl	800b69a <USBD_CtlError>
            err++;
 800b1a0:	7afb      	ldrb	r3, [r7, #11]
 800b1a2:	3301      	adds	r3, #1
 800b1a4:	72fb      	strb	r3, [r7, #11]
          break;
 800b1a6:	e03b      	b.n	800b220 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b1ae:	695b      	ldr	r3, [r3, #20]
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d00b      	beq.n	800b1cc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b1ba:	695b      	ldr	r3, [r3, #20]
 800b1bc:	687a      	ldr	r2, [r7, #4]
 800b1be:	7c12      	ldrb	r2, [r2, #16]
 800b1c0:	f107 0108 	add.w	r1, r7, #8
 800b1c4:	4610      	mov	r0, r2
 800b1c6:	4798      	blx	r3
 800b1c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b1ca:	e029      	b.n	800b220 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b1cc:	6839      	ldr	r1, [r7, #0]
 800b1ce:	6878      	ldr	r0, [r7, #4]
 800b1d0:	f000 fa63 	bl	800b69a <USBD_CtlError>
            err++;
 800b1d4:	7afb      	ldrb	r3, [r7, #11]
 800b1d6:	3301      	adds	r3, #1
 800b1d8:	72fb      	strb	r3, [r7, #11]
          break;
 800b1da:	e021      	b.n	800b220 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b1e2:	699b      	ldr	r3, [r3, #24]
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d00b      	beq.n	800b200 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b1ee:	699b      	ldr	r3, [r3, #24]
 800b1f0:	687a      	ldr	r2, [r7, #4]
 800b1f2:	7c12      	ldrb	r2, [r2, #16]
 800b1f4:	f107 0108 	add.w	r1, r7, #8
 800b1f8:	4610      	mov	r0, r2
 800b1fa:	4798      	blx	r3
 800b1fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b1fe:	e00f      	b.n	800b220 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b200:	6839      	ldr	r1, [r7, #0]
 800b202:	6878      	ldr	r0, [r7, #4]
 800b204:	f000 fa49 	bl	800b69a <USBD_CtlError>
            err++;
 800b208:	7afb      	ldrb	r3, [r7, #11]
 800b20a:	3301      	adds	r3, #1
 800b20c:	72fb      	strb	r3, [r7, #11]
          break;
 800b20e:	e007      	b.n	800b220 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b210:	6839      	ldr	r1, [r7, #0]
 800b212:	6878      	ldr	r0, [r7, #4]
 800b214:	f000 fa41 	bl	800b69a <USBD_CtlError>
          err++;
 800b218:	7afb      	ldrb	r3, [r7, #11]
 800b21a:	3301      	adds	r3, #1
 800b21c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800b21e:	bf00      	nop
      }
      break;
 800b220:	e037      	b.n	800b292 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	7c1b      	ldrb	r3, [r3, #16]
 800b226:	2b00      	cmp	r3, #0
 800b228:	d109      	bne.n	800b23e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b230:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b232:	f107 0208 	add.w	r2, r7, #8
 800b236:	4610      	mov	r0, r2
 800b238:	4798      	blx	r3
 800b23a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b23c:	e029      	b.n	800b292 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b23e:	6839      	ldr	r1, [r7, #0]
 800b240:	6878      	ldr	r0, [r7, #4]
 800b242:	f000 fa2a 	bl	800b69a <USBD_CtlError>
        err++;
 800b246:	7afb      	ldrb	r3, [r7, #11]
 800b248:	3301      	adds	r3, #1
 800b24a:	72fb      	strb	r3, [r7, #11]
      break;
 800b24c:	e021      	b.n	800b292 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	7c1b      	ldrb	r3, [r3, #16]
 800b252:	2b00      	cmp	r3, #0
 800b254:	d10d      	bne.n	800b272 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b25c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b25e:	f107 0208 	add.w	r2, r7, #8
 800b262:	4610      	mov	r0, r2
 800b264:	4798      	blx	r3
 800b266:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	3301      	adds	r3, #1
 800b26c:	2207      	movs	r2, #7
 800b26e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b270:	e00f      	b.n	800b292 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b272:	6839      	ldr	r1, [r7, #0]
 800b274:	6878      	ldr	r0, [r7, #4]
 800b276:	f000 fa10 	bl	800b69a <USBD_CtlError>
        err++;
 800b27a:	7afb      	ldrb	r3, [r7, #11]
 800b27c:	3301      	adds	r3, #1
 800b27e:	72fb      	strb	r3, [r7, #11]
      break;
 800b280:	e007      	b.n	800b292 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800b282:	6839      	ldr	r1, [r7, #0]
 800b284:	6878      	ldr	r0, [r7, #4]
 800b286:	f000 fa08 	bl	800b69a <USBD_CtlError>
      err++;
 800b28a:	7afb      	ldrb	r3, [r7, #11]
 800b28c:	3301      	adds	r3, #1
 800b28e:	72fb      	strb	r3, [r7, #11]
      break;
 800b290:	bf00      	nop
  }

  if (err != 0U)
 800b292:	7afb      	ldrb	r3, [r7, #11]
 800b294:	2b00      	cmp	r3, #0
 800b296:	d11e      	bne.n	800b2d6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800b298:	683b      	ldr	r3, [r7, #0]
 800b29a:	88db      	ldrh	r3, [r3, #6]
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d016      	beq.n	800b2ce <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800b2a0:	893b      	ldrh	r3, [r7, #8]
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d00e      	beq.n	800b2c4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800b2a6:	683b      	ldr	r3, [r7, #0]
 800b2a8:	88da      	ldrh	r2, [r3, #6]
 800b2aa:	893b      	ldrh	r3, [r7, #8]
 800b2ac:	4293      	cmp	r3, r2
 800b2ae:	bf28      	it	cs
 800b2b0:	4613      	movcs	r3, r2
 800b2b2:	b29b      	uxth	r3, r3
 800b2b4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b2b6:	893b      	ldrh	r3, [r7, #8]
 800b2b8:	461a      	mov	r2, r3
 800b2ba:	68f9      	ldr	r1, [r7, #12]
 800b2bc:	6878      	ldr	r0, [r7, #4]
 800b2be:	f000 fa5d 	bl	800b77c <USBD_CtlSendData>
 800b2c2:	e009      	b.n	800b2d8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b2c4:	6839      	ldr	r1, [r7, #0]
 800b2c6:	6878      	ldr	r0, [r7, #4]
 800b2c8:	f000 f9e7 	bl	800b69a <USBD_CtlError>
 800b2cc:	e004      	b.n	800b2d8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b2ce:	6878      	ldr	r0, [r7, #4]
 800b2d0:	f000 faae 	bl	800b830 <USBD_CtlSendStatus>
 800b2d4:	e000      	b.n	800b2d8 <USBD_GetDescriptor+0x2cc>
    return;
 800b2d6:	bf00      	nop
  }
}
 800b2d8:	3710      	adds	r7, #16
 800b2da:	46bd      	mov	sp, r7
 800b2dc:	bd80      	pop	{r7, pc}
 800b2de:	bf00      	nop

0800b2e0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b2e0:	b580      	push	{r7, lr}
 800b2e2:	b084      	sub	sp, #16
 800b2e4:	af00      	add	r7, sp, #0
 800b2e6:	6078      	str	r0, [r7, #4]
 800b2e8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b2ea:	683b      	ldr	r3, [r7, #0]
 800b2ec:	889b      	ldrh	r3, [r3, #4]
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d131      	bne.n	800b356 <USBD_SetAddress+0x76>
 800b2f2:	683b      	ldr	r3, [r7, #0]
 800b2f4:	88db      	ldrh	r3, [r3, #6]
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d12d      	bne.n	800b356 <USBD_SetAddress+0x76>
 800b2fa:	683b      	ldr	r3, [r7, #0]
 800b2fc:	885b      	ldrh	r3, [r3, #2]
 800b2fe:	2b7f      	cmp	r3, #127	; 0x7f
 800b300:	d829      	bhi.n	800b356 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b302:	683b      	ldr	r3, [r7, #0]
 800b304:	885b      	ldrh	r3, [r3, #2]
 800b306:	b2db      	uxtb	r3, r3
 800b308:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b30c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b314:	b2db      	uxtb	r3, r3
 800b316:	2b03      	cmp	r3, #3
 800b318:	d104      	bne.n	800b324 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b31a:	6839      	ldr	r1, [r7, #0]
 800b31c:	6878      	ldr	r0, [r7, #4]
 800b31e:	f000 f9bc 	bl	800b69a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b322:	e01d      	b.n	800b360 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	7bfa      	ldrb	r2, [r7, #15]
 800b328:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b32c:	7bfb      	ldrb	r3, [r7, #15]
 800b32e:	4619      	mov	r1, r3
 800b330:	6878      	ldr	r0, [r7, #4]
 800b332:	f003 f99f 	bl	800e674 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b336:	6878      	ldr	r0, [r7, #4]
 800b338:	f000 fa7a 	bl	800b830 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b33c:	7bfb      	ldrb	r3, [r7, #15]
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d004      	beq.n	800b34c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	2202      	movs	r2, #2
 800b346:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b34a:	e009      	b.n	800b360 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	2201      	movs	r2, #1
 800b350:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b354:	e004      	b.n	800b360 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b356:	6839      	ldr	r1, [r7, #0]
 800b358:	6878      	ldr	r0, [r7, #4]
 800b35a:	f000 f99e 	bl	800b69a <USBD_CtlError>
  }
}
 800b35e:	bf00      	nop
 800b360:	bf00      	nop
 800b362:	3710      	adds	r7, #16
 800b364:	46bd      	mov	sp, r7
 800b366:	bd80      	pop	{r7, pc}

0800b368 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b368:	b580      	push	{r7, lr}
 800b36a:	b084      	sub	sp, #16
 800b36c:	af00      	add	r7, sp, #0
 800b36e:	6078      	str	r0, [r7, #4]
 800b370:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b372:	2300      	movs	r3, #0
 800b374:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b376:	683b      	ldr	r3, [r7, #0]
 800b378:	885b      	ldrh	r3, [r3, #2]
 800b37a:	b2da      	uxtb	r2, r3
 800b37c:	4b4e      	ldr	r3, [pc, #312]	; (800b4b8 <USBD_SetConfig+0x150>)
 800b37e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b380:	4b4d      	ldr	r3, [pc, #308]	; (800b4b8 <USBD_SetConfig+0x150>)
 800b382:	781b      	ldrb	r3, [r3, #0]
 800b384:	2b01      	cmp	r3, #1
 800b386:	d905      	bls.n	800b394 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b388:	6839      	ldr	r1, [r7, #0]
 800b38a:	6878      	ldr	r0, [r7, #4]
 800b38c:	f000 f985 	bl	800b69a <USBD_CtlError>
    return USBD_FAIL;
 800b390:	2303      	movs	r3, #3
 800b392:	e08c      	b.n	800b4ae <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b39a:	b2db      	uxtb	r3, r3
 800b39c:	2b02      	cmp	r3, #2
 800b39e:	d002      	beq.n	800b3a6 <USBD_SetConfig+0x3e>
 800b3a0:	2b03      	cmp	r3, #3
 800b3a2:	d029      	beq.n	800b3f8 <USBD_SetConfig+0x90>
 800b3a4:	e075      	b.n	800b492 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b3a6:	4b44      	ldr	r3, [pc, #272]	; (800b4b8 <USBD_SetConfig+0x150>)
 800b3a8:	781b      	ldrb	r3, [r3, #0]
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d020      	beq.n	800b3f0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800b3ae:	4b42      	ldr	r3, [pc, #264]	; (800b4b8 <USBD_SetConfig+0x150>)
 800b3b0:	781b      	ldrb	r3, [r3, #0]
 800b3b2:	461a      	mov	r2, r3
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b3b8:	4b3f      	ldr	r3, [pc, #252]	; (800b4b8 <USBD_SetConfig+0x150>)
 800b3ba:	781b      	ldrb	r3, [r3, #0]
 800b3bc:	4619      	mov	r1, r3
 800b3be:	6878      	ldr	r0, [r7, #4]
 800b3c0:	f7fe ffe7 	bl	800a392 <USBD_SetClassConfig>
 800b3c4:	4603      	mov	r3, r0
 800b3c6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b3c8:	7bfb      	ldrb	r3, [r7, #15]
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d008      	beq.n	800b3e0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800b3ce:	6839      	ldr	r1, [r7, #0]
 800b3d0:	6878      	ldr	r0, [r7, #4]
 800b3d2:	f000 f962 	bl	800b69a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	2202      	movs	r2, #2
 800b3da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b3de:	e065      	b.n	800b4ac <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b3e0:	6878      	ldr	r0, [r7, #4]
 800b3e2:	f000 fa25 	bl	800b830 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	2203      	movs	r2, #3
 800b3ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b3ee:	e05d      	b.n	800b4ac <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b3f0:	6878      	ldr	r0, [r7, #4]
 800b3f2:	f000 fa1d 	bl	800b830 <USBD_CtlSendStatus>
      break;
 800b3f6:	e059      	b.n	800b4ac <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b3f8:	4b2f      	ldr	r3, [pc, #188]	; (800b4b8 <USBD_SetConfig+0x150>)
 800b3fa:	781b      	ldrb	r3, [r3, #0]
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d112      	bne.n	800b426 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	2202      	movs	r2, #2
 800b404:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800b408:	4b2b      	ldr	r3, [pc, #172]	; (800b4b8 <USBD_SetConfig+0x150>)
 800b40a:	781b      	ldrb	r3, [r3, #0]
 800b40c:	461a      	mov	r2, r3
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b412:	4b29      	ldr	r3, [pc, #164]	; (800b4b8 <USBD_SetConfig+0x150>)
 800b414:	781b      	ldrb	r3, [r3, #0]
 800b416:	4619      	mov	r1, r3
 800b418:	6878      	ldr	r0, [r7, #4]
 800b41a:	f7fe ffd6 	bl	800a3ca <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b41e:	6878      	ldr	r0, [r7, #4]
 800b420:	f000 fa06 	bl	800b830 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b424:	e042      	b.n	800b4ac <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800b426:	4b24      	ldr	r3, [pc, #144]	; (800b4b8 <USBD_SetConfig+0x150>)
 800b428:	781b      	ldrb	r3, [r3, #0]
 800b42a:	461a      	mov	r2, r3
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	685b      	ldr	r3, [r3, #4]
 800b430:	429a      	cmp	r2, r3
 800b432:	d02a      	beq.n	800b48a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	685b      	ldr	r3, [r3, #4]
 800b438:	b2db      	uxtb	r3, r3
 800b43a:	4619      	mov	r1, r3
 800b43c:	6878      	ldr	r0, [r7, #4]
 800b43e:	f7fe ffc4 	bl	800a3ca <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b442:	4b1d      	ldr	r3, [pc, #116]	; (800b4b8 <USBD_SetConfig+0x150>)
 800b444:	781b      	ldrb	r3, [r3, #0]
 800b446:	461a      	mov	r2, r3
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b44c:	4b1a      	ldr	r3, [pc, #104]	; (800b4b8 <USBD_SetConfig+0x150>)
 800b44e:	781b      	ldrb	r3, [r3, #0]
 800b450:	4619      	mov	r1, r3
 800b452:	6878      	ldr	r0, [r7, #4]
 800b454:	f7fe ff9d 	bl	800a392 <USBD_SetClassConfig>
 800b458:	4603      	mov	r3, r0
 800b45a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b45c:	7bfb      	ldrb	r3, [r7, #15]
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d00f      	beq.n	800b482 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800b462:	6839      	ldr	r1, [r7, #0]
 800b464:	6878      	ldr	r0, [r7, #4]
 800b466:	f000 f918 	bl	800b69a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	685b      	ldr	r3, [r3, #4]
 800b46e:	b2db      	uxtb	r3, r3
 800b470:	4619      	mov	r1, r3
 800b472:	6878      	ldr	r0, [r7, #4]
 800b474:	f7fe ffa9 	bl	800a3ca <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	2202      	movs	r2, #2
 800b47c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b480:	e014      	b.n	800b4ac <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b482:	6878      	ldr	r0, [r7, #4]
 800b484:	f000 f9d4 	bl	800b830 <USBD_CtlSendStatus>
      break;
 800b488:	e010      	b.n	800b4ac <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b48a:	6878      	ldr	r0, [r7, #4]
 800b48c:	f000 f9d0 	bl	800b830 <USBD_CtlSendStatus>
      break;
 800b490:	e00c      	b.n	800b4ac <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800b492:	6839      	ldr	r1, [r7, #0]
 800b494:	6878      	ldr	r0, [r7, #4]
 800b496:	f000 f900 	bl	800b69a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b49a:	4b07      	ldr	r3, [pc, #28]	; (800b4b8 <USBD_SetConfig+0x150>)
 800b49c:	781b      	ldrb	r3, [r3, #0]
 800b49e:	4619      	mov	r1, r3
 800b4a0:	6878      	ldr	r0, [r7, #4]
 800b4a2:	f7fe ff92 	bl	800a3ca <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b4a6:	2303      	movs	r3, #3
 800b4a8:	73fb      	strb	r3, [r7, #15]
      break;
 800b4aa:	bf00      	nop
  }

  return ret;
 800b4ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4ae:	4618      	mov	r0, r3
 800b4b0:	3710      	adds	r7, #16
 800b4b2:	46bd      	mov	sp, r7
 800b4b4:	bd80      	pop	{r7, pc}
 800b4b6:	bf00      	nop
 800b4b8:	200008c8 	.word	0x200008c8

0800b4bc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b4bc:	b580      	push	{r7, lr}
 800b4be:	b082      	sub	sp, #8
 800b4c0:	af00      	add	r7, sp, #0
 800b4c2:	6078      	str	r0, [r7, #4]
 800b4c4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b4c6:	683b      	ldr	r3, [r7, #0]
 800b4c8:	88db      	ldrh	r3, [r3, #6]
 800b4ca:	2b01      	cmp	r3, #1
 800b4cc:	d004      	beq.n	800b4d8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b4ce:	6839      	ldr	r1, [r7, #0]
 800b4d0:	6878      	ldr	r0, [r7, #4]
 800b4d2:	f000 f8e2 	bl	800b69a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b4d6:	e023      	b.n	800b520 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b4de:	b2db      	uxtb	r3, r3
 800b4e0:	2b02      	cmp	r3, #2
 800b4e2:	dc02      	bgt.n	800b4ea <USBD_GetConfig+0x2e>
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	dc03      	bgt.n	800b4f0 <USBD_GetConfig+0x34>
 800b4e8:	e015      	b.n	800b516 <USBD_GetConfig+0x5a>
 800b4ea:	2b03      	cmp	r3, #3
 800b4ec:	d00b      	beq.n	800b506 <USBD_GetConfig+0x4a>
 800b4ee:	e012      	b.n	800b516 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	2200      	movs	r2, #0
 800b4f4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	3308      	adds	r3, #8
 800b4fa:	2201      	movs	r2, #1
 800b4fc:	4619      	mov	r1, r3
 800b4fe:	6878      	ldr	r0, [r7, #4]
 800b500:	f000 f93c 	bl	800b77c <USBD_CtlSendData>
        break;
 800b504:	e00c      	b.n	800b520 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	3304      	adds	r3, #4
 800b50a:	2201      	movs	r2, #1
 800b50c:	4619      	mov	r1, r3
 800b50e:	6878      	ldr	r0, [r7, #4]
 800b510:	f000 f934 	bl	800b77c <USBD_CtlSendData>
        break;
 800b514:	e004      	b.n	800b520 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b516:	6839      	ldr	r1, [r7, #0]
 800b518:	6878      	ldr	r0, [r7, #4]
 800b51a:	f000 f8be 	bl	800b69a <USBD_CtlError>
        break;
 800b51e:	bf00      	nop
}
 800b520:	bf00      	nop
 800b522:	3708      	adds	r7, #8
 800b524:	46bd      	mov	sp, r7
 800b526:	bd80      	pop	{r7, pc}

0800b528 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b528:	b580      	push	{r7, lr}
 800b52a:	b082      	sub	sp, #8
 800b52c:	af00      	add	r7, sp, #0
 800b52e:	6078      	str	r0, [r7, #4]
 800b530:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b538:	b2db      	uxtb	r3, r3
 800b53a:	3b01      	subs	r3, #1
 800b53c:	2b02      	cmp	r3, #2
 800b53e:	d81e      	bhi.n	800b57e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b540:	683b      	ldr	r3, [r7, #0]
 800b542:	88db      	ldrh	r3, [r3, #6]
 800b544:	2b02      	cmp	r3, #2
 800b546:	d004      	beq.n	800b552 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b548:	6839      	ldr	r1, [r7, #0]
 800b54a:	6878      	ldr	r0, [r7, #4]
 800b54c:	f000 f8a5 	bl	800b69a <USBD_CtlError>
        break;
 800b550:	e01a      	b.n	800b588 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	2201      	movs	r2, #1
 800b556:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d005      	beq.n	800b56e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	68db      	ldr	r3, [r3, #12]
 800b566:	f043 0202 	orr.w	r2, r3, #2
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	330c      	adds	r3, #12
 800b572:	2202      	movs	r2, #2
 800b574:	4619      	mov	r1, r3
 800b576:	6878      	ldr	r0, [r7, #4]
 800b578:	f000 f900 	bl	800b77c <USBD_CtlSendData>
      break;
 800b57c:	e004      	b.n	800b588 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b57e:	6839      	ldr	r1, [r7, #0]
 800b580:	6878      	ldr	r0, [r7, #4]
 800b582:	f000 f88a 	bl	800b69a <USBD_CtlError>
      break;
 800b586:	bf00      	nop
  }
}
 800b588:	bf00      	nop
 800b58a:	3708      	adds	r7, #8
 800b58c:	46bd      	mov	sp, r7
 800b58e:	bd80      	pop	{r7, pc}

0800b590 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b590:	b580      	push	{r7, lr}
 800b592:	b082      	sub	sp, #8
 800b594:	af00      	add	r7, sp, #0
 800b596:	6078      	str	r0, [r7, #4]
 800b598:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b59a:	683b      	ldr	r3, [r7, #0]
 800b59c:	885b      	ldrh	r3, [r3, #2]
 800b59e:	2b01      	cmp	r3, #1
 800b5a0:	d107      	bne.n	800b5b2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	2201      	movs	r2, #1
 800b5a6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b5aa:	6878      	ldr	r0, [r7, #4]
 800b5ac:	f000 f940 	bl	800b830 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800b5b0:	e013      	b.n	800b5da <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800b5b2:	683b      	ldr	r3, [r7, #0]
 800b5b4:	885b      	ldrh	r3, [r3, #2]
 800b5b6:	2b02      	cmp	r3, #2
 800b5b8:	d10b      	bne.n	800b5d2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800b5ba:	683b      	ldr	r3, [r7, #0]
 800b5bc:	889b      	ldrh	r3, [r3, #4]
 800b5be:	0a1b      	lsrs	r3, r3, #8
 800b5c0:	b29b      	uxth	r3, r3
 800b5c2:	b2da      	uxtb	r2, r3
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800b5ca:	6878      	ldr	r0, [r7, #4]
 800b5cc:	f000 f930 	bl	800b830 <USBD_CtlSendStatus>
}
 800b5d0:	e003      	b.n	800b5da <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800b5d2:	6839      	ldr	r1, [r7, #0]
 800b5d4:	6878      	ldr	r0, [r7, #4]
 800b5d6:	f000 f860 	bl	800b69a <USBD_CtlError>
}
 800b5da:	bf00      	nop
 800b5dc:	3708      	adds	r7, #8
 800b5de:	46bd      	mov	sp, r7
 800b5e0:	bd80      	pop	{r7, pc}

0800b5e2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b5e2:	b580      	push	{r7, lr}
 800b5e4:	b082      	sub	sp, #8
 800b5e6:	af00      	add	r7, sp, #0
 800b5e8:	6078      	str	r0, [r7, #4]
 800b5ea:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b5f2:	b2db      	uxtb	r3, r3
 800b5f4:	3b01      	subs	r3, #1
 800b5f6:	2b02      	cmp	r3, #2
 800b5f8:	d80b      	bhi.n	800b612 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b5fa:	683b      	ldr	r3, [r7, #0]
 800b5fc:	885b      	ldrh	r3, [r3, #2]
 800b5fe:	2b01      	cmp	r3, #1
 800b600:	d10c      	bne.n	800b61c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	2200      	movs	r2, #0
 800b606:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b60a:	6878      	ldr	r0, [r7, #4]
 800b60c:	f000 f910 	bl	800b830 <USBD_CtlSendStatus>
      }
      break;
 800b610:	e004      	b.n	800b61c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b612:	6839      	ldr	r1, [r7, #0]
 800b614:	6878      	ldr	r0, [r7, #4]
 800b616:	f000 f840 	bl	800b69a <USBD_CtlError>
      break;
 800b61a:	e000      	b.n	800b61e <USBD_ClrFeature+0x3c>
      break;
 800b61c:	bf00      	nop
  }
}
 800b61e:	bf00      	nop
 800b620:	3708      	adds	r7, #8
 800b622:	46bd      	mov	sp, r7
 800b624:	bd80      	pop	{r7, pc}

0800b626 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b626:	b580      	push	{r7, lr}
 800b628:	b084      	sub	sp, #16
 800b62a:	af00      	add	r7, sp, #0
 800b62c:	6078      	str	r0, [r7, #4]
 800b62e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b630:	683b      	ldr	r3, [r7, #0]
 800b632:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	781a      	ldrb	r2, [r3, #0]
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	3301      	adds	r3, #1
 800b640:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	781a      	ldrb	r2, [r3, #0]
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	3301      	adds	r3, #1
 800b64e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b650:	68f8      	ldr	r0, [r7, #12]
 800b652:	f7ff fa41 	bl	800aad8 <SWAPBYTE>
 800b656:	4603      	mov	r3, r0
 800b658:	461a      	mov	r2, r3
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	3301      	adds	r3, #1
 800b662:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	3301      	adds	r3, #1
 800b668:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b66a:	68f8      	ldr	r0, [r7, #12]
 800b66c:	f7ff fa34 	bl	800aad8 <SWAPBYTE>
 800b670:	4603      	mov	r3, r0
 800b672:	461a      	mov	r2, r3
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	3301      	adds	r3, #1
 800b67c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	3301      	adds	r3, #1
 800b682:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b684:	68f8      	ldr	r0, [r7, #12]
 800b686:	f7ff fa27 	bl	800aad8 <SWAPBYTE>
 800b68a:	4603      	mov	r3, r0
 800b68c:	461a      	mov	r2, r3
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	80da      	strh	r2, [r3, #6]
}
 800b692:	bf00      	nop
 800b694:	3710      	adds	r7, #16
 800b696:	46bd      	mov	sp, r7
 800b698:	bd80      	pop	{r7, pc}

0800b69a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b69a:	b580      	push	{r7, lr}
 800b69c:	b082      	sub	sp, #8
 800b69e:	af00      	add	r7, sp, #0
 800b6a0:	6078      	str	r0, [r7, #4]
 800b6a2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b6a4:	2180      	movs	r1, #128	; 0x80
 800b6a6:	6878      	ldr	r0, [r7, #4]
 800b6a8:	f002 ff7a 	bl	800e5a0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b6ac:	2100      	movs	r1, #0
 800b6ae:	6878      	ldr	r0, [r7, #4]
 800b6b0:	f002 ff76 	bl	800e5a0 <USBD_LL_StallEP>
}
 800b6b4:	bf00      	nop
 800b6b6:	3708      	adds	r7, #8
 800b6b8:	46bd      	mov	sp, r7
 800b6ba:	bd80      	pop	{r7, pc}

0800b6bc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b6bc:	b580      	push	{r7, lr}
 800b6be:	b086      	sub	sp, #24
 800b6c0:	af00      	add	r7, sp, #0
 800b6c2:	60f8      	str	r0, [r7, #12]
 800b6c4:	60b9      	str	r1, [r7, #8]
 800b6c6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b6c8:	2300      	movs	r3, #0
 800b6ca:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d036      	beq.n	800b740 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b6d6:	6938      	ldr	r0, [r7, #16]
 800b6d8:	f000 f836 	bl	800b748 <USBD_GetLen>
 800b6dc:	4603      	mov	r3, r0
 800b6de:	3301      	adds	r3, #1
 800b6e0:	b29b      	uxth	r3, r3
 800b6e2:	005b      	lsls	r3, r3, #1
 800b6e4:	b29a      	uxth	r2, r3
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b6ea:	7dfb      	ldrb	r3, [r7, #23]
 800b6ec:	68ba      	ldr	r2, [r7, #8]
 800b6ee:	4413      	add	r3, r2
 800b6f0:	687a      	ldr	r2, [r7, #4]
 800b6f2:	7812      	ldrb	r2, [r2, #0]
 800b6f4:	701a      	strb	r2, [r3, #0]
  idx++;
 800b6f6:	7dfb      	ldrb	r3, [r7, #23]
 800b6f8:	3301      	adds	r3, #1
 800b6fa:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b6fc:	7dfb      	ldrb	r3, [r7, #23]
 800b6fe:	68ba      	ldr	r2, [r7, #8]
 800b700:	4413      	add	r3, r2
 800b702:	2203      	movs	r2, #3
 800b704:	701a      	strb	r2, [r3, #0]
  idx++;
 800b706:	7dfb      	ldrb	r3, [r7, #23]
 800b708:	3301      	adds	r3, #1
 800b70a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b70c:	e013      	b.n	800b736 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b70e:	7dfb      	ldrb	r3, [r7, #23]
 800b710:	68ba      	ldr	r2, [r7, #8]
 800b712:	4413      	add	r3, r2
 800b714:	693a      	ldr	r2, [r7, #16]
 800b716:	7812      	ldrb	r2, [r2, #0]
 800b718:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b71a:	693b      	ldr	r3, [r7, #16]
 800b71c:	3301      	adds	r3, #1
 800b71e:	613b      	str	r3, [r7, #16]
    idx++;
 800b720:	7dfb      	ldrb	r3, [r7, #23]
 800b722:	3301      	adds	r3, #1
 800b724:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b726:	7dfb      	ldrb	r3, [r7, #23]
 800b728:	68ba      	ldr	r2, [r7, #8]
 800b72a:	4413      	add	r3, r2
 800b72c:	2200      	movs	r2, #0
 800b72e:	701a      	strb	r2, [r3, #0]
    idx++;
 800b730:	7dfb      	ldrb	r3, [r7, #23]
 800b732:	3301      	adds	r3, #1
 800b734:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b736:	693b      	ldr	r3, [r7, #16]
 800b738:	781b      	ldrb	r3, [r3, #0]
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d1e7      	bne.n	800b70e <USBD_GetString+0x52>
 800b73e:	e000      	b.n	800b742 <USBD_GetString+0x86>
    return;
 800b740:	bf00      	nop
  }
}
 800b742:	3718      	adds	r7, #24
 800b744:	46bd      	mov	sp, r7
 800b746:	bd80      	pop	{r7, pc}

0800b748 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b748:	b480      	push	{r7}
 800b74a:	b085      	sub	sp, #20
 800b74c:	af00      	add	r7, sp, #0
 800b74e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b750:	2300      	movs	r3, #0
 800b752:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b758:	e005      	b.n	800b766 <USBD_GetLen+0x1e>
  {
    len++;
 800b75a:	7bfb      	ldrb	r3, [r7, #15]
 800b75c:	3301      	adds	r3, #1
 800b75e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b760:	68bb      	ldr	r3, [r7, #8]
 800b762:	3301      	adds	r3, #1
 800b764:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b766:	68bb      	ldr	r3, [r7, #8]
 800b768:	781b      	ldrb	r3, [r3, #0]
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d1f5      	bne.n	800b75a <USBD_GetLen+0x12>
  }

  return len;
 800b76e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b770:	4618      	mov	r0, r3
 800b772:	3714      	adds	r7, #20
 800b774:	46bd      	mov	sp, r7
 800b776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b77a:	4770      	bx	lr

0800b77c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b77c:	b580      	push	{r7, lr}
 800b77e:	b084      	sub	sp, #16
 800b780:	af00      	add	r7, sp, #0
 800b782:	60f8      	str	r0, [r7, #12]
 800b784:	60b9      	str	r1, [r7, #8]
 800b786:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	2202      	movs	r2, #2
 800b78c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	687a      	ldr	r2, [r7, #4]
 800b794:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	687a      	ldr	r2, [r7, #4]
 800b79a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	68ba      	ldr	r2, [r7, #8]
 800b7a0:	2100      	movs	r1, #0
 800b7a2:	68f8      	ldr	r0, [r7, #12]
 800b7a4:	f002 ff85 	bl	800e6b2 <USBD_LL_Transmit>

  return USBD_OK;
 800b7a8:	2300      	movs	r3, #0
}
 800b7aa:	4618      	mov	r0, r3
 800b7ac:	3710      	adds	r7, #16
 800b7ae:	46bd      	mov	sp, r7
 800b7b0:	bd80      	pop	{r7, pc}

0800b7b2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b7b2:	b580      	push	{r7, lr}
 800b7b4:	b084      	sub	sp, #16
 800b7b6:	af00      	add	r7, sp, #0
 800b7b8:	60f8      	str	r0, [r7, #12]
 800b7ba:	60b9      	str	r1, [r7, #8]
 800b7bc:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	68ba      	ldr	r2, [r7, #8]
 800b7c2:	2100      	movs	r1, #0
 800b7c4:	68f8      	ldr	r0, [r7, #12]
 800b7c6:	f002 ff74 	bl	800e6b2 <USBD_LL_Transmit>

  return USBD_OK;
 800b7ca:	2300      	movs	r3, #0
}
 800b7cc:	4618      	mov	r0, r3
 800b7ce:	3710      	adds	r7, #16
 800b7d0:	46bd      	mov	sp, r7
 800b7d2:	bd80      	pop	{r7, pc}

0800b7d4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b7d4:	b580      	push	{r7, lr}
 800b7d6:	b084      	sub	sp, #16
 800b7d8:	af00      	add	r7, sp, #0
 800b7da:	60f8      	str	r0, [r7, #12]
 800b7dc:	60b9      	str	r1, [r7, #8]
 800b7de:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	2203      	movs	r2, #3
 800b7e4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	687a      	ldr	r2, [r7, #4]
 800b7ec:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	687a      	ldr	r2, [r7, #4]
 800b7f4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	68ba      	ldr	r2, [r7, #8]
 800b7fc:	2100      	movs	r1, #0
 800b7fe:	68f8      	ldr	r0, [r7, #12]
 800b800:	f002 ff78 	bl	800e6f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b804:	2300      	movs	r3, #0
}
 800b806:	4618      	mov	r0, r3
 800b808:	3710      	adds	r7, #16
 800b80a:	46bd      	mov	sp, r7
 800b80c:	bd80      	pop	{r7, pc}

0800b80e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b80e:	b580      	push	{r7, lr}
 800b810:	b084      	sub	sp, #16
 800b812:	af00      	add	r7, sp, #0
 800b814:	60f8      	str	r0, [r7, #12]
 800b816:	60b9      	str	r1, [r7, #8]
 800b818:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	68ba      	ldr	r2, [r7, #8]
 800b81e:	2100      	movs	r1, #0
 800b820:	68f8      	ldr	r0, [r7, #12]
 800b822:	f002 ff67 	bl	800e6f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b826:	2300      	movs	r3, #0
}
 800b828:	4618      	mov	r0, r3
 800b82a:	3710      	adds	r7, #16
 800b82c:	46bd      	mov	sp, r7
 800b82e:	bd80      	pop	{r7, pc}

0800b830 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b830:	b580      	push	{r7, lr}
 800b832:	b082      	sub	sp, #8
 800b834:	af00      	add	r7, sp, #0
 800b836:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	2204      	movs	r2, #4
 800b83c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b840:	2300      	movs	r3, #0
 800b842:	2200      	movs	r2, #0
 800b844:	2100      	movs	r1, #0
 800b846:	6878      	ldr	r0, [r7, #4]
 800b848:	f002 ff33 	bl	800e6b2 <USBD_LL_Transmit>

  return USBD_OK;
 800b84c:	2300      	movs	r3, #0
}
 800b84e:	4618      	mov	r0, r3
 800b850:	3708      	adds	r7, #8
 800b852:	46bd      	mov	sp, r7
 800b854:	bd80      	pop	{r7, pc}

0800b856 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b856:	b580      	push	{r7, lr}
 800b858:	b082      	sub	sp, #8
 800b85a:	af00      	add	r7, sp, #0
 800b85c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	2205      	movs	r2, #5
 800b862:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b866:	2300      	movs	r3, #0
 800b868:	2200      	movs	r2, #0
 800b86a:	2100      	movs	r1, #0
 800b86c:	6878      	ldr	r0, [r7, #4]
 800b86e:	f002 ff41 	bl	800e6f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b872:	2300      	movs	r3, #0
}
 800b874:	4618      	mov	r0, r3
 800b876:	3708      	adds	r7, #8
 800b878:	46bd      	mov	sp, r7
 800b87a:	bd80      	pop	{r7, pc}

0800b87c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800b87c:	b480      	push	{r7}
 800b87e:	b085      	sub	sp, #20
 800b880:	af00      	add	r7, sp, #0
 800b882:	4603      	mov	r3, r0
 800b884:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800b886:	2300      	movs	r3, #0
 800b888:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800b88a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b88e:	2b84      	cmp	r3, #132	; 0x84
 800b890:	d005      	beq.n	800b89e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800b892:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	4413      	add	r3, r2
 800b89a:	3303      	adds	r3, #3
 800b89c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800b89e:	68fb      	ldr	r3, [r7, #12]
}
 800b8a0:	4618      	mov	r0, r3
 800b8a2:	3714      	adds	r7, #20
 800b8a4:	46bd      	mov	sp, r7
 800b8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8aa:	4770      	bx	lr

0800b8ac <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800b8ac:	b480      	push	{r7}
 800b8ae:	b083      	sub	sp, #12
 800b8b0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b8b2:	f3ef 8305 	mrs	r3, IPSR
 800b8b6:	607b      	str	r3, [r7, #4]
  return(result);
 800b8b8:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	bf14      	ite	ne
 800b8be:	2301      	movne	r3, #1
 800b8c0:	2300      	moveq	r3, #0
 800b8c2:	b2db      	uxtb	r3, r3
}
 800b8c4:	4618      	mov	r0, r3
 800b8c6:	370c      	adds	r7, #12
 800b8c8:	46bd      	mov	sp, r7
 800b8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ce:	4770      	bx	lr

0800b8d0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800b8d0:	b580      	push	{r7, lr}
 800b8d2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800b8d4:	f001 f916 	bl	800cb04 <vTaskStartScheduler>
  
  return osOK;
 800b8d8:	2300      	movs	r3, #0
}
 800b8da:	4618      	mov	r0, r3
 800b8dc:	bd80      	pop	{r7, pc}

0800b8de <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800b8de:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b8e0:	b089      	sub	sp, #36	; 0x24
 800b8e2:	af04      	add	r7, sp, #16
 800b8e4:	6078      	str	r0, [r7, #4]
 800b8e6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	695b      	ldr	r3, [r3, #20]
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d020      	beq.n	800b932 <osThreadCreate+0x54>
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	699b      	ldr	r3, [r3, #24]
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d01c      	beq.n	800b932 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	685c      	ldr	r4, [r3, #4]
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	691e      	ldr	r6, [r3, #16]
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b90a:	4618      	mov	r0, r3
 800b90c:	f7ff ffb6 	bl	800b87c <makeFreeRtosPriority>
 800b910:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	695b      	ldr	r3, [r3, #20]
 800b916:	687a      	ldr	r2, [r7, #4]
 800b918:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b91a:	9202      	str	r2, [sp, #8]
 800b91c:	9301      	str	r3, [sp, #4]
 800b91e:	9100      	str	r1, [sp, #0]
 800b920:	683b      	ldr	r3, [r7, #0]
 800b922:	4632      	mov	r2, r6
 800b924:	4629      	mov	r1, r5
 800b926:	4620      	mov	r0, r4
 800b928:	f000 ff0e 	bl	800c748 <xTaskCreateStatic>
 800b92c:	4603      	mov	r3, r0
 800b92e:	60fb      	str	r3, [r7, #12]
 800b930:	e01c      	b.n	800b96c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	685c      	ldr	r4, [r3, #4]
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b93e:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b946:	4618      	mov	r0, r3
 800b948:	f7ff ff98 	bl	800b87c <makeFreeRtosPriority>
 800b94c:	4602      	mov	r2, r0
 800b94e:	f107 030c 	add.w	r3, r7, #12
 800b952:	9301      	str	r3, [sp, #4]
 800b954:	9200      	str	r2, [sp, #0]
 800b956:	683b      	ldr	r3, [r7, #0]
 800b958:	4632      	mov	r2, r6
 800b95a:	4629      	mov	r1, r5
 800b95c:	4620      	mov	r0, r4
 800b95e:	f000 ff50 	bl	800c802 <xTaskCreate>
 800b962:	4603      	mov	r3, r0
 800b964:	2b01      	cmp	r3, #1
 800b966:	d001      	beq.n	800b96c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800b968:	2300      	movs	r3, #0
 800b96a:	e000      	b.n	800b96e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800b96c:	68fb      	ldr	r3, [r7, #12]
}
 800b96e:	4618      	mov	r0, r3
 800b970:	3714      	adds	r7, #20
 800b972:	46bd      	mov	sp, r7
 800b974:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b976 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800b976:	b580      	push	{r7, lr}
 800b978:	b084      	sub	sp, #16
 800b97a:	af00      	add	r7, sp, #0
 800b97c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	2b00      	cmp	r3, #0
 800b986:	d001      	beq.n	800b98c <osDelay+0x16>
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	e000      	b.n	800b98e <osDelay+0x18>
 800b98c:	2301      	movs	r3, #1
 800b98e:	4618      	mov	r0, r3
 800b990:	f001 f884 	bl	800ca9c <vTaskDelay>
  
  return osOK;
 800b994:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800b996:	4618      	mov	r0, r3
 800b998:	3710      	adds	r7, #16
 800b99a:	46bd      	mov	sp, r7
 800b99c:	bd80      	pop	{r7, pc}

0800b99e <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800b99e:	b590      	push	{r4, r7, lr}
 800b9a0:	b085      	sub	sp, #20
 800b9a2:	af02      	add	r7, sp, #8
 800b9a4:	6078      	str	r0, [r7, #4]
 800b9a6:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	689b      	ldr	r3, [r3, #8]
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d011      	beq.n	800b9d4 <osMessageCreate+0x36>
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	68db      	ldr	r3, [r3, #12]
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d00d      	beq.n	800b9d4 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	6818      	ldr	r0, [r3, #0]
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	6859      	ldr	r1, [r3, #4]
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	689a      	ldr	r2, [r3, #8]
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	68db      	ldr	r3, [r3, #12]
 800b9c8:	2400      	movs	r4, #0
 800b9ca:	9400      	str	r4, [sp, #0]
 800b9cc:	f000 f9e0 	bl	800bd90 <xQueueGenericCreateStatic>
 800b9d0:	4603      	mov	r3, r0
 800b9d2:	e008      	b.n	800b9e6 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	6818      	ldr	r0, [r3, #0]
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	685b      	ldr	r3, [r3, #4]
 800b9dc:	2200      	movs	r2, #0
 800b9de:	4619      	mov	r1, r3
 800b9e0:	f000 fa4e 	bl	800be80 <xQueueGenericCreate>
 800b9e4:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800b9e6:	4618      	mov	r0, r3
 800b9e8:	370c      	adds	r7, #12
 800b9ea:	46bd      	mov	sp, r7
 800b9ec:	bd90      	pop	{r4, r7, pc}
	...

0800b9f0 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800b9f0:	b580      	push	{r7, lr}
 800b9f2:	b086      	sub	sp, #24
 800b9f4:	af00      	add	r7, sp, #0
 800b9f6:	60f8      	str	r0, [r7, #12]
 800b9f8:	60b9      	str	r1, [r7, #8]
 800b9fa:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800b9fc:	2300      	movs	r3, #0
 800b9fe:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800ba04:	697b      	ldr	r3, [r7, #20]
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d101      	bne.n	800ba0e <osMessagePut+0x1e>
    ticks = 1;
 800ba0a:	2301      	movs	r3, #1
 800ba0c:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800ba0e:	f7ff ff4d 	bl	800b8ac <inHandlerMode>
 800ba12:	4603      	mov	r3, r0
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d018      	beq.n	800ba4a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800ba18:	f107 0210 	add.w	r2, r7, #16
 800ba1c:	f107 0108 	add.w	r1, r7, #8
 800ba20:	2300      	movs	r3, #0
 800ba22:	68f8      	ldr	r0, [r7, #12]
 800ba24:	f000 fb84 	bl	800c130 <xQueueGenericSendFromISR>
 800ba28:	4603      	mov	r3, r0
 800ba2a:	2b01      	cmp	r3, #1
 800ba2c:	d001      	beq.n	800ba32 <osMessagePut+0x42>
      return osErrorOS;
 800ba2e:	23ff      	movs	r3, #255	; 0xff
 800ba30:	e018      	b.n	800ba64 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800ba32:	693b      	ldr	r3, [r7, #16]
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d014      	beq.n	800ba62 <osMessagePut+0x72>
 800ba38:	4b0c      	ldr	r3, [pc, #48]	; (800ba6c <osMessagePut+0x7c>)
 800ba3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba3e:	601a      	str	r2, [r3, #0]
 800ba40:	f3bf 8f4f 	dsb	sy
 800ba44:	f3bf 8f6f 	isb	sy
 800ba48:	e00b      	b.n	800ba62 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800ba4a:	f107 0108 	add.w	r1, r7, #8
 800ba4e:	2300      	movs	r3, #0
 800ba50:	697a      	ldr	r2, [r7, #20]
 800ba52:	68f8      	ldr	r0, [r7, #12]
 800ba54:	f000 fa6e 	bl	800bf34 <xQueueGenericSend>
 800ba58:	4603      	mov	r3, r0
 800ba5a:	2b01      	cmp	r3, #1
 800ba5c:	d001      	beq.n	800ba62 <osMessagePut+0x72>
      return osErrorOS;
 800ba5e:	23ff      	movs	r3, #255	; 0xff
 800ba60:	e000      	b.n	800ba64 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800ba62:	2300      	movs	r3, #0
}
 800ba64:	4618      	mov	r0, r3
 800ba66:	3718      	adds	r7, #24
 800ba68:	46bd      	mov	sp, r7
 800ba6a:	bd80      	pop	{r7, pc}
 800ba6c:	e000ed04 	.word	0xe000ed04

0800ba70 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800ba70:	b590      	push	{r4, r7, lr}
 800ba72:	b08b      	sub	sp, #44	; 0x2c
 800ba74:	af00      	add	r7, sp, #0
 800ba76:	60f8      	str	r0, [r7, #12]
 800ba78:	60b9      	str	r1, [r7, #8]
 800ba7a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800ba7c:	68bb      	ldr	r3, [r7, #8]
 800ba7e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800ba80:	2300      	movs	r3, #0
 800ba82:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800ba84:	68bb      	ldr	r3, [r7, #8]
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d10a      	bne.n	800baa0 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800ba8a:	2380      	movs	r3, #128	; 0x80
 800ba8c:	617b      	str	r3, [r7, #20]
    return event;
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	461c      	mov	r4, r3
 800ba92:	f107 0314 	add.w	r3, r7, #20
 800ba96:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ba9a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800ba9e:	e054      	b.n	800bb4a <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800baa0:	2300      	movs	r3, #0
 800baa2:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800baa4:	2300      	movs	r3, #0
 800baa6:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800baae:	d103      	bne.n	800bab8 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800bab0:	f04f 33ff 	mov.w	r3, #4294967295
 800bab4:	627b      	str	r3, [r7, #36]	; 0x24
 800bab6:	e009      	b.n	800bacc <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	2b00      	cmp	r3, #0
 800babc:	d006      	beq.n	800bacc <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800bac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d101      	bne.n	800bacc <osMessageGet+0x5c>
      ticks = 1;
 800bac8:	2301      	movs	r3, #1
 800baca:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800bacc:	f7ff feee 	bl	800b8ac <inHandlerMode>
 800bad0:	4603      	mov	r3, r0
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d01c      	beq.n	800bb10 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800bad6:	f107 0220 	add.w	r2, r7, #32
 800bada:	f107 0314 	add.w	r3, r7, #20
 800bade:	3304      	adds	r3, #4
 800bae0:	4619      	mov	r1, r3
 800bae2:	68b8      	ldr	r0, [r7, #8]
 800bae4:	f000 fca0 	bl	800c428 <xQueueReceiveFromISR>
 800bae8:	4603      	mov	r3, r0
 800baea:	2b01      	cmp	r3, #1
 800baec:	d102      	bne.n	800baf4 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800baee:	2310      	movs	r3, #16
 800baf0:	617b      	str	r3, [r7, #20]
 800baf2:	e001      	b.n	800baf8 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800baf4:	2300      	movs	r3, #0
 800baf6:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800baf8:	6a3b      	ldr	r3, [r7, #32]
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d01d      	beq.n	800bb3a <osMessageGet+0xca>
 800bafe:	4b15      	ldr	r3, [pc, #84]	; (800bb54 <osMessageGet+0xe4>)
 800bb00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb04:	601a      	str	r2, [r3, #0]
 800bb06:	f3bf 8f4f 	dsb	sy
 800bb0a:	f3bf 8f6f 	isb	sy
 800bb0e:	e014      	b.n	800bb3a <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800bb10:	f107 0314 	add.w	r3, r7, #20
 800bb14:	3304      	adds	r3, #4
 800bb16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb18:	4619      	mov	r1, r3
 800bb1a:	68b8      	ldr	r0, [r7, #8]
 800bb1c:	f000 fba4 	bl	800c268 <xQueueReceive>
 800bb20:	4603      	mov	r3, r0
 800bb22:	2b01      	cmp	r3, #1
 800bb24:	d102      	bne.n	800bb2c <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800bb26:	2310      	movs	r3, #16
 800bb28:	617b      	str	r3, [r7, #20]
 800bb2a:	e006      	b.n	800bb3a <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800bb2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d101      	bne.n	800bb36 <osMessageGet+0xc6>
 800bb32:	2300      	movs	r3, #0
 800bb34:	e000      	b.n	800bb38 <osMessageGet+0xc8>
 800bb36:	2340      	movs	r3, #64	; 0x40
 800bb38:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	461c      	mov	r4, r3
 800bb3e:	f107 0314 	add.w	r3, r7, #20
 800bb42:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800bb46:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800bb4a:	68f8      	ldr	r0, [r7, #12]
 800bb4c:	372c      	adds	r7, #44	; 0x2c
 800bb4e:	46bd      	mov	sp, r7
 800bb50:	bd90      	pop	{r4, r7, pc}
 800bb52:	bf00      	nop
 800bb54:	e000ed04 	.word	0xe000ed04

0800bb58 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800bb58:	b480      	push	{r7}
 800bb5a:	b083      	sub	sp, #12
 800bb5c:	af00      	add	r7, sp, #0
 800bb5e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	f103 0208 	add.w	r2, r3, #8
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	f04f 32ff 	mov.w	r2, #4294967295
 800bb70:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	f103 0208 	add.w	r2, r3, #8
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	f103 0208 	add.w	r2, r3, #8
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	2200      	movs	r2, #0
 800bb8a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800bb8c:	bf00      	nop
 800bb8e:	370c      	adds	r7, #12
 800bb90:	46bd      	mov	sp, r7
 800bb92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb96:	4770      	bx	lr

0800bb98 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800bb98:	b480      	push	{r7}
 800bb9a:	b083      	sub	sp, #12
 800bb9c:	af00      	add	r7, sp, #0
 800bb9e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	2200      	movs	r2, #0
 800bba4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800bba6:	bf00      	nop
 800bba8:	370c      	adds	r7, #12
 800bbaa:	46bd      	mov	sp, r7
 800bbac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb0:	4770      	bx	lr

0800bbb2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bbb2:	b480      	push	{r7}
 800bbb4:	b085      	sub	sp, #20
 800bbb6:	af00      	add	r7, sp, #0
 800bbb8:	6078      	str	r0, [r7, #4]
 800bbba:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	685b      	ldr	r3, [r3, #4]
 800bbc0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800bbc2:	683b      	ldr	r3, [r7, #0]
 800bbc4:	68fa      	ldr	r2, [r7, #12]
 800bbc6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	689a      	ldr	r2, [r3, #8]
 800bbcc:	683b      	ldr	r3, [r7, #0]
 800bbce:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	689b      	ldr	r3, [r3, #8]
 800bbd4:	683a      	ldr	r2, [r7, #0]
 800bbd6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	683a      	ldr	r2, [r7, #0]
 800bbdc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800bbde:	683b      	ldr	r3, [r7, #0]
 800bbe0:	687a      	ldr	r2, [r7, #4]
 800bbe2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	1c5a      	adds	r2, r3, #1
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	601a      	str	r2, [r3, #0]
}
 800bbee:	bf00      	nop
 800bbf0:	3714      	adds	r7, #20
 800bbf2:	46bd      	mov	sp, r7
 800bbf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf8:	4770      	bx	lr

0800bbfa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bbfa:	b480      	push	{r7}
 800bbfc:	b085      	sub	sp, #20
 800bbfe:	af00      	add	r7, sp, #0
 800bc00:	6078      	str	r0, [r7, #4]
 800bc02:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800bc04:	683b      	ldr	r3, [r7, #0]
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800bc0a:	68bb      	ldr	r3, [r7, #8]
 800bc0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc10:	d103      	bne.n	800bc1a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	691b      	ldr	r3, [r3, #16]
 800bc16:	60fb      	str	r3, [r7, #12]
 800bc18:	e00c      	b.n	800bc34 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	3308      	adds	r3, #8
 800bc1e:	60fb      	str	r3, [r7, #12]
 800bc20:	e002      	b.n	800bc28 <vListInsert+0x2e>
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	685b      	ldr	r3, [r3, #4]
 800bc26:	60fb      	str	r3, [r7, #12]
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	685b      	ldr	r3, [r3, #4]
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	68ba      	ldr	r2, [r7, #8]
 800bc30:	429a      	cmp	r2, r3
 800bc32:	d2f6      	bcs.n	800bc22 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	685a      	ldr	r2, [r3, #4]
 800bc38:	683b      	ldr	r3, [r7, #0]
 800bc3a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800bc3c:	683b      	ldr	r3, [r7, #0]
 800bc3e:	685b      	ldr	r3, [r3, #4]
 800bc40:	683a      	ldr	r2, [r7, #0]
 800bc42:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800bc44:	683b      	ldr	r3, [r7, #0]
 800bc46:	68fa      	ldr	r2, [r7, #12]
 800bc48:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	683a      	ldr	r2, [r7, #0]
 800bc4e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800bc50:	683b      	ldr	r3, [r7, #0]
 800bc52:	687a      	ldr	r2, [r7, #4]
 800bc54:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	1c5a      	adds	r2, r3, #1
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	601a      	str	r2, [r3, #0]
}
 800bc60:	bf00      	nop
 800bc62:	3714      	adds	r7, #20
 800bc64:	46bd      	mov	sp, r7
 800bc66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc6a:	4770      	bx	lr

0800bc6c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800bc6c:	b480      	push	{r7}
 800bc6e:	b085      	sub	sp, #20
 800bc70:	af00      	add	r7, sp, #0
 800bc72:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	691b      	ldr	r3, [r3, #16]
 800bc78:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	685b      	ldr	r3, [r3, #4]
 800bc7e:	687a      	ldr	r2, [r7, #4]
 800bc80:	6892      	ldr	r2, [r2, #8]
 800bc82:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	689b      	ldr	r3, [r3, #8]
 800bc88:	687a      	ldr	r2, [r7, #4]
 800bc8a:	6852      	ldr	r2, [r2, #4]
 800bc8c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	685b      	ldr	r3, [r3, #4]
 800bc92:	687a      	ldr	r2, [r7, #4]
 800bc94:	429a      	cmp	r2, r3
 800bc96:	d103      	bne.n	800bca0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	689a      	ldr	r2, [r3, #8]
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	2200      	movs	r2, #0
 800bca4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	1e5a      	subs	r2, r3, #1
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	681b      	ldr	r3, [r3, #0]
}
 800bcb4:	4618      	mov	r0, r3
 800bcb6:	3714      	adds	r7, #20
 800bcb8:	46bd      	mov	sp, r7
 800bcba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcbe:	4770      	bx	lr

0800bcc0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800bcc0:	b580      	push	{r7, lr}
 800bcc2:	b084      	sub	sp, #16
 800bcc4:	af00      	add	r7, sp, #0
 800bcc6:	6078      	str	r0, [r7, #4]
 800bcc8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d10a      	bne.n	800bcea <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800bcd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcd8:	f383 8811 	msr	BASEPRI, r3
 800bcdc:	f3bf 8f6f 	isb	sy
 800bce0:	f3bf 8f4f 	dsb	sy
 800bce4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800bce6:	bf00      	nop
 800bce8:	e7fe      	b.n	800bce8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800bcea:	f001 fd53 	bl	800d794 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	681a      	ldr	r2, [r3, #0]
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bcf6:	68f9      	ldr	r1, [r7, #12]
 800bcf8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800bcfa:	fb01 f303 	mul.w	r3, r1, r3
 800bcfe:	441a      	add	r2, r3
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	2200      	movs	r2, #0
 800bd08:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	681a      	ldr	r2, [r3, #0]
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	681a      	ldr	r2, [r3, #0]
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd1a:	3b01      	subs	r3, #1
 800bd1c:	68f9      	ldr	r1, [r7, #12]
 800bd1e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800bd20:	fb01 f303 	mul.w	r3, r1, r3
 800bd24:	441a      	add	r2, r3
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	22ff      	movs	r2, #255	; 0xff
 800bd2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	22ff      	movs	r2, #255	; 0xff
 800bd36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800bd3a:	683b      	ldr	r3, [r7, #0]
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d114      	bne.n	800bd6a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	691b      	ldr	r3, [r3, #16]
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d01a      	beq.n	800bd7e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	3310      	adds	r3, #16
 800bd4c:	4618      	mov	r0, r3
 800bd4e:	f001 f92b 	bl	800cfa8 <xTaskRemoveFromEventList>
 800bd52:	4603      	mov	r3, r0
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d012      	beq.n	800bd7e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800bd58:	4b0c      	ldr	r3, [pc, #48]	; (800bd8c <xQueueGenericReset+0xcc>)
 800bd5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd5e:	601a      	str	r2, [r3, #0]
 800bd60:	f3bf 8f4f 	dsb	sy
 800bd64:	f3bf 8f6f 	isb	sy
 800bd68:	e009      	b.n	800bd7e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	3310      	adds	r3, #16
 800bd6e:	4618      	mov	r0, r3
 800bd70:	f7ff fef2 	bl	800bb58 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	3324      	adds	r3, #36	; 0x24
 800bd78:	4618      	mov	r0, r3
 800bd7a:	f7ff feed 	bl	800bb58 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800bd7e:	f001 fd39 	bl	800d7f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800bd82:	2301      	movs	r3, #1
}
 800bd84:	4618      	mov	r0, r3
 800bd86:	3710      	adds	r7, #16
 800bd88:	46bd      	mov	sp, r7
 800bd8a:	bd80      	pop	{r7, pc}
 800bd8c:	e000ed04 	.word	0xe000ed04

0800bd90 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800bd90:	b580      	push	{r7, lr}
 800bd92:	b08e      	sub	sp, #56	; 0x38
 800bd94:	af02      	add	r7, sp, #8
 800bd96:	60f8      	str	r0, [r7, #12]
 800bd98:	60b9      	str	r1, [r7, #8]
 800bd9a:	607a      	str	r2, [r7, #4]
 800bd9c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d10a      	bne.n	800bdba <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800bda4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bda8:	f383 8811 	msr	BASEPRI, r3
 800bdac:	f3bf 8f6f 	isb	sy
 800bdb0:	f3bf 8f4f 	dsb	sy
 800bdb4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800bdb6:	bf00      	nop
 800bdb8:	e7fe      	b.n	800bdb8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800bdba:	683b      	ldr	r3, [r7, #0]
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d10a      	bne.n	800bdd6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800bdc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdc4:	f383 8811 	msr	BASEPRI, r3
 800bdc8:	f3bf 8f6f 	isb	sy
 800bdcc:	f3bf 8f4f 	dsb	sy
 800bdd0:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bdd2:	bf00      	nop
 800bdd4:	e7fe      	b.n	800bdd4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d002      	beq.n	800bde2 <xQueueGenericCreateStatic+0x52>
 800bddc:	68bb      	ldr	r3, [r7, #8]
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d001      	beq.n	800bde6 <xQueueGenericCreateStatic+0x56>
 800bde2:	2301      	movs	r3, #1
 800bde4:	e000      	b.n	800bde8 <xQueueGenericCreateStatic+0x58>
 800bde6:	2300      	movs	r3, #0
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d10a      	bne.n	800be02 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800bdec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdf0:	f383 8811 	msr	BASEPRI, r3
 800bdf4:	f3bf 8f6f 	isb	sy
 800bdf8:	f3bf 8f4f 	dsb	sy
 800bdfc:	623b      	str	r3, [r7, #32]
}
 800bdfe:	bf00      	nop
 800be00:	e7fe      	b.n	800be00 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	2b00      	cmp	r3, #0
 800be06:	d102      	bne.n	800be0e <xQueueGenericCreateStatic+0x7e>
 800be08:	68bb      	ldr	r3, [r7, #8]
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d101      	bne.n	800be12 <xQueueGenericCreateStatic+0x82>
 800be0e:	2301      	movs	r3, #1
 800be10:	e000      	b.n	800be14 <xQueueGenericCreateStatic+0x84>
 800be12:	2300      	movs	r3, #0
 800be14:	2b00      	cmp	r3, #0
 800be16:	d10a      	bne.n	800be2e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800be18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be1c:	f383 8811 	msr	BASEPRI, r3
 800be20:	f3bf 8f6f 	isb	sy
 800be24:	f3bf 8f4f 	dsb	sy
 800be28:	61fb      	str	r3, [r7, #28]
}
 800be2a:	bf00      	nop
 800be2c:	e7fe      	b.n	800be2c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800be2e:	2348      	movs	r3, #72	; 0x48
 800be30:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800be32:	697b      	ldr	r3, [r7, #20]
 800be34:	2b48      	cmp	r3, #72	; 0x48
 800be36:	d00a      	beq.n	800be4e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800be38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be3c:	f383 8811 	msr	BASEPRI, r3
 800be40:	f3bf 8f6f 	isb	sy
 800be44:	f3bf 8f4f 	dsb	sy
 800be48:	61bb      	str	r3, [r7, #24]
}
 800be4a:	bf00      	nop
 800be4c:	e7fe      	b.n	800be4c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800be4e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800be50:	683b      	ldr	r3, [r7, #0]
 800be52:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800be54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be56:	2b00      	cmp	r3, #0
 800be58:	d00d      	beq.n	800be76 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800be5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be5c:	2201      	movs	r2, #1
 800be5e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800be62:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800be66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be68:	9300      	str	r3, [sp, #0]
 800be6a:	4613      	mov	r3, r2
 800be6c:	687a      	ldr	r2, [r7, #4]
 800be6e:	68b9      	ldr	r1, [r7, #8]
 800be70:	68f8      	ldr	r0, [r7, #12]
 800be72:	f000 f83f 	bl	800bef4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800be76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800be78:	4618      	mov	r0, r3
 800be7a:	3730      	adds	r7, #48	; 0x30
 800be7c:	46bd      	mov	sp, r7
 800be7e:	bd80      	pop	{r7, pc}

0800be80 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800be80:	b580      	push	{r7, lr}
 800be82:	b08a      	sub	sp, #40	; 0x28
 800be84:	af02      	add	r7, sp, #8
 800be86:	60f8      	str	r0, [r7, #12]
 800be88:	60b9      	str	r1, [r7, #8]
 800be8a:	4613      	mov	r3, r2
 800be8c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	2b00      	cmp	r3, #0
 800be92:	d10a      	bne.n	800beaa <xQueueGenericCreate+0x2a>
	__asm volatile
 800be94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be98:	f383 8811 	msr	BASEPRI, r3
 800be9c:	f3bf 8f6f 	isb	sy
 800bea0:	f3bf 8f4f 	dsb	sy
 800bea4:	613b      	str	r3, [r7, #16]
}
 800bea6:	bf00      	nop
 800bea8:	e7fe      	b.n	800bea8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	68ba      	ldr	r2, [r7, #8]
 800beae:	fb02 f303 	mul.w	r3, r2, r3
 800beb2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800beb4:	69fb      	ldr	r3, [r7, #28]
 800beb6:	3348      	adds	r3, #72	; 0x48
 800beb8:	4618      	mov	r0, r3
 800beba:	f001 fd8d 	bl	800d9d8 <pvPortMalloc>
 800bebe:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800bec0:	69bb      	ldr	r3, [r7, #24]
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d011      	beq.n	800beea <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800bec6:	69bb      	ldr	r3, [r7, #24]
 800bec8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800beca:	697b      	ldr	r3, [r7, #20]
 800becc:	3348      	adds	r3, #72	; 0x48
 800bece:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800bed0:	69bb      	ldr	r3, [r7, #24]
 800bed2:	2200      	movs	r2, #0
 800bed4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bed8:	79fa      	ldrb	r2, [r7, #7]
 800beda:	69bb      	ldr	r3, [r7, #24]
 800bedc:	9300      	str	r3, [sp, #0]
 800bede:	4613      	mov	r3, r2
 800bee0:	697a      	ldr	r2, [r7, #20]
 800bee2:	68b9      	ldr	r1, [r7, #8]
 800bee4:	68f8      	ldr	r0, [r7, #12]
 800bee6:	f000 f805 	bl	800bef4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800beea:	69bb      	ldr	r3, [r7, #24]
	}
 800beec:	4618      	mov	r0, r3
 800beee:	3720      	adds	r7, #32
 800bef0:	46bd      	mov	sp, r7
 800bef2:	bd80      	pop	{r7, pc}

0800bef4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800bef4:	b580      	push	{r7, lr}
 800bef6:	b084      	sub	sp, #16
 800bef8:	af00      	add	r7, sp, #0
 800befa:	60f8      	str	r0, [r7, #12]
 800befc:	60b9      	str	r1, [r7, #8]
 800befe:	607a      	str	r2, [r7, #4]
 800bf00:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800bf02:	68bb      	ldr	r3, [r7, #8]
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d103      	bne.n	800bf10 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800bf08:	69bb      	ldr	r3, [r7, #24]
 800bf0a:	69ba      	ldr	r2, [r7, #24]
 800bf0c:	601a      	str	r2, [r3, #0]
 800bf0e:	e002      	b.n	800bf16 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800bf10:	69bb      	ldr	r3, [r7, #24]
 800bf12:	687a      	ldr	r2, [r7, #4]
 800bf14:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800bf16:	69bb      	ldr	r3, [r7, #24]
 800bf18:	68fa      	ldr	r2, [r7, #12]
 800bf1a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800bf1c:	69bb      	ldr	r3, [r7, #24]
 800bf1e:	68ba      	ldr	r2, [r7, #8]
 800bf20:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800bf22:	2101      	movs	r1, #1
 800bf24:	69b8      	ldr	r0, [r7, #24]
 800bf26:	f7ff fecb 	bl	800bcc0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800bf2a:	bf00      	nop
 800bf2c:	3710      	adds	r7, #16
 800bf2e:	46bd      	mov	sp, r7
 800bf30:	bd80      	pop	{r7, pc}
	...

0800bf34 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800bf34:	b580      	push	{r7, lr}
 800bf36:	b08e      	sub	sp, #56	; 0x38
 800bf38:	af00      	add	r7, sp, #0
 800bf3a:	60f8      	str	r0, [r7, #12]
 800bf3c:	60b9      	str	r1, [r7, #8]
 800bf3e:	607a      	str	r2, [r7, #4]
 800bf40:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800bf42:	2300      	movs	r3, #0
 800bf44:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800bf4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d10a      	bne.n	800bf66 <xQueueGenericSend+0x32>
	__asm volatile
 800bf50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf54:	f383 8811 	msr	BASEPRI, r3
 800bf58:	f3bf 8f6f 	isb	sy
 800bf5c:	f3bf 8f4f 	dsb	sy
 800bf60:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800bf62:	bf00      	nop
 800bf64:	e7fe      	b.n	800bf64 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bf66:	68bb      	ldr	r3, [r7, #8]
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d103      	bne.n	800bf74 <xQueueGenericSend+0x40>
 800bf6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d101      	bne.n	800bf78 <xQueueGenericSend+0x44>
 800bf74:	2301      	movs	r3, #1
 800bf76:	e000      	b.n	800bf7a <xQueueGenericSend+0x46>
 800bf78:	2300      	movs	r3, #0
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d10a      	bne.n	800bf94 <xQueueGenericSend+0x60>
	__asm volatile
 800bf7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf82:	f383 8811 	msr	BASEPRI, r3
 800bf86:	f3bf 8f6f 	isb	sy
 800bf8a:	f3bf 8f4f 	dsb	sy
 800bf8e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bf90:	bf00      	nop
 800bf92:	e7fe      	b.n	800bf92 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bf94:	683b      	ldr	r3, [r7, #0]
 800bf96:	2b02      	cmp	r3, #2
 800bf98:	d103      	bne.n	800bfa2 <xQueueGenericSend+0x6e>
 800bf9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf9e:	2b01      	cmp	r3, #1
 800bfa0:	d101      	bne.n	800bfa6 <xQueueGenericSend+0x72>
 800bfa2:	2301      	movs	r3, #1
 800bfa4:	e000      	b.n	800bfa8 <xQueueGenericSend+0x74>
 800bfa6:	2300      	movs	r3, #0
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d10a      	bne.n	800bfc2 <xQueueGenericSend+0x8e>
	__asm volatile
 800bfac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfb0:	f383 8811 	msr	BASEPRI, r3
 800bfb4:	f3bf 8f6f 	isb	sy
 800bfb8:	f3bf 8f4f 	dsb	sy
 800bfbc:	623b      	str	r3, [r7, #32]
}
 800bfbe:	bf00      	nop
 800bfc0:	e7fe      	b.n	800bfc0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bfc2:	f001 f9b1 	bl	800d328 <xTaskGetSchedulerState>
 800bfc6:	4603      	mov	r3, r0
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d102      	bne.n	800bfd2 <xQueueGenericSend+0x9e>
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d101      	bne.n	800bfd6 <xQueueGenericSend+0xa2>
 800bfd2:	2301      	movs	r3, #1
 800bfd4:	e000      	b.n	800bfd8 <xQueueGenericSend+0xa4>
 800bfd6:	2300      	movs	r3, #0
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d10a      	bne.n	800bff2 <xQueueGenericSend+0xbe>
	__asm volatile
 800bfdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfe0:	f383 8811 	msr	BASEPRI, r3
 800bfe4:	f3bf 8f6f 	isb	sy
 800bfe8:	f3bf 8f4f 	dsb	sy
 800bfec:	61fb      	str	r3, [r7, #28]
}
 800bfee:	bf00      	nop
 800bff0:	e7fe      	b.n	800bff0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bff2:	f001 fbcf 	bl	800d794 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bff8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bffc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bffe:	429a      	cmp	r2, r3
 800c000:	d302      	bcc.n	800c008 <xQueueGenericSend+0xd4>
 800c002:	683b      	ldr	r3, [r7, #0]
 800c004:	2b02      	cmp	r3, #2
 800c006:	d129      	bne.n	800c05c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c008:	683a      	ldr	r2, [r7, #0]
 800c00a:	68b9      	ldr	r1, [r7, #8]
 800c00c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c00e:	f000 fa8b 	bl	800c528 <prvCopyDataToQueue>
 800c012:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d010      	beq.n	800c03e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c01c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c01e:	3324      	adds	r3, #36	; 0x24
 800c020:	4618      	mov	r0, r3
 800c022:	f000 ffc1 	bl	800cfa8 <xTaskRemoveFromEventList>
 800c026:	4603      	mov	r3, r0
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d013      	beq.n	800c054 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c02c:	4b3f      	ldr	r3, [pc, #252]	; (800c12c <xQueueGenericSend+0x1f8>)
 800c02e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c032:	601a      	str	r2, [r3, #0]
 800c034:	f3bf 8f4f 	dsb	sy
 800c038:	f3bf 8f6f 	isb	sy
 800c03c:	e00a      	b.n	800c054 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c03e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c040:	2b00      	cmp	r3, #0
 800c042:	d007      	beq.n	800c054 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c044:	4b39      	ldr	r3, [pc, #228]	; (800c12c <xQueueGenericSend+0x1f8>)
 800c046:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c04a:	601a      	str	r2, [r3, #0]
 800c04c:	f3bf 8f4f 	dsb	sy
 800c050:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c054:	f001 fbce 	bl	800d7f4 <vPortExitCritical>
				return pdPASS;
 800c058:	2301      	movs	r3, #1
 800c05a:	e063      	b.n	800c124 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d103      	bne.n	800c06a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c062:	f001 fbc7 	bl	800d7f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c066:	2300      	movs	r3, #0
 800c068:	e05c      	b.n	800c124 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c06a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d106      	bne.n	800c07e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c070:	f107 0314 	add.w	r3, r7, #20
 800c074:	4618      	mov	r0, r3
 800c076:	f000 fff9 	bl	800d06c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c07a:	2301      	movs	r3, #1
 800c07c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c07e:	f001 fbb9 	bl	800d7f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c082:	f000 fda9 	bl	800cbd8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c086:	f001 fb85 	bl	800d794 <vPortEnterCritical>
 800c08a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c08c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c090:	b25b      	sxtb	r3, r3
 800c092:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c096:	d103      	bne.n	800c0a0 <xQueueGenericSend+0x16c>
 800c098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c09a:	2200      	movs	r2, #0
 800c09c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c0a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c0a6:	b25b      	sxtb	r3, r3
 800c0a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0ac:	d103      	bne.n	800c0b6 <xQueueGenericSend+0x182>
 800c0ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0b0:	2200      	movs	r2, #0
 800c0b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c0b6:	f001 fb9d 	bl	800d7f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c0ba:	1d3a      	adds	r2, r7, #4
 800c0bc:	f107 0314 	add.w	r3, r7, #20
 800c0c0:	4611      	mov	r1, r2
 800c0c2:	4618      	mov	r0, r3
 800c0c4:	f000 ffe8 	bl	800d098 <xTaskCheckForTimeOut>
 800c0c8:	4603      	mov	r3, r0
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d124      	bne.n	800c118 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c0ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c0d0:	f000 fb22 	bl	800c718 <prvIsQueueFull>
 800c0d4:	4603      	mov	r3, r0
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d018      	beq.n	800c10c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c0da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0dc:	3310      	adds	r3, #16
 800c0de:	687a      	ldr	r2, [r7, #4]
 800c0e0:	4611      	mov	r1, r2
 800c0e2:	4618      	mov	r0, r3
 800c0e4:	f000 ff3c 	bl	800cf60 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c0e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c0ea:	f000 faad 	bl	800c648 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c0ee:	f000 fd81 	bl	800cbf4 <xTaskResumeAll>
 800c0f2:	4603      	mov	r3, r0
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	f47f af7c 	bne.w	800bff2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800c0fa:	4b0c      	ldr	r3, [pc, #48]	; (800c12c <xQueueGenericSend+0x1f8>)
 800c0fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c100:	601a      	str	r2, [r3, #0]
 800c102:	f3bf 8f4f 	dsb	sy
 800c106:	f3bf 8f6f 	isb	sy
 800c10a:	e772      	b.n	800bff2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c10c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c10e:	f000 fa9b 	bl	800c648 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c112:	f000 fd6f 	bl	800cbf4 <xTaskResumeAll>
 800c116:	e76c      	b.n	800bff2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c118:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c11a:	f000 fa95 	bl	800c648 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c11e:	f000 fd69 	bl	800cbf4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c122:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c124:	4618      	mov	r0, r3
 800c126:	3738      	adds	r7, #56	; 0x38
 800c128:	46bd      	mov	sp, r7
 800c12a:	bd80      	pop	{r7, pc}
 800c12c:	e000ed04 	.word	0xe000ed04

0800c130 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c130:	b580      	push	{r7, lr}
 800c132:	b090      	sub	sp, #64	; 0x40
 800c134:	af00      	add	r7, sp, #0
 800c136:	60f8      	str	r0, [r7, #12]
 800c138:	60b9      	str	r1, [r7, #8]
 800c13a:	607a      	str	r2, [r7, #4]
 800c13c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800c142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c144:	2b00      	cmp	r3, #0
 800c146:	d10a      	bne.n	800c15e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800c148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c14c:	f383 8811 	msr	BASEPRI, r3
 800c150:	f3bf 8f6f 	isb	sy
 800c154:	f3bf 8f4f 	dsb	sy
 800c158:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c15a:	bf00      	nop
 800c15c:	e7fe      	b.n	800c15c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c15e:	68bb      	ldr	r3, [r7, #8]
 800c160:	2b00      	cmp	r3, #0
 800c162:	d103      	bne.n	800c16c <xQueueGenericSendFromISR+0x3c>
 800c164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d101      	bne.n	800c170 <xQueueGenericSendFromISR+0x40>
 800c16c:	2301      	movs	r3, #1
 800c16e:	e000      	b.n	800c172 <xQueueGenericSendFromISR+0x42>
 800c170:	2300      	movs	r3, #0
 800c172:	2b00      	cmp	r3, #0
 800c174:	d10a      	bne.n	800c18c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800c176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c17a:	f383 8811 	msr	BASEPRI, r3
 800c17e:	f3bf 8f6f 	isb	sy
 800c182:	f3bf 8f4f 	dsb	sy
 800c186:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c188:	bf00      	nop
 800c18a:	e7fe      	b.n	800c18a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c18c:	683b      	ldr	r3, [r7, #0]
 800c18e:	2b02      	cmp	r3, #2
 800c190:	d103      	bne.n	800c19a <xQueueGenericSendFromISR+0x6a>
 800c192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c194:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c196:	2b01      	cmp	r3, #1
 800c198:	d101      	bne.n	800c19e <xQueueGenericSendFromISR+0x6e>
 800c19a:	2301      	movs	r3, #1
 800c19c:	e000      	b.n	800c1a0 <xQueueGenericSendFromISR+0x70>
 800c19e:	2300      	movs	r3, #0
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d10a      	bne.n	800c1ba <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800c1a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1a8:	f383 8811 	msr	BASEPRI, r3
 800c1ac:	f3bf 8f6f 	isb	sy
 800c1b0:	f3bf 8f4f 	dsb	sy
 800c1b4:	623b      	str	r3, [r7, #32]
}
 800c1b6:	bf00      	nop
 800c1b8:	e7fe      	b.n	800c1b8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c1ba:	f001 fbcd 	bl	800d958 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c1be:	f3ef 8211 	mrs	r2, BASEPRI
 800c1c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1c6:	f383 8811 	msr	BASEPRI, r3
 800c1ca:	f3bf 8f6f 	isb	sy
 800c1ce:	f3bf 8f4f 	dsb	sy
 800c1d2:	61fa      	str	r2, [r7, #28]
 800c1d4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c1d6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c1d8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c1da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c1de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c1e2:	429a      	cmp	r2, r3
 800c1e4:	d302      	bcc.n	800c1ec <xQueueGenericSendFromISR+0xbc>
 800c1e6:	683b      	ldr	r3, [r7, #0]
 800c1e8:	2b02      	cmp	r3, #2
 800c1ea:	d12f      	bne.n	800c24c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c1ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c1f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c1f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1fa:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c1fc:	683a      	ldr	r2, [r7, #0]
 800c1fe:	68b9      	ldr	r1, [r7, #8]
 800c200:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c202:	f000 f991 	bl	800c528 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c206:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800c20a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c20e:	d112      	bne.n	800c236 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c214:	2b00      	cmp	r3, #0
 800c216:	d016      	beq.n	800c246 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c21a:	3324      	adds	r3, #36	; 0x24
 800c21c:	4618      	mov	r0, r3
 800c21e:	f000 fec3 	bl	800cfa8 <xTaskRemoveFromEventList>
 800c222:	4603      	mov	r3, r0
 800c224:	2b00      	cmp	r3, #0
 800c226:	d00e      	beq.n	800c246 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d00b      	beq.n	800c246 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	2201      	movs	r2, #1
 800c232:	601a      	str	r2, [r3, #0]
 800c234:	e007      	b.n	800c246 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c236:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c23a:	3301      	adds	r3, #1
 800c23c:	b2db      	uxtb	r3, r3
 800c23e:	b25a      	sxtb	r2, r3
 800c240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c242:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c246:	2301      	movs	r3, #1
 800c248:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800c24a:	e001      	b.n	800c250 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c24c:	2300      	movs	r3, #0
 800c24e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c250:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c252:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c254:	697b      	ldr	r3, [r7, #20]
 800c256:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c25a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c25c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c25e:	4618      	mov	r0, r3
 800c260:	3740      	adds	r7, #64	; 0x40
 800c262:	46bd      	mov	sp, r7
 800c264:	bd80      	pop	{r7, pc}
	...

0800c268 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c268:	b580      	push	{r7, lr}
 800c26a:	b08c      	sub	sp, #48	; 0x30
 800c26c:	af00      	add	r7, sp, #0
 800c26e:	60f8      	str	r0, [r7, #12]
 800c270:	60b9      	str	r1, [r7, #8]
 800c272:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c274:	2300      	movs	r3, #0
 800c276:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c27c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d10a      	bne.n	800c298 <xQueueReceive+0x30>
	__asm volatile
 800c282:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c286:	f383 8811 	msr	BASEPRI, r3
 800c28a:	f3bf 8f6f 	isb	sy
 800c28e:	f3bf 8f4f 	dsb	sy
 800c292:	623b      	str	r3, [r7, #32]
}
 800c294:	bf00      	nop
 800c296:	e7fe      	b.n	800c296 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c298:	68bb      	ldr	r3, [r7, #8]
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d103      	bne.n	800c2a6 <xQueueReceive+0x3e>
 800c29e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d101      	bne.n	800c2aa <xQueueReceive+0x42>
 800c2a6:	2301      	movs	r3, #1
 800c2a8:	e000      	b.n	800c2ac <xQueueReceive+0x44>
 800c2aa:	2300      	movs	r3, #0
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d10a      	bne.n	800c2c6 <xQueueReceive+0x5e>
	__asm volatile
 800c2b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2b4:	f383 8811 	msr	BASEPRI, r3
 800c2b8:	f3bf 8f6f 	isb	sy
 800c2bc:	f3bf 8f4f 	dsb	sy
 800c2c0:	61fb      	str	r3, [r7, #28]
}
 800c2c2:	bf00      	nop
 800c2c4:	e7fe      	b.n	800c2c4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c2c6:	f001 f82f 	bl	800d328 <xTaskGetSchedulerState>
 800c2ca:	4603      	mov	r3, r0
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d102      	bne.n	800c2d6 <xQueueReceive+0x6e>
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d101      	bne.n	800c2da <xQueueReceive+0x72>
 800c2d6:	2301      	movs	r3, #1
 800c2d8:	e000      	b.n	800c2dc <xQueueReceive+0x74>
 800c2da:	2300      	movs	r3, #0
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d10a      	bne.n	800c2f6 <xQueueReceive+0x8e>
	__asm volatile
 800c2e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2e4:	f383 8811 	msr	BASEPRI, r3
 800c2e8:	f3bf 8f6f 	isb	sy
 800c2ec:	f3bf 8f4f 	dsb	sy
 800c2f0:	61bb      	str	r3, [r7, #24]
}
 800c2f2:	bf00      	nop
 800c2f4:	e7fe      	b.n	800c2f4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c2f6:	f001 fa4d 	bl	800d794 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c2fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2fe:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c302:	2b00      	cmp	r3, #0
 800c304:	d01f      	beq.n	800c346 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c306:	68b9      	ldr	r1, [r7, #8]
 800c308:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c30a:	f000 f977 	bl	800c5fc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c30e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c310:	1e5a      	subs	r2, r3, #1
 800c312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c314:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c318:	691b      	ldr	r3, [r3, #16]
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d00f      	beq.n	800c33e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c31e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c320:	3310      	adds	r3, #16
 800c322:	4618      	mov	r0, r3
 800c324:	f000 fe40 	bl	800cfa8 <xTaskRemoveFromEventList>
 800c328:	4603      	mov	r3, r0
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d007      	beq.n	800c33e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c32e:	4b3d      	ldr	r3, [pc, #244]	; (800c424 <xQueueReceive+0x1bc>)
 800c330:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c334:	601a      	str	r2, [r3, #0]
 800c336:	f3bf 8f4f 	dsb	sy
 800c33a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c33e:	f001 fa59 	bl	800d7f4 <vPortExitCritical>
				return pdPASS;
 800c342:	2301      	movs	r3, #1
 800c344:	e069      	b.n	800c41a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d103      	bne.n	800c354 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c34c:	f001 fa52 	bl	800d7f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c350:	2300      	movs	r3, #0
 800c352:	e062      	b.n	800c41a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c356:	2b00      	cmp	r3, #0
 800c358:	d106      	bne.n	800c368 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c35a:	f107 0310 	add.w	r3, r7, #16
 800c35e:	4618      	mov	r0, r3
 800c360:	f000 fe84 	bl	800d06c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c364:	2301      	movs	r3, #1
 800c366:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c368:	f001 fa44 	bl	800d7f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c36c:	f000 fc34 	bl	800cbd8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c370:	f001 fa10 	bl	800d794 <vPortEnterCritical>
 800c374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c376:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c37a:	b25b      	sxtb	r3, r3
 800c37c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c380:	d103      	bne.n	800c38a <xQueueReceive+0x122>
 800c382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c384:	2200      	movs	r2, #0
 800c386:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c38a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c38c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c390:	b25b      	sxtb	r3, r3
 800c392:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c396:	d103      	bne.n	800c3a0 <xQueueReceive+0x138>
 800c398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c39a:	2200      	movs	r2, #0
 800c39c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c3a0:	f001 fa28 	bl	800d7f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c3a4:	1d3a      	adds	r2, r7, #4
 800c3a6:	f107 0310 	add.w	r3, r7, #16
 800c3aa:	4611      	mov	r1, r2
 800c3ac:	4618      	mov	r0, r3
 800c3ae:	f000 fe73 	bl	800d098 <xTaskCheckForTimeOut>
 800c3b2:	4603      	mov	r3, r0
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d123      	bne.n	800c400 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c3b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c3ba:	f000 f997 	bl	800c6ec <prvIsQueueEmpty>
 800c3be:	4603      	mov	r3, r0
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d017      	beq.n	800c3f4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c3c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3c6:	3324      	adds	r3, #36	; 0x24
 800c3c8:	687a      	ldr	r2, [r7, #4]
 800c3ca:	4611      	mov	r1, r2
 800c3cc:	4618      	mov	r0, r3
 800c3ce:	f000 fdc7 	bl	800cf60 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c3d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c3d4:	f000 f938 	bl	800c648 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c3d8:	f000 fc0c 	bl	800cbf4 <xTaskResumeAll>
 800c3dc:	4603      	mov	r3, r0
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d189      	bne.n	800c2f6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800c3e2:	4b10      	ldr	r3, [pc, #64]	; (800c424 <xQueueReceive+0x1bc>)
 800c3e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c3e8:	601a      	str	r2, [r3, #0]
 800c3ea:	f3bf 8f4f 	dsb	sy
 800c3ee:	f3bf 8f6f 	isb	sy
 800c3f2:	e780      	b.n	800c2f6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c3f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c3f6:	f000 f927 	bl	800c648 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c3fa:	f000 fbfb 	bl	800cbf4 <xTaskResumeAll>
 800c3fe:	e77a      	b.n	800c2f6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c400:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c402:	f000 f921 	bl	800c648 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c406:	f000 fbf5 	bl	800cbf4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c40a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c40c:	f000 f96e 	bl	800c6ec <prvIsQueueEmpty>
 800c410:	4603      	mov	r3, r0
 800c412:	2b00      	cmp	r3, #0
 800c414:	f43f af6f 	beq.w	800c2f6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c418:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c41a:	4618      	mov	r0, r3
 800c41c:	3730      	adds	r7, #48	; 0x30
 800c41e:	46bd      	mov	sp, r7
 800c420:	bd80      	pop	{r7, pc}
 800c422:	bf00      	nop
 800c424:	e000ed04 	.word	0xe000ed04

0800c428 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c428:	b580      	push	{r7, lr}
 800c42a:	b08e      	sub	sp, #56	; 0x38
 800c42c:	af00      	add	r7, sp, #0
 800c42e:	60f8      	str	r0, [r7, #12]
 800c430:	60b9      	str	r1, [r7, #8]
 800c432:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d10a      	bne.n	800c454 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800c43e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c442:	f383 8811 	msr	BASEPRI, r3
 800c446:	f3bf 8f6f 	isb	sy
 800c44a:	f3bf 8f4f 	dsb	sy
 800c44e:	623b      	str	r3, [r7, #32]
}
 800c450:	bf00      	nop
 800c452:	e7fe      	b.n	800c452 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c454:	68bb      	ldr	r3, [r7, #8]
 800c456:	2b00      	cmp	r3, #0
 800c458:	d103      	bne.n	800c462 <xQueueReceiveFromISR+0x3a>
 800c45a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c45c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d101      	bne.n	800c466 <xQueueReceiveFromISR+0x3e>
 800c462:	2301      	movs	r3, #1
 800c464:	e000      	b.n	800c468 <xQueueReceiveFromISR+0x40>
 800c466:	2300      	movs	r3, #0
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d10a      	bne.n	800c482 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800c46c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c470:	f383 8811 	msr	BASEPRI, r3
 800c474:	f3bf 8f6f 	isb	sy
 800c478:	f3bf 8f4f 	dsb	sy
 800c47c:	61fb      	str	r3, [r7, #28]
}
 800c47e:	bf00      	nop
 800c480:	e7fe      	b.n	800c480 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c482:	f001 fa69 	bl	800d958 <vPortValidateInterruptPriority>
	__asm volatile
 800c486:	f3ef 8211 	mrs	r2, BASEPRI
 800c48a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c48e:	f383 8811 	msr	BASEPRI, r3
 800c492:	f3bf 8f6f 	isb	sy
 800c496:	f3bf 8f4f 	dsb	sy
 800c49a:	61ba      	str	r2, [r7, #24]
 800c49c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800c49e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c4a0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c4a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4a6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c4a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d02f      	beq.n	800c50e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800c4ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c4b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c4b8:	68b9      	ldr	r1, [r7, #8]
 800c4ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c4bc:	f000 f89e 	bl	800c5fc <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c4c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4c2:	1e5a      	subs	r2, r3, #1
 800c4c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4c6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800c4c8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c4cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4d0:	d112      	bne.n	800c4f8 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c4d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4d4:	691b      	ldr	r3, [r3, #16]
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d016      	beq.n	800c508 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c4da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4dc:	3310      	adds	r3, #16
 800c4de:	4618      	mov	r0, r3
 800c4e0:	f000 fd62 	bl	800cfa8 <xTaskRemoveFromEventList>
 800c4e4:	4603      	mov	r3, r0
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d00e      	beq.n	800c508 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d00b      	beq.n	800c508 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	2201      	movs	r2, #1
 800c4f4:	601a      	str	r2, [r3, #0]
 800c4f6:	e007      	b.n	800c508 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800c4f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c4fc:	3301      	adds	r3, #1
 800c4fe:	b2db      	uxtb	r3, r3
 800c500:	b25a      	sxtb	r2, r3
 800c502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c504:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800c508:	2301      	movs	r3, #1
 800c50a:	637b      	str	r3, [r7, #52]	; 0x34
 800c50c:	e001      	b.n	800c512 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800c50e:	2300      	movs	r3, #0
 800c510:	637b      	str	r3, [r7, #52]	; 0x34
 800c512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c514:	613b      	str	r3, [r7, #16]
	__asm volatile
 800c516:	693b      	ldr	r3, [r7, #16]
 800c518:	f383 8811 	msr	BASEPRI, r3
}
 800c51c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c51e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c520:	4618      	mov	r0, r3
 800c522:	3738      	adds	r7, #56	; 0x38
 800c524:	46bd      	mov	sp, r7
 800c526:	bd80      	pop	{r7, pc}

0800c528 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c528:	b580      	push	{r7, lr}
 800c52a:	b086      	sub	sp, #24
 800c52c:	af00      	add	r7, sp, #0
 800c52e:	60f8      	str	r0, [r7, #12]
 800c530:	60b9      	str	r1, [r7, #8]
 800c532:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c534:	2300      	movs	r3, #0
 800c536:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c53c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c542:	2b00      	cmp	r3, #0
 800c544:	d10d      	bne.n	800c562 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d14d      	bne.n	800c5ea <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c54e:	68fb      	ldr	r3, [r7, #12]
 800c550:	689b      	ldr	r3, [r3, #8]
 800c552:	4618      	mov	r0, r3
 800c554:	f000 ff06 	bl	800d364 <xTaskPriorityDisinherit>
 800c558:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	2200      	movs	r2, #0
 800c55e:	609a      	str	r2, [r3, #8]
 800c560:	e043      	b.n	800c5ea <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	2b00      	cmp	r3, #0
 800c566:	d119      	bne.n	800c59c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	6858      	ldr	r0, [r3, #4]
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c570:	461a      	mov	r2, r3
 800c572:	68b9      	ldr	r1, [r7, #8]
 800c574:	f002 ff97 	bl	800f4a6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	685a      	ldr	r2, [r3, #4]
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c580:	441a      	add	r2, r3
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	685a      	ldr	r2, [r3, #4]
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	689b      	ldr	r3, [r3, #8]
 800c58e:	429a      	cmp	r2, r3
 800c590:	d32b      	bcc.n	800c5ea <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	681a      	ldr	r2, [r3, #0]
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	605a      	str	r2, [r3, #4]
 800c59a:	e026      	b.n	800c5ea <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	68d8      	ldr	r0, [r3, #12]
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5a4:	461a      	mov	r2, r3
 800c5a6:	68b9      	ldr	r1, [r7, #8]
 800c5a8:	f002 ff7d 	bl	800f4a6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	68da      	ldr	r2, [r3, #12]
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5b4:	425b      	negs	r3, r3
 800c5b6:	441a      	add	r2, r3
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	68da      	ldr	r2, [r3, #12]
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	429a      	cmp	r2, r3
 800c5c6:	d207      	bcs.n	800c5d8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	689a      	ldr	r2, [r3, #8]
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5d0:	425b      	negs	r3, r3
 800c5d2:	441a      	add	r2, r3
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	2b02      	cmp	r3, #2
 800c5dc:	d105      	bne.n	800c5ea <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c5de:	693b      	ldr	r3, [r7, #16]
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d002      	beq.n	800c5ea <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c5e4:	693b      	ldr	r3, [r7, #16]
 800c5e6:	3b01      	subs	r3, #1
 800c5e8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c5ea:	693b      	ldr	r3, [r7, #16]
 800c5ec:	1c5a      	adds	r2, r3, #1
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c5f2:	697b      	ldr	r3, [r7, #20]
}
 800c5f4:	4618      	mov	r0, r3
 800c5f6:	3718      	adds	r7, #24
 800c5f8:	46bd      	mov	sp, r7
 800c5fa:	bd80      	pop	{r7, pc}

0800c5fc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c5fc:	b580      	push	{r7, lr}
 800c5fe:	b082      	sub	sp, #8
 800c600:	af00      	add	r7, sp, #0
 800c602:	6078      	str	r0, [r7, #4]
 800c604:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d018      	beq.n	800c640 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	68da      	ldr	r2, [r3, #12]
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c616:	441a      	add	r2, r3
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	68da      	ldr	r2, [r3, #12]
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	689b      	ldr	r3, [r3, #8]
 800c624:	429a      	cmp	r2, r3
 800c626:	d303      	bcc.n	800c630 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	681a      	ldr	r2, [r3, #0]
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	68d9      	ldr	r1, [r3, #12]
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c638:	461a      	mov	r2, r3
 800c63a:	6838      	ldr	r0, [r7, #0]
 800c63c:	f002 ff33 	bl	800f4a6 <memcpy>
	}
}
 800c640:	bf00      	nop
 800c642:	3708      	adds	r7, #8
 800c644:	46bd      	mov	sp, r7
 800c646:	bd80      	pop	{r7, pc}

0800c648 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c648:	b580      	push	{r7, lr}
 800c64a:	b084      	sub	sp, #16
 800c64c:	af00      	add	r7, sp, #0
 800c64e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c650:	f001 f8a0 	bl	800d794 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c65a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c65c:	e011      	b.n	800c682 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c662:	2b00      	cmp	r3, #0
 800c664:	d012      	beq.n	800c68c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	3324      	adds	r3, #36	; 0x24
 800c66a:	4618      	mov	r0, r3
 800c66c:	f000 fc9c 	bl	800cfa8 <xTaskRemoveFromEventList>
 800c670:	4603      	mov	r3, r0
 800c672:	2b00      	cmp	r3, #0
 800c674:	d001      	beq.n	800c67a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c676:	f000 fd71 	bl	800d15c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c67a:	7bfb      	ldrb	r3, [r7, #15]
 800c67c:	3b01      	subs	r3, #1
 800c67e:	b2db      	uxtb	r3, r3
 800c680:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c682:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c686:	2b00      	cmp	r3, #0
 800c688:	dce9      	bgt.n	800c65e <prvUnlockQueue+0x16>
 800c68a:	e000      	b.n	800c68e <prvUnlockQueue+0x46>
					break;
 800c68c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	22ff      	movs	r2, #255	; 0xff
 800c692:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c696:	f001 f8ad 	bl	800d7f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c69a:	f001 f87b 	bl	800d794 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c6a4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c6a6:	e011      	b.n	800c6cc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	691b      	ldr	r3, [r3, #16]
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d012      	beq.n	800c6d6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	3310      	adds	r3, #16
 800c6b4:	4618      	mov	r0, r3
 800c6b6:	f000 fc77 	bl	800cfa8 <xTaskRemoveFromEventList>
 800c6ba:	4603      	mov	r3, r0
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d001      	beq.n	800c6c4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c6c0:	f000 fd4c 	bl	800d15c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c6c4:	7bbb      	ldrb	r3, [r7, #14]
 800c6c6:	3b01      	subs	r3, #1
 800c6c8:	b2db      	uxtb	r3, r3
 800c6ca:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c6cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	dce9      	bgt.n	800c6a8 <prvUnlockQueue+0x60>
 800c6d4:	e000      	b.n	800c6d8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c6d6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	22ff      	movs	r2, #255	; 0xff
 800c6dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c6e0:	f001 f888 	bl	800d7f4 <vPortExitCritical>
}
 800c6e4:	bf00      	nop
 800c6e6:	3710      	adds	r7, #16
 800c6e8:	46bd      	mov	sp, r7
 800c6ea:	bd80      	pop	{r7, pc}

0800c6ec <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c6ec:	b580      	push	{r7, lr}
 800c6ee:	b084      	sub	sp, #16
 800c6f0:	af00      	add	r7, sp, #0
 800c6f2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c6f4:	f001 f84e 	bl	800d794 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d102      	bne.n	800c706 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c700:	2301      	movs	r3, #1
 800c702:	60fb      	str	r3, [r7, #12]
 800c704:	e001      	b.n	800c70a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c706:	2300      	movs	r3, #0
 800c708:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c70a:	f001 f873 	bl	800d7f4 <vPortExitCritical>

	return xReturn;
 800c70e:	68fb      	ldr	r3, [r7, #12]
}
 800c710:	4618      	mov	r0, r3
 800c712:	3710      	adds	r7, #16
 800c714:	46bd      	mov	sp, r7
 800c716:	bd80      	pop	{r7, pc}

0800c718 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c718:	b580      	push	{r7, lr}
 800c71a:	b084      	sub	sp, #16
 800c71c:	af00      	add	r7, sp, #0
 800c71e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c720:	f001 f838 	bl	800d794 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c72c:	429a      	cmp	r2, r3
 800c72e:	d102      	bne.n	800c736 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c730:	2301      	movs	r3, #1
 800c732:	60fb      	str	r3, [r7, #12]
 800c734:	e001      	b.n	800c73a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c736:	2300      	movs	r3, #0
 800c738:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c73a:	f001 f85b 	bl	800d7f4 <vPortExitCritical>

	return xReturn;
 800c73e:	68fb      	ldr	r3, [r7, #12]
}
 800c740:	4618      	mov	r0, r3
 800c742:	3710      	adds	r7, #16
 800c744:	46bd      	mov	sp, r7
 800c746:	bd80      	pop	{r7, pc}

0800c748 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c748:	b580      	push	{r7, lr}
 800c74a:	b08e      	sub	sp, #56	; 0x38
 800c74c:	af04      	add	r7, sp, #16
 800c74e:	60f8      	str	r0, [r7, #12]
 800c750:	60b9      	str	r1, [r7, #8]
 800c752:	607a      	str	r2, [r7, #4]
 800c754:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c756:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d10a      	bne.n	800c772 <xTaskCreateStatic+0x2a>
	__asm volatile
 800c75c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c760:	f383 8811 	msr	BASEPRI, r3
 800c764:	f3bf 8f6f 	isb	sy
 800c768:	f3bf 8f4f 	dsb	sy
 800c76c:	623b      	str	r3, [r7, #32]
}
 800c76e:	bf00      	nop
 800c770:	e7fe      	b.n	800c770 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c774:	2b00      	cmp	r3, #0
 800c776:	d10a      	bne.n	800c78e <xTaskCreateStatic+0x46>
	__asm volatile
 800c778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c77c:	f383 8811 	msr	BASEPRI, r3
 800c780:	f3bf 8f6f 	isb	sy
 800c784:	f3bf 8f4f 	dsb	sy
 800c788:	61fb      	str	r3, [r7, #28]
}
 800c78a:	bf00      	nop
 800c78c:	e7fe      	b.n	800c78c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c78e:	23a0      	movs	r3, #160	; 0xa0
 800c790:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c792:	693b      	ldr	r3, [r7, #16]
 800c794:	2ba0      	cmp	r3, #160	; 0xa0
 800c796:	d00a      	beq.n	800c7ae <xTaskCreateStatic+0x66>
	__asm volatile
 800c798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c79c:	f383 8811 	msr	BASEPRI, r3
 800c7a0:	f3bf 8f6f 	isb	sy
 800c7a4:	f3bf 8f4f 	dsb	sy
 800c7a8:	61bb      	str	r3, [r7, #24]
}
 800c7aa:	bf00      	nop
 800c7ac:	e7fe      	b.n	800c7ac <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c7ae:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c7b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d01e      	beq.n	800c7f4 <xTaskCreateStatic+0xac>
 800c7b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d01b      	beq.n	800c7f4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c7bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7be:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c7c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c7c4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c7c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7c8:	2202      	movs	r2, #2
 800c7ca:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c7ce:	2300      	movs	r3, #0
 800c7d0:	9303      	str	r3, [sp, #12]
 800c7d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7d4:	9302      	str	r3, [sp, #8]
 800c7d6:	f107 0314 	add.w	r3, r7, #20
 800c7da:	9301      	str	r3, [sp, #4]
 800c7dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7de:	9300      	str	r3, [sp, #0]
 800c7e0:	683b      	ldr	r3, [r7, #0]
 800c7e2:	687a      	ldr	r2, [r7, #4]
 800c7e4:	68b9      	ldr	r1, [r7, #8]
 800c7e6:	68f8      	ldr	r0, [r7, #12]
 800c7e8:	f000 f850 	bl	800c88c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c7ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c7ee:	f000 f8eb 	bl	800c9c8 <prvAddNewTaskToReadyList>
 800c7f2:	e001      	b.n	800c7f8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800c7f4:	2300      	movs	r3, #0
 800c7f6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c7f8:	697b      	ldr	r3, [r7, #20]
	}
 800c7fa:	4618      	mov	r0, r3
 800c7fc:	3728      	adds	r7, #40	; 0x28
 800c7fe:	46bd      	mov	sp, r7
 800c800:	bd80      	pop	{r7, pc}

0800c802 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c802:	b580      	push	{r7, lr}
 800c804:	b08c      	sub	sp, #48	; 0x30
 800c806:	af04      	add	r7, sp, #16
 800c808:	60f8      	str	r0, [r7, #12]
 800c80a:	60b9      	str	r1, [r7, #8]
 800c80c:	603b      	str	r3, [r7, #0]
 800c80e:	4613      	mov	r3, r2
 800c810:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c812:	88fb      	ldrh	r3, [r7, #6]
 800c814:	009b      	lsls	r3, r3, #2
 800c816:	4618      	mov	r0, r3
 800c818:	f001 f8de 	bl	800d9d8 <pvPortMalloc>
 800c81c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c81e:	697b      	ldr	r3, [r7, #20]
 800c820:	2b00      	cmp	r3, #0
 800c822:	d00e      	beq.n	800c842 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c824:	20a0      	movs	r0, #160	; 0xa0
 800c826:	f001 f8d7 	bl	800d9d8 <pvPortMalloc>
 800c82a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c82c:	69fb      	ldr	r3, [r7, #28]
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d003      	beq.n	800c83a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c832:	69fb      	ldr	r3, [r7, #28]
 800c834:	697a      	ldr	r2, [r7, #20]
 800c836:	631a      	str	r2, [r3, #48]	; 0x30
 800c838:	e005      	b.n	800c846 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c83a:	6978      	ldr	r0, [r7, #20]
 800c83c:	f001 f998 	bl	800db70 <vPortFree>
 800c840:	e001      	b.n	800c846 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c842:	2300      	movs	r3, #0
 800c844:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c846:	69fb      	ldr	r3, [r7, #28]
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d017      	beq.n	800c87c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c84c:	69fb      	ldr	r3, [r7, #28]
 800c84e:	2200      	movs	r2, #0
 800c850:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c854:	88fa      	ldrh	r2, [r7, #6]
 800c856:	2300      	movs	r3, #0
 800c858:	9303      	str	r3, [sp, #12]
 800c85a:	69fb      	ldr	r3, [r7, #28]
 800c85c:	9302      	str	r3, [sp, #8]
 800c85e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c860:	9301      	str	r3, [sp, #4]
 800c862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c864:	9300      	str	r3, [sp, #0]
 800c866:	683b      	ldr	r3, [r7, #0]
 800c868:	68b9      	ldr	r1, [r7, #8]
 800c86a:	68f8      	ldr	r0, [r7, #12]
 800c86c:	f000 f80e 	bl	800c88c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c870:	69f8      	ldr	r0, [r7, #28]
 800c872:	f000 f8a9 	bl	800c9c8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c876:	2301      	movs	r3, #1
 800c878:	61bb      	str	r3, [r7, #24]
 800c87a:	e002      	b.n	800c882 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c87c:	f04f 33ff 	mov.w	r3, #4294967295
 800c880:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c882:	69bb      	ldr	r3, [r7, #24]
	}
 800c884:	4618      	mov	r0, r3
 800c886:	3720      	adds	r7, #32
 800c888:	46bd      	mov	sp, r7
 800c88a:	bd80      	pop	{r7, pc}

0800c88c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c88c:	b580      	push	{r7, lr}
 800c88e:	b088      	sub	sp, #32
 800c890:	af00      	add	r7, sp, #0
 800c892:	60f8      	str	r0, [r7, #12]
 800c894:	60b9      	str	r1, [r7, #8]
 800c896:	607a      	str	r2, [r7, #4]
 800c898:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c89a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c89c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800c8a4:	3b01      	subs	r3, #1
 800c8a6:	009b      	lsls	r3, r3, #2
 800c8a8:	4413      	add	r3, r2
 800c8aa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c8ac:	69bb      	ldr	r3, [r7, #24]
 800c8ae:	f023 0307 	bic.w	r3, r3, #7
 800c8b2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c8b4:	69bb      	ldr	r3, [r7, #24]
 800c8b6:	f003 0307 	and.w	r3, r3, #7
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d00a      	beq.n	800c8d4 <prvInitialiseNewTask+0x48>
	__asm volatile
 800c8be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8c2:	f383 8811 	msr	BASEPRI, r3
 800c8c6:	f3bf 8f6f 	isb	sy
 800c8ca:	f3bf 8f4f 	dsb	sy
 800c8ce:	617b      	str	r3, [r7, #20]
}
 800c8d0:	bf00      	nop
 800c8d2:	e7fe      	b.n	800c8d2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c8d4:	68bb      	ldr	r3, [r7, #8]
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d01f      	beq.n	800c91a <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c8da:	2300      	movs	r3, #0
 800c8dc:	61fb      	str	r3, [r7, #28]
 800c8de:	e012      	b.n	800c906 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c8e0:	68ba      	ldr	r2, [r7, #8]
 800c8e2:	69fb      	ldr	r3, [r7, #28]
 800c8e4:	4413      	add	r3, r2
 800c8e6:	7819      	ldrb	r1, [r3, #0]
 800c8e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c8ea:	69fb      	ldr	r3, [r7, #28]
 800c8ec:	4413      	add	r3, r2
 800c8ee:	3334      	adds	r3, #52	; 0x34
 800c8f0:	460a      	mov	r2, r1
 800c8f2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c8f4:	68ba      	ldr	r2, [r7, #8]
 800c8f6:	69fb      	ldr	r3, [r7, #28]
 800c8f8:	4413      	add	r3, r2
 800c8fa:	781b      	ldrb	r3, [r3, #0]
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d006      	beq.n	800c90e <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c900:	69fb      	ldr	r3, [r7, #28]
 800c902:	3301      	adds	r3, #1
 800c904:	61fb      	str	r3, [r7, #28]
 800c906:	69fb      	ldr	r3, [r7, #28]
 800c908:	2b0f      	cmp	r3, #15
 800c90a:	d9e9      	bls.n	800c8e0 <prvInitialiseNewTask+0x54>
 800c90c:	e000      	b.n	800c910 <prvInitialiseNewTask+0x84>
			{
				break;
 800c90e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c912:	2200      	movs	r2, #0
 800c914:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c918:	e003      	b.n	800c922 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c91a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c91c:	2200      	movs	r2, #0
 800c91e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c924:	2b06      	cmp	r3, #6
 800c926:	d901      	bls.n	800c92c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c928:	2306      	movs	r3, #6
 800c92a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c92c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c92e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c930:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c934:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c936:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800c938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c93a:	2200      	movs	r2, #0
 800c93c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c93e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c940:	3304      	adds	r3, #4
 800c942:	4618      	mov	r0, r3
 800c944:	f7ff f928 	bl	800bb98 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c94a:	3318      	adds	r3, #24
 800c94c:	4618      	mov	r0, r3
 800c94e:	f7ff f923 	bl	800bb98 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c954:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c956:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c95a:	f1c3 0207 	rsb	r2, r3, #7
 800c95e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c960:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c964:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c966:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c96a:	2200      	movs	r2, #0
 800c96c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c972:	2200      	movs	r2, #0
 800c974:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800c978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c97a:	334c      	adds	r3, #76	; 0x4c
 800c97c:	224c      	movs	r2, #76	; 0x4c
 800c97e:	2100      	movs	r1, #0
 800c980:	4618      	mov	r0, r3
 800c982:	f002 fcba 	bl	800f2fa <memset>
 800c986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c988:	4a0c      	ldr	r2, [pc, #48]	; (800c9bc <prvInitialiseNewTask+0x130>)
 800c98a:	651a      	str	r2, [r3, #80]	; 0x50
 800c98c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c98e:	4a0c      	ldr	r2, [pc, #48]	; (800c9c0 <prvInitialiseNewTask+0x134>)
 800c990:	655a      	str	r2, [r3, #84]	; 0x54
 800c992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c994:	4a0b      	ldr	r2, [pc, #44]	; (800c9c4 <prvInitialiseNewTask+0x138>)
 800c996:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c998:	683a      	ldr	r2, [r7, #0]
 800c99a:	68f9      	ldr	r1, [r7, #12]
 800c99c:	69b8      	ldr	r0, [r7, #24]
 800c99e:	f000 fdcd 	bl	800d53c <pxPortInitialiseStack>
 800c9a2:	4602      	mov	r2, r0
 800c9a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9a6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c9a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d002      	beq.n	800c9b4 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c9ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c9b2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c9b4:	bf00      	nop
 800c9b6:	3720      	adds	r7, #32
 800c9b8:	46bd      	mov	sp, r7
 800c9ba:	bd80      	pop	{r7, pc}
 800c9bc:	20006228 	.word	0x20006228
 800c9c0:	20006290 	.word	0x20006290
 800c9c4:	200062f8 	.word	0x200062f8

0800c9c8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c9c8:	b580      	push	{r7, lr}
 800c9ca:	b082      	sub	sp, #8
 800c9cc:	af00      	add	r7, sp, #0
 800c9ce:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c9d0:	f000 fee0 	bl	800d794 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c9d4:	4b2a      	ldr	r3, [pc, #168]	; (800ca80 <prvAddNewTaskToReadyList+0xb8>)
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	3301      	adds	r3, #1
 800c9da:	4a29      	ldr	r2, [pc, #164]	; (800ca80 <prvAddNewTaskToReadyList+0xb8>)
 800c9dc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c9de:	4b29      	ldr	r3, [pc, #164]	; (800ca84 <prvAddNewTaskToReadyList+0xbc>)
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d109      	bne.n	800c9fa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c9e6:	4a27      	ldr	r2, [pc, #156]	; (800ca84 <prvAddNewTaskToReadyList+0xbc>)
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c9ec:	4b24      	ldr	r3, [pc, #144]	; (800ca80 <prvAddNewTaskToReadyList+0xb8>)
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	2b01      	cmp	r3, #1
 800c9f2:	d110      	bne.n	800ca16 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c9f4:	f000 fbd6 	bl	800d1a4 <prvInitialiseTaskLists>
 800c9f8:	e00d      	b.n	800ca16 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c9fa:	4b23      	ldr	r3, [pc, #140]	; (800ca88 <prvAddNewTaskToReadyList+0xc0>)
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d109      	bne.n	800ca16 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ca02:	4b20      	ldr	r3, [pc, #128]	; (800ca84 <prvAddNewTaskToReadyList+0xbc>)
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca0c:	429a      	cmp	r2, r3
 800ca0e:	d802      	bhi.n	800ca16 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ca10:	4a1c      	ldr	r2, [pc, #112]	; (800ca84 <prvAddNewTaskToReadyList+0xbc>)
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ca16:	4b1d      	ldr	r3, [pc, #116]	; (800ca8c <prvAddNewTaskToReadyList+0xc4>)
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	3301      	adds	r3, #1
 800ca1c:	4a1b      	ldr	r2, [pc, #108]	; (800ca8c <prvAddNewTaskToReadyList+0xc4>)
 800ca1e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca24:	2201      	movs	r2, #1
 800ca26:	409a      	lsls	r2, r3
 800ca28:	4b19      	ldr	r3, [pc, #100]	; (800ca90 <prvAddNewTaskToReadyList+0xc8>)
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	4313      	orrs	r3, r2
 800ca2e:	4a18      	ldr	r2, [pc, #96]	; (800ca90 <prvAddNewTaskToReadyList+0xc8>)
 800ca30:	6013      	str	r3, [r2, #0]
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca36:	4613      	mov	r3, r2
 800ca38:	009b      	lsls	r3, r3, #2
 800ca3a:	4413      	add	r3, r2
 800ca3c:	009b      	lsls	r3, r3, #2
 800ca3e:	4a15      	ldr	r2, [pc, #84]	; (800ca94 <prvAddNewTaskToReadyList+0xcc>)
 800ca40:	441a      	add	r2, r3
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	3304      	adds	r3, #4
 800ca46:	4619      	mov	r1, r3
 800ca48:	4610      	mov	r0, r2
 800ca4a:	f7ff f8b2 	bl	800bbb2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ca4e:	f000 fed1 	bl	800d7f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ca52:	4b0d      	ldr	r3, [pc, #52]	; (800ca88 <prvAddNewTaskToReadyList+0xc0>)
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d00e      	beq.n	800ca78 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ca5a:	4b0a      	ldr	r3, [pc, #40]	; (800ca84 <prvAddNewTaskToReadyList+0xbc>)
 800ca5c:	681b      	ldr	r3, [r3, #0]
 800ca5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca64:	429a      	cmp	r2, r3
 800ca66:	d207      	bcs.n	800ca78 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ca68:	4b0b      	ldr	r3, [pc, #44]	; (800ca98 <prvAddNewTaskToReadyList+0xd0>)
 800ca6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ca6e:	601a      	str	r2, [r3, #0]
 800ca70:	f3bf 8f4f 	dsb	sy
 800ca74:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ca78:	bf00      	nop
 800ca7a:	3708      	adds	r7, #8
 800ca7c:	46bd      	mov	sp, r7
 800ca7e:	bd80      	pop	{r7, pc}
 800ca80:	200009cc 	.word	0x200009cc
 800ca84:	200008cc 	.word	0x200008cc
 800ca88:	200009d8 	.word	0x200009d8
 800ca8c:	200009e8 	.word	0x200009e8
 800ca90:	200009d4 	.word	0x200009d4
 800ca94:	200008d0 	.word	0x200008d0
 800ca98:	e000ed04 	.word	0xe000ed04

0800ca9c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ca9c:	b580      	push	{r7, lr}
 800ca9e:	b084      	sub	sp, #16
 800caa0:	af00      	add	r7, sp, #0
 800caa2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800caa4:	2300      	movs	r3, #0
 800caa6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d017      	beq.n	800cade <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800caae:	4b13      	ldr	r3, [pc, #76]	; (800cafc <vTaskDelay+0x60>)
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d00a      	beq.n	800cacc <vTaskDelay+0x30>
	__asm volatile
 800cab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800caba:	f383 8811 	msr	BASEPRI, r3
 800cabe:	f3bf 8f6f 	isb	sy
 800cac2:	f3bf 8f4f 	dsb	sy
 800cac6:	60bb      	str	r3, [r7, #8]
}
 800cac8:	bf00      	nop
 800caca:	e7fe      	b.n	800caca <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800cacc:	f000 f884 	bl	800cbd8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800cad0:	2100      	movs	r1, #0
 800cad2:	6878      	ldr	r0, [r7, #4]
 800cad4:	f000 fccc 	bl	800d470 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800cad8:	f000 f88c 	bl	800cbf4 <xTaskResumeAll>
 800cadc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d107      	bne.n	800caf4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800cae4:	4b06      	ldr	r3, [pc, #24]	; (800cb00 <vTaskDelay+0x64>)
 800cae6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800caea:	601a      	str	r2, [r3, #0]
 800caec:	f3bf 8f4f 	dsb	sy
 800caf0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800caf4:	bf00      	nop
 800caf6:	3710      	adds	r7, #16
 800caf8:	46bd      	mov	sp, r7
 800cafa:	bd80      	pop	{r7, pc}
 800cafc:	200009f4 	.word	0x200009f4
 800cb00:	e000ed04 	.word	0xe000ed04

0800cb04 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800cb04:	b580      	push	{r7, lr}
 800cb06:	b08a      	sub	sp, #40	; 0x28
 800cb08:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800cb0a:	2300      	movs	r3, #0
 800cb0c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800cb0e:	2300      	movs	r3, #0
 800cb10:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800cb12:	463a      	mov	r2, r7
 800cb14:	1d39      	adds	r1, r7, #4
 800cb16:	f107 0308 	add.w	r3, r7, #8
 800cb1a:	4618      	mov	r0, r3
 800cb1c:	f7f4 f9d2 	bl	8000ec4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800cb20:	6839      	ldr	r1, [r7, #0]
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	68ba      	ldr	r2, [r7, #8]
 800cb26:	9202      	str	r2, [sp, #8]
 800cb28:	9301      	str	r3, [sp, #4]
 800cb2a:	2300      	movs	r3, #0
 800cb2c:	9300      	str	r3, [sp, #0]
 800cb2e:	2300      	movs	r3, #0
 800cb30:	460a      	mov	r2, r1
 800cb32:	4921      	ldr	r1, [pc, #132]	; (800cbb8 <vTaskStartScheduler+0xb4>)
 800cb34:	4821      	ldr	r0, [pc, #132]	; (800cbbc <vTaskStartScheduler+0xb8>)
 800cb36:	f7ff fe07 	bl	800c748 <xTaskCreateStatic>
 800cb3a:	4603      	mov	r3, r0
 800cb3c:	4a20      	ldr	r2, [pc, #128]	; (800cbc0 <vTaskStartScheduler+0xbc>)
 800cb3e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800cb40:	4b1f      	ldr	r3, [pc, #124]	; (800cbc0 <vTaskStartScheduler+0xbc>)
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d002      	beq.n	800cb4e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800cb48:	2301      	movs	r3, #1
 800cb4a:	617b      	str	r3, [r7, #20]
 800cb4c:	e001      	b.n	800cb52 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800cb4e:	2300      	movs	r3, #0
 800cb50:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800cb52:	697b      	ldr	r3, [r7, #20]
 800cb54:	2b01      	cmp	r3, #1
 800cb56:	d11b      	bne.n	800cb90 <vTaskStartScheduler+0x8c>
	__asm volatile
 800cb58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb5c:	f383 8811 	msr	BASEPRI, r3
 800cb60:	f3bf 8f6f 	isb	sy
 800cb64:	f3bf 8f4f 	dsb	sy
 800cb68:	613b      	str	r3, [r7, #16]
}
 800cb6a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800cb6c:	4b15      	ldr	r3, [pc, #84]	; (800cbc4 <vTaskStartScheduler+0xc0>)
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	334c      	adds	r3, #76	; 0x4c
 800cb72:	4a15      	ldr	r2, [pc, #84]	; (800cbc8 <vTaskStartScheduler+0xc4>)
 800cb74:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800cb76:	4b15      	ldr	r3, [pc, #84]	; (800cbcc <vTaskStartScheduler+0xc8>)
 800cb78:	f04f 32ff 	mov.w	r2, #4294967295
 800cb7c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800cb7e:	4b14      	ldr	r3, [pc, #80]	; (800cbd0 <vTaskStartScheduler+0xcc>)
 800cb80:	2201      	movs	r2, #1
 800cb82:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800cb84:	4b13      	ldr	r3, [pc, #76]	; (800cbd4 <vTaskStartScheduler+0xd0>)
 800cb86:	2200      	movs	r2, #0
 800cb88:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800cb8a:	f000 fd61 	bl	800d650 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800cb8e:	e00e      	b.n	800cbae <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800cb90:	697b      	ldr	r3, [r7, #20]
 800cb92:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb96:	d10a      	bne.n	800cbae <vTaskStartScheduler+0xaa>
	__asm volatile
 800cb98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb9c:	f383 8811 	msr	BASEPRI, r3
 800cba0:	f3bf 8f6f 	isb	sy
 800cba4:	f3bf 8f4f 	dsb	sy
 800cba8:	60fb      	str	r3, [r7, #12]
}
 800cbaa:	bf00      	nop
 800cbac:	e7fe      	b.n	800cbac <vTaskStartScheduler+0xa8>
}
 800cbae:	bf00      	nop
 800cbb0:	3718      	adds	r7, #24
 800cbb2:	46bd      	mov	sp, r7
 800cbb4:	bd80      	pop	{r7, pc}
 800cbb6:	bf00      	nop
 800cbb8:	08011650 	.word	0x08011650
 800cbbc:	0800d175 	.word	0x0800d175
 800cbc0:	200009f0 	.word	0x200009f0
 800cbc4:	200008cc 	.word	0x200008cc
 800cbc8:	200001e0 	.word	0x200001e0
 800cbcc:	200009ec 	.word	0x200009ec
 800cbd0:	200009d8 	.word	0x200009d8
 800cbd4:	200009d0 	.word	0x200009d0

0800cbd8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800cbd8:	b480      	push	{r7}
 800cbda:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800cbdc:	4b04      	ldr	r3, [pc, #16]	; (800cbf0 <vTaskSuspendAll+0x18>)
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	3301      	adds	r3, #1
 800cbe2:	4a03      	ldr	r2, [pc, #12]	; (800cbf0 <vTaskSuspendAll+0x18>)
 800cbe4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800cbe6:	bf00      	nop
 800cbe8:	46bd      	mov	sp, r7
 800cbea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbee:	4770      	bx	lr
 800cbf0:	200009f4 	.word	0x200009f4

0800cbf4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800cbf4:	b580      	push	{r7, lr}
 800cbf6:	b084      	sub	sp, #16
 800cbf8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800cbfa:	2300      	movs	r3, #0
 800cbfc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800cbfe:	2300      	movs	r3, #0
 800cc00:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800cc02:	4b41      	ldr	r3, [pc, #260]	; (800cd08 <xTaskResumeAll+0x114>)
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d10a      	bne.n	800cc20 <xTaskResumeAll+0x2c>
	__asm volatile
 800cc0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc0e:	f383 8811 	msr	BASEPRI, r3
 800cc12:	f3bf 8f6f 	isb	sy
 800cc16:	f3bf 8f4f 	dsb	sy
 800cc1a:	603b      	str	r3, [r7, #0]
}
 800cc1c:	bf00      	nop
 800cc1e:	e7fe      	b.n	800cc1e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800cc20:	f000 fdb8 	bl	800d794 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800cc24:	4b38      	ldr	r3, [pc, #224]	; (800cd08 <xTaskResumeAll+0x114>)
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	3b01      	subs	r3, #1
 800cc2a:	4a37      	ldr	r2, [pc, #220]	; (800cd08 <xTaskResumeAll+0x114>)
 800cc2c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cc2e:	4b36      	ldr	r3, [pc, #216]	; (800cd08 <xTaskResumeAll+0x114>)
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d161      	bne.n	800ccfa <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800cc36:	4b35      	ldr	r3, [pc, #212]	; (800cd0c <xTaskResumeAll+0x118>)
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d05d      	beq.n	800ccfa <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cc3e:	e02e      	b.n	800cc9e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cc40:	4b33      	ldr	r3, [pc, #204]	; (800cd10 <xTaskResumeAll+0x11c>)
 800cc42:	68db      	ldr	r3, [r3, #12]
 800cc44:	68db      	ldr	r3, [r3, #12]
 800cc46:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	3318      	adds	r3, #24
 800cc4c:	4618      	mov	r0, r3
 800cc4e:	f7ff f80d 	bl	800bc6c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	3304      	adds	r3, #4
 800cc56:	4618      	mov	r0, r3
 800cc58:	f7ff f808 	bl	800bc6c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc60:	2201      	movs	r2, #1
 800cc62:	409a      	lsls	r2, r3
 800cc64:	4b2b      	ldr	r3, [pc, #172]	; (800cd14 <xTaskResumeAll+0x120>)
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	4313      	orrs	r3, r2
 800cc6a:	4a2a      	ldr	r2, [pc, #168]	; (800cd14 <xTaskResumeAll+0x120>)
 800cc6c:	6013      	str	r3, [r2, #0]
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc72:	4613      	mov	r3, r2
 800cc74:	009b      	lsls	r3, r3, #2
 800cc76:	4413      	add	r3, r2
 800cc78:	009b      	lsls	r3, r3, #2
 800cc7a:	4a27      	ldr	r2, [pc, #156]	; (800cd18 <xTaskResumeAll+0x124>)
 800cc7c:	441a      	add	r2, r3
 800cc7e:	68fb      	ldr	r3, [r7, #12]
 800cc80:	3304      	adds	r3, #4
 800cc82:	4619      	mov	r1, r3
 800cc84:	4610      	mov	r0, r2
 800cc86:	f7fe ff94 	bl	800bbb2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc8e:	4b23      	ldr	r3, [pc, #140]	; (800cd1c <xTaskResumeAll+0x128>)
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc94:	429a      	cmp	r2, r3
 800cc96:	d302      	bcc.n	800cc9e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800cc98:	4b21      	ldr	r3, [pc, #132]	; (800cd20 <xTaskResumeAll+0x12c>)
 800cc9a:	2201      	movs	r2, #1
 800cc9c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cc9e:	4b1c      	ldr	r3, [pc, #112]	; (800cd10 <xTaskResumeAll+0x11c>)
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d1cc      	bne.n	800cc40 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d001      	beq.n	800ccb0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ccac:	f000 fb1c 	bl	800d2e8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800ccb0:	4b1c      	ldr	r3, [pc, #112]	; (800cd24 <xTaskResumeAll+0x130>)
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d010      	beq.n	800ccde <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ccbc:	f000 f836 	bl	800cd2c <xTaskIncrementTick>
 800ccc0:	4603      	mov	r3, r0
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d002      	beq.n	800cccc <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800ccc6:	4b16      	ldr	r3, [pc, #88]	; (800cd20 <xTaskResumeAll+0x12c>)
 800ccc8:	2201      	movs	r2, #1
 800ccca:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	3b01      	subs	r3, #1
 800ccd0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d1f1      	bne.n	800ccbc <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800ccd8:	4b12      	ldr	r3, [pc, #72]	; (800cd24 <xTaskResumeAll+0x130>)
 800ccda:	2200      	movs	r2, #0
 800ccdc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ccde:	4b10      	ldr	r3, [pc, #64]	; (800cd20 <xTaskResumeAll+0x12c>)
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d009      	beq.n	800ccfa <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800cce6:	2301      	movs	r3, #1
 800cce8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ccea:	4b0f      	ldr	r3, [pc, #60]	; (800cd28 <xTaskResumeAll+0x134>)
 800ccec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ccf0:	601a      	str	r2, [r3, #0]
 800ccf2:	f3bf 8f4f 	dsb	sy
 800ccf6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ccfa:	f000 fd7b 	bl	800d7f4 <vPortExitCritical>

	return xAlreadyYielded;
 800ccfe:	68bb      	ldr	r3, [r7, #8]
}
 800cd00:	4618      	mov	r0, r3
 800cd02:	3710      	adds	r7, #16
 800cd04:	46bd      	mov	sp, r7
 800cd06:	bd80      	pop	{r7, pc}
 800cd08:	200009f4 	.word	0x200009f4
 800cd0c:	200009cc 	.word	0x200009cc
 800cd10:	2000098c 	.word	0x2000098c
 800cd14:	200009d4 	.word	0x200009d4
 800cd18:	200008d0 	.word	0x200008d0
 800cd1c:	200008cc 	.word	0x200008cc
 800cd20:	200009e0 	.word	0x200009e0
 800cd24:	200009dc 	.word	0x200009dc
 800cd28:	e000ed04 	.word	0xe000ed04

0800cd2c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800cd2c:	b580      	push	{r7, lr}
 800cd2e:	b086      	sub	sp, #24
 800cd30:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800cd32:	2300      	movs	r3, #0
 800cd34:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cd36:	4b4e      	ldr	r3, [pc, #312]	; (800ce70 <xTaskIncrementTick+0x144>)
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	f040 808e 	bne.w	800ce5c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800cd40:	4b4c      	ldr	r3, [pc, #304]	; (800ce74 <xTaskIncrementTick+0x148>)
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	3301      	adds	r3, #1
 800cd46:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800cd48:	4a4a      	ldr	r2, [pc, #296]	; (800ce74 <xTaskIncrementTick+0x148>)
 800cd4a:	693b      	ldr	r3, [r7, #16]
 800cd4c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800cd4e:	693b      	ldr	r3, [r7, #16]
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d120      	bne.n	800cd96 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800cd54:	4b48      	ldr	r3, [pc, #288]	; (800ce78 <xTaskIncrementTick+0x14c>)
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d00a      	beq.n	800cd74 <xTaskIncrementTick+0x48>
	__asm volatile
 800cd5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd62:	f383 8811 	msr	BASEPRI, r3
 800cd66:	f3bf 8f6f 	isb	sy
 800cd6a:	f3bf 8f4f 	dsb	sy
 800cd6e:	603b      	str	r3, [r7, #0]
}
 800cd70:	bf00      	nop
 800cd72:	e7fe      	b.n	800cd72 <xTaskIncrementTick+0x46>
 800cd74:	4b40      	ldr	r3, [pc, #256]	; (800ce78 <xTaskIncrementTick+0x14c>)
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	60fb      	str	r3, [r7, #12]
 800cd7a:	4b40      	ldr	r3, [pc, #256]	; (800ce7c <xTaskIncrementTick+0x150>)
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	4a3e      	ldr	r2, [pc, #248]	; (800ce78 <xTaskIncrementTick+0x14c>)
 800cd80:	6013      	str	r3, [r2, #0]
 800cd82:	4a3e      	ldr	r2, [pc, #248]	; (800ce7c <xTaskIncrementTick+0x150>)
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	6013      	str	r3, [r2, #0]
 800cd88:	4b3d      	ldr	r3, [pc, #244]	; (800ce80 <xTaskIncrementTick+0x154>)
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	3301      	adds	r3, #1
 800cd8e:	4a3c      	ldr	r2, [pc, #240]	; (800ce80 <xTaskIncrementTick+0x154>)
 800cd90:	6013      	str	r3, [r2, #0]
 800cd92:	f000 faa9 	bl	800d2e8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800cd96:	4b3b      	ldr	r3, [pc, #236]	; (800ce84 <xTaskIncrementTick+0x158>)
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	693a      	ldr	r2, [r7, #16]
 800cd9c:	429a      	cmp	r2, r3
 800cd9e:	d348      	bcc.n	800ce32 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cda0:	4b35      	ldr	r3, [pc, #212]	; (800ce78 <xTaskIncrementTick+0x14c>)
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d104      	bne.n	800cdb4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cdaa:	4b36      	ldr	r3, [pc, #216]	; (800ce84 <xTaskIncrementTick+0x158>)
 800cdac:	f04f 32ff 	mov.w	r2, #4294967295
 800cdb0:	601a      	str	r2, [r3, #0]
					break;
 800cdb2:	e03e      	b.n	800ce32 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cdb4:	4b30      	ldr	r3, [pc, #192]	; (800ce78 <xTaskIncrementTick+0x14c>)
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	68db      	ldr	r3, [r3, #12]
 800cdba:	68db      	ldr	r3, [r3, #12]
 800cdbc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800cdbe:	68bb      	ldr	r3, [r7, #8]
 800cdc0:	685b      	ldr	r3, [r3, #4]
 800cdc2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800cdc4:	693a      	ldr	r2, [r7, #16]
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	429a      	cmp	r2, r3
 800cdca:	d203      	bcs.n	800cdd4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800cdcc:	4a2d      	ldr	r2, [pc, #180]	; (800ce84 <xTaskIncrementTick+0x158>)
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800cdd2:	e02e      	b.n	800ce32 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cdd4:	68bb      	ldr	r3, [r7, #8]
 800cdd6:	3304      	adds	r3, #4
 800cdd8:	4618      	mov	r0, r3
 800cdda:	f7fe ff47 	bl	800bc6c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800cdde:	68bb      	ldr	r3, [r7, #8]
 800cde0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d004      	beq.n	800cdf0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cde6:	68bb      	ldr	r3, [r7, #8]
 800cde8:	3318      	adds	r3, #24
 800cdea:	4618      	mov	r0, r3
 800cdec:	f7fe ff3e 	bl	800bc6c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800cdf0:	68bb      	ldr	r3, [r7, #8]
 800cdf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdf4:	2201      	movs	r2, #1
 800cdf6:	409a      	lsls	r2, r3
 800cdf8:	4b23      	ldr	r3, [pc, #140]	; (800ce88 <xTaskIncrementTick+0x15c>)
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	4313      	orrs	r3, r2
 800cdfe:	4a22      	ldr	r2, [pc, #136]	; (800ce88 <xTaskIncrementTick+0x15c>)
 800ce00:	6013      	str	r3, [r2, #0]
 800ce02:	68bb      	ldr	r3, [r7, #8]
 800ce04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce06:	4613      	mov	r3, r2
 800ce08:	009b      	lsls	r3, r3, #2
 800ce0a:	4413      	add	r3, r2
 800ce0c:	009b      	lsls	r3, r3, #2
 800ce0e:	4a1f      	ldr	r2, [pc, #124]	; (800ce8c <xTaskIncrementTick+0x160>)
 800ce10:	441a      	add	r2, r3
 800ce12:	68bb      	ldr	r3, [r7, #8]
 800ce14:	3304      	adds	r3, #4
 800ce16:	4619      	mov	r1, r3
 800ce18:	4610      	mov	r0, r2
 800ce1a:	f7fe feca 	bl	800bbb2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ce1e:	68bb      	ldr	r3, [r7, #8]
 800ce20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce22:	4b1b      	ldr	r3, [pc, #108]	; (800ce90 <xTaskIncrementTick+0x164>)
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce28:	429a      	cmp	r2, r3
 800ce2a:	d3b9      	bcc.n	800cda0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800ce2c:	2301      	movs	r3, #1
 800ce2e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ce30:	e7b6      	b.n	800cda0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ce32:	4b17      	ldr	r3, [pc, #92]	; (800ce90 <xTaskIncrementTick+0x164>)
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce38:	4914      	ldr	r1, [pc, #80]	; (800ce8c <xTaskIncrementTick+0x160>)
 800ce3a:	4613      	mov	r3, r2
 800ce3c:	009b      	lsls	r3, r3, #2
 800ce3e:	4413      	add	r3, r2
 800ce40:	009b      	lsls	r3, r3, #2
 800ce42:	440b      	add	r3, r1
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	2b01      	cmp	r3, #1
 800ce48:	d901      	bls.n	800ce4e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800ce4a:	2301      	movs	r3, #1
 800ce4c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800ce4e:	4b11      	ldr	r3, [pc, #68]	; (800ce94 <xTaskIncrementTick+0x168>)
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d007      	beq.n	800ce66 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800ce56:	2301      	movs	r3, #1
 800ce58:	617b      	str	r3, [r7, #20]
 800ce5a:	e004      	b.n	800ce66 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800ce5c:	4b0e      	ldr	r3, [pc, #56]	; (800ce98 <xTaskIncrementTick+0x16c>)
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	3301      	adds	r3, #1
 800ce62:	4a0d      	ldr	r2, [pc, #52]	; (800ce98 <xTaskIncrementTick+0x16c>)
 800ce64:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800ce66:	697b      	ldr	r3, [r7, #20]
}
 800ce68:	4618      	mov	r0, r3
 800ce6a:	3718      	adds	r7, #24
 800ce6c:	46bd      	mov	sp, r7
 800ce6e:	bd80      	pop	{r7, pc}
 800ce70:	200009f4 	.word	0x200009f4
 800ce74:	200009d0 	.word	0x200009d0
 800ce78:	20000984 	.word	0x20000984
 800ce7c:	20000988 	.word	0x20000988
 800ce80:	200009e4 	.word	0x200009e4
 800ce84:	200009ec 	.word	0x200009ec
 800ce88:	200009d4 	.word	0x200009d4
 800ce8c:	200008d0 	.word	0x200008d0
 800ce90:	200008cc 	.word	0x200008cc
 800ce94:	200009e0 	.word	0x200009e0
 800ce98:	200009dc 	.word	0x200009dc

0800ce9c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ce9c:	b480      	push	{r7}
 800ce9e:	b087      	sub	sp, #28
 800cea0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800cea2:	4b29      	ldr	r3, [pc, #164]	; (800cf48 <vTaskSwitchContext+0xac>)
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d003      	beq.n	800ceb2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ceaa:	4b28      	ldr	r3, [pc, #160]	; (800cf4c <vTaskSwitchContext+0xb0>)
 800ceac:	2201      	movs	r2, #1
 800ceae:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ceb0:	e044      	b.n	800cf3c <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800ceb2:	4b26      	ldr	r3, [pc, #152]	; (800cf4c <vTaskSwitchContext+0xb0>)
 800ceb4:	2200      	movs	r2, #0
 800ceb6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ceb8:	4b25      	ldr	r3, [pc, #148]	; (800cf50 <vTaskSwitchContext+0xb4>)
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	fab3 f383 	clz	r3, r3
 800cec4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800cec6:	7afb      	ldrb	r3, [r7, #11]
 800cec8:	f1c3 031f 	rsb	r3, r3, #31
 800cecc:	617b      	str	r3, [r7, #20]
 800cece:	4921      	ldr	r1, [pc, #132]	; (800cf54 <vTaskSwitchContext+0xb8>)
 800ced0:	697a      	ldr	r2, [r7, #20]
 800ced2:	4613      	mov	r3, r2
 800ced4:	009b      	lsls	r3, r3, #2
 800ced6:	4413      	add	r3, r2
 800ced8:	009b      	lsls	r3, r3, #2
 800ceda:	440b      	add	r3, r1
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d10a      	bne.n	800cef8 <vTaskSwitchContext+0x5c>
	__asm volatile
 800cee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cee6:	f383 8811 	msr	BASEPRI, r3
 800ceea:	f3bf 8f6f 	isb	sy
 800ceee:	f3bf 8f4f 	dsb	sy
 800cef2:	607b      	str	r3, [r7, #4]
}
 800cef4:	bf00      	nop
 800cef6:	e7fe      	b.n	800cef6 <vTaskSwitchContext+0x5a>
 800cef8:	697a      	ldr	r2, [r7, #20]
 800cefa:	4613      	mov	r3, r2
 800cefc:	009b      	lsls	r3, r3, #2
 800cefe:	4413      	add	r3, r2
 800cf00:	009b      	lsls	r3, r3, #2
 800cf02:	4a14      	ldr	r2, [pc, #80]	; (800cf54 <vTaskSwitchContext+0xb8>)
 800cf04:	4413      	add	r3, r2
 800cf06:	613b      	str	r3, [r7, #16]
 800cf08:	693b      	ldr	r3, [r7, #16]
 800cf0a:	685b      	ldr	r3, [r3, #4]
 800cf0c:	685a      	ldr	r2, [r3, #4]
 800cf0e:	693b      	ldr	r3, [r7, #16]
 800cf10:	605a      	str	r2, [r3, #4]
 800cf12:	693b      	ldr	r3, [r7, #16]
 800cf14:	685a      	ldr	r2, [r3, #4]
 800cf16:	693b      	ldr	r3, [r7, #16]
 800cf18:	3308      	adds	r3, #8
 800cf1a:	429a      	cmp	r2, r3
 800cf1c:	d104      	bne.n	800cf28 <vTaskSwitchContext+0x8c>
 800cf1e:	693b      	ldr	r3, [r7, #16]
 800cf20:	685b      	ldr	r3, [r3, #4]
 800cf22:	685a      	ldr	r2, [r3, #4]
 800cf24:	693b      	ldr	r3, [r7, #16]
 800cf26:	605a      	str	r2, [r3, #4]
 800cf28:	693b      	ldr	r3, [r7, #16]
 800cf2a:	685b      	ldr	r3, [r3, #4]
 800cf2c:	68db      	ldr	r3, [r3, #12]
 800cf2e:	4a0a      	ldr	r2, [pc, #40]	; (800cf58 <vTaskSwitchContext+0xbc>)
 800cf30:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800cf32:	4b09      	ldr	r3, [pc, #36]	; (800cf58 <vTaskSwitchContext+0xbc>)
 800cf34:	681b      	ldr	r3, [r3, #0]
 800cf36:	334c      	adds	r3, #76	; 0x4c
 800cf38:	4a08      	ldr	r2, [pc, #32]	; (800cf5c <vTaskSwitchContext+0xc0>)
 800cf3a:	6013      	str	r3, [r2, #0]
}
 800cf3c:	bf00      	nop
 800cf3e:	371c      	adds	r7, #28
 800cf40:	46bd      	mov	sp, r7
 800cf42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf46:	4770      	bx	lr
 800cf48:	200009f4 	.word	0x200009f4
 800cf4c:	200009e0 	.word	0x200009e0
 800cf50:	200009d4 	.word	0x200009d4
 800cf54:	200008d0 	.word	0x200008d0
 800cf58:	200008cc 	.word	0x200008cc
 800cf5c:	200001e0 	.word	0x200001e0

0800cf60 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800cf60:	b580      	push	{r7, lr}
 800cf62:	b084      	sub	sp, #16
 800cf64:	af00      	add	r7, sp, #0
 800cf66:	6078      	str	r0, [r7, #4]
 800cf68:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d10a      	bne.n	800cf86 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800cf70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf74:	f383 8811 	msr	BASEPRI, r3
 800cf78:	f3bf 8f6f 	isb	sy
 800cf7c:	f3bf 8f4f 	dsb	sy
 800cf80:	60fb      	str	r3, [r7, #12]
}
 800cf82:	bf00      	nop
 800cf84:	e7fe      	b.n	800cf84 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cf86:	4b07      	ldr	r3, [pc, #28]	; (800cfa4 <vTaskPlaceOnEventList+0x44>)
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	3318      	adds	r3, #24
 800cf8c:	4619      	mov	r1, r3
 800cf8e:	6878      	ldr	r0, [r7, #4]
 800cf90:	f7fe fe33 	bl	800bbfa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800cf94:	2101      	movs	r1, #1
 800cf96:	6838      	ldr	r0, [r7, #0]
 800cf98:	f000 fa6a 	bl	800d470 <prvAddCurrentTaskToDelayedList>
}
 800cf9c:	bf00      	nop
 800cf9e:	3710      	adds	r7, #16
 800cfa0:	46bd      	mov	sp, r7
 800cfa2:	bd80      	pop	{r7, pc}
 800cfa4:	200008cc 	.word	0x200008cc

0800cfa8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800cfa8:	b580      	push	{r7, lr}
 800cfaa:	b086      	sub	sp, #24
 800cfac:	af00      	add	r7, sp, #0
 800cfae:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	68db      	ldr	r3, [r3, #12]
 800cfb4:	68db      	ldr	r3, [r3, #12]
 800cfb6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800cfb8:	693b      	ldr	r3, [r7, #16]
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d10a      	bne.n	800cfd4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800cfbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfc2:	f383 8811 	msr	BASEPRI, r3
 800cfc6:	f3bf 8f6f 	isb	sy
 800cfca:	f3bf 8f4f 	dsb	sy
 800cfce:	60fb      	str	r3, [r7, #12]
}
 800cfd0:	bf00      	nop
 800cfd2:	e7fe      	b.n	800cfd2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800cfd4:	693b      	ldr	r3, [r7, #16]
 800cfd6:	3318      	adds	r3, #24
 800cfd8:	4618      	mov	r0, r3
 800cfda:	f7fe fe47 	bl	800bc6c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cfde:	4b1d      	ldr	r3, [pc, #116]	; (800d054 <xTaskRemoveFromEventList+0xac>)
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d11c      	bne.n	800d020 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800cfe6:	693b      	ldr	r3, [r7, #16]
 800cfe8:	3304      	adds	r3, #4
 800cfea:	4618      	mov	r0, r3
 800cfec:	f7fe fe3e 	bl	800bc6c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800cff0:	693b      	ldr	r3, [r7, #16]
 800cff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cff4:	2201      	movs	r2, #1
 800cff6:	409a      	lsls	r2, r3
 800cff8:	4b17      	ldr	r3, [pc, #92]	; (800d058 <xTaskRemoveFromEventList+0xb0>)
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	4313      	orrs	r3, r2
 800cffe:	4a16      	ldr	r2, [pc, #88]	; (800d058 <xTaskRemoveFromEventList+0xb0>)
 800d000:	6013      	str	r3, [r2, #0]
 800d002:	693b      	ldr	r3, [r7, #16]
 800d004:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d006:	4613      	mov	r3, r2
 800d008:	009b      	lsls	r3, r3, #2
 800d00a:	4413      	add	r3, r2
 800d00c:	009b      	lsls	r3, r3, #2
 800d00e:	4a13      	ldr	r2, [pc, #76]	; (800d05c <xTaskRemoveFromEventList+0xb4>)
 800d010:	441a      	add	r2, r3
 800d012:	693b      	ldr	r3, [r7, #16]
 800d014:	3304      	adds	r3, #4
 800d016:	4619      	mov	r1, r3
 800d018:	4610      	mov	r0, r2
 800d01a:	f7fe fdca 	bl	800bbb2 <vListInsertEnd>
 800d01e:	e005      	b.n	800d02c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d020:	693b      	ldr	r3, [r7, #16]
 800d022:	3318      	adds	r3, #24
 800d024:	4619      	mov	r1, r3
 800d026:	480e      	ldr	r0, [pc, #56]	; (800d060 <xTaskRemoveFromEventList+0xb8>)
 800d028:	f7fe fdc3 	bl	800bbb2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d02c:	693b      	ldr	r3, [r7, #16]
 800d02e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d030:	4b0c      	ldr	r3, [pc, #48]	; (800d064 <xTaskRemoveFromEventList+0xbc>)
 800d032:	681b      	ldr	r3, [r3, #0]
 800d034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d036:	429a      	cmp	r2, r3
 800d038:	d905      	bls.n	800d046 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d03a:	2301      	movs	r3, #1
 800d03c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d03e:	4b0a      	ldr	r3, [pc, #40]	; (800d068 <xTaskRemoveFromEventList+0xc0>)
 800d040:	2201      	movs	r2, #1
 800d042:	601a      	str	r2, [r3, #0]
 800d044:	e001      	b.n	800d04a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800d046:	2300      	movs	r3, #0
 800d048:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d04a:	697b      	ldr	r3, [r7, #20]
}
 800d04c:	4618      	mov	r0, r3
 800d04e:	3718      	adds	r7, #24
 800d050:	46bd      	mov	sp, r7
 800d052:	bd80      	pop	{r7, pc}
 800d054:	200009f4 	.word	0x200009f4
 800d058:	200009d4 	.word	0x200009d4
 800d05c:	200008d0 	.word	0x200008d0
 800d060:	2000098c 	.word	0x2000098c
 800d064:	200008cc 	.word	0x200008cc
 800d068:	200009e0 	.word	0x200009e0

0800d06c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d06c:	b480      	push	{r7}
 800d06e:	b083      	sub	sp, #12
 800d070:	af00      	add	r7, sp, #0
 800d072:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d074:	4b06      	ldr	r3, [pc, #24]	; (800d090 <vTaskInternalSetTimeOutState+0x24>)
 800d076:	681a      	ldr	r2, [r3, #0]
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d07c:	4b05      	ldr	r3, [pc, #20]	; (800d094 <vTaskInternalSetTimeOutState+0x28>)
 800d07e:	681a      	ldr	r2, [r3, #0]
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	605a      	str	r2, [r3, #4]
}
 800d084:	bf00      	nop
 800d086:	370c      	adds	r7, #12
 800d088:	46bd      	mov	sp, r7
 800d08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d08e:	4770      	bx	lr
 800d090:	200009e4 	.word	0x200009e4
 800d094:	200009d0 	.word	0x200009d0

0800d098 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d098:	b580      	push	{r7, lr}
 800d09a:	b088      	sub	sp, #32
 800d09c:	af00      	add	r7, sp, #0
 800d09e:	6078      	str	r0, [r7, #4]
 800d0a0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d10a      	bne.n	800d0be <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800d0a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0ac:	f383 8811 	msr	BASEPRI, r3
 800d0b0:	f3bf 8f6f 	isb	sy
 800d0b4:	f3bf 8f4f 	dsb	sy
 800d0b8:	613b      	str	r3, [r7, #16]
}
 800d0ba:	bf00      	nop
 800d0bc:	e7fe      	b.n	800d0bc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d0be:	683b      	ldr	r3, [r7, #0]
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d10a      	bne.n	800d0da <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800d0c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0c8:	f383 8811 	msr	BASEPRI, r3
 800d0cc:	f3bf 8f6f 	isb	sy
 800d0d0:	f3bf 8f4f 	dsb	sy
 800d0d4:	60fb      	str	r3, [r7, #12]
}
 800d0d6:	bf00      	nop
 800d0d8:	e7fe      	b.n	800d0d8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800d0da:	f000 fb5b 	bl	800d794 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d0de:	4b1d      	ldr	r3, [pc, #116]	; (800d154 <xTaskCheckForTimeOut+0xbc>)
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	685b      	ldr	r3, [r3, #4]
 800d0e8:	69ba      	ldr	r2, [r7, #24]
 800d0ea:	1ad3      	subs	r3, r2, r3
 800d0ec:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d0ee:	683b      	ldr	r3, [r7, #0]
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0f6:	d102      	bne.n	800d0fe <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d0f8:	2300      	movs	r3, #0
 800d0fa:	61fb      	str	r3, [r7, #28]
 800d0fc:	e023      	b.n	800d146 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	681a      	ldr	r2, [r3, #0]
 800d102:	4b15      	ldr	r3, [pc, #84]	; (800d158 <xTaskCheckForTimeOut+0xc0>)
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	429a      	cmp	r2, r3
 800d108:	d007      	beq.n	800d11a <xTaskCheckForTimeOut+0x82>
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	685b      	ldr	r3, [r3, #4]
 800d10e:	69ba      	ldr	r2, [r7, #24]
 800d110:	429a      	cmp	r2, r3
 800d112:	d302      	bcc.n	800d11a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d114:	2301      	movs	r3, #1
 800d116:	61fb      	str	r3, [r7, #28]
 800d118:	e015      	b.n	800d146 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d11a:	683b      	ldr	r3, [r7, #0]
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	697a      	ldr	r2, [r7, #20]
 800d120:	429a      	cmp	r2, r3
 800d122:	d20b      	bcs.n	800d13c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d124:	683b      	ldr	r3, [r7, #0]
 800d126:	681a      	ldr	r2, [r3, #0]
 800d128:	697b      	ldr	r3, [r7, #20]
 800d12a:	1ad2      	subs	r2, r2, r3
 800d12c:	683b      	ldr	r3, [r7, #0]
 800d12e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d130:	6878      	ldr	r0, [r7, #4]
 800d132:	f7ff ff9b 	bl	800d06c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d136:	2300      	movs	r3, #0
 800d138:	61fb      	str	r3, [r7, #28]
 800d13a:	e004      	b.n	800d146 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800d13c:	683b      	ldr	r3, [r7, #0]
 800d13e:	2200      	movs	r2, #0
 800d140:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d142:	2301      	movs	r3, #1
 800d144:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d146:	f000 fb55 	bl	800d7f4 <vPortExitCritical>

	return xReturn;
 800d14a:	69fb      	ldr	r3, [r7, #28]
}
 800d14c:	4618      	mov	r0, r3
 800d14e:	3720      	adds	r7, #32
 800d150:	46bd      	mov	sp, r7
 800d152:	bd80      	pop	{r7, pc}
 800d154:	200009d0 	.word	0x200009d0
 800d158:	200009e4 	.word	0x200009e4

0800d15c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d15c:	b480      	push	{r7}
 800d15e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d160:	4b03      	ldr	r3, [pc, #12]	; (800d170 <vTaskMissedYield+0x14>)
 800d162:	2201      	movs	r2, #1
 800d164:	601a      	str	r2, [r3, #0]
}
 800d166:	bf00      	nop
 800d168:	46bd      	mov	sp, r7
 800d16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d16e:	4770      	bx	lr
 800d170:	200009e0 	.word	0x200009e0

0800d174 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d174:	b580      	push	{r7, lr}
 800d176:	b082      	sub	sp, #8
 800d178:	af00      	add	r7, sp, #0
 800d17a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d17c:	f000 f852 	bl	800d224 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d180:	4b06      	ldr	r3, [pc, #24]	; (800d19c <prvIdleTask+0x28>)
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	2b01      	cmp	r3, #1
 800d186:	d9f9      	bls.n	800d17c <prvIdleTask+0x8>
			{
				taskYIELD();
 800d188:	4b05      	ldr	r3, [pc, #20]	; (800d1a0 <prvIdleTask+0x2c>)
 800d18a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d18e:	601a      	str	r2, [r3, #0]
 800d190:	f3bf 8f4f 	dsb	sy
 800d194:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d198:	e7f0      	b.n	800d17c <prvIdleTask+0x8>
 800d19a:	bf00      	nop
 800d19c:	200008d0 	.word	0x200008d0
 800d1a0:	e000ed04 	.word	0xe000ed04

0800d1a4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d1a4:	b580      	push	{r7, lr}
 800d1a6:	b082      	sub	sp, #8
 800d1a8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d1aa:	2300      	movs	r3, #0
 800d1ac:	607b      	str	r3, [r7, #4]
 800d1ae:	e00c      	b.n	800d1ca <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d1b0:	687a      	ldr	r2, [r7, #4]
 800d1b2:	4613      	mov	r3, r2
 800d1b4:	009b      	lsls	r3, r3, #2
 800d1b6:	4413      	add	r3, r2
 800d1b8:	009b      	lsls	r3, r3, #2
 800d1ba:	4a12      	ldr	r2, [pc, #72]	; (800d204 <prvInitialiseTaskLists+0x60>)
 800d1bc:	4413      	add	r3, r2
 800d1be:	4618      	mov	r0, r3
 800d1c0:	f7fe fcca 	bl	800bb58 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	3301      	adds	r3, #1
 800d1c8:	607b      	str	r3, [r7, #4]
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	2b06      	cmp	r3, #6
 800d1ce:	d9ef      	bls.n	800d1b0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d1d0:	480d      	ldr	r0, [pc, #52]	; (800d208 <prvInitialiseTaskLists+0x64>)
 800d1d2:	f7fe fcc1 	bl	800bb58 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d1d6:	480d      	ldr	r0, [pc, #52]	; (800d20c <prvInitialiseTaskLists+0x68>)
 800d1d8:	f7fe fcbe 	bl	800bb58 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d1dc:	480c      	ldr	r0, [pc, #48]	; (800d210 <prvInitialiseTaskLists+0x6c>)
 800d1de:	f7fe fcbb 	bl	800bb58 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d1e2:	480c      	ldr	r0, [pc, #48]	; (800d214 <prvInitialiseTaskLists+0x70>)
 800d1e4:	f7fe fcb8 	bl	800bb58 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d1e8:	480b      	ldr	r0, [pc, #44]	; (800d218 <prvInitialiseTaskLists+0x74>)
 800d1ea:	f7fe fcb5 	bl	800bb58 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d1ee:	4b0b      	ldr	r3, [pc, #44]	; (800d21c <prvInitialiseTaskLists+0x78>)
 800d1f0:	4a05      	ldr	r2, [pc, #20]	; (800d208 <prvInitialiseTaskLists+0x64>)
 800d1f2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d1f4:	4b0a      	ldr	r3, [pc, #40]	; (800d220 <prvInitialiseTaskLists+0x7c>)
 800d1f6:	4a05      	ldr	r2, [pc, #20]	; (800d20c <prvInitialiseTaskLists+0x68>)
 800d1f8:	601a      	str	r2, [r3, #0]
}
 800d1fa:	bf00      	nop
 800d1fc:	3708      	adds	r7, #8
 800d1fe:	46bd      	mov	sp, r7
 800d200:	bd80      	pop	{r7, pc}
 800d202:	bf00      	nop
 800d204:	200008d0 	.word	0x200008d0
 800d208:	2000095c 	.word	0x2000095c
 800d20c:	20000970 	.word	0x20000970
 800d210:	2000098c 	.word	0x2000098c
 800d214:	200009a0 	.word	0x200009a0
 800d218:	200009b8 	.word	0x200009b8
 800d21c:	20000984 	.word	0x20000984
 800d220:	20000988 	.word	0x20000988

0800d224 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d224:	b580      	push	{r7, lr}
 800d226:	b082      	sub	sp, #8
 800d228:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d22a:	e019      	b.n	800d260 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d22c:	f000 fab2 	bl	800d794 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d230:	4b10      	ldr	r3, [pc, #64]	; (800d274 <prvCheckTasksWaitingTermination+0x50>)
 800d232:	68db      	ldr	r3, [r3, #12]
 800d234:	68db      	ldr	r3, [r3, #12]
 800d236:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	3304      	adds	r3, #4
 800d23c:	4618      	mov	r0, r3
 800d23e:	f7fe fd15 	bl	800bc6c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d242:	4b0d      	ldr	r3, [pc, #52]	; (800d278 <prvCheckTasksWaitingTermination+0x54>)
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	3b01      	subs	r3, #1
 800d248:	4a0b      	ldr	r2, [pc, #44]	; (800d278 <prvCheckTasksWaitingTermination+0x54>)
 800d24a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d24c:	4b0b      	ldr	r3, [pc, #44]	; (800d27c <prvCheckTasksWaitingTermination+0x58>)
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	3b01      	subs	r3, #1
 800d252:	4a0a      	ldr	r2, [pc, #40]	; (800d27c <prvCheckTasksWaitingTermination+0x58>)
 800d254:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d256:	f000 facd 	bl	800d7f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d25a:	6878      	ldr	r0, [r7, #4]
 800d25c:	f000 f810 	bl	800d280 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d260:	4b06      	ldr	r3, [pc, #24]	; (800d27c <prvCheckTasksWaitingTermination+0x58>)
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	2b00      	cmp	r3, #0
 800d266:	d1e1      	bne.n	800d22c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d268:	bf00      	nop
 800d26a:	bf00      	nop
 800d26c:	3708      	adds	r7, #8
 800d26e:	46bd      	mov	sp, r7
 800d270:	bd80      	pop	{r7, pc}
 800d272:	bf00      	nop
 800d274:	200009a0 	.word	0x200009a0
 800d278:	200009cc 	.word	0x200009cc
 800d27c:	200009b4 	.word	0x200009b4

0800d280 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d280:	b580      	push	{r7, lr}
 800d282:	b084      	sub	sp, #16
 800d284:	af00      	add	r7, sp, #0
 800d286:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	334c      	adds	r3, #76	; 0x4c
 800d28c:	4618      	mov	r0, r3
 800d28e:	f002 f851 	bl	800f334 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d108      	bne.n	800d2ae <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d2a0:	4618      	mov	r0, r3
 800d2a2:	f000 fc65 	bl	800db70 <vPortFree>
				vPortFree( pxTCB );
 800d2a6:	6878      	ldr	r0, [r7, #4]
 800d2a8:	f000 fc62 	bl	800db70 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d2ac:	e018      	b.n	800d2e0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800d2b4:	2b01      	cmp	r3, #1
 800d2b6:	d103      	bne.n	800d2c0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800d2b8:	6878      	ldr	r0, [r7, #4]
 800d2ba:	f000 fc59 	bl	800db70 <vPortFree>
	}
 800d2be:	e00f      	b.n	800d2e0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800d2c6:	2b02      	cmp	r3, #2
 800d2c8:	d00a      	beq.n	800d2e0 <prvDeleteTCB+0x60>
	__asm volatile
 800d2ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2ce:	f383 8811 	msr	BASEPRI, r3
 800d2d2:	f3bf 8f6f 	isb	sy
 800d2d6:	f3bf 8f4f 	dsb	sy
 800d2da:	60fb      	str	r3, [r7, #12]
}
 800d2dc:	bf00      	nop
 800d2de:	e7fe      	b.n	800d2de <prvDeleteTCB+0x5e>
	}
 800d2e0:	bf00      	nop
 800d2e2:	3710      	adds	r7, #16
 800d2e4:	46bd      	mov	sp, r7
 800d2e6:	bd80      	pop	{r7, pc}

0800d2e8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d2e8:	b480      	push	{r7}
 800d2ea:	b083      	sub	sp, #12
 800d2ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d2ee:	4b0c      	ldr	r3, [pc, #48]	; (800d320 <prvResetNextTaskUnblockTime+0x38>)
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d104      	bne.n	800d302 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d2f8:	4b0a      	ldr	r3, [pc, #40]	; (800d324 <prvResetNextTaskUnblockTime+0x3c>)
 800d2fa:	f04f 32ff 	mov.w	r2, #4294967295
 800d2fe:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d300:	e008      	b.n	800d314 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d302:	4b07      	ldr	r3, [pc, #28]	; (800d320 <prvResetNextTaskUnblockTime+0x38>)
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	68db      	ldr	r3, [r3, #12]
 800d308:	68db      	ldr	r3, [r3, #12]
 800d30a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	685b      	ldr	r3, [r3, #4]
 800d310:	4a04      	ldr	r2, [pc, #16]	; (800d324 <prvResetNextTaskUnblockTime+0x3c>)
 800d312:	6013      	str	r3, [r2, #0]
}
 800d314:	bf00      	nop
 800d316:	370c      	adds	r7, #12
 800d318:	46bd      	mov	sp, r7
 800d31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d31e:	4770      	bx	lr
 800d320:	20000984 	.word	0x20000984
 800d324:	200009ec 	.word	0x200009ec

0800d328 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d328:	b480      	push	{r7}
 800d32a:	b083      	sub	sp, #12
 800d32c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d32e:	4b0b      	ldr	r3, [pc, #44]	; (800d35c <xTaskGetSchedulerState+0x34>)
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	2b00      	cmp	r3, #0
 800d334:	d102      	bne.n	800d33c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d336:	2301      	movs	r3, #1
 800d338:	607b      	str	r3, [r7, #4]
 800d33a:	e008      	b.n	800d34e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d33c:	4b08      	ldr	r3, [pc, #32]	; (800d360 <xTaskGetSchedulerState+0x38>)
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	2b00      	cmp	r3, #0
 800d342:	d102      	bne.n	800d34a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d344:	2302      	movs	r3, #2
 800d346:	607b      	str	r3, [r7, #4]
 800d348:	e001      	b.n	800d34e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d34a:	2300      	movs	r3, #0
 800d34c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d34e:	687b      	ldr	r3, [r7, #4]
	}
 800d350:	4618      	mov	r0, r3
 800d352:	370c      	adds	r7, #12
 800d354:	46bd      	mov	sp, r7
 800d356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d35a:	4770      	bx	lr
 800d35c:	200009d8 	.word	0x200009d8
 800d360:	200009f4 	.word	0x200009f4

0800d364 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d364:	b580      	push	{r7, lr}
 800d366:	b086      	sub	sp, #24
 800d368:	af00      	add	r7, sp, #0
 800d36a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d370:	2300      	movs	r3, #0
 800d372:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	2b00      	cmp	r3, #0
 800d378:	d06e      	beq.n	800d458 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d37a:	4b3a      	ldr	r3, [pc, #232]	; (800d464 <xTaskPriorityDisinherit+0x100>)
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	693a      	ldr	r2, [r7, #16]
 800d380:	429a      	cmp	r2, r3
 800d382:	d00a      	beq.n	800d39a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800d384:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d388:	f383 8811 	msr	BASEPRI, r3
 800d38c:	f3bf 8f6f 	isb	sy
 800d390:	f3bf 8f4f 	dsb	sy
 800d394:	60fb      	str	r3, [r7, #12]
}
 800d396:	bf00      	nop
 800d398:	e7fe      	b.n	800d398 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d39a:	693b      	ldr	r3, [r7, #16]
 800d39c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d10a      	bne.n	800d3b8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800d3a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3a6:	f383 8811 	msr	BASEPRI, r3
 800d3aa:	f3bf 8f6f 	isb	sy
 800d3ae:	f3bf 8f4f 	dsb	sy
 800d3b2:	60bb      	str	r3, [r7, #8]
}
 800d3b4:	bf00      	nop
 800d3b6:	e7fe      	b.n	800d3b6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800d3b8:	693b      	ldr	r3, [r7, #16]
 800d3ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d3bc:	1e5a      	subs	r2, r3, #1
 800d3be:	693b      	ldr	r3, [r7, #16]
 800d3c0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d3c2:	693b      	ldr	r3, [r7, #16]
 800d3c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3c6:	693b      	ldr	r3, [r7, #16]
 800d3c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d3ca:	429a      	cmp	r2, r3
 800d3cc:	d044      	beq.n	800d458 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d3ce:	693b      	ldr	r3, [r7, #16]
 800d3d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d140      	bne.n	800d458 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d3d6:	693b      	ldr	r3, [r7, #16]
 800d3d8:	3304      	adds	r3, #4
 800d3da:	4618      	mov	r0, r3
 800d3dc:	f7fe fc46 	bl	800bc6c <uxListRemove>
 800d3e0:	4603      	mov	r3, r0
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d115      	bne.n	800d412 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800d3e6:	693b      	ldr	r3, [r7, #16]
 800d3e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3ea:	491f      	ldr	r1, [pc, #124]	; (800d468 <xTaskPriorityDisinherit+0x104>)
 800d3ec:	4613      	mov	r3, r2
 800d3ee:	009b      	lsls	r3, r3, #2
 800d3f0:	4413      	add	r3, r2
 800d3f2:	009b      	lsls	r3, r3, #2
 800d3f4:	440b      	add	r3, r1
 800d3f6:	681b      	ldr	r3, [r3, #0]
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d10a      	bne.n	800d412 <xTaskPriorityDisinherit+0xae>
 800d3fc:	693b      	ldr	r3, [r7, #16]
 800d3fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d400:	2201      	movs	r2, #1
 800d402:	fa02 f303 	lsl.w	r3, r2, r3
 800d406:	43da      	mvns	r2, r3
 800d408:	4b18      	ldr	r3, [pc, #96]	; (800d46c <xTaskPriorityDisinherit+0x108>)
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	4013      	ands	r3, r2
 800d40e:	4a17      	ldr	r2, [pc, #92]	; (800d46c <xTaskPriorityDisinherit+0x108>)
 800d410:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d412:	693b      	ldr	r3, [r7, #16]
 800d414:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d416:	693b      	ldr	r3, [r7, #16]
 800d418:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d41a:	693b      	ldr	r3, [r7, #16]
 800d41c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d41e:	f1c3 0207 	rsb	r2, r3, #7
 800d422:	693b      	ldr	r3, [r7, #16]
 800d424:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d426:	693b      	ldr	r3, [r7, #16]
 800d428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d42a:	2201      	movs	r2, #1
 800d42c:	409a      	lsls	r2, r3
 800d42e:	4b0f      	ldr	r3, [pc, #60]	; (800d46c <xTaskPriorityDisinherit+0x108>)
 800d430:	681b      	ldr	r3, [r3, #0]
 800d432:	4313      	orrs	r3, r2
 800d434:	4a0d      	ldr	r2, [pc, #52]	; (800d46c <xTaskPriorityDisinherit+0x108>)
 800d436:	6013      	str	r3, [r2, #0]
 800d438:	693b      	ldr	r3, [r7, #16]
 800d43a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d43c:	4613      	mov	r3, r2
 800d43e:	009b      	lsls	r3, r3, #2
 800d440:	4413      	add	r3, r2
 800d442:	009b      	lsls	r3, r3, #2
 800d444:	4a08      	ldr	r2, [pc, #32]	; (800d468 <xTaskPriorityDisinherit+0x104>)
 800d446:	441a      	add	r2, r3
 800d448:	693b      	ldr	r3, [r7, #16]
 800d44a:	3304      	adds	r3, #4
 800d44c:	4619      	mov	r1, r3
 800d44e:	4610      	mov	r0, r2
 800d450:	f7fe fbaf 	bl	800bbb2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d454:	2301      	movs	r3, #1
 800d456:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d458:	697b      	ldr	r3, [r7, #20]
	}
 800d45a:	4618      	mov	r0, r3
 800d45c:	3718      	adds	r7, #24
 800d45e:	46bd      	mov	sp, r7
 800d460:	bd80      	pop	{r7, pc}
 800d462:	bf00      	nop
 800d464:	200008cc 	.word	0x200008cc
 800d468:	200008d0 	.word	0x200008d0
 800d46c:	200009d4 	.word	0x200009d4

0800d470 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d470:	b580      	push	{r7, lr}
 800d472:	b084      	sub	sp, #16
 800d474:	af00      	add	r7, sp, #0
 800d476:	6078      	str	r0, [r7, #4]
 800d478:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d47a:	4b29      	ldr	r3, [pc, #164]	; (800d520 <prvAddCurrentTaskToDelayedList+0xb0>)
 800d47c:	681b      	ldr	r3, [r3, #0]
 800d47e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d480:	4b28      	ldr	r3, [pc, #160]	; (800d524 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	3304      	adds	r3, #4
 800d486:	4618      	mov	r0, r3
 800d488:	f7fe fbf0 	bl	800bc6c <uxListRemove>
 800d48c:	4603      	mov	r3, r0
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d10b      	bne.n	800d4aa <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800d492:	4b24      	ldr	r3, [pc, #144]	; (800d524 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d494:	681b      	ldr	r3, [r3, #0]
 800d496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d498:	2201      	movs	r2, #1
 800d49a:	fa02 f303 	lsl.w	r3, r2, r3
 800d49e:	43da      	mvns	r2, r3
 800d4a0:	4b21      	ldr	r3, [pc, #132]	; (800d528 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	4013      	ands	r3, r2
 800d4a6:	4a20      	ldr	r2, [pc, #128]	; (800d528 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d4a8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4b0:	d10a      	bne.n	800d4c8 <prvAddCurrentTaskToDelayedList+0x58>
 800d4b2:	683b      	ldr	r3, [r7, #0]
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d007      	beq.n	800d4c8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d4b8:	4b1a      	ldr	r3, [pc, #104]	; (800d524 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d4ba:	681b      	ldr	r3, [r3, #0]
 800d4bc:	3304      	adds	r3, #4
 800d4be:	4619      	mov	r1, r3
 800d4c0:	481a      	ldr	r0, [pc, #104]	; (800d52c <prvAddCurrentTaskToDelayedList+0xbc>)
 800d4c2:	f7fe fb76 	bl	800bbb2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d4c6:	e026      	b.n	800d516 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d4c8:	68fa      	ldr	r2, [r7, #12]
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	4413      	add	r3, r2
 800d4ce:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d4d0:	4b14      	ldr	r3, [pc, #80]	; (800d524 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	68ba      	ldr	r2, [r7, #8]
 800d4d6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d4d8:	68ba      	ldr	r2, [r7, #8]
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	429a      	cmp	r2, r3
 800d4de:	d209      	bcs.n	800d4f4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d4e0:	4b13      	ldr	r3, [pc, #76]	; (800d530 <prvAddCurrentTaskToDelayedList+0xc0>)
 800d4e2:	681a      	ldr	r2, [r3, #0]
 800d4e4:	4b0f      	ldr	r3, [pc, #60]	; (800d524 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d4e6:	681b      	ldr	r3, [r3, #0]
 800d4e8:	3304      	adds	r3, #4
 800d4ea:	4619      	mov	r1, r3
 800d4ec:	4610      	mov	r0, r2
 800d4ee:	f7fe fb84 	bl	800bbfa <vListInsert>
}
 800d4f2:	e010      	b.n	800d516 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d4f4:	4b0f      	ldr	r3, [pc, #60]	; (800d534 <prvAddCurrentTaskToDelayedList+0xc4>)
 800d4f6:	681a      	ldr	r2, [r3, #0]
 800d4f8:	4b0a      	ldr	r3, [pc, #40]	; (800d524 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	3304      	adds	r3, #4
 800d4fe:	4619      	mov	r1, r3
 800d500:	4610      	mov	r0, r2
 800d502:	f7fe fb7a 	bl	800bbfa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d506:	4b0c      	ldr	r3, [pc, #48]	; (800d538 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d508:	681b      	ldr	r3, [r3, #0]
 800d50a:	68ba      	ldr	r2, [r7, #8]
 800d50c:	429a      	cmp	r2, r3
 800d50e:	d202      	bcs.n	800d516 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800d510:	4a09      	ldr	r2, [pc, #36]	; (800d538 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d512:	68bb      	ldr	r3, [r7, #8]
 800d514:	6013      	str	r3, [r2, #0]
}
 800d516:	bf00      	nop
 800d518:	3710      	adds	r7, #16
 800d51a:	46bd      	mov	sp, r7
 800d51c:	bd80      	pop	{r7, pc}
 800d51e:	bf00      	nop
 800d520:	200009d0 	.word	0x200009d0
 800d524:	200008cc 	.word	0x200008cc
 800d528:	200009d4 	.word	0x200009d4
 800d52c:	200009b8 	.word	0x200009b8
 800d530:	20000988 	.word	0x20000988
 800d534:	20000984 	.word	0x20000984
 800d538:	200009ec 	.word	0x200009ec

0800d53c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d53c:	b480      	push	{r7}
 800d53e:	b085      	sub	sp, #20
 800d540:	af00      	add	r7, sp, #0
 800d542:	60f8      	str	r0, [r7, #12]
 800d544:	60b9      	str	r1, [r7, #8]
 800d546:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d548:	68fb      	ldr	r3, [r7, #12]
 800d54a:	3b04      	subs	r3, #4
 800d54c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d54e:	68fb      	ldr	r3, [r7, #12]
 800d550:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d554:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d556:	68fb      	ldr	r3, [r7, #12]
 800d558:	3b04      	subs	r3, #4
 800d55a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d55c:	68bb      	ldr	r3, [r7, #8]
 800d55e:	f023 0201 	bic.w	r2, r3, #1
 800d562:	68fb      	ldr	r3, [r7, #12]
 800d564:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d566:	68fb      	ldr	r3, [r7, #12]
 800d568:	3b04      	subs	r3, #4
 800d56a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d56c:	4a0c      	ldr	r2, [pc, #48]	; (800d5a0 <pxPortInitialiseStack+0x64>)
 800d56e:	68fb      	ldr	r3, [r7, #12]
 800d570:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d572:	68fb      	ldr	r3, [r7, #12]
 800d574:	3b14      	subs	r3, #20
 800d576:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d578:	687a      	ldr	r2, [r7, #4]
 800d57a:	68fb      	ldr	r3, [r7, #12]
 800d57c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d57e:	68fb      	ldr	r3, [r7, #12]
 800d580:	3b04      	subs	r3, #4
 800d582:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	f06f 0202 	mvn.w	r2, #2
 800d58a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d58c:	68fb      	ldr	r3, [r7, #12]
 800d58e:	3b20      	subs	r3, #32
 800d590:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d592:	68fb      	ldr	r3, [r7, #12]
}
 800d594:	4618      	mov	r0, r3
 800d596:	3714      	adds	r7, #20
 800d598:	46bd      	mov	sp, r7
 800d59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d59e:	4770      	bx	lr
 800d5a0:	0800d5a5 	.word	0x0800d5a5

0800d5a4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d5a4:	b480      	push	{r7}
 800d5a6:	b085      	sub	sp, #20
 800d5a8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d5aa:	2300      	movs	r3, #0
 800d5ac:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d5ae:	4b12      	ldr	r3, [pc, #72]	; (800d5f8 <prvTaskExitError+0x54>)
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d5b6:	d00a      	beq.n	800d5ce <prvTaskExitError+0x2a>
	__asm volatile
 800d5b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5bc:	f383 8811 	msr	BASEPRI, r3
 800d5c0:	f3bf 8f6f 	isb	sy
 800d5c4:	f3bf 8f4f 	dsb	sy
 800d5c8:	60fb      	str	r3, [r7, #12]
}
 800d5ca:	bf00      	nop
 800d5cc:	e7fe      	b.n	800d5cc <prvTaskExitError+0x28>
	__asm volatile
 800d5ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5d2:	f383 8811 	msr	BASEPRI, r3
 800d5d6:	f3bf 8f6f 	isb	sy
 800d5da:	f3bf 8f4f 	dsb	sy
 800d5de:	60bb      	str	r3, [r7, #8]
}
 800d5e0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d5e2:	bf00      	nop
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d0fc      	beq.n	800d5e4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d5ea:	bf00      	nop
 800d5ec:	bf00      	nop
 800d5ee:	3714      	adds	r7, #20
 800d5f0:	46bd      	mov	sp, r7
 800d5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5f6:	4770      	bx	lr
 800d5f8:	20000120 	.word	0x20000120
 800d5fc:	00000000 	.word	0x00000000

0800d600 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d600:	4b07      	ldr	r3, [pc, #28]	; (800d620 <pxCurrentTCBConst2>)
 800d602:	6819      	ldr	r1, [r3, #0]
 800d604:	6808      	ldr	r0, [r1, #0]
 800d606:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d60a:	f380 8809 	msr	PSP, r0
 800d60e:	f3bf 8f6f 	isb	sy
 800d612:	f04f 0000 	mov.w	r0, #0
 800d616:	f380 8811 	msr	BASEPRI, r0
 800d61a:	4770      	bx	lr
 800d61c:	f3af 8000 	nop.w

0800d620 <pxCurrentTCBConst2>:
 800d620:	200008cc 	.word	0x200008cc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d624:	bf00      	nop
 800d626:	bf00      	nop

0800d628 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d628:	4808      	ldr	r0, [pc, #32]	; (800d64c <prvPortStartFirstTask+0x24>)
 800d62a:	6800      	ldr	r0, [r0, #0]
 800d62c:	6800      	ldr	r0, [r0, #0]
 800d62e:	f380 8808 	msr	MSP, r0
 800d632:	f04f 0000 	mov.w	r0, #0
 800d636:	f380 8814 	msr	CONTROL, r0
 800d63a:	b662      	cpsie	i
 800d63c:	b661      	cpsie	f
 800d63e:	f3bf 8f4f 	dsb	sy
 800d642:	f3bf 8f6f 	isb	sy
 800d646:	df00      	svc	0
 800d648:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d64a:	bf00      	nop
 800d64c:	e000ed08 	.word	0xe000ed08

0800d650 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d650:	b580      	push	{r7, lr}
 800d652:	b086      	sub	sp, #24
 800d654:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d656:	4b46      	ldr	r3, [pc, #280]	; (800d770 <xPortStartScheduler+0x120>)
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	4a46      	ldr	r2, [pc, #280]	; (800d774 <xPortStartScheduler+0x124>)
 800d65c:	4293      	cmp	r3, r2
 800d65e:	d10a      	bne.n	800d676 <xPortStartScheduler+0x26>
	__asm volatile
 800d660:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d664:	f383 8811 	msr	BASEPRI, r3
 800d668:	f3bf 8f6f 	isb	sy
 800d66c:	f3bf 8f4f 	dsb	sy
 800d670:	613b      	str	r3, [r7, #16]
}
 800d672:	bf00      	nop
 800d674:	e7fe      	b.n	800d674 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d676:	4b3e      	ldr	r3, [pc, #248]	; (800d770 <xPortStartScheduler+0x120>)
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	4a3f      	ldr	r2, [pc, #252]	; (800d778 <xPortStartScheduler+0x128>)
 800d67c:	4293      	cmp	r3, r2
 800d67e:	d10a      	bne.n	800d696 <xPortStartScheduler+0x46>
	__asm volatile
 800d680:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d684:	f383 8811 	msr	BASEPRI, r3
 800d688:	f3bf 8f6f 	isb	sy
 800d68c:	f3bf 8f4f 	dsb	sy
 800d690:	60fb      	str	r3, [r7, #12]
}
 800d692:	bf00      	nop
 800d694:	e7fe      	b.n	800d694 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d696:	4b39      	ldr	r3, [pc, #228]	; (800d77c <xPortStartScheduler+0x12c>)
 800d698:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d69a:	697b      	ldr	r3, [r7, #20]
 800d69c:	781b      	ldrb	r3, [r3, #0]
 800d69e:	b2db      	uxtb	r3, r3
 800d6a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d6a2:	697b      	ldr	r3, [r7, #20]
 800d6a4:	22ff      	movs	r2, #255	; 0xff
 800d6a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d6a8:	697b      	ldr	r3, [r7, #20]
 800d6aa:	781b      	ldrb	r3, [r3, #0]
 800d6ac:	b2db      	uxtb	r3, r3
 800d6ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d6b0:	78fb      	ldrb	r3, [r7, #3]
 800d6b2:	b2db      	uxtb	r3, r3
 800d6b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d6b8:	b2da      	uxtb	r2, r3
 800d6ba:	4b31      	ldr	r3, [pc, #196]	; (800d780 <xPortStartScheduler+0x130>)
 800d6bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d6be:	4b31      	ldr	r3, [pc, #196]	; (800d784 <xPortStartScheduler+0x134>)
 800d6c0:	2207      	movs	r2, #7
 800d6c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d6c4:	e009      	b.n	800d6da <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800d6c6:	4b2f      	ldr	r3, [pc, #188]	; (800d784 <xPortStartScheduler+0x134>)
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	3b01      	subs	r3, #1
 800d6cc:	4a2d      	ldr	r2, [pc, #180]	; (800d784 <xPortStartScheduler+0x134>)
 800d6ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d6d0:	78fb      	ldrb	r3, [r7, #3]
 800d6d2:	b2db      	uxtb	r3, r3
 800d6d4:	005b      	lsls	r3, r3, #1
 800d6d6:	b2db      	uxtb	r3, r3
 800d6d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d6da:	78fb      	ldrb	r3, [r7, #3]
 800d6dc:	b2db      	uxtb	r3, r3
 800d6de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d6e2:	2b80      	cmp	r3, #128	; 0x80
 800d6e4:	d0ef      	beq.n	800d6c6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d6e6:	4b27      	ldr	r3, [pc, #156]	; (800d784 <xPortStartScheduler+0x134>)
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	f1c3 0307 	rsb	r3, r3, #7
 800d6ee:	2b04      	cmp	r3, #4
 800d6f0:	d00a      	beq.n	800d708 <xPortStartScheduler+0xb8>
	__asm volatile
 800d6f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6f6:	f383 8811 	msr	BASEPRI, r3
 800d6fa:	f3bf 8f6f 	isb	sy
 800d6fe:	f3bf 8f4f 	dsb	sy
 800d702:	60bb      	str	r3, [r7, #8]
}
 800d704:	bf00      	nop
 800d706:	e7fe      	b.n	800d706 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d708:	4b1e      	ldr	r3, [pc, #120]	; (800d784 <xPortStartScheduler+0x134>)
 800d70a:	681b      	ldr	r3, [r3, #0]
 800d70c:	021b      	lsls	r3, r3, #8
 800d70e:	4a1d      	ldr	r2, [pc, #116]	; (800d784 <xPortStartScheduler+0x134>)
 800d710:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d712:	4b1c      	ldr	r3, [pc, #112]	; (800d784 <xPortStartScheduler+0x134>)
 800d714:	681b      	ldr	r3, [r3, #0]
 800d716:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d71a:	4a1a      	ldr	r2, [pc, #104]	; (800d784 <xPortStartScheduler+0x134>)
 800d71c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	b2da      	uxtb	r2, r3
 800d722:	697b      	ldr	r3, [r7, #20]
 800d724:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d726:	4b18      	ldr	r3, [pc, #96]	; (800d788 <xPortStartScheduler+0x138>)
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	4a17      	ldr	r2, [pc, #92]	; (800d788 <xPortStartScheduler+0x138>)
 800d72c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d730:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d732:	4b15      	ldr	r3, [pc, #84]	; (800d788 <xPortStartScheduler+0x138>)
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	4a14      	ldr	r2, [pc, #80]	; (800d788 <xPortStartScheduler+0x138>)
 800d738:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d73c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d73e:	f000 f8dd 	bl	800d8fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d742:	4b12      	ldr	r3, [pc, #72]	; (800d78c <xPortStartScheduler+0x13c>)
 800d744:	2200      	movs	r2, #0
 800d746:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d748:	f000 f8fc 	bl	800d944 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d74c:	4b10      	ldr	r3, [pc, #64]	; (800d790 <xPortStartScheduler+0x140>)
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	4a0f      	ldr	r2, [pc, #60]	; (800d790 <xPortStartScheduler+0x140>)
 800d752:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d756:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d758:	f7ff ff66 	bl	800d628 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d75c:	f7ff fb9e 	bl	800ce9c <vTaskSwitchContext>
	prvTaskExitError();
 800d760:	f7ff ff20 	bl	800d5a4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d764:	2300      	movs	r3, #0
}
 800d766:	4618      	mov	r0, r3
 800d768:	3718      	adds	r7, #24
 800d76a:	46bd      	mov	sp, r7
 800d76c:	bd80      	pop	{r7, pc}
 800d76e:	bf00      	nop
 800d770:	e000ed00 	.word	0xe000ed00
 800d774:	410fc271 	.word	0x410fc271
 800d778:	410fc270 	.word	0x410fc270
 800d77c:	e000e400 	.word	0xe000e400
 800d780:	200009f8 	.word	0x200009f8
 800d784:	200009fc 	.word	0x200009fc
 800d788:	e000ed20 	.word	0xe000ed20
 800d78c:	20000120 	.word	0x20000120
 800d790:	e000ef34 	.word	0xe000ef34

0800d794 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d794:	b480      	push	{r7}
 800d796:	b083      	sub	sp, #12
 800d798:	af00      	add	r7, sp, #0
	__asm volatile
 800d79a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d79e:	f383 8811 	msr	BASEPRI, r3
 800d7a2:	f3bf 8f6f 	isb	sy
 800d7a6:	f3bf 8f4f 	dsb	sy
 800d7aa:	607b      	str	r3, [r7, #4]
}
 800d7ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d7ae:	4b0f      	ldr	r3, [pc, #60]	; (800d7ec <vPortEnterCritical+0x58>)
 800d7b0:	681b      	ldr	r3, [r3, #0]
 800d7b2:	3301      	adds	r3, #1
 800d7b4:	4a0d      	ldr	r2, [pc, #52]	; (800d7ec <vPortEnterCritical+0x58>)
 800d7b6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d7b8:	4b0c      	ldr	r3, [pc, #48]	; (800d7ec <vPortEnterCritical+0x58>)
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	2b01      	cmp	r3, #1
 800d7be:	d10f      	bne.n	800d7e0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d7c0:	4b0b      	ldr	r3, [pc, #44]	; (800d7f0 <vPortEnterCritical+0x5c>)
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	b2db      	uxtb	r3, r3
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d00a      	beq.n	800d7e0 <vPortEnterCritical+0x4c>
	__asm volatile
 800d7ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7ce:	f383 8811 	msr	BASEPRI, r3
 800d7d2:	f3bf 8f6f 	isb	sy
 800d7d6:	f3bf 8f4f 	dsb	sy
 800d7da:	603b      	str	r3, [r7, #0]
}
 800d7dc:	bf00      	nop
 800d7de:	e7fe      	b.n	800d7de <vPortEnterCritical+0x4a>
	}
}
 800d7e0:	bf00      	nop
 800d7e2:	370c      	adds	r7, #12
 800d7e4:	46bd      	mov	sp, r7
 800d7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ea:	4770      	bx	lr
 800d7ec:	20000120 	.word	0x20000120
 800d7f0:	e000ed04 	.word	0xe000ed04

0800d7f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d7f4:	b480      	push	{r7}
 800d7f6:	b083      	sub	sp, #12
 800d7f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d7fa:	4b12      	ldr	r3, [pc, #72]	; (800d844 <vPortExitCritical+0x50>)
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	d10a      	bne.n	800d818 <vPortExitCritical+0x24>
	__asm volatile
 800d802:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d806:	f383 8811 	msr	BASEPRI, r3
 800d80a:	f3bf 8f6f 	isb	sy
 800d80e:	f3bf 8f4f 	dsb	sy
 800d812:	607b      	str	r3, [r7, #4]
}
 800d814:	bf00      	nop
 800d816:	e7fe      	b.n	800d816 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d818:	4b0a      	ldr	r3, [pc, #40]	; (800d844 <vPortExitCritical+0x50>)
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	3b01      	subs	r3, #1
 800d81e:	4a09      	ldr	r2, [pc, #36]	; (800d844 <vPortExitCritical+0x50>)
 800d820:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d822:	4b08      	ldr	r3, [pc, #32]	; (800d844 <vPortExitCritical+0x50>)
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	2b00      	cmp	r3, #0
 800d828:	d105      	bne.n	800d836 <vPortExitCritical+0x42>
 800d82a:	2300      	movs	r3, #0
 800d82c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d82e:	683b      	ldr	r3, [r7, #0]
 800d830:	f383 8811 	msr	BASEPRI, r3
}
 800d834:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d836:	bf00      	nop
 800d838:	370c      	adds	r7, #12
 800d83a:	46bd      	mov	sp, r7
 800d83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d840:	4770      	bx	lr
 800d842:	bf00      	nop
 800d844:	20000120 	.word	0x20000120
	...

0800d850 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d850:	f3ef 8009 	mrs	r0, PSP
 800d854:	f3bf 8f6f 	isb	sy
 800d858:	4b15      	ldr	r3, [pc, #84]	; (800d8b0 <pxCurrentTCBConst>)
 800d85a:	681a      	ldr	r2, [r3, #0]
 800d85c:	f01e 0f10 	tst.w	lr, #16
 800d860:	bf08      	it	eq
 800d862:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d866:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d86a:	6010      	str	r0, [r2, #0]
 800d86c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d870:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d874:	f380 8811 	msr	BASEPRI, r0
 800d878:	f3bf 8f4f 	dsb	sy
 800d87c:	f3bf 8f6f 	isb	sy
 800d880:	f7ff fb0c 	bl	800ce9c <vTaskSwitchContext>
 800d884:	f04f 0000 	mov.w	r0, #0
 800d888:	f380 8811 	msr	BASEPRI, r0
 800d88c:	bc09      	pop	{r0, r3}
 800d88e:	6819      	ldr	r1, [r3, #0]
 800d890:	6808      	ldr	r0, [r1, #0]
 800d892:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d896:	f01e 0f10 	tst.w	lr, #16
 800d89a:	bf08      	it	eq
 800d89c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d8a0:	f380 8809 	msr	PSP, r0
 800d8a4:	f3bf 8f6f 	isb	sy
 800d8a8:	4770      	bx	lr
 800d8aa:	bf00      	nop
 800d8ac:	f3af 8000 	nop.w

0800d8b0 <pxCurrentTCBConst>:
 800d8b0:	200008cc 	.word	0x200008cc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d8b4:	bf00      	nop
 800d8b6:	bf00      	nop

0800d8b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d8b8:	b580      	push	{r7, lr}
 800d8ba:	b082      	sub	sp, #8
 800d8bc:	af00      	add	r7, sp, #0
	__asm volatile
 800d8be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8c2:	f383 8811 	msr	BASEPRI, r3
 800d8c6:	f3bf 8f6f 	isb	sy
 800d8ca:	f3bf 8f4f 	dsb	sy
 800d8ce:	607b      	str	r3, [r7, #4]
}
 800d8d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d8d2:	f7ff fa2b 	bl	800cd2c <xTaskIncrementTick>
 800d8d6:	4603      	mov	r3, r0
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d003      	beq.n	800d8e4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d8dc:	4b06      	ldr	r3, [pc, #24]	; (800d8f8 <SysTick_Handler+0x40>)
 800d8de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d8e2:	601a      	str	r2, [r3, #0]
 800d8e4:	2300      	movs	r3, #0
 800d8e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d8e8:	683b      	ldr	r3, [r7, #0]
 800d8ea:	f383 8811 	msr	BASEPRI, r3
}
 800d8ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d8f0:	bf00      	nop
 800d8f2:	3708      	adds	r7, #8
 800d8f4:	46bd      	mov	sp, r7
 800d8f6:	bd80      	pop	{r7, pc}
 800d8f8:	e000ed04 	.word	0xe000ed04

0800d8fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d8fc:	b480      	push	{r7}
 800d8fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d900:	4b0b      	ldr	r3, [pc, #44]	; (800d930 <vPortSetupTimerInterrupt+0x34>)
 800d902:	2200      	movs	r2, #0
 800d904:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d906:	4b0b      	ldr	r3, [pc, #44]	; (800d934 <vPortSetupTimerInterrupt+0x38>)
 800d908:	2200      	movs	r2, #0
 800d90a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d90c:	4b0a      	ldr	r3, [pc, #40]	; (800d938 <vPortSetupTimerInterrupt+0x3c>)
 800d90e:	681b      	ldr	r3, [r3, #0]
 800d910:	4a0a      	ldr	r2, [pc, #40]	; (800d93c <vPortSetupTimerInterrupt+0x40>)
 800d912:	fba2 2303 	umull	r2, r3, r2, r3
 800d916:	099b      	lsrs	r3, r3, #6
 800d918:	4a09      	ldr	r2, [pc, #36]	; (800d940 <vPortSetupTimerInterrupt+0x44>)
 800d91a:	3b01      	subs	r3, #1
 800d91c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d91e:	4b04      	ldr	r3, [pc, #16]	; (800d930 <vPortSetupTimerInterrupt+0x34>)
 800d920:	2207      	movs	r2, #7
 800d922:	601a      	str	r2, [r3, #0]
}
 800d924:	bf00      	nop
 800d926:	46bd      	mov	sp, r7
 800d928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d92c:	4770      	bx	lr
 800d92e:	bf00      	nop
 800d930:	e000e010 	.word	0xe000e010
 800d934:	e000e018 	.word	0xe000e018
 800d938:	2000000c 	.word	0x2000000c
 800d93c:	10624dd3 	.word	0x10624dd3
 800d940:	e000e014 	.word	0xe000e014

0800d944 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d944:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d954 <vPortEnableVFP+0x10>
 800d948:	6801      	ldr	r1, [r0, #0]
 800d94a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d94e:	6001      	str	r1, [r0, #0]
 800d950:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d952:	bf00      	nop
 800d954:	e000ed88 	.word	0xe000ed88

0800d958 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d958:	b480      	push	{r7}
 800d95a:	b085      	sub	sp, #20
 800d95c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d95e:	f3ef 8305 	mrs	r3, IPSR
 800d962:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d964:	68fb      	ldr	r3, [r7, #12]
 800d966:	2b0f      	cmp	r3, #15
 800d968:	d914      	bls.n	800d994 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d96a:	4a17      	ldr	r2, [pc, #92]	; (800d9c8 <vPortValidateInterruptPriority+0x70>)
 800d96c:	68fb      	ldr	r3, [r7, #12]
 800d96e:	4413      	add	r3, r2
 800d970:	781b      	ldrb	r3, [r3, #0]
 800d972:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d974:	4b15      	ldr	r3, [pc, #84]	; (800d9cc <vPortValidateInterruptPriority+0x74>)
 800d976:	781b      	ldrb	r3, [r3, #0]
 800d978:	7afa      	ldrb	r2, [r7, #11]
 800d97a:	429a      	cmp	r2, r3
 800d97c:	d20a      	bcs.n	800d994 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800d97e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d982:	f383 8811 	msr	BASEPRI, r3
 800d986:	f3bf 8f6f 	isb	sy
 800d98a:	f3bf 8f4f 	dsb	sy
 800d98e:	607b      	str	r3, [r7, #4]
}
 800d990:	bf00      	nop
 800d992:	e7fe      	b.n	800d992 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d994:	4b0e      	ldr	r3, [pc, #56]	; (800d9d0 <vPortValidateInterruptPriority+0x78>)
 800d996:	681b      	ldr	r3, [r3, #0]
 800d998:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d99c:	4b0d      	ldr	r3, [pc, #52]	; (800d9d4 <vPortValidateInterruptPriority+0x7c>)
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	429a      	cmp	r2, r3
 800d9a2:	d90a      	bls.n	800d9ba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800d9a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9a8:	f383 8811 	msr	BASEPRI, r3
 800d9ac:	f3bf 8f6f 	isb	sy
 800d9b0:	f3bf 8f4f 	dsb	sy
 800d9b4:	603b      	str	r3, [r7, #0]
}
 800d9b6:	bf00      	nop
 800d9b8:	e7fe      	b.n	800d9b8 <vPortValidateInterruptPriority+0x60>
	}
 800d9ba:	bf00      	nop
 800d9bc:	3714      	adds	r7, #20
 800d9be:	46bd      	mov	sp, r7
 800d9c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9c4:	4770      	bx	lr
 800d9c6:	bf00      	nop
 800d9c8:	e000e3f0 	.word	0xe000e3f0
 800d9cc:	200009f8 	.word	0x200009f8
 800d9d0:	e000ed0c 	.word	0xe000ed0c
 800d9d4:	200009fc 	.word	0x200009fc

0800d9d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d9d8:	b580      	push	{r7, lr}
 800d9da:	b08a      	sub	sp, #40	; 0x28
 800d9dc:	af00      	add	r7, sp, #0
 800d9de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d9e0:	2300      	movs	r3, #0
 800d9e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d9e4:	f7ff f8f8 	bl	800cbd8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d9e8:	4b5b      	ldr	r3, [pc, #364]	; (800db58 <pvPortMalloc+0x180>)
 800d9ea:	681b      	ldr	r3, [r3, #0]
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d101      	bne.n	800d9f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d9f0:	f000 f920 	bl	800dc34 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d9f4:	4b59      	ldr	r3, [pc, #356]	; (800db5c <pvPortMalloc+0x184>)
 800d9f6:	681a      	ldr	r2, [r3, #0]
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	4013      	ands	r3, r2
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	f040 8093 	bne.w	800db28 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	2b00      	cmp	r3, #0
 800da06:	d01d      	beq.n	800da44 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800da08:	2208      	movs	r2, #8
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	4413      	add	r3, r2
 800da0e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	f003 0307 	and.w	r3, r3, #7
 800da16:	2b00      	cmp	r3, #0
 800da18:	d014      	beq.n	800da44 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	f023 0307 	bic.w	r3, r3, #7
 800da20:	3308      	adds	r3, #8
 800da22:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	f003 0307 	and.w	r3, r3, #7
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	d00a      	beq.n	800da44 <pvPortMalloc+0x6c>
	__asm volatile
 800da2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da32:	f383 8811 	msr	BASEPRI, r3
 800da36:	f3bf 8f6f 	isb	sy
 800da3a:	f3bf 8f4f 	dsb	sy
 800da3e:	617b      	str	r3, [r7, #20]
}
 800da40:	bf00      	nop
 800da42:	e7fe      	b.n	800da42 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	2b00      	cmp	r3, #0
 800da48:	d06e      	beq.n	800db28 <pvPortMalloc+0x150>
 800da4a:	4b45      	ldr	r3, [pc, #276]	; (800db60 <pvPortMalloc+0x188>)
 800da4c:	681b      	ldr	r3, [r3, #0]
 800da4e:	687a      	ldr	r2, [r7, #4]
 800da50:	429a      	cmp	r2, r3
 800da52:	d869      	bhi.n	800db28 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800da54:	4b43      	ldr	r3, [pc, #268]	; (800db64 <pvPortMalloc+0x18c>)
 800da56:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800da58:	4b42      	ldr	r3, [pc, #264]	; (800db64 <pvPortMalloc+0x18c>)
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800da5e:	e004      	b.n	800da6a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800da60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da62:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800da64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da66:	681b      	ldr	r3, [r3, #0]
 800da68:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800da6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da6c:	685b      	ldr	r3, [r3, #4]
 800da6e:	687a      	ldr	r2, [r7, #4]
 800da70:	429a      	cmp	r2, r3
 800da72:	d903      	bls.n	800da7c <pvPortMalloc+0xa4>
 800da74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d1f1      	bne.n	800da60 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800da7c:	4b36      	ldr	r3, [pc, #216]	; (800db58 <pvPortMalloc+0x180>)
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800da82:	429a      	cmp	r2, r3
 800da84:	d050      	beq.n	800db28 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800da86:	6a3b      	ldr	r3, [r7, #32]
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	2208      	movs	r2, #8
 800da8c:	4413      	add	r3, r2
 800da8e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800da90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da92:	681a      	ldr	r2, [r3, #0]
 800da94:	6a3b      	ldr	r3, [r7, #32]
 800da96:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800da98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da9a:	685a      	ldr	r2, [r3, #4]
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	1ad2      	subs	r2, r2, r3
 800daa0:	2308      	movs	r3, #8
 800daa2:	005b      	lsls	r3, r3, #1
 800daa4:	429a      	cmp	r2, r3
 800daa6:	d91f      	bls.n	800dae8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800daa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	4413      	add	r3, r2
 800daae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800dab0:	69bb      	ldr	r3, [r7, #24]
 800dab2:	f003 0307 	and.w	r3, r3, #7
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d00a      	beq.n	800dad0 <pvPortMalloc+0xf8>
	__asm volatile
 800daba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dabe:	f383 8811 	msr	BASEPRI, r3
 800dac2:	f3bf 8f6f 	isb	sy
 800dac6:	f3bf 8f4f 	dsb	sy
 800daca:	613b      	str	r3, [r7, #16]
}
 800dacc:	bf00      	nop
 800dace:	e7fe      	b.n	800dace <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800dad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dad2:	685a      	ldr	r2, [r3, #4]
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	1ad2      	subs	r2, r2, r3
 800dad8:	69bb      	ldr	r3, [r7, #24]
 800dada:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800dadc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dade:	687a      	ldr	r2, [r7, #4]
 800dae0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800dae2:	69b8      	ldr	r0, [r7, #24]
 800dae4:	f000 f908 	bl	800dcf8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800dae8:	4b1d      	ldr	r3, [pc, #116]	; (800db60 <pvPortMalloc+0x188>)
 800daea:	681a      	ldr	r2, [r3, #0]
 800daec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daee:	685b      	ldr	r3, [r3, #4]
 800daf0:	1ad3      	subs	r3, r2, r3
 800daf2:	4a1b      	ldr	r2, [pc, #108]	; (800db60 <pvPortMalloc+0x188>)
 800daf4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800daf6:	4b1a      	ldr	r3, [pc, #104]	; (800db60 <pvPortMalloc+0x188>)
 800daf8:	681a      	ldr	r2, [r3, #0]
 800dafa:	4b1b      	ldr	r3, [pc, #108]	; (800db68 <pvPortMalloc+0x190>)
 800dafc:	681b      	ldr	r3, [r3, #0]
 800dafe:	429a      	cmp	r2, r3
 800db00:	d203      	bcs.n	800db0a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800db02:	4b17      	ldr	r3, [pc, #92]	; (800db60 <pvPortMalloc+0x188>)
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	4a18      	ldr	r2, [pc, #96]	; (800db68 <pvPortMalloc+0x190>)
 800db08:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800db0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db0c:	685a      	ldr	r2, [r3, #4]
 800db0e:	4b13      	ldr	r3, [pc, #76]	; (800db5c <pvPortMalloc+0x184>)
 800db10:	681b      	ldr	r3, [r3, #0]
 800db12:	431a      	orrs	r2, r3
 800db14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db16:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800db18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db1a:	2200      	movs	r2, #0
 800db1c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800db1e:	4b13      	ldr	r3, [pc, #76]	; (800db6c <pvPortMalloc+0x194>)
 800db20:	681b      	ldr	r3, [r3, #0]
 800db22:	3301      	adds	r3, #1
 800db24:	4a11      	ldr	r2, [pc, #68]	; (800db6c <pvPortMalloc+0x194>)
 800db26:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800db28:	f7ff f864 	bl	800cbf4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800db2c:	69fb      	ldr	r3, [r7, #28]
 800db2e:	f003 0307 	and.w	r3, r3, #7
 800db32:	2b00      	cmp	r3, #0
 800db34:	d00a      	beq.n	800db4c <pvPortMalloc+0x174>
	__asm volatile
 800db36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db3a:	f383 8811 	msr	BASEPRI, r3
 800db3e:	f3bf 8f6f 	isb	sy
 800db42:	f3bf 8f4f 	dsb	sy
 800db46:	60fb      	str	r3, [r7, #12]
}
 800db48:	bf00      	nop
 800db4a:	e7fe      	b.n	800db4a <pvPortMalloc+0x172>
	return pvReturn;
 800db4c:	69fb      	ldr	r3, [r7, #28]
}
 800db4e:	4618      	mov	r0, r3
 800db50:	3728      	adds	r7, #40	; 0x28
 800db52:	46bd      	mov	sp, r7
 800db54:	bd80      	pop	{r7, pc}
 800db56:	bf00      	nop
 800db58:	20004608 	.word	0x20004608
 800db5c:	2000461c 	.word	0x2000461c
 800db60:	2000460c 	.word	0x2000460c
 800db64:	20004600 	.word	0x20004600
 800db68:	20004610 	.word	0x20004610
 800db6c:	20004614 	.word	0x20004614

0800db70 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800db70:	b580      	push	{r7, lr}
 800db72:	b086      	sub	sp, #24
 800db74:	af00      	add	r7, sp, #0
 800db76:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d04d      	beq.n	800dc1e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800db82:	2308      	movs	r3, #8
 800db84:	425b      	negs	r3, r3
 800db86:	697a      	ldr	r2, [r7, #20]
 800db88:	4413      	add	r3, r2
 800db8a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800db8c:	697b      	ldr	r3, [r7, #20]
 800db8e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800db90:	693b      	ldr	r3, [r7, #16]
 800db92:	685a      	ldr	r2, [r3, #4]
 800db94:	4b24      	ldr	r3, [pc, #144]	; (800dc28 <vPortFree+0xb8>)
 800db96:	681b      	ldr	r3, [r3, #0]
 800db98:	4013      	ands	r3, r2
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	d10a      	bne.n	800dbb4 <vPortFree+0x44>
	__asm volatile
 800db9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dba2:	f383 8811 	msr	BASEPRI, r3
 800dba6:	f3bf 8f6f 	isb	sy
 800dbaa:	f3bf 8f4f 	dsb	sy
 800dbae:	60fb      	str	r3, [r7, #12]
}
 800dbb0:	bf00      	nop
 800dbb2:	e7fe      	b.n	800dbb2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800dbb4:	693b      	ldr	r3, [r7, #16]
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d00a      	beq.n	800dbd2 <vPortFree+0x62>
	__asm volatile
 800dbbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbc0:	f383 8811 	msr	BASEPRI, r3
 800dbc4:	f3bf 8f6f 	isb	sy
 800dbc8:	f3bf 8f4f 	dsb	sy
 800dbcc:	60bb      	str	r3, [r7, #8]
}
 800dbce:	bf00      	nop
 800dbd0:	e7fe      	b.n	800dbd0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800dbd2:	693b      	ldr	r3, [r7, #16]
 800dbd4:	685a      	ldr	r2, [r3, #4]
 800dbd6:	4b14      	ldr	r3, [pc, #80]	; (800dc28 <vPortFree+0xb8>)
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	4013      	ands	r3, r2
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d01e      	beq.n	800dc1e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800dbe0:	693b      	ldr	r3, [r7, #16]
 800dbe2:	681b      	ldr	r3, [r3, #0]
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	d11a      	bne.n	800dc1e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800dbe8:	693b      	ldr	r3, [r7, #16]
 800dbea:	685a      	ldr	r2, [r3, #4]
 800dbec:	4b0e      	ldr	r3, [pc, #56]	; (800dc28 <vPortFree+0xb8>)
 800dbee:	681b      	ldr	r3, [r3, #0]
 800dbf0:	43db      	mvns	r3, r3
 800dbf2:	401a      	ands	r2, r3
 800dbf4:	693b      	ldr	r3, [r7, #16]
 800dbf6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800dbf8:	f7fe ffee 	bl	800cbd8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800dbfc:	693b      	ldr	r3, [r7, #16]
 800dbfe:	685a      	ldr	r2, [r3, #4]
 800dc00:	4b0a      	ldr	r3, [pc, #40]	; (800dc2c <vPortFree+0xbc>)
 800dc02:	681b      	ldr	r3, [r3, #0]
 800dc04:	4413      	add	r3, r2
 800dc06:	4a09      	ldr	r2, [pc, #36]	; (800dc2c <vPortFree+0xbc>)
 800dc08:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800dc0a:	6938      	ldr	r0, [r7, #16]
 800dc0c:	f000 f874 	bl	800dcf8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800dc10:	4b07      	ldr	r3, [pc, #28]	; (800dc30 <vPortFree+0xc0>)
 800dc12:	681b      	ldr	r3, [r3, #0]
 800dc14:	3301      	adds	r3, #1
 800dc16:	4a06      	ldr	r2, [pc, #24]	; (800dc30 <vPortFree+0xc0>)
 800dc18:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800dc1a:	f7fe ffeb 	bl	800cbf4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800dc1e:	bf00      	nop
 800dc20:	3718      	adds	r7, #24
 800dc22:	46bd      	mov	sp, r7
 800dc24:	bd80      	pop	{r7, pc}
 800dc26:	bf00      	nop
 800dc28:	2000461c 	.word	0x2000461c
 800dc2c:	2000460c 	.word	0x2000460c
 800dc30:	20004618 	.word	0x20004618

0800dc34 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800dc34:	b480      	push	{r7}
 800dc36:	b085      	sub	sp, #20
 800dc38:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800dc3a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800dc3e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800dc40:	4b27      	ldr	r3, [pc, #156]	; (800dce0 <prvHeapInit+0xac>)
 800dc42:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800dc44:	68fb      	ldr	r3, [r7, #12]
 800dc46:	f003 0307 	and.w	r3, r3, #7
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	d00c      	beq.n	800dc68 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800dc4e:	68fb      	ldr	r3, [r7, #12]
 800dc50:	3307      	adds	r3, #7
 800dc52:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	f023 0307 	bic.w	r3, r3, #7
 800dc5a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800dc5c:	68ba      	ldr	r2, [r7, #8]
 800dc5e:	68fb      	ldr	r3, [r7, #12]
 800dc60:	1ad3      	subs	r3, r2, r3
 800dc62:	4a1f      	ldr	r2, [pc, #124]	; (800dce0 <prvHeapInit+0xac>)
 800dc64:	4413      	add	r3, r2
 800dc66:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800dc6c:	4a1d      	ldr	r2, [pc, #116]	; (800dce4 <prvHeapInit+0xb0>)
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800dc72:	4b1c      	ldr	r3, [pc, #112]	; (800dce4 <prvHeapInit+0xb0>)
 800dc74:	2200      	movs	r2, #0
 800dc76:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	68ba      	ldr	r2, [r7, #8]
 800dc7c:	4413      	add	r3, r2
 800dc7e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800dc80:	2208      	movs	r2, #8
 800dc82:	68fb      	ldr	r3, [r7, #12]
 800dc84:	1a9b      	subs	r3, r3, r2
 800dc86:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800dc88:	68fb      	ldr	r3, [r7, #12]
 800dc8a:	f023 0307 	bic.w	r3, r3, #7
 800dc8e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	4a15      	ldr	r2, [pc, #84]	; (800dce8 <prvHeapInit+0xb4>)
 800dc94:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800dc96:	4b14      	ldr	r3, [pc, #80]	; (800dce8 <prvHeapInit+0xb4>)
 800dc98:	681b      	ldr	r3, [r3, #0]
 800dc9a:	2200      	movs	r2, #0
 800dc9c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800dc9e:	4b12      	ldr	r3, [pc, #72]	; (800dce8 <prvHeapInit+0xb4>)
 800dca0:	681b      	ldr	r3, [r3, #0]
 800dca2:	2200      	movs	r2, #0
 800dca4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800dcaa:	683b      	ldr	r3, [r7, #0]
 800dcac:	68fa      	ldr	r2, [r7, #12]
 800dcae:	1ad2      	subs	r2, r2, r3
 800dcb0:	683b      	ldr	r3, [r7, #0]
 800dcb2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800dcb4:	4b0c      	ldr	r3, [pc, #48]	; (800dce8 <prvHeapInit+0xb4>)
 800dcb6:	681a      	ldr	r2, [r3, #0]
 800dcb8:	683b      	ldr	r3, [r7, #0]
 800dcba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800dcbc:	683b      	ldr	r3, [r7, #0]
 800dcbe:	685b      	ldr	r3, [r3, #4]
 800dcc0:	4a0a      	ldr	r2, [pc, #40]	; (800dcec <prvHeapInit+0xb8>)
 800dcc2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800dcc4:	683b      	ldr	r3, [r7, #0]
 800dcc6:	685b      	ldr	r3, [r3, #4]
 800dcc8:	4a09      	ldr	r2, [pc, #36]	; (800dcf0 <prvHeapInit+0xbc>)
 800dcca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800dccc:	4b09      	ldr	r3, [pc, #36]	; (800dcf4 <prvHeapInit+0xc0>)
 800dcce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800dcd2:	601a      	str	r2, [r3, #0]
}
 800dcd4:	bf00      	nop
 800dcd6:	3714      	adds	r7, #20
 800dcd8:	46bd      	mov	sp, r7
 800dcda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcde:	4770      	bx	lr
 800dce0:	20000a00 	.word	0x20000a00
 800dce4:	20004600 	.word	0x20004600
 800dce8:	20004608 	.word	0x20004608
 800dcec:	20004610 	.word	0x20004610
 800dcf0:	2000460c 	.word	0x2000460c
 800dcf4:	2000461c 	.word	0x2000461c

0800dcf8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800dcf8:	b480      	push	{r7}
 800dcfa:	b085      	sub	sp, #20
 800dcfc:	af00      	add	r7, sp, #0
 800dcfe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800dd00:	4b28      	ldr	r3, [pc, #160]	; (800dda4 <prvInsertBlockIntoFreeList+0xac>)
 800dd02:	60fb      	str	r3, [r7, #12]
 800dd04:	e002      	b.n	800dd0c <prvInsertBlockIntoFreeList+0x14>
 800dd06:	68fb      	ldr	r3, [r7, #12]
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	60fb      	str	r3, [r7, #12]
 800dd0c:	68fb      	ldr	r3, [r7, #12]
 800dd0e:	681b      	ldr	r3, [r3, #0]
 800dd10:	687a      	ldr	r2, [r7, #4]
 800dd12:	429a      	cmp	r2, r3
 800dd14:	d8f7      	bhi.n	800dd06 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800dd16:	68fb      	ldr	r3, [r7, #12]
 800dd18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800dd1a:	68fb      	ldr	r3, [r7, #12]
 800dd1c:	685b      	ldr	r3, [r3, #4]
 800dd1e:	68ba      	ldr	r2, [r7, #8]
 800dd20:	4413      	add	r3, r2
 800dd22:	687a      	ldr	r2, [r7, #4]
 800dd24:	429a      	cmp	r2, r3
 800dd26:	d108      	bne.n	800dd3a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	685a      	ldr	r2, [r3, #4]
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	685b      	ldr	r3, [r3, #4]
 800dd30:	441a      	add	r2, r3
 800dd32:	68fb      	ldr	r3, [r7, #12]
 800dd34:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800dd36:	68fb      	ldr	r3, [r7, #12]
 800dd38:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	685b      	ldr	r3, [r3, #4]
 800dd42:	68ba      	ldr	r2, [r7, #8]
 800dd44:	441a      	add	r2, r3
 800dd46:	68fb      	ldr	r3, [r7, #12]
 800dd48:	681b      	ldr	r3, [r3, #0]
 800dd4a:	429a      	cmp	r2, r3
 800dd4c:	d118      	bne.n	800dd80 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	681a      	ldr	r2, [r3, #0]
 800dd52:	4b15      	ldr	r3, [pc, #84]	; (800dda8 <prvInsertBlockIntoFreeList+0xb0>)
 800dd54:	681b      	ldr	r3, [r3, #0]
 800dd56:	429a      	cmp	r2, r3
 800dd58:	d00d      	beq.n	800dd76 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	685a      	ldr	r2, [r3, #4]
 800dd5e:	68fb      	ldr	r3, [r7, #12]
 800dd60:	681b      	ldr	r3, [r3, #0]
 800dd62:	685b      	ldr	r3, [r3, #4]
 800dd64:	441a      	add	r2, r3
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800dd6a:	68fb      	ldr	r3, [r7, #12]
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	681a      	ldr	r2, [r3, #0]
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	601a      	str	r2, [r3, #0]
 800dd74:	e008      	b.n	800dd88 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800dd76:	4b0c      	ldr	r3, [pc, #48]	; (800dda8 <prvInsertBlockIntoFreeList+0xb0>)
 800dd78:	681a      	ldr	r2, [r3, #0]
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	601a      	str	r2, [r3, #0]
 800dd7e:	e003      	b.n	800dd88 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800dd80:	68fb      	ldr	r3, [r7, #12]
 800dd82:	681a      	ldr	r2, [r3, #0]
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800dd88:	68fa      	ldr	r2, [r7, #12]
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	429a      	cmp	r2, r3
 800dd8e:	d002      	beq.n	800dd96 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800dd90:	68fb      	ldr	r3, [r7, #12]
 800dd92:	687a      	ldr	r2, [r7, #4]
 800dd94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dd96:	bf00      	nop
 800dd98:	3714      	adds	r7, #20
 800dd9a:	46bd      	mov	sp, r7
 800dd9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dda0:	4770      	bx	lr
 800dda2:	bf00      	nop
 800dda4:	20004600 	.word	0x20004600
 800dda8:	20004608 	.word	0x20004608

0800ddac <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800ddac:	b580      	push	{r7, lr}
 800ddae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 800ddb0:	2201      	movs	r2, #1
 800ddb2:	4912      	ldr	r1, [pc, #72]	; (800ddfc <MX_USB_DEVICE_Init+0x50>)
 800ddb4:	4812      	ldr	r0, [pc, #72]	; (800de00 <MX_USB_DEVICE_Init+0x54>)
 800ddb6:	f7fc fa6f 	bl	800a298 <USBD_Init>
 800ddba:	4603      	mov	r3, r0
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	d001      	beq.n	800ddc4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800ddc0:	f7f3 fb32 	bl	8001428 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 800ddc4:	490f      	ldr	r1, [pc, #60]	; (800de04 <MX_USB_DEVICE_Init+0x58>)
 800ddc6:	480e      	ldr	r0, [pc, #56]	; (800de00 <MX_USB_DEVICE_Init+0x54>)
 800ddc8:	f7fc fa96 	bl	800a2f8 <USBD_RegisterClass>
 800ddcc:	4603      	mov	r3, r0
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d001      	beq.n	800ddd6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800ddd2:	f7f3 fb29 	bl	8001428 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 800ddd6:	490c      	ldr	r1, [pc, #48]	; (800de08 <MX_USB_DEVICE_Init+0x5c>)
 800ddd8:	4809      	ldr	r0, [pc, #36]	; (800de00 <MX_USB_DEVICE_Init+0x54>)
 800ddda:	f7fc f987 	bl	800a0ec <USBD_CDC_RegisterInterface>
 800ddde:	4603      	mov	r3, r0
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d001      	beq.n	800dde8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800dde4:	f7f3 fb20 	bl	8001428 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 800dde8:	4805      	ldr	r0, [pc, #20]	; (800de00 <MX_USB_DEVICE_Init+0x54>)
 800ddea:	f7fc fabb 	bl	800a364 <USBD_Start>
 800ddee:	4603      	mov	r3, r0
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	d001      	beq.n	800ddf8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800ddf4:	f7f3 fb18 	bl	8001428 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ddf8:	bf00      	nop
 800ddfa:	bd80      	pop	{r7, pc}
 800ddfc:	20000138 	.word	0x20000138
 800de00:	20004620 	.word	0x20004620
 800de04:	200000a0 	.word	0x200000a0
 800de08:	20000124 	.word	0x20000124

0800de0c <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 800de0c:	b580      	push	{r7, lr}
 800de0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 800de10:	2200      	movs	r2, #0
 800de12:	4905      	ldr	r1, [pc, #20]	; (800de28 <CDC_Init_HS+0x1c>)
 800de14:	4805      	ldr	r0, [pc, #20]	; (800de2c <CDC_Init_HS+0x20>)
 800de16:	f7fc f983 	bl	800a120 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 800de1a:	4905      	ldr	r1, [pc, #20]	; (800de30 <CDC_Init_HS+0x24>)
 800de1c:	4803      	ldr	r0, [pc, #12]	; (800de2c <CDC_Init_HS+0x20>)
 800de1e:	f7fc f9a1 	bl	800a164 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800de22:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 800de24:	4618      	mov	r0, r3
 800de26:	bd80      	pop	{r7, pc}
 800de28:	200050fc 	.word	0x200050fc
 800de2c:	20004620 	.word	0x20004620
 800de30:	200048fc 	.word	0x200048fc

0800de34 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 800de34:	b480      	push	{r7}
 800de36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 800de38:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 800de3a:	4618      	mov	r0, r3
 800de3c:	46bd      	mov	sp, r7
 800de3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de42:	4770      	bx	lr

0800de44 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800de44:	b480      	push	{r7}
 800de46:	b083      	sub	sp, #12
 800de48:	af00      	add	r7, sp, #0
 800de4a:	4603      	mov	r3, r0
 800de4c:	6039      	str	r1, [r7, #0]
 800de4e:	71fb      	strb	r3, [r7, #7]
 800de50:	4613      	mov	r3, r2
 800de52:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 800de54:	79fb      	ldrb	r3, [r7, #7]
 800de56:	2b23      	cmp	r3, #35	; 0x23
 800de58:	d84a      	bhi.n	800def0 <CDC_Control_HS+0xac>
 800de5a:	a201      	add	r2, pc, #4	; (adr r2, 800de60 <CDC_Control_HS+0x1c>)
 800de5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de60:	0800def1 	.word	0x0800def1
 800de64:	0800def1 	.word	0x0800def1
 800de68:	0800def1 	.word	0x0800def1
 800de6c:	0800def1 	.word	0x0800def1
 800de70:	0800def1 	.word	0x0800def1
 800de74:	0800def1 	.word	0x0800def1
 800de78:	0800def1 	.word	0x0800def1
 800de7c:	0800def1 	.word	0x0800def1
 800de80:	0800def1 	.word	0x0800def1
 800de84:	0800def1 	.word	0x0800def1
 800de88:	0800def1 	.word	0x0800def1
 800de8c:	0800def1 	.word	0x0800def1
 800de90:	0800def1 	.word	0x0800def1
 800de94:	0800def1 	.word	0x0800def1
 800de98:	0800def1 	.word	0x0800def1
 800de9c:	0800def1 	.word	0x0800def1
 800dea0:	0800def1 	.word	0x0800def1
 800dea4:	0800def1 	.word	0x0800def1
 800dea8:	0800def1 	.word	0x0800def1
 800deac:	0800def1 	.word	0x0800def1
 800deb0:	0800def1 	.word	0x0800def1
 800deb4:	0800def1 	.word	0x0800def1
 800deb8:	0800def1 	.word	0x0800def1
 800debc:	0800def1 	.word	0x0800def1
 800dec0:	0800def1 	.word	0x0800def1
 800dec4:	0800def1 	.word	0x0800def1
 800dec8:	0800def1 	.word	0x0800def1
 800decc:	0800def1 	.word	0x0800def1
 800ded0:	0800def1 	.word	0x0800def1
 800ded4:	0800def1 	.word	0x0800def1
 800ded8:	0800def1 	.word	0x0800def1
 800dedc:	0800def1 	.word	0x0800def1
 800dee0:	0800def1 	.word	0x0800def1
 800dee4:	0800def1 	.word	0x0800def1
 800dee8:	0800def1 	.word	0x0800def1
 800deec:	0800def1 	.word	0x0800def1
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 800def0:	bf00      	nop
  }

  return (USBD_OK);
 800def2:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 800def4:	4618      	mov	r0, r3
 800def6:	370c      	adds	r7, #12
 800def8:	46bd      	mov	sp, r7
 800defa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800defe:	4770      	bx	lr

0800df00 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 800df00:	b580      	push	{r7, lr}
 800df02:	b082      	sub	sp, #8
 800df04:	af00      	add	r7, sp, #0
 800df06:	6078      	str	r0, [r7, #4]
 800df08:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 800df0a:	6879      	ldr	r1, [r7, #4]
 800df0c:	4805      	ldr	r0, [pc, #20]	; (800df24 <CDC_Receive_HS+0x24>)
 800df0e:	f7fc f929 	bl	800a164 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 800df12:	4804      	ldr	r0, [pc, #16]	; (800df24 <CDC_Receive_HS+0x24>)
 800df14:	f7fc f98a 	bl	800a22c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800df18:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 800df1a:	4618      	mov	r0, r3
 800df1c:	3708      	adds	r7, #8
 800df1e:	46bd      	mov	sp, r7
 800df20:	bd80      	pop	{r7, pc}
 800df22:	bf00      	nop
 800df24:	20004620 	.word	0x20004620

0800df28 <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 800df28:	b580      	push	{r7, lr}
 800df2a:	b084      	sub	sp, #16
 800df2c:	af00      	add	r7, sp, #0
 800df2e:	6078      	str	r0, [r7, #4]
 800df30:	460b      	mov	r3, r1
 800df32:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800df34:	2300      	movs	r3, #0
 800df36:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 800df38:	4b0d      	ldr	r3, [pc, #52]	; (800df70 <CDC_Transmit_HS+0x48>)
 800df3a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800df3e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800df40:	68bb      	ldr	r3, [r7, #8]
 800df42:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800df46:	2b00      	cmp	r3, #0
 800df48:	d001      	beq.n	800df4e <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 800df4a:	2301      	movs	r3, #1
 800df4c:	e00b      	b.n	800df66 <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 800df4e:	887b      	ldrh	r3, [r7, #2]
 800df50:	461a      	mov	r2, r3
 800df52:	6879      	ldr	r1, [r7, #4]
 800df54:	4806      	ldr	r0, [pc, #24]	; (800df70 <CDC_Transmit_HS+0x48>)
 800df56:	f7fc f8e3 	bl	800a120 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 800df5a:	4805      	ldr	r0, [pc, #20]	; (800df70 <CDC_Transmit_HS+0x48>)
 800df5c:	f7fc f920 	bl	800a1a0 <USBD_CDC_TransmitPacket>
 800df60:	4603      	mov	r3, r0
 800df62:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 800df64:	7bfb      	ldrb	r3, [r7, #15]
}
 800df66:	4618      	mov	r0, r3
 800df68:	3710      	adds	r7, #16
 800df6a:	46bd      	mov	sp, r7
 800df6c:	bd80      	pop	{r7, pc}
 800df6e:	bf00      	nop
 800df70:	20004620 	.word	0x20004620

0800df74 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800df74:	b480      	push	{r7}
 800df76:	b087      	sub	sp, #28
 800df78:	af00      	add	r7, sp, #0
 800df7a:	60f8      	str	r0, [r7, #12]
 800df7c:	60b9      	str	r1, [r7, #8]
 800df7e:	4613      	mov	r3, r2
 800df80:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800df82:	2300      	movs	r3, #0
 800df84:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 800df86:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800df8a:	4618      	mov	r0, r3
 800df8c:	371c      	adds	r7, #28
 800df8e:	46bd      	mov	sp, r7
 800df90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df94:	4770      	bx	lr
	...

0800df98 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800df98:	b480      	push	{r7}
 800df9a:	b083      	sub	sp, #12
 800df9c:	af00      	add	r7, sp, #0
 800df9e:	4603      	mov	r3, r0
 800dfa0:	6039      	str	r1, [r7, #0]
 800dfa2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 800dfa4:	683b      	ldr	r3, [r7, #0]
 800dfa6:	2212      	movs	r2, #18
 800dfa8:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 800dfaa:	4b03      	ldr	r3, [pc, #12]	; (800dfb8 <USBD_HS_DeviceDescriptor+0x20>)
}
 800dfac:	4618      	mov	r0, r3
 800dfae:	370c      	adds	r7, #12
 800dfb0:	46bd      	mov	sp, r7
 800dfb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfb6:	4770      	bx	lr
 800dfb8:	20000154 	.word	0x20000154

0800dfbc <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dfbc:	b480      	push	{r7}
 800dfbe:	b083      	sub	sp, #12
 800dfc0:	af00      	add	r7, sp, #0
 800dfc2:	4603      	mov	r3, r0
 800dfc4:	6039      	str	r1, [r7, #0]
 800dfc6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800dfc8:	683b      	ldr	r3, [r7, #0]
 800dfca:	2204      	movs	r2, #4
 800dfcc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800dfce:	4b03      	ldr	r3, [pc, #12]	; (800dfdc <USBD_HS_LangIDStrDescriptor+0x20>)
}
 800dfd0:	4618      	mov	r0, r3
 800dfd2:	370c      	adds	r7, #12
 800dfd4:	46bd      	mov	sp, r7
 800dfd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfda:	4770      	bx	lr
 800dfdc:	20000168 	.word	0x20000168

0800dfe0 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dfe0:	b580      	push	{r7, lr}
 800dfe2:	b082      	sub	sp, #8
 800dfe4:	af00      	add	r7, sp, #0
 800dfe6:	4603      	mov	r3, r0
 800dfe8:	6039      	str	r1, [r7, #0]
 800dfea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800dfec:	79fb      	ldrb	r3, [r7, #7]
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d105      	bne.n	800dffe <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800dff2:	683a      	ldr	r2, [r7, #0]
 800dff4:	4907      	ldr	r1, [pc, #28]	; (800e014 <USBD_HS_ProductStrDescriptor+0x34>)
 800dff6:	4808      	ldr	r0, [pc, #32]	; (800e018 <USBD_HS_ProductStrDescriptor+0x38>)
 800dff8:	f7fd fb60 	bl	800b6bc <USBD_GetString>
 800dffc:	e004      	b.n	800e008 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800dffe:	683a      	ldr	r2, [r7, #0]
 800e000:	4904      	ldr	r1, [pc, #16]	; (800e014 <USBD_HS_ProductStrDescriptor+0x34>)
 800e002:	4805      	ldr	r0, [pc, #20]	; (800e018 <USBD_HS_ProductStrDescriptor+0x38>)
 800e004:	f7fd fb5a 	bl	800b6bc <USBD_GetString>
  }
  return USBD_StrDesc;
 800e008:	4b02      	ldr	r3, [pc, #8]	; (800e014 <USBD_HS_ProductStrDescriptor+0x34>)
}
 800e00a:	4618      	mov	r0, r3
 800e00c:	3708      	adds	r7, #8
 800e00e:	46bd      	mov	sp, r7
 800e010:	bd80      	pop	{r7, pc}
 800e012:	bf00      	nop
 800e014:	200058fc 	.word	0x200058fc
 800e018:	08011658 	.word	0x08011658

0800e01c <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e01c:	b580      	push	{r7, lr}
 800e01e:	b082      	sub	sp, #8
 800e020:	af00      	add	r7, sp, #0
 800e022:	4603      	mov	r3, r0
 800e024:	6039      	str	r1, [r7, #0]
 800e026:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800e028:	683a      	ldr	r2, [r7, #0]
 800e02a:	4904      	ldr	r1, [pc, #16]	; (800e03c <USBD_HS_ManufacturerStrDescriptor+0x20>)
 800e02c:	4804      	ldr	r0, [pc, #16]	; (800e040 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 800e02e:	f7fd fb45 	bl	800b6bc <USBD_GetString>
  return USBD_StrDesc;
 800e032:	4b02      	ldr	r3, [pc, #8]	; (800e03c <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 800e034:	4618      	mov	r0, r3
 800e036:	3708      	adds	r7, #8
 800e038:	46bd      	mov	sp, r7
 800e03a:	bd80      	pop	{r7, pc}
 800e03c:	200058fc 	.word	0x200058fc
 800e040:	08011670 	.word	0x08011670

0800e044 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e044:	b580      	push	{r7, lr}
 800e046:	b082      	sub	sp, #8
 800e048:	af00      	add	r7, sp, #0
 800e04a:	4603      	mov	r3, r0
 800e04c:	6039      	str	r1, [r7, #0]
 800e04e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800e050:	683b      	ldr	r3, [r7, #0]
 800e052:	221a      	movs	r2, #26
 800e054:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800e056:	f000 f843 	bl	800e0e0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800e05a:	4b02      	ldr	r3, [pc, #8]	; (800e064 <USBD_HS_SerialStrDescriptor+0x20>)
}
 800e05c:	4618      	mov	r0, r3
 800e05e:	3708      	adds	r7, #8
 800e060:	46bd      	mov	sp, r7
 800e062:	bd80      	pop	{r7, pc}
 800e064:	2000016c 	.word	0x2000016c

0800e068 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e068:	b580      	push	{r7, lr}
 800e06a:	b082      	sub	sp, #8
 800e06c:	af00      	add	r7, sp, #0
 800e06e:	4603      	mov	r3, r0
 800e070:	6039      	str	r1, [r7, #0]
 800e072:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800e074:	79fb      	ldrb	r3, [r7, #7]
 800e076:	2b00      	cmp	r3, #0
 800e078:	d105      	bne.n	800e086 <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800e07a:	683a      	ldr	r2, [r7, #0]
 800e07c:	4907      	ldr	r1, [pc, #28]	; (800e09c <USBD_HS_ConfigStrDescriptor+0x34>)
 800e07e:	4808      	ldr	r0, [pc, #32]	; (800e0a0 <USBD_HS_ConfigStrDescriptor+0x38>)
 800e080:	f7fd fb1c 	bl	800b6bc <USBD_GetString>
 800e084:	e004      	b.n	800e090 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800e086:	683a      	ldr	r2, [r7, #0]
 800e088:	4904      	ldr	r1, [pc, #16]	; (800e09c <USBD_HS_ConfigStrDescriptor+0x34>)
 800e08a:	4805      	ldr	r0, [pc, #20]	; (800e0a0 <USBD_HS_ConfigStrDescriptor+0x38>)
 800e08c:	f7fd fb16 	bl	800b6bc <USBD_GetString>
  }
  return USBD_StrDesc;
 800e090:	4b02      	ldr	r3, [pc, #8]	; (800e09c <USBD_HS_ConfigStrDescriptor+0x34>)
}
 800e092:	4618      	mov	r0, r3
 800e094:	3708      	adds	r7, #8
 800e096:	46bd      	mov	sp, r7
 800e098:	bd80      	pop	{r7, pc}
 800e09a:	bf00      	nop
 800e09c:	200058fc 	.word	0x200058fc
 800e0a0:	08011684 	.word	0x08011684

0800e0a4 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e0a4:	b580      	push	{r7, lr}
 800e0a6:	b082      	sub	sp, #8
 800e0a8:	af00      	add	r7, sp, #0
 800e0aa:	4603      	mov	r3, r0
 800e0ac:	6039      	str	r1, [r7, #0]
 800e0ae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e0b0:	79fb      	ldrb	r3, [r7, #7]
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	d105      	bne.n	800e0c2 <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800e0b6:	683a      	ldr	r2, [r7, #0]
 800e0b8:	4907      	ldr	r1, [pc, #28]	; (800e0d8 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800e0ba:	4808      	ldr	r0, [pc, #32]	; (800e0dc <USBD_HS_InterfaceStrDescriptor+0x38>)
 800e0bc:	f7fd fafe 	bl	800b6bc <USBD_GetString>
 800e0c0:	e004      	b.n	800e0cc <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800e0c2:	683a      	ldr	r2, [r7, #0]
 800e0c4:	4904      	ldr	r1, [pc, #16]	; (800e0d8 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800e0c6:	4805      	ldr	r0, [pc, #20]	; (800e0dc <USBD_HS_InterfaceStrDescriptor+0x38>)
 800e0c8:	f7fd faf8 	bl	800b6bc <USBD_GetString>
  }
  return USBD_StrDesc;
 800e0cc:	4b02      	ldr	r3, [pc, #8]	; (800e0d8 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 800e0ce:	4618      	mov	r0, r3
 800e0d0:	3708      	adds	r7, #8
 800e0d2:	46bd      	mov	sp, r7
 800e0d4:	bd80      	pop	{r7, pc}
 800e0d6:	bf00      	nop
 800e0d8:	200058fc 	.word	0x200058fc
 800e0dc:	08011690 	.word	0x08011690

0800e0e0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800e0e0:	b580      	push	{r7, lr}
 800e0e2:	b084      	sub	sp, #16
 800e0e4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800e0e6:	4b0f      	ldr	r3, [pc, #60]	; (800e124 <Get_SerialNum+0x44>)
 800e0e8:	681b      	ldr	r3, [r3, #0]
 800e0ea:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800e0ec:	4b0e      	ldr	r3, [pc, #56]	; (800e128 <Get_SerialNum+0x48>)
 800e0ee:	681b      	ldr	r3, [r3, #0]
 800e0f0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800e0f2:	4b0e      	ldr	r3, [pc, #56]	; (800e12c <Get_SerialNum+0x4c>)
 800e0f4:	681b      	ldr	r3, [r3, #0]
 800e0f6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800e0f8:	68fa      	ldr	r2, [r7, #12]
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	4413      	add	r3, r2
 800e0fe:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800e100:	68fb      	ldr	r3, [r7, #12]
 800e102:	2b00      	cmp	r3, #0
 800e104:	d009      	beq.n	800e11a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800e106:	2208      	movs	r2, #8
 800e108:	4909      	ldr	r1, [pc, #36]	; (800e130 <Get_SerialNum+0x50>)
 800e10a:	68f8      	ldr	r0, [r7, #12]
 800e10c:	f000 f814 	bl	800e138 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800e110:	2204      	movs	r2, #4
 800e112:	4908      	ldr	r1, [pc, #32]	; (800e134 <Get_SerialNum+0x54>)
 800e114:	68b8      	ldr	r0, [r7, #8]
 800e116:	f000 f80f 	bl	800e138 <IntToUnicode>
  }
}
 800e11a:	bf00      	nop
 800e11c:	3710      	adds	r7, #16
 800e11e:	46bd      	mov	sp, r7
 800e120:	bd80      	pop	{r7, pc}
 800e122:	bf00      	nop
 800e124:	1fff7a10 	.word	0x1fff7a10
 800e128:	1fff7a14 	.word	0x1fff7a14
 800e12c:	1fff7a18 	.word	0x1fff7a18
 800e130:	2000016e 	.word	0x2000016e
 800e134:	2000017e 	.word	0x2000017e

0800e138 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800e138:	b480      	push	{r7}
 800e13a:	b087      	sub	sp, #28
 800e13c:	af00      	add	r7, sp, #0
 800e13e:	60f8      	str	r0, [r7, #12]
 800e140:	60b9      	str	r1, [r7, #8]
 800e142:	4613      	mov	r3, r2
 800e144:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800e146:	2300      	movs	r3, #0
 800e148:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800e14a:	2300      	movs	r3, #0
 800e14c:	75fb      	strb	r3, [r7, #23]
 800e14e:	e027      	b.n	800e1a0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800e150:	68fb      	ldr	r3, [r7, #12]
 800e152:	0f1b      	lsrs	r3, r3, #28
 800e154:	2b09      	cmp	r3, #9
 800e156:	d80b      	bhi.n	800e170 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800e158:	68fb      	ldr	r3, [r7, #12]
 800e15a:	0f1b      	lsrs	r3, r3, #28
 800e15c:	b2da      	uxtb	r2, r3
 800e15e:	7dfb      	ldrb	r3, [r7, #23]
 800e160:	005b      	lsls	r3, r3, #1
 800e162:	4619      	mov	r1, r3
 800e164:	68bb      	ldr	r3, [r7, #8]
 800e166:	440b      	add	r3, r1
 800e168:	3230      	adds	r2, #48	; 0x30
 800e16a:	b2d2      	uxtb	r2, r2
 800e16c:	701a      	strb	r2, [r3, #0]
 800e16e:	e00a      	b.n	800e186 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e170:	68fb      	ldr	r3, [r7, #12]
 800e172:	0f1b      	lsrs	r3, r3, #28
 800e174:	b2da      	uxtb	r2, r3
 800e176:	7dfb      	ldrb	r3, [r7, #23]
 800e178:	005b      	lsls	r3, r3, #1
 800e17a:	4619      	mov	r1, r3
 800e17c:	68bb      	ldr	r3, [r7, #8]
 800e17e:	440b      	add	r3, r1
 800e180:	3237      	adds	r2, #55	; 0x37
 800e182:	b2d2      	uxtb	r2, r2
 800e184:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800e186:	68fb      	ldr	r3, [r7, #12]
 800e188:	011b      	lsls	r3, r3, #4
 800e18a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800e18c:	7dfb      	ldrb	r3, [r7, #23]
 800e18e:	005b      	lsls	r3, r3, #1
 800e190:	3301      	adds	r3, #1
 800e192:	68ba      	ldr	r2, [r7, #8]
 800e194:	4413      	add	r3, r2
 800e196:	2200      	movs	r2, #0
 800e198:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800e19a:	7dfb      	ldrb	r3, [r7, #23]
 800e19c:	3301      	adds	r3, #1
 800e19e:	75fb      	strb	r3, [r7, #23]
 800e1a0:	7dfa      	ldrb	r2, [r7, #23]
 800e1a2:	79fb      	ldrb	r3, [r7, #7]
 800e1a4:	429a      	cmp	r2, r3
 800e1a6:	d3d3      	bcc.n	800e150 <IntToUnicode+0x18>
  }
}
 800e1a8:	bf00      	nop
 800e1aa:	bf00      	nop
 800e1ac:	371c      	adds	r7, #28
 800e1ae:	46bd      	mov	sp, r7
 800e1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1b4:	4770      	bx	lr
	...

0800e1b8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800e1b8:	b580      	push	{r7, lr}
 800e1ba:	b08a      	sub	sp, #40	; 0x28
 800e1bc:	af00      	add	r7, sp, #0
 800e1be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e1c0:	f107 0314 	add.w	r3, r7, #20
 800e1c4:	2200      	movs	r2, #0
 800e1c6:	601a      	str	r2, [r3, #0]
 800e1c8:	605a      	str	r2, [r3, #4]
 800e1ca:	609a      	str	r2, [r3, #8]
 800e1cc:	60da      	str	r2, [r3, #12]
 800e1ce:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_HS)
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	681b      	ldr	r3, [r3, #0]
 800e1d4:	4a1d      	ldr	r2, [pc, #116]	; (800e24c <HAL_PCD_MspInit+0x94>)
 800e1d6:	4293      	cmp	r3, r2
 800e1d8:	d134      	bne.n	800e244 <HAL_PCD_MspInit+0x8c>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800e1da:	2300      	movs	r3, #0
 800e1dc:	613b      	str	r3, [r7, #16]
 800e1de:	4b1c      	ldr	r3, [pc, #112]	; (800e250 <HAL_PCD_MspInit+0x98>)
 800e1e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e1e2:	4a1b      	ldr	r2, [pc, #108]	; (800e250 <HAL_PCD_MspInit+0x98>)
 800e1e4:	f043 0302 	orr.w	r3, r3, #2
 800e1e8:	6313      	str	r3, [r2, #48]	; 0x30
 800e1ea:	4b19      	ldr	r3, [pc, #100]	; (800e250 <HAL_PCD_MspInit+0x98>)
 800e1ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e1ee:	f003 0302 	and.w	r3, r3, #2
 800e1f2:	613b      	str	r3, [r7, #16]
 800e1f4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_HS GPIO Configuration
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800e1f6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800e1fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e1fc:	2302      	movs	r3, #2
 800e1fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e200:	2300      	movs	r3, #0
 800e202:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e204:	2303      	movs	r3, #3
 800e206:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800e208:	230c      	movs	r3, #12
 800e20a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e20c:	f107 0314 	add.w	r3, r7, #20
 800e210:	4619      	mov	r1, r3
 800e212:	4810      	ldr	r0, [pc, #64]	; (800e254 <HAL_PCD_MspInit+0x9c>)
 800e214:	f7f5 fca0 	bl	8003b58 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800e218:	2300      	movs	r3, #0
 800e21a:	60fb      	str	r3, [r7, #12]
 800e21c:	4b0c      	ldr	r3, [pc, #48]	; (800e250 <HAL_PCD_MspInit+0x98>)
 800e21e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e220:	4a0b      	ldr	r2, [pc, #44]	; (800e250 <HAL_PCD_MspInit+0x98>)
 800e222:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e226:	6313      	str	r3, [r2, #48]	; 0x30
 800e228:	4b09      	ldr	r3, [pc, #36]	; (800e250 <HAL_PCD_MspInit+0x98>)
 800e22a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e22c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e230:	60fb      	str	r3, [r7, #12]
 800e232:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 5, 0);
 800e234:	2200      	movs	r2, #0
 800e236:	2105      	movs	r1, #5
 800e238:	204d      	movs	r0, #77	; 0x4d
 800e23a:	f7f5 faa5 	bl	8003788 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800e23e:	204d      	movs	r0, #77	; 0x4d
 800e240:	f7f5 fabe 	bl	80037c0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800e244:	bf00      	nop
 800e246:	3728      	adds	r7, #40	; 0x28
 800e248:	46bd      	mov	sp, r7
 800e24a:	bd80      	pop	{r7, pc}
 800e24c:	40040000 	.word	0x40040000
 800e250:	40023800 	.word	0x40023800
 800e254:	40020400 	.word	0x40020400

0800e258 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e258:	b580      	push	{r7, lr}
 800e25a:	b082      	sub	sp, #8
 800e25c:	af00      	add	r7, sp, #0
 800e25e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800e26c:	4619      	mov	r1, r3
 800e26e:	4610      	mov	r0, r2
 800e270:	f7fc f8c5 	bl	800a3fe <USBD_LL_SetupStage>
}
 800e274:	bf00      	nop
 800e276:	3708      	adds	r7, #8
 800e278:	46bd      	mov	sp, r7
 800e27a:	bd80      	pop	{r7, pc}

0800e27c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e27c:	b580      	push	{r7, lr}
 800e27e:	b082      	sub	sp, #8
 800e280:	af00      	add	r7, sp, #0
 800e282:	6078      	str	r0, [r7, #4]
 800e284:	460b      	mov	r3, r1
 800e286:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800e28e:	78fa      	ldrb	r2, [r7, #3]
 800e290:	6879      	ldr	r1, [r7, #4]
 800e292:	4613      	mov	r3, r2
 800e294:	00db      	lsls	r3, r3, #3
 800e296:	4413      	add	r3, r2
 800e298:	009b      	lsls	r3, r3, #2
 800e29a:	440b      	add	r3, r1
 800e29c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800e2a0:	681a      	ldr	r2, [r3, #0]
 800e2a2:	78fb      	ldrb	r3, [r7, #3]
 800e2a4:	4619      	mov	r1, r3
 800e2a6:	f7fc f8ff 	bl	800a4a8 <USBD_LL_DataOutStage>
}
 800e2aa:	bf00      	nop
 800e2ac:	3708      	adds	r7, #8
 800e2ae:	46bd      	mov	sp, r7
 800e2b0:	bd80      	pop	{r7, pc}

0800e2b2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e2b2:	b580      	push	{r7, lr}
 800e2b4:	b082      	sub	sp, #8
 800e2b6:	af00      	add	r7, sp, #0
 800e2b8:	6078      	str	r0, [r7, #4]
 800e2ba:	460b      	mov	r3, r1
 800e2bc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800e2c4:	78fa      	ldrb	r2, [r7, #3]
 800e2c6:	6879      	ldr	r1, [r7, #4]
 800e2c8:	4613      	mov	r3, r2
 800e2ca:	00db      	lsls	r3, r3, #3
 800e2cc:	4413      	add	r3, r2
 800e2ce:	009b      	lsls	r3, r3, #2
 800e2d0:	440b      	add	r3, r1
 800e2d2:	334c      	adds	r3, #76	; 0x4c
 800e2d4:	681a      	ldr	r2, [r3, #0]
 800e2d6:	78fb      	ldrb	r3, [r7, #3]
 800e2d8:	4619      	mov	r1, r3
 800e2da:	f7fc f998 	bl	800a60e <USBD_LL_DataInStage>
}
 800e2de:	bf00      	nop
 800e2e0:	3708      	adds	r7, #8
 800e2e2:	46bd      	mov	sp, r7
 800e2e4:	bd80      	pop	{r7, pc}

0800e2e6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e2e6:	b580      	push	{r7, lr}
 800e2e8:	b082      	sub	sp, #8
 800e2ea:	af00      	add	r7, sp, #0
 800e2ec:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e2f4:	4618      	mov	r0, r3
 800e2f6:	f7fc facc 	bl	800a892 <USBD_LL_SOF>
}
 800e2fa:	bf00      	nop
 800e2fc:	3708      	adds	r7, #8
 800e2fe:	46bd      	mov	sp, r7
 800e300:	bd80      	pop	{r7, pc}

0800e302 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e302:	b580      	push	{r7, lr}
 800e304:	b084      	sub	sp, #16
 800e306:	af00      	add	r7, sp, #0
 800e308:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800e30a:	2301      	movs	r3, #1
 800e30c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	68db      	ldr	r3, [r3, #12]
 800e312:	2b00      	cmp	r3, #0
 800e314:	d102      	bne.n	800e31c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800e316:	2300      	movs	r3, #0
 800e318:	73fb      	strb	r3, [r7, #15]
 800e31a:	e008      	b.n	800e32e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	68db      	ldr	r3, [r3, #12]
 800e320:	2b02      	cmp	r3, #2
 800e322:	d102      	bne.n	800e32a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800e324:	2301      	movs	r3, #1
 800e326:	73fb      	strb	r3, [r7, #15]
 800e328:	e001      	b.n	800e32e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800e32a:	f7f3 f87d 	bl	8001428 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e334:	7bfa      	ldrb	r2, [r7, #15]
 800e336:	4611      	mov	r1, r2
 800e338:	4618      	mov	r0, r3
 800e33a:	f7fc fa6c 	bl	800a816 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e344:	4618      	mov	r0, r3
 800e346:	f7fc fa14 	bl	800a772 <USBD_LL_Reset>
}
 800e34a:	bf00      	nop
 800e34c:	3710      	adds	r7, #16
 800e34e:	46bd      	mov	sp, r7
 800e350:	bd80      	pop	{r7, pc}
	...

0800e354 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e354:	b580      	push	{r7, lr}
 800e356:	b082      	sub	sp, #8
 800e358:	af00      	add	r7, sp, #0
 800e35a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e362:	4618      	mov	r0, r3
 800e364:	f7fc fa67 	bl	800a836 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	681b      	ldr	r3, [r3, #0]
 800e36c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e370:	681b      	ldr	r3, [r3, #0]
 800e372:	687a      	ldr	r2, [r7, #4]
 800e374:	6812      	ldr	r2, [r2, #0]
 800e376:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e37a:	f043 0301 	orr.w	r3, r3, #1
 800e37e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	6a1b      	ldr	r3, [r3, #32]
 800e384:	2b00      	cmp	r3, #0
 800e386:	d005      	beq.n	800e394 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e388:	4b04      	ldr	r3, [pc, #16]	; (800e39c <HAL_PCD_SuspendCallback+0x48>)
 800e38a:	691b      	ldr	r3, [r3, #16]
 800e38c:	4a03      	ldr	r2, [pc, #12]	; (800e39c <HAL_PCD_SuspendCallback+0x48>)
 800e38e:	f043 0306 	orr.w	r3, r3, #6
 800e392:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800e394:	bf00      	nop
 800e396:	3708      	adds	r7, #8
 800e398:	46bd      	mov	sp, r7
 800e39a:	bd80      	pop	{r7, pc}
 800e39c:	e000ed00 	.word	0xe000ed00

0800e3a0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e3a0:	b580      	push	{r7, lr}
 800e3a2:	b082      	sub	sp, #8
 800e3a4:	af00      	add	r7, sp, #0
 800e3a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e3ae:	4618      	mov	r0, r3
 800e3b0:	f7fc fa57 	bl	800a862 <USBD_LL_Resume>
}
 800e3b4:	bf00      	nop
 800e3b6:	3708      	adds	r7, #8
 800e3b8:	46bd      	mov	sp, r7
 800e3ba:	bd80      	pop	{r7, pc}

0800e3bc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e3bc:	b580      	push	{r7, lr}
 800e3be:	b082      	sub	sp, #8
 800e3c0:	af00      	add	r7, sp, #0
 800e3c2:	6078      	str	r0, [r7, #4]
 800e3c4:	460b      	mov	r3, r1
 800e3c6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e3ce:	78fa      	ldrb	r2, [r7, #3]
 800e3d0:	4611      	mov	r1, r2
 800e3d2:	4618      	mov	r0, r3
 800e3d4:	f7fc faaf 	bl	800a936 <USBD_LL_IsoOUTIncomplete>
}
 800e3d8:	bf00      	nop
 800e3da:	3708      	adds	r7, #8
 800e3dc:	46bd      	mov	sp, r7
 800e3de:	bd80      	pop	{r7, pc}

0800e3e0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e3e0:	b580      	push	{r7, lr}
 800e3e2:	b082      	sub	sp, #8
 800e3e4:	af00      	add	r7, sp, #0
 800e3e6:	6078      	str	r0, [r7, #4]
 800e3e8:	460b      	mov	r3, r1
 800e3ea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e3f2:	78fa      	ldrb	r2, [r7, #3]
 800e3f4:	4611      	mov	r1, r2
 800e3f6:	4618      	mov	r0, r3
 800e3f8:	f7fc fa6b 	bl	800a8d2 <USBD_LL_IsoINIncomplete>
}
 800e3fc:	bf00      	nop
 800e3fe:	3708      	adds	r7, #8
 800e400:	46bd      	mov	sp, r7
 800e402:	bd80      	pop	{r7, pc}

0800e404 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e404:	b580      	push	{r7, lr}
 800e406:	b082      	sub	sp, #8
 800e408:	af00      	add	r7, sp, #0
 800e40a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e412:	4618      	mov	r0, r3
 800e414:	f7fc fac1 	bl	800a99a <USBD_LL_DevConnected>
}
 800e418:	bf00      	nop
 800e41a:	3708      	adds	r7, #8
 800e41c:	46bd      	mov	sp, r7
 800e41e:	bd80      	pop	{r7, pc}

0800e420 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e420:	b580      	push	{r7, lr}
 800e422:	b082      	sub	sp, #8
 800e424:	af00      	add	r7, sp, #0
 800e426:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e42e:	4618      	mov	r0, r3
 800e430:	f7fc fabe 	bl	800a9b0 <USBD_LL_DevDisconnected>
}
 800e434:	bf00      	nop
 800e436:	3708      	adds	r7, #8
 800e438:	46bd      	mov	sp, r7
 800e43a:	bd80      	pop	{r7, pc}

0800e43c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e43c:	b580      	push	{r7, lr}
 800e43e:	b082      	sub	sp, #8
 800e440:	af00      	add	r7, sp, #0
 800e442:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	781b      	ldrb	r3, [r3, #0]
 800e448:	2b01      	cmp	r3, #1
 800e44a:	d140      	bne.n	800e4ce <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 800e44c:	4a22      	ldr	r2, [pc, #136]	; (800e4d8 <USBD_LL_Init+0x9c>)
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_HS;
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	4a20      	ldr	r2, [pc, #128]	; (800e4d8 <USBD_LL_Init+0x9c>)
 800e458:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800e45c:	4b1e      	ldr	r3, [pc, #120]	; (800e4d8 <USBD_LL_Init+0x9c>)
 800e45e:	4a1f      	ldr	r2, [pc, #124]	; (800e4dc <USBD_LL_Init+0xa0>)
 800e460:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 6;
 800e462:	4b1d      	ldr	r3, [pc, #116]	; (800e4d8 <USBD_LL_Init+0x9c>)
 800e464:	2206      	movs	r2, #6
 800e466:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 800e468:	4b1b      	ldr	r3, [pc, #108]	; (800e4d8 <USBD_LL_Init+0x9c>)
 800e46a:	2202      	movs	r2, #2
 800e46c:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800e46e:	4b1a      	ldr	r3, [pc, #104]	; (800e4d8 <USBD_LL_Init+0x9c>)
 800e470:	2200      	movs	r2, #0
 800e472:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800e474:	4b18      	ldr	r3, [pc, #96]	; (800e4d8 <USBD_LL_Init+0x9c>)
 800e476:	2202      	movs	r2, #2
 800e478:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800e47a:	4b17      	ldr	r3, [pc, #92]	; (800e4d8 <USBD_LL_Init+0x9c>)
 800e47c:	2200      	movs	r2, #0
 800e47e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800e480:	4b15      	ldr	r3, [pc, #84]	; (800e4d8 <USBD_LL_Init+0x9c>)
 800e482:	2200      	movs	r2, #0
 800e484:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 800e486:	4b14      	ldr	r3, [pc, #80]	; (800e4d8 <USBD_LL_Init+0x9c>)
 800e488:	2200      	movs	r2, #0
 800e48a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800e48c:	4b12      	ldr	r3, [pc, #72]	; (800e4d8 <USBD_LL_Init+0x9c>)
 800e48e:	2200      	movs	r2, #0
 800e490:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 800e492:	4b11      	ldr	r3, [pc, #68]	; (800e4d8 <USBD_LL_Init+0x9c>)
 800e494:	2200      	movs	r2, #0
 800e496:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800e498:	4b0f      	ldr	r3, [pc, #60]	; (800e4d8 <USBD_LL_Init+0x9c>)
 800e49a:	2200      	movs	r2, #0
 800e49c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 800e49e:	480e      	ldr	r0, [pc, #56]	; (800e4d8 <USBD_LL_Init+0x9c>)
 800e4a0:	f7f5 fd1f 	bl	8003ee2 <HAL_PCD_Init>
 800e4a4:	4603      	mov	r3, r0
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	d001      	beq.n	800e4ae <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800e4aa:	f7f2 ffbd 	bl	8001428 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_HS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 800e4ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e4b2:	4809      	ldr	r0, [pc, #36]	; (800e4d8 <USBD_LL_Init+0x9c>)
 800e4b4:	f7f6 ff75 	bl	80053a2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 800e4b8:	2280      	movs	r2, #128	; 0x80
 800e4ba:	2100      	movs	r1, #0
 800e4bc:	4806      	ldr	r0, [pc, #24]	; (800e4d8 <USBD_LL_Init+0x9c>)
 800e4be:	f7f6 ff29 	bl	8005314 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 800e4c2:	f44f 72ba 	mov.w	r2, #372	; 0x174
 800e4c6:	2101      	movs	r1, #1
 800e4c8:	4803      	ldr	r0, [pc, #12]	; (800e4d8 <USBD_LL_Init+0x9c>)
 800e4ca:	f7f6 ff23 	bl	8005314 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800e4ce:	2300      	movs	r3, #0
}
 800e4d0:	4618      	mov	r0, r3
 800e4d2:	3708      	adds	r7, #8
 800e4d4:	46bd      	mov	sp, r7
 800e4d6:	bd80      	pop	{r7, pc}
 800e4d8:	20005afc 	.word	0x20005afc
 800e4dc:	40040000 	.word	0x40040000

0800e4e0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e4e0:	b580      	push	{r7, lr}
 800e4e2:	b084      	sub	sp, #16
 800e4e4:	af00      	add	r7, sp, #0
 800e4e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e4e8:	2300      	movs	r3, #0
 800e4ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e4ec:	2300      	movs	r3, #0
 800e4ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e4f6:	4618      	mov	r0, r3
 800e4f8:	f7f5 fe10 	bl	800411c <HAL_PCD_Start>
 800e4fc:	4603      	mov	r3, r0
 800e4fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e500:	7bfb      	ldrb	r3, [r7, #15]
 800e502:	4618      	mov	r0, r3
 800e504:	f000 f942 	bl	800e78c <USBD_Get_USB_Status>
 800e508:	4603      	mov	r3, r0
 800e50a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e50c:	7bbb      	ldrb	r3, [r7, #14]
}
 800e50e:	4618      	mov	r0, r3
 800e510:	3710      	adds	r7, #16
 800e512:	46bd      	mov	sp, r7
 800e514:	bd80      	pop	{r7, pc}

0800e516 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800e516:	b580      	push	{r7, lr}
 800e518:	b084      	sub	sp, #16
 800e51a:	af00      	add	r7, sp, #0
 800e51c:	6078      	str	r0, [r7, #4]
 800e51e:	4608      	mov	r0, r1
 800e520:	4611      	mov	r1, r2
 800e522:	461a      	mov	r2, r3
 800e524:	4603      	mov	r3, r0
 800e526:	70fb      	strb	r3, [r7, #3]
 800e528:	460b      	mov	r3, r1
 800e52a:	70bb      	strb	r3, [r7, #2]
 800e52c:	4613      	mov	r3, r2
 800e52e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e530:	2300      	movs	r3, #0
 800e532:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e534:	2300      	movs	r3, #0
 800e536:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800e53e:	78bb      	ldrb	r3, [r7, #2]
 800e540:	883a      	ldrh	r2, [r7, #0]
 800e542:	78f9      	ldrb	r1, [r7, #3]
 800e544:	f7f6 fae1 	bl	8004b0a <HAL_PCD_EP_Open>
 800e548:	4603      	mov	r3, r0
 800e54a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e54c:	7bfb      	ldrb	r3, [r7, #15]
 800e54e:	4618      	mov	r0, r3
 800e550:	f000 f91c 	bl	800e78c <USBD_Get_USB_Status>
 800e554:	4603      	mov	r3, r0
 800e556:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e558:	7bbb      	ldrb	r3, [r7, #14]
}
 800e55a:	4618      	mov	r0, r3
 800e55c:	3710      	adds	r7, #16
 800e55e:	46bd      	mov	sp, r7
 800e560:	bd80      	pop	{r7, pc}

0800e562 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e562:	b580      	push	{r7, lr}
 800e564:	b084      	sub	sp, #16
 800e566:	af00      	add	r7, sp, #0
 800e568:	6078      	str	r0, [r7, #4]
 800e56a:	460b      	mov	r3, r1
 800e56c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e56e:	2300      	movs	r3, #0
 800e570:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e572:	2300      	movs	r3, #0
 800e574:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e57c:	78fa      	ldrb	r2, [r7, #3]
 800e57e:	4611      	mov	r1, r2
 800e580:	4618      	mov	r0, r3
 800e582:	f7f6 fb2a 	bl	8004bda <HAL_PCD_EP_Close>
 800e586:	4603      	mov	r3, r0
 800e588:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e58a:	7bfb      	ldrb	r3, [r7, #15]
 800e58c:	4618      	mov	r0, r3
 800e58e:	f000 f8fd 	bl	800e78c <USBD_Get_USB_Status>
 800e592:	4603      	mov	r3, r0
 800e594:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e596:	7bbb      	ldrb	r3, [r7, #14]
}
 800e598:	4618      	mov	r0, r3
 800e59a:	3710      	adds	r7, #16
 800e59c:	46bd      	mov	sp, r7
 800e59e:	bd80      	pop	{r7, pc}

0800e5a0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e5a0:	b580      	push	{r7, lr}
 800e5a2:	b084      	sub	sp, #16
 800e5a4:	af00      	add	r7, sp, #0
 800e5a6:	6078      	str	r0, [r7, #4]
 800e5a8:	460b      	mov	r3, r1
 800e5aa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e5ac:	2300      	movs	r3, #0
 800e5ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e5b0:	2300      	movs	r3, #0
 800e5b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e5ba:	78fa      	ldrb	r2, [r7, #3]
 800e5bc:	4611      	mov	r1, r2
 800e5be:	4618      	mov	r0, r3
 800e5c0:	f7f6 fc02 	bl	8004dc8 <HAL_PCD_EP_SetStall>
 800e5c4:	4603      	mov	r3, r0
 800e5c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e5c8:	7bfb      	ldrb	r3, [r7, #15]
 800e5ca:	4618      	mov	r0, r3
 800e5cc:	f000 f8de 	bl	800e78c <USBD_Get_USB_Status>
 800e5d0:	4603      	mov	r3, r0
 800e5d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e5d4:	7bbb      	ldrb	r3, [r7, #14]
}
 800e5d6:	4618      	mov	r0, r3
 800e5d8:	3710      	adds	r7, #16
 800e5da:	46bd      	mov	sp, r7
 800e5dc:	bd80      	pop	{r7, pc}

0800e5de <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e5de:	b580      	push	{r7, lr}
 800e5e0:	b084      	sub	sp, #16
 800e5e2:	af00      	add	r7, sp, #0
 800e5e4:	6078      	str	r0, [r7, #4]
 800e5e6:	460b      	mov	r3, r1
 800e5e8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e5ea:	2300      	movs	r3, #0
 800e5ec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e5ee:	2300      	movs	r3, #0
 800e5f0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e5f8:	78fa      	ldrb	r2, [r7, #3]
 800e5fa:	4611      	mov	r1, r2
 800e5fc:	4618      	mov	r0, r3
 800e5fe:	f7f6 fc47 	bl	8004e90 <HAL_PCD_EP_ClrStall>
 800e602:	4603      	mov	r3, r0
 800e604:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e606:	7bfb      	ldrb	r3, [r7, #15]
 800e608:	4618      	mov	r0, r3
 800e60a:	f000 f8bf 	bl	800e78c <USBD_Get_USB_Status>
 800e60e:	4603      	mov	r3, r0
 800e610:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e612:	7bbb      	ldrb	r3, [r7, #14]
}
 800e614:	4618      	mov	r0, r3
 800e616:	3710      	adds	r7, #16
 800e618:	46bd      	mov	sp, r7
 800e61a:	bd80      	pop	{r7, pc}

0800e61c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e61c:	b480      	push	{r7}
 800e61e:	b085      	sub	sp, #20
 800e620:	af00      	add	r7, sp, #0
 800e622:	6078      	str	r0, [r7, #4]
 800e624:	460b      	mov	r3, r1
 800e626:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e62e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800e630:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e634:	2b00      	cmp	r3, #0
 800e636:	da0b      	bge.n	800e650 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e638:	78fb      	ldrb	r3, [r7, #3]
 800e63a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e63e:	68f9      	ldr	r1, [r7, #12]
 800e640:	4613      	mov	r3, r2
 800e642:	00db      	lsls	r3, r3, #3
 800e644:	4413      	add	r3, r2
 800e646:	009b      	lsls	r3, r3, #2
 800e648:	440b      	add	r3, r1
 800e64a:	333e      	adds	r3, #62	; 0x3e
 800e64c:	781b      	ldrb	r3, [r3, #0]
 800e64e:	e00b      	b.n	800e668 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e650:	78fb      	ldrb	r3, [r7, #3]
 800e652:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e656:	68f9      	ldr	r1, [r7, #12]
 800e658:	4613      	mov	r3, r2
 800e65a:	00db      	lsls	r3, r3, #3
 800e65c:	4413      	add	r3, r2
 800e65e:	009b      	lsls	r3, r3, #2
 800e660:	440b      	add	r3, r1
 800e662:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800e666:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e668:	4618      	mov	r0, r3
 800e66a:	3714      	adds	r7, #20
 800e66c:	46bd      	mov	sp, r7
 800e66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e672:	4770      	bx	lr

0800e674 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e674:	b580      	push	{r7, lr}
 800e676:	b084      	sub	sp, #16
 800e678:	af00      	add	r7, sp, #0
 800e67a:	6078      	str	r0, [r7, #4]
 800e67c:	460b      	mov	r3, r1
 800e67e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e680:	2300      	movs	r3, #0
 800e682:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e684:	2300      	movs	r3, #0
 800e686:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e68e:	78fa      	ldrb	r2, [r7, #3]
 800e690:	4611      	mov	r1, r2
 800e692:	4618      	mov	r0, r3
 800e694:	f7f6 fa14 	bl	8004ac0 <HAL_PCD_SetAddress>
 800e698:	4603      	mov	r3, r0
 800e69a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e69c:	7bfb      	ldrb	r3, [r7, #15]
 800e69e:	4618      	mov	r0, r3
 800e6a0:	f000 f874 	bl	800e78c <USBD_Get_USB_Status>
 800e6a4:	4603      	mov	r3, r0
 800e6a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e6a8:	7bbb      	ldrb	r3, [r7, #14]
}
 800e6aa:	4618      	mov	r0, r3
 800e6ac:	3710      	adds	r7, #16
 800e6ae:	46bd      	mov	sp, r7
 800e6b0:	bd80      	pop	{r7, pc}

0800e6b2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e6b2:	b580      	push	{r7, lr}
 800e6b4:	b086      	sub	sp, #24
 800e6b6:	af00      	add	r7, sp, #0
 800e6b8:	60f8      	str	r0, [r7, #12]
 800e6ba:	607a      	str	r2, [r7, #4]
 800e6bc:	603b      	str	r3, [r7, #0]
 800e6be:	460b      	mov	r3, r1
 800e6c0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e6c2:	2300      	movs	r3, #0
 800e6c4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e6c6:	2300      	movs	r3, #0
 800e6c8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e6ca:	68fb      	ldr	r3, [r7, #12]
 800e6cc:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800e6d0:	7af9      	ldrb	r1, [r7, #11]
 800e6d2:	683b      	ldr	r3, [r7, #0]
 800e6d4:	687a      	ldr	r2, [r7, #4]
 800e6d6:	f7f6 fb2d 	bl	8004d34 <HAL_PCD_EP_Transmit>
 800e6da:	4603      	mov	r3, r0
 800e6dc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e6de:	7dfb      	ldrb	r3, [r7, #23]
 800e6e0:	4618      	mov	r0, r3
 800e6e2:	f000 f853 	bl	800e78c <USBD_Get_USB_Status>
 800e6e6:	4603      	mov	r3, r0
 800e6e8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e6ea:	7dbb      	ldrb	r3, [r7, #22]
}
 800e6ec:	4618      	mov	r0, r3
 800e6ee:	3718      	adds	r7, #24
 800e6f0:	46bd      	mov	sp, r7
 800e6f2:	bd80      	pop	{r7, pc}

0800e6f4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e6f4:	b580      	push	{r7, lr}
 800e6f6:	b086      	sub	sp, #24
 800e6f8:	af00      	add	r7, sp, #0
 800e6fa:	60f8      	str	r0, [r7, #12]
 800e6fc:	607a      	str	r2, [r7, #4]
 800e6fe:	603b      	str	r3, [r7, #0]
 800e700:	460b      	mov	r3, r1
 800e702:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e704:	2300      	movs	r3, #0
 800e706:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e708:	2300      	movs	r3, #0
 800e70a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e70c:	68fb      	ldr	r3, [r7, #12]
 800e70e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800e712:	7af9      	ldrb	r1, [r7, #11]
 800e714:	683b      	ldr	r3, [r7, #0]
 800e716:	687a      	ldr	r2, [r7, #4]
 800e718:	f7f6 faa9 	bl	8004c6e <HAL_PCD_EP_Receive>
 800e71c:	4603      	mov	r3, r0
 800e71e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e720:	7dfb      	ldrb	r3, [r7, #23]
 800e722:	4618      	mov	r0, r3
 800e724:	f000 f832 	bl	800e78c <USBD_Get_USB_Status>
 800e728:	4603      	mov	r3, r0
 800e72a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e72c:	7dbb      	ldrb	r3, [r7, #22]
}
 800e72e:	4618      	mov	r0, r3
 800e730:	3718      	adds	r7, #24
 800e732:	46bd      	mov	sp, r7
 800e734:	bd80      	pop	{r7, pc}

0800e736 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e736:	b580      	push	{r7, lr}
 800e738:	b082      	sub	sp, #8
 800e73a:	af00      	add	r7, sp, #0
 800e73c:	6078      	str	r0, [r7, #4]
 800e73e:	460b      	mov	r3, r1
 800e740:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e748:	78fa      	ldrb	r2, [r7, #3]
 800e74a:	4611      	mov	r1, r2
 800e74c:	4618      	mov	r0, r3
 800e74e:	f7f6 fad9 	bl	8004d04 <HAL_PCD_EP_GetRxCount>
 800e752:	4603      	mov	r3, r0
}
 800e754:	4618      	mov	r0, r3
 800e756:	3708      	adds	r7, #8
 800e758:	46bd      	mov	sp, r7
 800e75a:	bd80      	pop	{r7, pc}

0800e75c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800e75c:	b480      	push	{r7}
 800e75e:	b083      	sub	sp, #12
 800e760:	af00      	add	r7, sp, #0
 800e762:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800e764:	4b03      	ldr	r3, [pc, #12]	; (800e774 <USBD_static_malloc+0x18>)
}
 800e766:	4618      	mov	r0, r3
 800e768:	370c      	adds	r7, #12
 800e76a:	46bd      	mov	sp, r7
 800e76c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e770:	4770      	bx	lr
 800e772:	bf00      	nop
 800e774:	20006008 	.word	0x20006008

0800e778 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800e778:	b480      	push	{r7}
 800e77a:	b083      	sub	sp, #12
 800e77c:	af00      	add	r7, sp, #0
 800e77e:	6078      	str	r0, [r7, #4]

}
 800e780:	bf00      	nop
 800e782:	370c      	adds	r7, #12
 800e784:	46bd      	mov	sp, r7
 800e786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e78a:	4770      	bx	lr

0800e78c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e78c:	b480      	push	{r7}
 800e78e:	b085      	sub	sp, #20
 800e790:	af00      	add	r7, sp, #0
 800e792:	4603      	mov	r3, r0
 800e794:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e796:	2300      	movs	r3, #0
 800e798:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e79a:	79fb      	ldrb	r3, [r7, #7]
 800e79c:	2b03      	cmp	r3, #3
 800e79e:	d817      	bhi.n	800e7d0 <USBD_Get_USB_Status+0x44>
 800e7a0:	a201      	add	r2, pc, #4	; (adr r2, 800e7a8 <USBD_Get_USB_Status+0x1c>)
 800e7a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7a6:	bf00      	nop
 800e7a8:	0800e7b9 	.word	0x0800e7b9
 800e7ac:	0800e7bf 	.word	0x0800e7bf
 800e7b0:	0800e7c5 	.word	0x0800e7c5
 800e7b4:	0800e7cb 	.word	0x0800e7cb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800e7b8:	2300      	movs	r3, #0
 800e7ba:	73fb      	strb	r3, [r7, #15]
    break;
 800e7bc:	e00b      	b.n	800e7d6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e7be:	2303      	movs	r3, #3
 800e7c0:	73fb      	strb	r3, [r7, #15]
    break;
 800e7c2:	e008      	b.n	800e7d6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e7c4:	2301      	movs	r3, #1
 800e7c6:	73fb      	strb	r3, [r7, #15]
    break;
 800e7c8:	e005      	b.n	800e7d6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e7ca:	2303      	movs	r3, #3
 800e7cc:	73fb      	strb	r3, [r7, #15]
    break;
 800e7ce:	e002      	b.n	800e7d6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800e7d0:	2303      	movs	r3, #3
 800e7d2:	73fb      	strb	r3, [r7, #15]
    break;
 800e7d4:	bf00      	nop
  }
  return usb_status;
 800e7d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800e7d8:	4618      	mov	r0, r3
 800e7da:	3714      	adds	r7, #20
 800e7dc:	46bd      	mov	sp, r7
 800e7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7e2:	4770      	bx	lr

0800e7e4 <__cvt>:
 800e7e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e7e8:	ec55 4b10 	vmov	r4, r5, d0
 800e7ec:	2d00      	cmp	r5, #0
 800e7ee:	460e      	mov	r6, r1
 800e7f0:	4619      	mov	r1, r3
 800e7f2:	462b      	mov	r3, r5
 800e7f4:	bfbb      	ittet	lt
 800e7f6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800e7fa:	461d      	movlt	r5, r3
 800e7fc:	2300      	movge	r3, #0
 800e7fe:	232d      	movlt	r3, #45	; 0x2d
 800e800:	700b      	strb	r3, [r1, #0]
 800e802:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e804:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800e808:	4691      	mov	r9, r2
 800e80a:	f023 0820 	bic.w	r8, r3, #32
 800e80e:	bfbc      	itt	lt
 800e810:	4622      	movlt	r2, r4
 800e812:	4614      	movlt	r4, r2
 800e814:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e818:	d005      	beq.n	800e826 <__cvt+0x42>
 800e81a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800e81e:	d100      	bne.n	800e822 <__cvt+0x3e>
 800e820:	3601      	adds	r6, #1
 800e822:	2102      	movs	r1, #2
 800e824:	e000      	b.n	800e828 <__cvt+0x44>
 800e826:	2103      	movs	r1, #3
 800e828:	ab03      	add	r3, sp, #12
 800e82a:	9301      	str	r3, [sp, #4]
 800e82c:	ab02      	add	r3, sp, #8
 800e82e:	9300      	str	r3, [sp, #0]
 800e830:	ec45 4b10 	vmov	d0, r4, r5
 800e834:	4653      	mov	r3, sl
 800e836:	4632      	mov	r2, r6
 800e838:	f000 fece 	bl	800f5d8 <_dtoa_r>
 800e83c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800e840:	4607      	mov	r7, r0
 800e842:	d102      	bne.n	800e84a <__cvt+0x66>
 800e844:	f019 0f01 	tst.w	r9, #1
 800e848:	d022      	beq.n	800e890 <__cvt+0xac>
 800e84a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e84e:	eb07 0906 	add.w	r9, r7, r6
 800e852:	d110      	bne.n	800e876 <__cvt+0x92>
 800e854:	783b      	ldrb	r3, [r7, #0]
 800e856:	2b30      	cmp	r3, #48	; 0x30
 800e858:	d10a      	bne.n	800e870 <__cvt+0x8c>
 800e85a:	2200      	movs	r2, #0
 800e85c:	2300      	movs	r3, #0
 800e85e:	4620      	mov	r0, r4
 800e860:	4629      	mov	r1, r5
 800e862:	f7f2 f941 	bl	8000ae8 <__aeabi_dcmpeq>
 800e866:	b918      	cbnz	r0, 800e870 <__cvt+0x8c>
 800e868:	f1c6 0601 	rsb	r6, r6, #1
 800e86c:	f8ca 6000 	str.w	r6, [sl]
 800e870:	f8da 3000 	ldr.w	r3, [sl]
 800e874:	4499      	add	r9, r3
 800e876:	2200      	movs	r2, #0
 800e878:	2300      	movs	r3, #0
 800e87a:	4620      	mov	r0, r4
 800e87c:	4629      	mov	r1, r5
 800e87e:	f7f2 f933 	bl	8000ae8 <__aeabi_dcmpeq>
 800e882:	b108      	cbz	r0, 800e888 <__cvt+0xa4>
 800e884:	f8cd 900c 	str.w	r9, [sp, #12]
 800e888:	2230      	movs	r2, #48	; 0x30
 800e88a:	9b03      	ldr	r3, [sp, #12]
 800e88c:	454b      	cmp	r3, r9
 800e88e:	d307      	bcc.n	800e8a0 <__cvt+0xbc>
 800e890:	9b03      	ldr	r3, [sp, #12]
 800e892:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e894:	1bdb      	subs	r3, r3, r7
 800e896:	4638      	mov	r0, r7
 800e898:	6013      	str	r3, [r2, #0]
 800e89a:	b004      	add	sp, #16
 800e89c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e8a0:	1c59      	adds	r1, r3, #1
 800e8a2:	9103      	str	r1, [sp, #12]
 800e8a4:	701a      	strb	r2, [r3, #0]
 800e8a6:	e7f0      	b.n	800e88a <__cvt+0xa6>

0800e8a8 <__exponent>:
 800e8a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e8aa:	4603      	mov	r3, r0
 800e8ac:	2900      	cmp	r1, #0
 800e8ae:	bfb8      	it	lt
 800e8b0:	4249      	neglt	r1, r1
 800e8b2:	f803 2b02 	strb.w	r2, [r3], #2
 800e8b6:	bfb4      	ite	lt
 800e8b8:	222d      	movlt	r2, #45	; 0x2d
 800e8ba:	222b      	movge	r2, #43	; 0x2b
 800e8bc:	2909      	cmp	r1, #9
 800e8be:	7042      	strb	r2, [r0, #1]
 800e8c0:	dd2a      	ble.n	800e918 <__exponent+0x70>
 800e8c2:	f10d 0207 	add.w	r2, sp, #7
 800e8c6:	4617      	mov	r7, r2
 800e8c8:	260a      	movs	r6, #10
 800e8ca:	4694      	mov	ip, r2
 800e8cc:	fb91 f5f6 	sdiv	r5, r1, r6
 800e8d0:	fb06 1415 	mls	r4, r6, r5, r1
 800e8d4:	3430      	adds	r4, #48	; 0x30
 800e8d6:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800e8da:	460c      	mov	r4, r1
 800e8dc:	2c63      	cmp	r4, #99	; 0x63
 800e8de:	f102 32ff 	add.w	r2, r2, #4294967295
 800e8e2:	4629      	mov	r1, r5
 800e8e4:	dcf1      	bgt.n	800e8ca <__exponent+0x22>
 800e8e6:	3130      	adds	r1, #48	; 0x30
 800e8e8:	f1ac 0402 	sub.w	r4, ip, #2
 800e8ec:	f802 1c01 	strb.w	r1, [r2, #-1]
 800e8f0:	1c41      	adds	r1, r0, #1
 800e8f2:	4622      	mov	r2, r4
 800e8f4:	42ba      	cmp	r2, r7
 800e8f6:	d30a      	bcc.n	800e90e <__exponent+0x66>
 800e8f8:	f10d 0209 	add.w	r2, sp, #9
 800e8fc:	eba2 020c 	sub.w	r2, r2, ip
 800e900:	42bc      	cmp	r4, r7
 800e902:	bf88      	it	hi
 800e904:	2200      	movhi	r2, #0
 800e906:	4413      	add	r3, r2
 800e908:	1a18      	subs	r0, r3, r0
 800e90a:	b003      	add	sp, #12
 800e90c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e90e:	f812 5b01 	ldrb.w	r5, [r2], #1
 800e912:	f801 5f01 	strb.w	r5, [r1, #1]!
 800e916:	e7ed      	b.n	800e8f4 <__exponent+0x4c>
 800e918:	2330      	movs	r3, #48	; 0x30
 800e91a:	3130      	adds	r1, #48	; 0x30
 800e91c:	7083      	strb	r3, [r0, #2]
 800e91e:	70c1      	strb	r1, [r0, #3]
 800e920:	1d03      	adds	r3, r0, #4
 800e922:	e7f1      	b.n	800e908 <__exponent+0x60>

0800e924 <_printf_float>:
 800e924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e928:	ed2d 8b02 	vpush	{d8}
 800e92c:	b08d      	sub	sp, #52	; 0x34
 800e92e:	460c      	mov	r4, r1
 800e930:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800e934:	4616      	mov	r6, r2
 800e936:	461f      	mov	r7, r3
 800e938:	4605      	mov	r5, r0
 800e93a:	f000 fce7 	bl	800f30c <_localeconv_r>
 800e93e:	f8d0 a000 	ldr.w	sl, [r0]
 800e942:	4650      	mov	r0, sl
 800e944:	f7f1 fca4 	bl	8000290 <strlen>
 800e948:	2300      	movs	r3, #0
 800e94a:	930a      	str	r3, [sp, #40]	; 0x28
 800e94c:	6823      	ldr	r3, [r4, #0]
 800e94e:	9305      	str	r3, [sp, #20]
 800e950:	f8d8 3000 	ldr.w	r3, [r8]
 800e954:	f894 b018 	ldrb.w	fp, [r4, #24]
 800e958:	3307      	adds	r3, #7
 800e95a:	f023 0307 	bic.w	r3, r3, #7
 800e95e:	f103 0208 	add.w	r2, r3, #8
 800e962:	f8c8 2000 	str.w	r2, [r8]
 800e966:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e96a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e96e:	9307      	str	r3, [sp, #28]
 800e970:	f8cd 8018 	str.w	r8, [sp, #24]
 800e974:	ee08 0a10 	vmov	s16, r0
 800e978:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800e97c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e980:	4b9e      	ldr	r3, [pc, #632]	; (800ebfc <_printf_float+0x2d8>)
 800e982:	f04f 32ff 	mov.w	r2, #4294967295
 800e986:	f7f2 f8e1 	bl	8000b4c <__aeabi_dcmpun>
 800e98a:	bb88      	cbnz	r0, 800e9f0 <_printf_float+0xcc>
 800e98c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e990:	4b9a      	ldr	r3, [pc, #616]	; (800ebfc <_printf_float+0x2d8>)
 800e992:	f04f 32ff 	mov.w	r2, #4294967295
 800e996:	f7f2 f8bb 	bl	8000b10 <__aeabi_dcmple>
 800e99a:	bb48      	cbnz	r0, 800e9f0 <_printf_float+0xcc>
 800e99c:	2200      	movs	r2, #0
 800e99e:	2300      	movs	r3, #0
 800e9a0:	4640      	mov	r0, r8
 800e9a2:	4649      	mov	r1, r9
 800e9a4:	f7f2 f8aa 	bl	8000afc <__aeabi_dcmplt>
 800e9a8:	b110      	cbz	r0, 800e9b0 <_printf_float+0x8c>
 800e9aa:	232d      	movs	r3, #45	; 0x2d
 800e9ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e9b0:	4a93      	ldr	r2, [pc, #588]	; (800ec00 <_printf_float+0x2dc>)
 800e9b2:	4b94      	ldr	r3, [pc, #592]	; (800ec04 <_printf_float+0x2e0>)
 800e9b4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800e9b8:	bf94      	ite	ls
 800e9ba:	4690      	movls	r8, r2
 800e9bc:	4698      	movhi	r8, r3
 800e9be:	2303      	movs	r3, #3
 800e9c0:	6123      	str	r3, [r4, #16]
 800e9c2:	9b05      	ldr	r3, [sp, #20]
 800e9c4:	f023 0304 	bic.w	r3, r3, #4
 800e9c8:	6023      	str	r3, [r4, #0]
 800e9ca:	f04f 0900 	mov.w	r9, #0
 800e9ce:	9700      	str	r7, [sp, #0]
 800e9d0:	4633      	mov	r3, r6
 800e9d2:	aa0b      	add	r2, sp, #44	; 0x2c
 800e9d4:	4621      	mov	r1, r4
 800e9d6:	4628      	mov	r0, r5
 800e9d8:	f000 f9da 	bl	800ed90 <_printf_common>
 800e9dc:	3001      	adds	r0, #1
 800e9de:	f040 8090 	bne.w	800eb02 <_printf_float+0x1de>
 800e9e2:	f04f 30ff 	mov.w	r0, #4294967295
 800e9e6:	b00d      	add	sp, #52	; 0x34
 800e9e8:	ecbd 8b02 	vpop	{d8}
 800e9ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e9f0:	4642      	mov	r2, r8
 800e9f2:	464b      	mov	r3, r9
 800e9f4:	4640      	mov	r0, r8
 800e9f6:	4649      	mov	r1, r9
 800e9f8:	f7f2 f8a8 	bl	8000b4c <__aeabi_dcmpun>
 800e9fc:	b140      	cbz	r0, 800ea10 <_printf_float+0xec>
 800e9fe:	464b      	mov	r3, r9
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	bfbc      	itt	lt
 800ea04:	232d      	movlt	r3, #45	; 0x2d
 800ea06:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800ea0a:	4a7f      	ldr	r2, [pc, #508]	; (800ec08 <_printf_float+0x2e4>)
 800ea0c:	4b7f      	ldr	r3, [pc, #508]	; (800ec0c <_printf_float+0x2e8>)
 800ea0e:	e7d1      	b.n	800e9b4 <_printf_float+0x90>
 800ea10:	6863      	ldr	r3, [r4, #4]
 800ea12:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800ea16:	9206      	str	r2, [sp, #24]
 800ea18:	1c5a      	adds	r2, r3, #1
 800ea1a:	d13f      	bne.n	800ea9c <_printf_float+0x178>
 800ea1c:	2306      	movs	r3, #6
 800ea1e:	6063      	str	r3, [r4, #4]
 800ea20:	9b05      	ldr	r3, [sp, #20]
 800ea22:	6861      	ldr	r1, [r4, #4]
 800ea24:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800ea28:	2300      	movs	r3, #0
 800ea2a:	9303      	str	r3, [sp, #12]
 800ea2c:	ab0a      	add	r3, sp, #40	; 0x28
 800ea2e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800ea32:	ab09      	add	r3, sp, #36	; 0x24
 800ea34:	ec49 8b10 	vmov	d0, r8, r9
 800ea38:	9300      	str	r3, [sp, #0]
 800ea3a:	6022      	str	r2, [r4, #0]
 800ea3c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800ea40:	4628      	mov	r0, r5
 800ea42:	f7ff fecf 	bl	800e7e4 <__cvt>
 800ea46:	9b06      	ldr	r3, [sp, #24]
 800ea48:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ea4a:	2b47      	cmp	r3, #71	; 0x47
 800ea4c:	4680      	mov	r8, r0
 800ea4e:	d108      	bne.n	800ea62 <_printf_float+0x13e>
 800ea50:	1cc8      	adds	r0, r1, #3
 800ea52:	db02      	blt.n	800ea5a <_printf_float+0x136>
 800ea54:	6863      	ldr	r3, [r4, #4]
 800ea56:	4299      	cmp	r1, r3
 800ea58:	dd41      	ble.n	800eade <_printf_float+0x1ba>
 800ea5a:	f1ab 0302 	sub.w	r3, fp, #2
 800ea5e:	fa5f fb83 	uxtb.w	fp, r3
 800ea62:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ea66:	d820      	bhi.n	800eaaa <_printf_float+0x186>
 800ea68:	3901      	subs	r1, #1
 800ea6a:	465a      	mov	r2, fp
 800ea6c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ea70:	9109      	str	r1, [sp, #36]	; 0x24
 800ea72:	f7ff ff19 	bl	800e8a8 <__exponent>
 800ea76:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ea78:	1813      	adds	r3, r2, r0
 800ea7a:	2a01      	cmp	r2, #1
 800ea7c:	4681      	mov	r9, r0
 800ea7e:	6123      	str	r3, [r4, #16]
 800ea80:	dc02      	bgt.n	800ea88 <_printf_float+0x164>
 800ea82:	6822      	ldr	r2, [r4, #0]
 800ea84:	07d2      	lsls	r2, r2, #31
 800ea86:	d501      	bpl.n	800ea8c <_printf_float+0x168>
 800ea88:	3301      	adds	r3, #1
 800ea8a:	6123      	str	r3, [r4, #16]
 800ea8c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ea90:	2b00      	cmp	r3, #0
 800ea92:	d09c      	beq.n	800e9ce <_printf_float+0xaa>
 800ea94:	232d      	movs	r3, #45	; 0x2d
 800ea96:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ea9a:	e798      	b.n	800e9ce <_printf_float+0xaa>
 800ea9c:	9a06      	ldr	r2, [sp, #24]
 800ea9e:	2a47      	cmp	r2, #71	; 0x47
 800eaa0:	d1be      	bne.n	800ea20 <_printf_float+0xfc>
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	d1bc      	bne.n	800ea20 <_printf_float+0xfc>
 800eaa6:	2301      	movs	r3, #1
 800eaa8:	e7b9      	b.n	800ea1e <_printf_float+0xfa>
 800eaaa:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800eaae:	d118      	bne.n	800eae2 <_printf_float+0x1be>
 800eab0:	2900      	cmp	r1, #0
 800eab2:	6863      	ldr	r3, [r4, #4]
 800eab4:	dd0b      	ble.n	800eace <_printf_float+0x1aa>
 800eab6:	6121      	str	r1, [r4, #16]
 800eab8:	b913      	cbnz	r3, 800eac0 <_printf_float+0x19c>
 800eaba:	6822      	ldr	r2, [r4, #0]
 800eabc:	07d0      	lsls	r0, r2, #31
 800eabe:	d502      	bpl.n	800eac6 <_printf_float+0x1a2>
 800eac0:	3301      	adds	r3, #1
 800eac2:	440b      	add	r3, r1
 800eac4:	6123      	str	r3, [r4, #16]
 800eac6:	65a1      	str	r1, [r4, #88]	; 0x58
 800eac8:	f04f 0900 	mov.w	r9, #0
 800eacc:	e7de      	b.n	800ea8c <_printf_float+0x168>
 800eace:	b913      	cbnz	r3, 800ead6 <_printf_float+0x1b2>
 800ead0:	6822      	ldr	r2, [r4, #0]
 800ead2:	07d2      	lsls	r2, r2, #31
 800ead4:	d501      	bpl.n	800eada <_printf_float+0x1b6>
 800ead6:	3302      	adds	r3, #2
 800ead8:	e7f4      	b.n	800eac4 <_printf_float+0x1a0>
 800eada:	2301      	movs	r3, #1
 800eadc:	e7f2      	b.n	800eac4 <_printf_float+0x1a0>
 800eade:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800eae2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eae4:	4299      	cmp	r1, r3
 800eae6:	db05      	blt.n	800eaf4 <_printf_float+0x1d0>
 800eae8:	6823      	ldr	r3, [r4, #0]
 800eaea:	6121      	str	r1, [r4, #16]
 800eaec:	07d8      	lsls	r0, r3, #31
 800eaee:	d5ea      	bpl.n	800eac6 <_printf_float+0x1a2>
 800eaf0:	1c4b      	adds	r3, r1, #1
 800eaf2:	e7e7      	b.n	800eac4 <_printf_float+0x1a0>
 800eaf4:	2900      	cmp	r1, #0
 800eaf6:	bfd4      	ite	le
 800eaf8:	f1c1 0202 	rsble	r2, r1, #2
 800eafc:	2201      	movgt	r2, #1
 800eafe:	4413      	add	r3, r2
 800eb00:	e7e0      	b.n	800eac4 <_printf_float+0x1a0>
 800eb02:	6823      	ldr	r3, [r4, #0]
 800eb04:	055a      	lsls	r2, r3, #21
 800eb06:	d407      	bmi.n	800eb18 <_printf_float+0x1f4>
 800eb08:	6923      	ldr	r3, [r4, #16]
 800eb0a:	4642      	mov	r2, r8
 800eb0c:	4631      	mov	r1, r6
 800eb0e:	4628      	mov	r0, r5
 800eb10:	47b8      	blx	r7
 800eb12:	3001      	adds	r0, #1
 800eb14:	d12c      	bne.n	800eb70 <_printf_float+0x24c>
 800eb16:	e764      	b.n	800e9e2 <_printf_float+0xbe>
 800eb18:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800eb1c:	f240 80e0 	bls.w	800ece0 <_printf_float+0x3bc>
 800eb20:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800eb24:	2200      	movs	r2, #0
 800eb26:	2300      	movs	r3, #0
 800eb28:	f7f1 ffde 	bl	8000ae8 <__aeabi_dcmpeq>
 800eb2c:	2800      	cmp	r0, #0
 800eb2e:	d034      	beq.n	800eb9a <_printf_float+0x276>
 800eb30:	4a37      	ldr	r2, [pc, #220]	; (800ec10 <_printf_float+0x2ec>)
 800eb32:	2301      	movs	r3, #1
 800eb34:	4631      	mov	r1, r6
 800eb36:	4628      	mov	r0, r5
 800eb38:	47b8      	blx	r7
 800eb3a:	3001      	adds	r0, #1
 800eb3c:	f43f af51 	beq.w	800e9e2 <_printf_float+0xbe>
 800eb40:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800eb44:	429a      	cmp	r2, r3
 800eb46:	db02      	blt.n	800eb4e <_printf_float+0x22a>
 800eb48:	6823      	ldr	r3, [r4, #0]
 800eb4a:	07d8      	lsls	r0, r3, #31
 800eb4c:	d510      	bpl.n	800eb70 <_printf_float+0x24c>
 800eb4e:	ee18 3a10 	vmov	r3, s16
 800eb52:	4652      	mov	r2, sl
 800eb54:	4631      	mov	r1, r6
 800eb56:	4628      	mov	r0, r5
 800eb58:	47b8      	blx	r7
 800eb5a:	3001      	adds	r0, #1
 800eb5c:	f43f af41 	beq.w	800e9e2 <_printf_float+0xbe>
 800eb60:	f04f 0800 	mov.w	r8, #0
 800eb64:	f104 091a 	add.w	r9, r4, #26
 800eb68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eb6a:	3b01      	subs	r3, #1
 800eb6c:	4543      	cmp	r3, r8
 800eb6e:	dc09      	bgt.n	800eb84 <_printf_float+0x260>
 800eb70:	6823      	ldr	r3, [r4, #0]
 800eb72:	079b      	lsls	r3, r3, #30
 800eb74:	f100 8107 	bmi.w	800ed86 <_printf_float+0x462>
 800eb78:	68e0      	ldr	r0, [r4, #12]
 800eb7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800eb7c:	4298      	cmp	r0, r3
 800eb7e:	bfb8      	it	lt
 800eb80:	4618      	movlt	r0, r3
 800eb82:	e730      	b.n	800e9e6 <_printf_float+0xc2>
 800eb84:	2301      	movs	r3, #1
 800eb86:	464a      	mov	r2, r9
 800eb88:	4631      	mov	r1, r6
 800eb8a:	4628      	mov	r0, r5
 800eb8c:	47b8      	blx	r7
 800eb8e:	3001      	adds	r0, #1
 800eb90:	f43f af27 	beq.w	800e9e2 <_printf_float+0xbe>
 800eb94:	f108 0801 	add.w	r8, r8, #1
 800eb98:	e7e6      	b.n	800eb68 <_printf_float+0x244>
 800eb9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eb9c:	2b00      	cmp	r3, #0
 800eb9e:	dc39      	bgt.n	800ec14 <_printf_float+0x2f0>
 800eba0:	4a1b      	ldr	r2, [pc, #108]	; (800ec10 <_printf_float+0x2ec>)
 800eba2:	2301      	movs	r3, #1
 800eba4:	4631      	mov	r1, r6
 800eba6:	4628      	mov	r0, r5
 800eba8:	47b8      	blx	r7
 800ebaa:	3001      	adds	r0, #1
 800ebac:	f43f af19 	beq.w	800e9e2 <_printf_float+0xbe>
 800ebb0:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800ebb4:	4313      	orrs	r3, r2
 800ebb6:	d102      	bne.n	800ebbe <_printf_float+0x29a>
 800ebb8:	6823      	ldr	r3, [r4, #0]
 800ebba:	07d9      	lsls	r1, r3, #31
 800ebbc:	d5d8      	bpl.n	800eb70 <_printf_float+0x24c>
 800ebbe:	ee18 3a10 	vmov	r3, s16
 800ebc2:	4652      	mov	r2, sl
 800ebc4:	4631      	mov	r1, r6
 800ebc6:	4628      	mov	r0, r5
 800ebc8:	47b8      	blx	r7
 800ebca:	3001      	adds	r0, #1
 800ebcc:	f43f af09 	beq.w	800e9e2 <_printf_float+0xbe>
 800ebd0:	f04f 0900 	mov.w	r9, #0
 800ebd4:	f104 0a1a 	add.w	sl, r4, #26
 800ebd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ebda:	425b      	negs	r3, r3
 800ebdc:	454b      	cmp	r3, r9
 800ebde:	dc01      	bgt.n	800ebe4 <_printf_float+0x2c0>
 800ebe0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ebe2:	e792      	b.n	800eb0a <_printf_float+0x1e6>
 800ebe4:	2301      	movs	r3, #1
 800ebe6:	4652      	mov	r2, sl
 800ebe8:	4631      	mov	r1, r6
 800ebea:	4628      	mov	r0, r5
 800ebec:	47b8      	blx	r7
 800ebee:	3001      	adds	r0, #1
 800ebf0:	f43f aef7 	beq.w	800e9e2 <_printf_float+0xbe>
 800ebf4:	f109 0901 	add.w	r9, r9, #1
 800ebf8:	e7ee      	b.n	800ebd8 <_printf_float+0x2b4>
 800ebfa:	bf00      	nop
 800ebfc:	7fefffff 	.word	0x7fefffff
 800ec00:	08013178 	.word	0x08013178
 800ec04:	0801317c 	.word	0x0801317c
 800ec08:	08013180 	.word	0x08013180
 800ec0c:	08013184 	.word	0x08013184
 800ec10:	08013188 	.word	0x08013188
 800ec14:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ec16:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ec18:	429a      	cmp	r2, r3
 800ec1a:	bfa8      	it	ge
 800ec1c:	461a      	movge	r2, r3
 800ec1e:	2a00      	cmp	r2, #0
 800ec20:	4691      	mov	r9, r2
 800ec22:	dc37      	bgt.n	800ec94 <_printf_float+0x370>
 800ec24:	f04f 0b00 	mov.w	fp, #0
 800ec28:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ec2c:	f104 021a 	add.w	r2, r4, #26
 800ec30:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ec32:	9305      	str	r3, [sp, #20]
 800ec34:	eba3 0309 	sub.w	r3, r3, r9
 800ec38:	455b      	cmp	r3, fp
 800ec3a:	dc33      	bgt.n	800eca4 <_printf_float+0x380>
 800ec3c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ec40:	429a      	cmp	r2, r3
 800ec42:	db3b      	blt.n	800ecbc <_printf_float+0x398>
 800ec44:	6823      	ldr	r3, [r4, #0]
 800ec46:	07da      	lsls	r2, r3, #31
 800ec48:	d438      	bmi.n	800ecbc <_printf_float+0x398>
 800ec4a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800ec4e:	eba2 0903 	sub.w	r9, r2, r3
 800ec52:	9b05      	ldr	r3, [sp, #20]
 800ec54:	1ad2      	subs	r2, r2, r3
 800ec56:	4591      	cmp	r9, r2
 800ec58:	bfa8      	it	ge
 800ec5a:	4691      	movge	r9, r2
 800ec5c:	f1b9 0f00 	cmp.w	r9, #0
 800ec60:	dc35      	bgt.n	800ecce <_printf_float+0x3aa>
 800ec62:	f04f 0800 	mov.w	r8, #0
 800ec66:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ec6a:	f104 0a1a 	add.w	sl, r4, #26
 800ec6e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ec72:	1a9b      	subs	r3, r3, r2
 800ec74:	eba3 0309 	sub.w	r3, r3, r9
 800ec78:	4543      	cmp	r3, r8
 800ec7a:	f77f af79 	ble.w	800eb70 <_printf_float+0x24c>
 800ec7e:	2301      	movs	r3, #1
 800ec80:	4652      	mov	r2, sl
 800ec82:	4631      	mov	r1, r6
 800ec84:	4628      	mov	r0, r5
 800ec86:	47b8      	blx	r7
 800ec88:	3001      	adds	r0, #1
 800ec8a:	f43f aeaa 	beq.w	800e9e2 <_printf_float+0xbe>
 800ec8e:	f108 0801 	add.w	r8, r8, #1
 800ec92:	e7ec      	b.n	800ec6e <_printf_float+0x34a>
 800ec94:	4613      	mov	r3, r2
 800ec96:	4631      	mov	r1, r6
 800ec98:	4642      	mov	r2, r8
 800ec9a:	4628      	mov	r0, r5
 800ec9c:	47b8      	blx	r7
 800ec9e:	3001      	adds	r0, #1
 800eca0:	d1c0      	bne.n	800ec24 <_printf_float+0x300>
 800eca2:	e69e      	b.n	800e9e2 <_printf_float+0xbe>
 800eca4:	2301      	movs	r3, #1
 800eca6:	4631      	mov	r1, r6
 800eca8:	4628      	mov	r0, r5
 800ecaa:	9205      	str	r2, [sp, #20]
 800ecac:	47b8      	blx	r7
 800ecae:	3001      	adds	r0, #1
 800ecb0:	f43f ae97 	beq.w	800e9e2 <_printf_float+0xbe>
 800ecb4:	9a05      	ldr	r2, [sp, #20]
 800ecb6:	f10b 0b01 	add.w	fp, fp, #1
 800ecba:	e7b9      	b.n	800ec30 <_printf_float+0x30c>
 800ecbc:	ee18 3a10 	vmov	r3, s16
 800ecc0:	4652      	mov	r2, sl
 800ecc2:	4631      	mov	r1, r6
 800ecc4:	4628      	mov	r0, r5
 800ecc6:	47b8      	blx	r7
 800ecc8:	3001      	adds	r0, #1
 800ecca:	d1be      	bne.n	800ec4a <_printf_float+0x326>
 800eccc:	e689      	b.n	800e9e2 <_printf_float+0xbe>
 800ecce:	9a05      	ldr	r2, [sp, #20]
 800ecd0:	464b      	mov	r3, r9
 800ecd2:	4442      	add	r2, r8
 800ecd4:	4631      	mov	r1, r6
 800ecd6:	4628      	mov	r0, r5
 800ecd8:	47b8      	blx	r7
 800ecda:	3001      	adds	r0, #1
 800ecdc:	d1c1      	bne.n	800ec62 <_printf_float+0x33e>
 800ecde:	e680      	b.n	800e9e2 <_printf_float+0xbe>
 800ece0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ece2:	2a01      	cmp	r2, #1
 800ece4:	dc01      	bgt.n	800ecea <_printf_float+0x3c6>
 800ece6:	07db      	lsls	r3, r3, #31
 800ece8:	d53a      	bpl.n	800ed60 <_printf_float+0x43c>
 800ecea:	2301      	movs	r3, #1
 800ecec:	4642      	mov	r2, r8
 800ecee:	4631      	mov	r1, r6
 800ecf0:	4628      	mov	r0, r5
 800ecf2:	47b8      	blx	r7
 800ecf4:	3001      	adds	r0, #1
 800ecf6:	f43f ae74 	beq.w	800e9e2 <_printf_float+0xbe>
 800ecfa:	ee18 3a10 	vmov	r3, s16
 800ecfe:	4652      	mov	r2, sl
 800ed00:	4631      	mov	r1, r6
 800ed02:	4628      	mov	r0, r5
 800ed04:	47b8      	blx	r7
 800ed06:	3001      	adds	r0, #1
 800ed08:	f43f ae6b 	beq.w	800e9e2 <_printf_float+0xbe>
 800ed0c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ed10:	2200      	movs	r2, #0
 800ed12:	2300      	movs	r3, #0
 800ed14:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800ed18:	f7f1 fee6 	bl	8000ae8 <__aeabi_dcmpeq>
 800ed1c:	b9d8      	cbnz	r0, 800ed56 <_printf_float+0x432>
 800ed1e:	f10a 33ff 	add.w	r3, sl, #4294967295
 800ed22:	f108 0201 	add.w	r2, r8, #1
 800ed26:	4631      	mov	r1, r6
 800ed28:	4628      	mov	r0, r5
 800ed2a:	47b8      	blx	r7
 800ed2c:	3001      	adds	r0, #1
 800ed2e:	d10e      	bne.n	800ed4e <_printf_float+0x42a>
 800ed30:	e657      	b.n	800e9e2 <_printf_float+0xbe>
 800ed32:	2301      	movs	r3, #1
 800ed34:	4652      	mov	r2, sl
 800ed36:	4631      	mov	r1, r6
 800ed38:	4628      	mov	r0, r5
 800ed3a:	47b8      	blx	r7
 800ed3c:	3001      	adds	r0, #1
 800ed3e:	f43f ae50 	beq.w	800e9e2 <_printf_float+0xbe>
 800ed42:	f108 0801 	add.w	r8, r8, #1
 800ed46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ed48:	3b01      	subs	r3, #1
 800ed4a:	4543      	cmp	r3, r8
 800ed4c:	dcf1      	bgt.n	800ed32 <_printf_float+0x40e>
 800ed4e:	464b      	mov	r3, r9
 800ed50:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ed54:	e6da      	b.n	800eb0c <_printf_float+0x1e8>
 800ed56:	f04f 0800 	mov.w	r8, #0
 800ed5a:	f104 0a1a 	add.w	sl, r4, #26
 800ed5e:	e7f2      	b.n	800ed46 <_printf_float+0x422>
 800ed60:	2301      	movs	r3, #1
 800ed62:	4642      	mov	r2, r8
 800ed64:	e7df      	b.n	800ed26 <_printf_float+0x402>
 800ed66:	2301      	movs	r3, #1
 800ed68:	464a      	mov	r2, r9
 800ed6a:	4631      	mov	r1, r6
 800ed6c:	4628      	mov	r0, r5
 800ed6e:	47b8      	blx	r7
 800ed70:	3001      	adds	r0, #1
 800ed72:	f43f ae36 	beq.w	800e9e2 <_printf_float+0xbe>
 800ed76:	f108 0801 	add.w	r8, r8, #1
 800ed7a:	68e3      	ldr	r3, [r4, #12]
 800ed7c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ed7e:	1a5b      	subs	r3, r3, r1
 800ed80:	4543      	cmp	r3, r8
 800ed82:	dcf0      	bgt.n	800ed66 <_printf_float+0x442>
 800ed84:	e6f8      	b.n	800eb78 <_printf_float+0x254>
 800ed86:	f04f 0800 	mov.w	r8, #0
 800ed8a:	f104 0919 	add.w	r9, r4, #25
 800ed8e:	e7f4      	b.n	800ed7a <_printf_float+0x456>

0800ed90 <_printf_common>:
 800ed90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ed94:	4616      	mov	r6, r2
 800ed96:	4699      	mov	r9, r3
 800ed98:	688a      	ldr	r2, [r1, #8]
 800ed9a:	690b      	ldr	r3, [r1, #16]
 800ed9c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800eda0:	4293      	cmp	r3, r2
 800eda2:	bfb8      	it	lt
 800eda4:	4613      	movlt	r3, r2
 800eda6:	6033      	str	r3, [r6, #0]
 800eda8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800edac:	4607      	mov	r7, r0
 800edae:	460c      	mov	r4, r1
 800edb0:	b10a      	cbz	r2, 800edb6 <_printf_common+0x26>
 800edb2:	3301      	adds	r3, #1
 800edb4:	6033      	str	r3, [r6, #0]
 800edb6:	6823      	ldr	r3, [r4, #0]
 800edb8:	0699      	lsls	r1, r3, #26
 800edba:	bf42      	ittt	mi
 800edbc:	6833      	ldrmi	r3, [r6, #0]
 800edbe:	3302      	addmi	r3, #2
 800edc0:	6033      	strmi	r3, [r6, #0]
 800edc2:	6825      	ldr	r5, [r4, #0]
 800edc4:	f015 0506 	ands.w	r5, r5, #6
 800edc8:	d106      	bne.n	800edd8 <_printf_common+0x48>
 800edca:	f104 0a19 	add.w	sl, r4, #25
 800edce:	68e3      	ldr	r3, [r4, #12]
 800edd0:	6832      	ldr	r2, [r6, #0]
 800edd2:	1a9b      	subs	r3, r3, r2
 800edd4:	42ab      	cmp	r3, r5
 800edd6:	dc26      	bgt.n	800ee26 <_printf_common+0x96>
 800edd8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800eddc:	1e13      	subs	r3, r2, #0
 800edde:	6822      	ldr	r2, [r4, #0]
 800ede0:	bf18      	it	ne
 800ede2:	2301      	movne	r3, #1
 800ede4:	0692      	lsls	r2, r2, #26
 800ede6:	d42b      	bmi.n	800ee40 <_printf_common+0xb0>
 800ede8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800edec:	4649      	mov	r1, r9
 800edee:	4638      	mov	r0, r7
 800edf0:	47c0      	blx	r8
 800edf2:	3001      	adds	r0, #1
 800edf4:	d01e      	beq.n	800ee34 <_printf_common+0xa4>
 800edf6:	6823      	ldr	r3, [r4, #0]
 800edf8:	6922      	ldr	r2, [r4, #16]
 800edfa:	f003 0306 	and.w	r3, r3, #6
 800edfe:	2b04      	cmp	r3, #4
 800ee00:	bf02      	ittt	eq
 800ee02:	68e5      	ldreq	r5, [r4, #12]
 800ee04:	6833      	ldreq	r3, [r6, #0]
 800ee06:	1aed      	subeq	r5, r5, r3
 800ee08:	68a3      	ldr	r3, [r4, #8]
 800ee0a:	bf0c      	ite	eq
 800ee0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ee10:	2500      	movne	r5, #0
 800ee12:	4293      	cmp	r3, r2
 800ee14:	bfc4      	itt	gt
 800ee16:	1a9b      	subgt	r3, r3, r2
 800ee18:	18ed      	addgt	r5, r5, r3
 800ee1a:	2600      	movs	r6, #0
 800ee1c:	341a      	adds	r4, #26
 800ee1e:	42b5      	cmp	r5, r6
 800ee20:	d11a      	bne.n	800ee58 <_printf_common+0xc8>
 800ee22:	2000      	movs	r0, #0
 800ee24:	e008      	b.n	800ee38 <_printf_common+0xa8>
 800ee26:	2301      	movs	r3, #1
 800ee28:	4652      	mov	r2, sl
 800ee2a:	4649      	mov	r1, r9
 800ee2c:	4638      	mov	r0, r7
 800ee2e:	47c0      	blx	r8
 800ee30:	3001      	adds	r0, #1
 800ee32:	d103      	bne.n	800ee3c <_printf_common+0xac>
 800ee34:	f04f 30ff 	mov.w	r0, #4294967295
 800ee38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee3c:	3501      	adds	r5, #1
 800ee3e:	e7c6      	b.n	800edce <_printf_common+0x3e>
 800ee40:	18e1      	adds	r1, r4, r3
 800ee42:	1c5a      	adds	r2, r3, #1
 800ee44:	2030      	movs	r0, #48	; 0x30
 800ee46:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ee4a:	4422      	add	r2, r4
 800ee4c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ee50:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ee54:	3302      	adds	r3, #2
 800ee56:	e7c7      	b.n	800ede8 <_printf_common+0x58>
 800ee58:	2301      	movs	r3, #1
 800ee5a:	4622      	mov	r2, r4
 800ee5c:	4649      	mov	r1, r9
 800ee5e:	4638      	mov	r0, r7
 800ee60:	47c0      	blx	r8
 800ee62:	3001      	adds	r0, #1
 800ee64:	d0e6      	beq.n	800ee34 <_printf_common+0xa4>
 800ee66:	3601      	adds	r6, #1
 800ee68:	e7d9      	b.n	800ee1e <_printf_common+0x8e>
	...

0800ee6c <_printf_i>:
 800ee6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ee70:	7e0f      	ldrb	r7, [r1, #24]
 800ee72:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ee74:	2f78      	cmp	r7, #120	; 0x78
 800ee76:	4691      	mov	r9, r2
 800ee78:	4680      	mov	r8, r0
 800ee7a:	460c      	mov	r4, r1
 800ee7c:	469a      	mov	sl, r3
 800ee7e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ee82:	d807      	bhi.n	800ee94 <_printf_i+0x28>
 800ee84:	2f62      	cmp	r7, #98	; 0x62
 800ee86:	d80a      	bhi.n	800ee9e <_printf_i+0x32>
 800ee88:	2f00      	cmp	r7, #0
 800ee8a:	f000 80d4 	beq.w	800f036 <_printf_i+0x1ca>
 800ee8e:	2f58      	cmp	r7, #88	; 0x58
 800ee90:	f000 80c0 	beq.w	800f014 <_printf_i+0x1a8>
 800ee94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ee98:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ee9c:	e03a      	b.n	800ef14 <_printf_i+0xa8>
 800ee9e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800eea2:	2b15      	cmp	r3, #21
 800eea4:	d8f6      	bhi.n	800ee94 <_printf_i+0x28>
 800eea6:	a101      	add	r1, pc, #4	; (adr r1, 800eeac <_printf_i+0x40>)
 800eea8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800eeac:	0800ef05 	.word	0x0800ef05
 800eeb0:	0800ef19 	.word	0x0800ef19
 800eeb4:	0800ee95 	.word	0x0800ee95
 800eeb8:	0800ee95 	.word	0x0800ee95
 800eebc:	0800ee95 	.word	0x0800ee95
 800eec0:	0800ee95 	.word	0x0800ee95
 800eec4:	0800ef19 	.word	0x0800ef19
 800eec8:	0800ee95 	.word	0x0800ee95
 800eecc:	0800ee95 	.word	0x0800ee95
 800eed0:	0800ee95 	.word	0x0800ee95
 800eed4:	0800ee95 	.word	0x0800ee95
 800eed8:	0800f01d 	.word	0x0800f01d
 800eedc:	0800ef45 	.word	0x0800ef45
 800eee0:	0800efd7 	.word	0x0800efd7
 800eee4:	0800ee95 	.word	0x0800ee95
 800eee8:	0800ee95 	.word	0x0800ee95
 800eeec:	0800f03f 	.word	0x0800f03f
 800eef0:	0800ee95 	.word	0x0800ee95
 800eef4:	0800ef45 	.word	0x0800ef45
 800eef8:	0800ee95 	.word	0x0800ee95
 800eefc:	0800ee95 	.word	0x0800ee95
 800ef00:	0800efdf 	.word	0x0800efdf
 800ef04:	682b      	ldr	r3, [r5, #0]
 800ef06:	1d1a      	adds	r2, r3, #4
 800ef08:	681b      	ldr	r3, [r3, #0]
 800ef0a:	602a      	str	r2, [r5, #0]
 800ef0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ef10:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ef14:	2301      	movs	r3, #1
 800ef16:	e09f      	b.n	800f058 <_printf_i+0x1ec>
 800ef18:	6820      	ldr	r0, [r4, #0]
 800ef1a:	682b      	ldr	r3, [r5, #0]
 800ef1c:	0607      	lsls	r7, r0, #24
 800ef1e:	f103 0104 	add.w	r1, r3, #4
 800ef22:	6029      	str	r1, [r5, #0]
 800ef24:	d501      	bpl.n	800ef2a <_printf_i+0xbe>
 800ef26:	681e      	ldr	r6, [r3, #0]
 800ef28:	e003      	b.n	800ef32 <_printf_i+0xc6>
 800ef2a:	0646      	lsls	r6, r0, #25
 800ef2c:	d5fb      	bpl.n	800ef26 <_printf_i+0xba>
 800ef2e:	f9b3 6000 	ldrsh.w	r6, [r3]
 800ef32:	2e00      	cmp	r6, #0
 800ef34:	da03      	bge.n	800ef3e <_printf_i+0xd2>
 800ef36:	232d      	movs	r3, #45	; 0x2d
 800ef38:	4276      	negs	r6, r6
 800ef3a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ef3e:	485a      	ldr	r0, [pc, #360]	; (800f0a8 <_printf_i+0x23c>)
 800ef40:	230a      	movs	r3, #10
 800ef42:	e012      	b.n	800ef6a <_printf_i+0xfe>
 800ef44:	682b      	ldr	r3, [r5, #0]
 800ef46:	6820      	ldr	r0, [r4, #0]
 800ef48:	1d19      	adds	r1, r3, #4
 800ef4a:	6029      	str	r1, [r5, #0]
 800ef4c:	0605      	lsls	r5, r0, #24
 800ef4e:	d501      	bpl.n	800ef54 <_printf_i+0xe8>
 800ef50:	681e      	ldr	r6, [r3, #0]
 800ef52:	e002      	b.n	800ef5a <_printf_i+0xee>
 800ef54:	0641      	lsls	r1, r0, #25
 800ef56:	d5fb      	bpl.n	800ef50 <_printf_i+0xe4>
 800ef58:	881e      	ldrh	r6, [r3, #0]
 800ef5a:	4853      	ldr	r0, [pc, #332]	; (800f0a8 <_printf_i+0x23c>)
 800ef5c:	2f6f      	cmp	r7, #111	; 0x6f
 800ef5e:	bf0c      	ite	eq
 800ef60:	2308      	moveq	r3, #8
 800ef62:	230a      	movne	r3, #10
 800ef64:	2100      	movs	r1, #0
 800ef66:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ef6a:	6865      	ldr	r5, [r4, #4]
 800ef6c:	60a5      	str	r5, [r4, #8]
 800ef6e:	2d00      	cmp	r5, #0
 800ef70:	bfa2      	ittt	ge
 800ef72:	6821      	ldrge	r1, [r4, #0]
 800ef74:	f021 0104 	bicge.w	r1, r1, #4
 800ef78:	6021      	strge	r1, [r4, #0]
 800ef7a:	b90e      	cbnz	r6, 800ef80 <_printf_i+0x114>
 800ef7c:	2d00      	cmp	r5, #0
 800ef7e:	d04b      	beq.n	800f018 <_printf_i+0x1ac>
 800ef80:	4615      	mov	r5, r2
 800ef82:	fbb6 f1f3 	udiv	r1, r6, r3
 800ef86:	fb03 6711 	mls	r7, r3, r1, r6
 800ef8a:	5dc7      	ldrb	r7, [r0, r7]
 800ef8c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ef90:	4637      	mov	r7, r6
 800ef92:	42bb      	cmp	r3, r7
 800ef94:	460e      	mov	r6, r1
 800ef96:	d9f4      	bls.n	800ef82 <_printf_i+0x116>
 800ef98:	2b08      	cmp	r3, #8
 800ef9a:	d10b      	bne.n	800efb4 <_printf_i+0x148>
 800ef9c:	6823      	ldr	r3, [r4, #0]
 800ef9e:	07de      	lsls	r6, r3, #31
 800efa0:	d508      	bpl.n	800efb4 <_printf_i+0x148>
 800efa2:	6923      	ldr	r3, [r4, #16]
 800efa4:	6861      	ldr	r1, [r4, #4]
 800efa6:	4299      	cmp	r1, r3
 800efa8:	bfde      	ittt	le
 800efaa:	2330      	movle	r3, #48	; 0x30
 800efac:	f805 3c01 	strble.w	r3, [r5, #-1]
 800efb0:	f105 35ff 	addle.w	r5, r5, #4294967295
 800efb4:	1b52      	subs	r2, r2, r5
 800efb6:	6122      	str	r2, [r4, #16]
 800efb8:	f8cd a000 	str.w	sl, [sp]
 800efbc:	464b      	mov	r3, r9
 800efbe:	aa03      	add	r2, sp, #12
 800efc0:	4621      	mov	r1, r4
 800efc2:	4640      	mov	r0, r8
 800efc4:	f7ff fee4 	bl	800ed90 <_printf_common>
 800efc8:	3001      	adds	r0, #1
 800efca:	d14a      	bne.n	800f062 <_printf_i+0x1f6>
 800efcc:	f04f 30ff 	mov.w	r0, #4294967295
 800efd0:	b004      	add	sp, #16
 800efd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800efd6:	6823      	ldr	r3, [r4, #0]
 800efd8:	f043 0320 	orr.w	r3, r3, #32
 800efdc:	6023      	str	r3, [r4, #0]
 800efde:	4833      	ldr	r0, [pc, #204]	; (800f0ac <_printf_i+0x240>)
 800efe0:	2778      	movs	r7, #120	; 0x78
 800efe2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800efe6:	6823      	ldr	r3, [r4, #0]
 800efe8:	6829      	ldr	r1, [r5, #0]
 800efea:	061f      	lsls	r7, r3, #24
 800efec:	f851 6b04 	ldr.w	r6, [r1], #4
 800eff0:	d402      	bmi.n	800eff8 <_printf_i+0x18c>
 800eff2:	065f      	lsls	r7, r3, #25
 800eff4:	bf48      	it	mi
 800eff6:	b2b6      	uxthmi	r6, r6
 800eff8:	07df      	lsls	r7, r3, #31
 800effa:	bf48      	it	mi
 800effc:	f043 0320 	orrmi.w	r3, r3, #32
 800f000:	6029      	str	r1, [r5, #0]
 800f002:	bf48      	it	mi
 800f004:	6023      	strmi	r3, [r4, #0]
 800f006:	b91e      	cbnz	r6, 800f010 <_printf_i+0x1a4>
 800f008:	6823      	ldr	r3, [r4, #0]
 800f00a:	f023 0320 	bic.w	r3, r3, #32
 800f00e:	6023      	str	r3, [r4, #0]
 800f010:	2310      	movs	r3, #16
 800f012:	e7a7      	b.n	800ef64 <_printf_i+0xf8>
 800f014:	4824      	ldr	r0, [pc, #144]	; (800f0a8 <_printf_i+0x23c>)
 800f016:	e7e4      	b.n	800efe2 <_printf_i+0x176>
 800f018:	4615      	mov	r5, r2
 800f01a:	e7bd      	b.n	800ef98 <_printf_i+0x12c>
 800f01c:	682b      	ldr	r3, [r5, #0]
 800f01e:	6826      	ldr	r6, [r4, #0]
 800f020:	6961      	ldr	r1, [r4, #20]
 800f022:	1d18      	adds	r0, r3, #4
 800f024:	6028      	str	r0, [r5, #0]
 800f026:	0635      	lsls	r5, r6, #24
 800f028:	681b      	ldr	r3, [r3, #0]
 800f02a:	d501      	bpl.n	800f030 <_printf_i+0x1c4>
 800f02c:	6019      	str	r1, [r3, #0]
 800f02e:	e002      	b.n	800f036 <_printf_i+0x1ca>
 800f030:	0670      	lsls	r0, r6, #25
 800f032:	d5fb      	bpl.n	800f02c <_printf_i+0x1c0>
 800f034:	8019      	strh	r1, [r3, #0]
 800f036:	2300      	movs	r3, #0
 800f038:	6123      	str	r3, [r4, #16]
 800f03a:	4615      	mov	r5, r2
 800f03c:	e7bc      	b.n	800efb8 <_printf_i+0x14c>
 800f03e:	682b      	ldr	r3, [r5, #0]
 800f040:	1d1a      	adds	r2, r3, #4
 800f042:	602a      	str	r2, [r5, #0]
 800f044:	681d      	ldr	r5, [r3, #0]
 800f046:	6862      	ldr	r2, [r4, #4]
 800f048:	2100      	movs	r1, #0
 800f04a:	4628      	mov	r0, r5
 800f04c:	f7f1 f8d0 	bl	80001f0 <memchr>
 800f050:	b108      	cbz	r0, 800f056 <_printf_i+0x1ea>
 800f052:	1b40      	subs	r0, r0, r5
 800f054:	6060      	str	r0, [r4, #4]
 800f056:	6863      	ldr	r3, [r4, #4]
 800f058:	6123      	str	r3, [r4, #16]
 800f05a:	2300      	movs	r3, #0
 800f05c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f060:	e7aa      	b.n	800efb8 <_printf_i+0x14c>
 800f062:	6923      	ldr	r3, [r4, #16]
 800f064:	462a      	mov	r2, r5
 800f066:	4649      	mov	r1, r9
 800f068:	4640      	mov	r0, r8
 800f06a:	47d0      	blx	sl
 800f06c:	3001      	adds	r0, #1
 800f06e:	d0ad      	beq.n	800efcc <_printf_i+0x160>
 800f070:	6823      	ldr	r3, [r4, #0]
 800f072:	079b      	lsls	r3, r3, #30
 800f074:	d413      	bmi.n	800f09e <_printf_i+0x232>
 800f076:	68e0      	ldr	r0, [r4, #12]
 800f078:	9b03      	ldr	r3, [sp, #12]
 800f07a:	4298      	cmp	r0, r3
 800f07c:	bfb8      	it	lt
 800f07e:	4618      	movlt	r0, r3
 800f080:	e7a6      	b.n	800efd0 <_printf_i+0x164>
 800f082:	2301      	movs	r3, #1
 800f084:	4632      	mov	r2, r6
 800f086:	4649      	mov	r1, r9
 800f088:	4640      	mov	r0, r8
 800f08a:	47d0      	blx	sl
 800f08c:	3001      	adds	r0, #1
 800f08e:	d09d      	beq.n	800efcc <_printf_i+0x160>
 800f090:	3501      	adds	r5, #1
 800f092:	68e3      	ldr	r3, [r4, #12]
 800f094:	9903      	ldr	r1, [sp, #12]
 800f096:	1a5b      	subs	r3, r3, r1
 800f098:	42ab      	cmp	r3, r5
 800f09a:	dcf2      	bgt.n	800f082 <_printf_i+0x216>
 800f09c:	e7eb      	b.n	800f076 <_printf_i+0x20a>
 800f09e:	2500      	movs	r5, #0
 800f0a0:	f104 0619 	add.w	r6, r4, #25
 800f0a4:	e7f5      	b.n	800f092 <_printf_i+0x226>
 800f0a6:	bf00      	nop
 800f0a8:	0801318a 	.word	0x0801318a
 800f0ac:	0801319b 	.word	0x0801319b

0800f0b0 <std>:
 800f0b0:	2300      	movs	r3, #0
 800f0b2:	b510      	push	{r4, lr}
 800f0b4:	4604      	mov	r4, r0
 800f0b6:	e9c0 3300 	strd	r3, r3, [r0]
 800f0ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f0be:	6083      	str	r3, [r0, #8]
 800f0c0:	8181      	strh	r1, [r0, #12]
 800f0c2:	6643      	str	r3, [r0, #100]	; 0x64
 800f0c4:	81c2      	strh	r2, [r0, #14]
 800f0c6:	6183      	str	r3, [r0, #24]
 800f0c8:	4619      	mov	r1, r3
 800f0ca:	2208      	movs	r2, #8
 800f0cc:	305c      	adds	r0, #92	; 0x5c
 800f0ce:	f000 f914 	bl	800f2fa <memset>
 800f0d2:	4b0d      	ldr	r3, [pc, #52]	; (800f108 <std+0x58>)
 800f0d4:	6263      	str	r3, [r4, #36]	; 0x24
 800f0d6:	4b0d      	ldr	r3, [pc, #52]	; (800f10c <std+0x5c>)
 800f0d8:	62a3      	str	r3, [r4, #40]	; 0x28
 800f0da:	4b0d      	ldr	r3, [pc, #52]	; (800f110 <std+0x60>)
 800f0dc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f0de:	4b0d      	ldr	r3, [pc, #52]	; (800f114 <std+0x64>)
 800f0e0:	6323      	str	r3, [r4, #48]	; 0x30
 800f0e2:	4b0d      	ldr	r3, [pc, #52]	; (800f118 <std+0x68>)
 800f0e4:	6224      	str	r4, [r4, #32]
 800f0e6:	429c      	cmp	r4, r3
 800f0e8:	d006      	beq.n	800f0f8 <std+0x48>
 800f0ea:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800f0ee:	4294      	cmp	r4, r2
 800f0f0:	d002      	beq.n	800f0f8 <std+0x48>
 800f0f2:	33d0      	adds	r3, #208	; 0xd0
 800f0f4:	429c      	cmp	r4, r3
 800f0f6:	d105      	bne.n	800f104 <std+0x54>
 800f0f8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f0fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f100:	f000 b9ce 	b.w	800f4a0 <__retarget_lock_init_recursive>
 800f104:	bd10      	pop	{r4, pc}
 800f106:	bf00      	nop
 800f108:	0800f275 	.word	0x0800f275
 800f10c:	0800f297 	.word	0x0800f297
 800f110:	0800f2cf 	.word	0x0800f2cf
 800f114:	0800f2f3 	.word	0x0800f2f3
 800f118:	20006228 	.word	0x20006228

0800f11c <stdio_exit_handler>:
 800f11c:	4a02      	ldr	r2, [pc, #8]	; (800f128 <stdio_exit_handler+0xc>)
 800f11e:	4903      	ldr	r1, [pc, #12]	; (800f12c <stdio_exit_handler+0x10>)
 800f120:	4803      	ldr	r0, [pc, #12]	; (800f130 <stdio_exit_handler+0x14>)
 800f122:	f000 b869 	b.w	800f1f8 <_fwalk_sglue>
 800f126:	bf00      	nop
 800f128:	20000188 	.word	0x20000188
 800f12c:	08010e71 	.word	0x08010e71
 800f130:	20000194 	.word	0x20000194

0800f134 <cleanup_stdio>:
 800f134:	6841      	ldr	r1, [r0, #4]
 800f136:	4b0c      	ldr	r3, [pc, #48]	; (800f168 <cleanup_stdio+0x34>)
 800f138:	4299      	cmp	r1, r3
 800f13a:	b510      	push	{r4, lr}
 800f13c:	4604      	mov	r4, r0
 800f13e:	d001      	beq.n	800f144 <cleanup_stdio+0x10>
 800f140:	f001 fe96 	bl	8010e70 <_fflush_r>
 800f144:	68a1      	ldr	r1, [r4, #8]
 800f146:	4b09      	ldr	r3, [pc, #36]	; (800f16c <cleanup_stdio+0x38>)
 800f148:	4299      	cmp	r1, r3
 800f14a:	d002      	beq.n	800f152 <cleanup_stdio+0x1e>
 800f14c:	4620      	mov	r0, r4
 800f14e:	f001 fe8f 	bl	8010e70 <_fflush_r>
 800f152:	68e1      	ldr	r1, [r4, #12]
 800f154:	4b06      	ldr	r3, [pc, #24]	; (800f170 <cleanup_stdio+0x3c>)
 800f156:	4299      	cmp	r1, r3
 800f158:	d004      	beq.n	800f164 <cleanup_stdio+0x30>
 800f15a:	4620      	mov	r0, r4
 800f15c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f160:	f001 be86 	b.w	8010e70 <_fflush_r>
 800f164:	bd10      	pop	{r4, pc}
 800f166:	bf00      	nop
 800f168:	20006228 	.word	0x20006228
 800f16c:	20006290 	.word	0x20006290
 800f170:	200062f8 	.word	0x200062f8

0800f174 <global_stdio_init.part.0>:
 800f174:	b510      	push	{r4, lr}
 800f176:	4b0b      	ldr	r3, [pc, #44]	; (800f1a4 <global_stdio_init.part.0+0x30>)
 800f178:	4c0b      	ldr	r4, [pc, #44]	; (800f1a8 <global_stdio_init.part.0+0x34>)
 800f17a:	4a0c      	ldr	r2, [pc, #48]	; (800f1ac <global_stdio_init.part.0+0x38>)
 800f17c:	601a      	str	r2, [r3, #0]
 800f17e:	4620      	mov	r0, r4
 800f180:	2200      	movs	r2, #0
 800f182:	2104      	movs	r1, #4
 800f184:	f7ff ff94 	bl	800f0b0 <std>
 800f188:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800f18c:	2201      	movs	r2, #1
 800f18e:	2109      	movs	r1, #9
 800f190:	f7ff ff8e 	bl	800f0b0 <std>
 800f194:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800f198:	2202      	movs	r2, #2
 800f19a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f19e:	2112      	movs	r1, #18
 800f1a0:	f7ff bf86 	b.w	800f0b0 <std>
 800f1a4:	20006360 	.word	0x20006360
 800f1a8:	20006228 	.word	0x20006228
 800f1ac:	0800f11d 	.word	0x0800f11d

0800f1b0 <__sfp_lock_acquire>:
 800f1b0:	4801      	ldr	r0, [pc, #4]	; (800f1b8 <__sfp_lock_acquire+0x8>)
 800f1b2:	f000 b976 	b.w	800f4a2 <__retarget_lock_acquire_recursive>
 800f1b6:	bf00      	nop
 800f1b8:	20006369 	.word	0x20006369

0800f1bc <__sfp_lock_release>:
 800f1bc:	4801      	ldr	r0, [pc, #4]	; (800f1c4 <__sfp_lock_release+0x8>)
 800f1be:	f000 b971 	b.w	800f4a4 <__retarget_lock_release_recursive>
 800f1c2:	bf00      	nop
 800f1c4:	20006369 	.word	0x20006369

0800f1c8 <__sinit>:
 800f1c8:	b510      	push	{r4, lr}
 800f1ca:	4604      	mov	r4, r0
 800f1cc:	f7ff fff0 	bl	800f1b0 <__sfp_lock_acquire>
 800f1d0:	6a23      	ldr	r3, [r4, #32]
 800f1d2:	b11b      	cbz	r3, 800f1dc <__sinit+0x14>
 800f1d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f1d8:	f7ff bff0 	b.w	800f1bc <__sfp_lock_release>
 800f1dc:	4b04      	ldr	r3, [pc, #16]	; (800f1f0 <__sinit+0x28>)
 800f1de:	6223      	str	r3, [r4, #32]
 800f1e0:	4b04      	ldr	r3, [pc, #16]	; (800f1f4 <__sinit+0x2c>)
 800f1e2:	681b      	ldr	r3, [r3, #0]
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	d1f5      	bne.n	800f1d4 <__sinit+0xc>
 800f1e8:	f7ff ffc4 	bl	800f174 <global_stdio_init.part.0>
 800f1ec:	e7f2      	b.n	800f1d4 <__sinit+0xc>
 800f1ee:	bf00      	nop
 800f1f0:	0800f135 	.word	0x0800f135
 800f1f4:	20006360 	.word	0x20006360

0800f1f8 <_fwalk_sglue>:
 800f1f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f1fc:	4607      	mov	r7, r0
 800f1fe:	4688      	mov	r8, r1
 800f200:	4614      	mov	r4, r2
 800f202:	2600      	movs	r6, #0
 800f204:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f208:	f1b9 0901 	subs.w	r9, r9, #1
 800f20c:	d505      	bpl.n	800f21a <_fwalk_sglue+0x22>
 800f20e:	6824      	ldr	r4, [r4, #0]
 800f210:	2c00      	cmp	r4, #0
 800f212:	d1f7      	bne.n	800f204 <_fwalk_sglue+0xc>
 800f214:	4630      	mov	r0, r6
 800f216:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f21a:	89ab      	ldrh	r3, [r5, #12]
 800f21c:	2b01      	cmp	r3, #1
 800f21e:	d907      	bls.n	800f230 <_fwalk_sglue+0x38>
 800f220:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f224:	3301      	adds	r3, #1
 800f226:	d003      	beq.n	800f230 <_fwalk_sglue+0x38>
 800f228:	4629      	mov	r1, r5
 800f22a:	4638      	mov	r0, r7
 800f22c:	47c0      	blx	r8
 800f22e:	4306      	orrs	r6, r0
 800f230:	3568      	adds	r5, #104	; 0x68
 800f232:	e7e9      	b.n	800f208 <_fwalk_sglue+0x10>

0800f234 <siprintf>:
 800f234:	b40e      	push	{r1, r2, r3}
 800f236:	b500      	push	{lr}
 800f238:	b09c      	sub	sp, #112	; 0x70
 800f23a:	ab1d      	add	r3, sp, #116	; 0x74
 800f23c:	9002      	str	r0, [sp, #8]
 800f23e:	9006      	str	r0, [sp, #24]
 800f240:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f244:	4809      	ldr	r0, [pc, #36]	; (800f26c <siprintf+0x38>)
 800f246:	9107      	str	r1, [sp, #28]
 800f248:	9104      	str	r1, [sp, #16]
 800f24a:	4909      	ldr	r1, [pc, #36]	; (800f270 <siprintf+0x3c>)
 800f24c:	f853 2b04 	ldr.w	r2, [r3], #4
 800f250:	9105      	str	r1, [sp, #20]
 800f252:	6800      	ldr	r0, [r0, #0]
 800f254:	9301      	str	r3, [sp, #4]
 800f256:	a902      	add	r1, sp, #8
 800f258:	f001 fc86 	bl	8010b68 <_svfiprintf_r>
 800f25c:	9b02      	ldr	r3, [sp, #8]
 800f25e:	2200      	movs	r2, #0
 800f260:	701a      	strb	r2, [r3, #0]
 800f262:	b01c      	add	sp, #112	; 0x70
 800f264:	f85d eb04 	ldr.w	lr, [sp], #4
 800f268:	b003      	add	sp, #12
 800f26a:	4770      	bx	lr
 800f26c:	200001e0 	.word	0x200001e0
 800f270:	ffff0208 	.word	0xffff0208

0800f274 <__sread>:
 800f274:	b510      	push	{r4, lr}
 800f276:	460c      	mov	r4, r1
 800f278:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f27c:	f000 f8c2 	bl	800f404 <_read_r>
 800f280:	2800      	cmp	r0, #0
 800f282:	bfab      	itete	ge
 800f284:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f286:	89a3      	ldrhlt	r3, [r4, #12]
 800f288:	181b      	addge	r3, r3, r0
 800f28a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f28e:	bfac      	ite	ge
 800f290:	6563      	strge	r3, [r4, #84]	; 0x54
 800f292:	81a3      	strhlt	r3, [r4, #12]
 800f294:	bd10      	pop	{r4, pc}

0800f296 <__swrite>:
 800f296:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f29a:	461f      	mov	r7, r3
 800f29c:	898b      	ldrh	r3, [r1, #12]
 800f29e:	05db      	lsls	r3, r3, #23
 800f2a0:	4605      	mov	r5, r0
 800f2a2:	460c      	mov	r4, r1
 800f2a4:	4616      	mov	r6, r2
 800f2a6:	d505      	bpl.n	800f2b4 <__swrite+0x1e>
 800f2a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f2ac:	2302      	movs	r3, #2
 800f2ae:	2200      	movs	r2, #0
 800f2b0:	f000 f896 	bl	800f3e0 <_lseek_r>
 800f2b4:	89a3      	ldrh	r3, [r4, #12]
 800f2b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f2ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f2be:	81a3      	strh	r3, [r4, #12]
 800f2c0:	4632      	mov	r2, r6
 800f2c2:	463b      	mov	r3, r7
 800f2c4:	4628      	mov	r0, r5
 800f2c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f2ca:	f000 b8ad 	b.w	800f428 <_write_r>

0800f2ce <__sseek>:
 800f2ce:	b510      	push	{r4, lr}
 800f2d0:	460c      	mov	r4, r1
 800f2d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f2d6:	f000 f883 	bl	800f3e0 <_lseek_r>
 800f2da:	1c43      	adds	r3, r0, #1
 800f2dc:	89a3      	ldrh	r3, [r4, #12]
 800f2de:	bf15      	itete	ne
 800f2e0:	6560      	strne	r0, [r4, #84]	; 0x54
 800f2e2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f2e6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f2ea:	81a3      	strheq	r3, [r4, #12]
 800f2ec:	bf18      	it	ne
 800f2ee:	81a3      	strhne	r3, [r4, #12]
 800f2f0:	bd10      	pop	{r4, pc}

0800f2f2 <__sclose>:
 800f2f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f2f6:	f000 b80d 	b.w	800f314 <_close_r>

0800f2fa <memset>:
 800f2fa:	4402      	add	r2, r0
 800f2fc:	4603      	mov	r3, r0
 800f2fe:	4293      	cmp	r3, r2
 800f300:	d100      	bne.n	800f304 <memset+0xa>
 800f302:	4770      	bx	lr
 800f304:	f803 1b01 	strb.w	r1, [r3], #1
 800f308:	e7f9      	b.n	800f2fe <memset+0x4>
	...

0800f30c <_localeconv_r>:
 800f30c:	4800      	ldr	r0, [pc, #0]	; (800f310 <_localeconv_r+0x4>)
 800f30e:	4770      	bx	lr
 800f310:	200002d4 	.word	0x200002d4

0800f314 <_close_r>:
 800f314:	b538      	push	{r3, r4, r5, lr}
 800f316:	4d06      	ldr	r5, [pc, #24]	; (800f330 <_close_r+0x1c>)
 800f318:	2300      	movs	r3, #0
 800f31a:	4604      	mov	r4, r0
 800f31c:	4608      	mov	r0, r1
 800f31e:	602b      	str	r3, [r5, #0]
 800f320:	f7f2 f9b5 	bl	800168e <_close>
 800f324:	1c43      	adds	r3, r0, #1
 800f326:	d102      	bne.n	800f32e <_close_r+0x1a>
 800f328:	682b      	ldr	r3, [r5, #0]
 800f32a:	b103      	cbz	r3, 800f32e <_close_r+0x1a>
 800f32c:	6023      	str	r3, [r4, #0]
 800f32e:	bd38      	pop	{r3, r4, r5, pc}
 800f330:	20006364 	.word	0x20006364

0800f334 <_reclaim_reent>:
 800f334:	4b29      	ldr	r3, [pc, #164]	; (800f3dc <_reclaim_reent+0xa8>)
 800f336:	681b      	ldr	r3, [r3, #0]
 800f338:	4283      	cmp	r3, r0
 800f33a:	b570      	push	{r4, r5, r6, lr}
 800f33c:	4604      	mov	r4, r0
 800f33e:	d04b      	beq.n	800f3d8 <_reclaim_reent+0xa4>
 800f340:	69c3      	ldr	r3, [r0, #28]
 800f342:	b143      	cbz	r3, 800f356 <_reclaim_reent+0x22>
 800f344:	68db      	ldr	r3, [r3, #12]
 800f346:	2b00      	cmp	r3, #0
 800f348:	d144      	bne.n	800f3d4 <_reclaim_reent+0xa0>
 800f34a:	69e3      	ldr	r3, [r4, #28]
 800f34c:	6819      	ldr	r1, [r3, #0]
 800f34e:	b111      	cbz	r1, 800f356 <_reclaim_reent+0x22>
 800f350:	4620      	mov	r0, r4
 800f352:	f000 ff33 	bl	80101bc <_free_r>
 800f356:	6961      	ldr	r1, [r4, #20]
 800f358:	b111      	cbz	r1, 800f360 <_reclaim_reent+0x2c>
 800f35a:	4620      	mov	r0, r4
 800f35c:	f000 ff2e 	bl	80101bc <_free_r>
 800f360:	69e1      	ldr	r1, [r4, #28]
 800f362:	b111      	cbz	r1, 800f36a <_reclaim_reent+0x36>
 800f364:	4620      	mov	r0, r4
 800f366:	f000 ff29 	bl	80101bc <_free_r>
 800f36a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800f36c:	b111      	cbz	r1, 800f374 <_reclaim_reent+0x40>
 800f36e:	4620      	mov	r0, r4
 800f370:	f000 ff24 	bl	80101bc <_free_r>
 800f374:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f376:	b111      	cbz	r1, 800f37e <_reclaim_reent+0x4a>
 800f378:	4620      	mov	r0, r4
 800f37a:	f000 ff1f 	bl	80101bc <_free_r>
 800f37e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800f380:	b111      	cbz	r1, 800f388 <_reclaim_reent+0x54>
 800f382:	4620      	mov	r0, r4
 800f384:	f000 ff1a 	bl	80101bc <_free_r>
 800f388:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800f38a:	b111      	cbz	r1, 800f392 <_reclaim_reent+0x5e>
 800f38c:	4620      	mov	r0, r4
 800f38e:	f000 ff15 	bl	80101bc <_free_r>
 800f392:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800f394:	b111      	cbz	r1, 800f39c <_reclaim_reent+0x68>
 800f396:	4620      	mov	r0, r4
 800f398:	f000 ff10 	bl	80101bc <_free_r>
 800f39c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800f39e:	b111      	cbz	r1, 800f3a6 <_reclaim_reent+0x72>
 800f3a0:	4620      	mov	r0, r4
 800f3a2:	f000 ff0b 	bl	80101bc <_free_r>
 800f3a6:	6a23      	ldr	r3, [r4, #32]
 800f3a8:	b1b3      	cbz	r3, 800f3d8 <_reclaim_reent+0xa4>
 800f3aa:	4620      	mov	r0, r4
 800f3ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f3b0:	4718      	bx	r3
 800f3b2:	5949      	ldr	r1, [r1, r5]
 800f3b4:	b941      	cbnz	r1, 800f3c8 <_reclaim_reent+0x94>
 800f3b6:	3504      	adds	r5, #4
 800f3b8:	69e3      	ldr	r3, [r4, #28]
 800f3ba:	2d80      	cmp	r5, #128	; 0x80
 800f3bc:	68d9      	ldr	r1, [r3, #12]
 800f3be:	d1f8      	bne.n	800f3b2 <_reclaim_reent+0x7e>
 800f3c0:	4620      	mov	r0, r4
 800f3c2:	f000 fefb 	bl	80101bc <_free_r>
 800f3c6:	e7c0      	b.n	800f34a <_reclaim_reent+0x16>
 800f3c8:	680e      	ldr	r6, [r1, #0]
 800f3ca:	4620      	mov	r0, r4
 800f3cc:	f000 fef6 	bl	80101bc <_free_r>
 800f3d0:	4631      	mov	r1, r6
 800f3d2:	e7ef      	b.n	800f3b4 <_reclaim_reent+0x80>
 800f3d4:	2500      	movs	r5, #0
 800f3d6:	e7ef      	b.n	800f3b8 <_reclaim_reent+0x84>
 800f3d8:	bd70      	pop	{r4, r5, r6, pc}
 800f3da:	bf00      	nop
 800f3dc:	200001e0 	.word	0x200001e0

0800f3e0 <_lseek_r>:
 800f3e0:	b538      	push	{r3, r4, r5, lr}
 800f3e2:	4d07      	ldr	r5, [pc, #28]	; (800f400 <_lseek_r+0x20>)
 800f3e4:	4604      	mov	r4, r0
 800f3e6:	4608      	mov	r0, r1
 800f3e8:	4611      	mov	r1, r2
 800f3ea:	2200      	movs	r2, #0
 800f3ec:	602a      	str	r2, [r5, #0]
 800f3ee:	461a      	mov	r2, r3
 800f3f0:	f7f2 f974 	bl	80016dc <_lseek>
 800f3f4:	1c43      	adds	r3, r0, #1
 800f3f6:	d102      	bne.n	800f3fe <_lseek_r+0x1e>
 800f3f8:	682b      	ldr	r3, [r5, #0]
 800f3fa:	b103      	cbz	r3, 800f3fe <_lseek_r+0x1e>
 800f3fc:	6023      	str	r3, [r4, #0]
 800f3fe:	bd38      	pop	{r3, r4, r5, pc}
 800f400:	20006364 	.word	0x20006364

0800f404 <_read_r>:
 800f404:	b538      	push	{r3, r4, r5, lr}
 800f406:	4d07      	ldr	r5, [pc, #28]	; (800f424 <_read_r+0x20>)
 800f408:	4604      	mov	r4, r0
 800f40a:	4608      	mov	r0, r1
 800f40c:	4611      	mov	r1, r2
 800f40e:	2200      	movs	r2, #0
 800f410:	602a      	str	r2, [r5, #0]
 800f412:	461a      	mov	r2, r3
 800f414:	f7f2 f902 	bl	800161c <_read>
 800f418:	1c43      	adds	r3, r0, #1
 800f41a:	d102      	bne.n	800f422 <_read_r+0x1e>
 800f41c:	682b      	ldr	r3, [r5, #0]
 800f41e:	b103      	cbz	r3, 800f422 <_read_r+0x1e>
 800f420:	6023      	str	r3, [r4, #0]
 800f422:	bd38      	pop	{r3, r4, r5, pc}
 800f424:	20006364 	.word	0x20006364

0800f428 <_write_r>:
 800f428:	b538      	push	{r3, r4, r5, lr}
 800f42a:	4d07      	ldr	r5, [pc, #28]	; (800f448 <_write_r+0x20>)
 800f42c:	4604      	mov	r4, r0
 800f42e:	4608      	mov	r0, r1
 800f430:	4611      	mov	r1, r2
 800f432:	2200      	movs	r2, #0
 800f434:	602a      	str	r2, [r5, #0]
 800f436:	461a      	mov	r2, r3
 800f438:	f7f2 f90d 	bl	8001656 <_write>
 800f43c:	1c43      	adds	r3, r0, #1
 800f43e:	d102      	bne.n	800f446 <_write_r+0x1e>
 800f440:	682b      	ldr	r3, [r5, #0]
 800f442:	b103      	cbz	r3, 800f446 <_write_r+0x1e>
 800f444:	6023      	str	r3, [r4, #0]
 800f446:	bd38      	pop	{r3, r4, r5, pc}
 800f448:	20006364 	.word	0x20006364

0800f44c <__errno>:
 800f44c:	4b01      	ldr	r3, [pc, #4]	; (800f454 <__errno+0x8>)
 800f44e:	6818      	ldr	r0, [r3, #0]
 800f450:	4770      	bx	lr
 800f452:	bf00      	nop
 800f454:	200001e0 	.word	0x200001e0

0800f458 <__libc_init_array>:
 800f458:	b570      	push	{r4, r5, r6, lr}
 800f45a:	4d0d      	ldr	r5, [pc, #52]	; (800f490 <__libc_init_array+0x38>)
 800f45c:	4c0d      	ldr	r4, [pc, #52]	; (800f494 <__libc_init_array+0x3c>)
 800f45e:	1b64      	subs	r4, r4, r5
 800f460:	10a4      	asrs	r4, r4, #2
 800f462:	2600      	movs	r6, #0
 800f464:	42a6      	cmp	r6, r4
 800f466:	d109      	bne.n	800f47c <__libc_init_array+0x24>
 800f468:	4d0b      	ldr	r5, [pc, #44]	; (800f498 <__libc_init_array+0x40>)
 800f46a:	4c0c      	ldr	r4, [pc, #48]	; (800f49c <__libc_init_array+0x44>)
 800f46c:	f002 f896 	bl	801159c <_init>
 800f470:	1b64      	subs	r4, r4, r5
 800f472:	10a4      	asrs	r4, r4, #2
 800f474:	2600      	movs	r6, #0
 800f476:	42a6      	cmp	r6, r4
 800f478:	d105      	bne.n	800f486 <__libc_init_array+0x2e>
 800f47a:	bd70      	pop	{r4, r5, r6, pc}
 800f47c:	f855 3b04 	ldr.w	r3, [r5], #4
 800f480:	4798      	blx	r3
 800f482:	3601      	adds	r6, #1
 800f484:	e7ee      	b.n	800f464 <__libc_init_array+0xc>
 800f486:	f855 3b04 	ldr.w	r3, [r5], #4
 800f48a:	4798      	blx	r3
 800f48c:	3601      	adds	r6, #1
 800f48e:	e7f2      	b.n	800f476 <__libc_init_array+0x1e>
 800f490:	080134f4 	.word	0x080134f4
 800f494:	080134f4 	.word	0x080134f4
 800f498:	080134f4 	.word	0x080134f4
 800f49c:	080134f8 	.word	0x080134f8

0800f4a0 <__retarget_lock_init_recursive>:
 800f4a0:	4770      	bx	lr

0800f4a2 <__retarget_lock_acquire_recursive>:
 800f4a2:	4770      	bx	lr

0800f4a4 <__retarget_lock_release_recursive>:
 800f4a4:	4770      	bx	lr

0800f4a6 <memcpy>:
 800f4a6:	440a      	add	r2, r1
 800f4a8:	4291      	cmp	r1, r2
 800f4aa:	f100 33ff 	add.w	r3, r0, #4294967295
 800f4ae:	d100      	bne.n	800f4b2 <memcpy+0xc>
 800f4b0:	4770      	bx	lr
 800f4b2:	b510      	push	{r4, lr}
 800f4b4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f4b8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f4bc:	4291      	cmp	r1, r2
 800f4be:	d1f9      	bne.n	800f4b4 <memcpy+0xe>
 800f4c0:	bd10      	pop	{r4, pc}

0800f4c2 <quorem>:
 800f4c2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f4c6:	6903      	ldr	r3, [r0, #16]
 800f4c8:	690c      	ldr	r4, [r1, #16]
 800f4ca:	42a3      	cmp	r3, r4
 800f4cc:	4607      	mov	r7, r0
 800f4ce:	db7e      	blt.n	800f5ce <quorem+0x10c>
 800f4d0:	3c01      	subs	r4, #1
 800f4d2:	f101 0814 	add.w	r8, r1, #20
 800f4d6:	f100 0514 	add.w	r5, r0, #20
 800f4da:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f4de:	9301      	str	r3, [sp, #4]
 800f4e0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f4e4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f4e8:	3301      	adds	r3, #1
 800f4ea:	429a      	cmp	r2, r3
 800f4ec:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800f4f0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f4f4:	fbb2 f6f3 	udiv	r6, r2, r3
 800f4f8:	d331      	bcc.n	800f55e <quorem+0x9c>
 800f4fa:	f04f 0e00 	mov.w	lr, #0
 800f4fe:	4640      	mov	r0, r8
 800f500:	46ac      	mov	ip, r5
 800f502:	46f2      	mov	sl, lr
 800f504:	f850 2b04 	ldr.w	r2, [r0], #4
 800f508:	b293      	uxth	r3, r2
 800f50a:	fb06 e303 	mla	r3, r6, r3, lr
 800f50e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800f512:	0c1a      	lsrs	r2, r3, #16
 800f514:	b29b      	uxth	r3, r3
 800f516:	ebaa 0303 	sub.w	r3, sl, r3
 800f51a:	f8dc a000 	ldr.w	sl, [ip]
 800f51e:	fa13 f38a 	uxtah	r3, r3, sl
 800f522:	fb06 220e 	mla	r2, r6, lr, r2
 800f526:	9300      	str	r3, [sp, #0]
 800f528:	9b00      	ldr	r3, [sp, #0]
 800f52a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800f52e:	b292      	uxth	r2, r2
 800f530:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800f534:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f538:	f8bd 3000 	ldrh.w	r3, [sp]
 800f53c:	4581      	cmp	r9, r0
 800f53e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f542:	f84c 3b04 	str.w	r3, [ip], #4
 800f546:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800f54a:	d2db      	bcs.n	800f504 <quorem+0x42>
 800f54c:	f855 300b 	ldr.w	r3, [r5, fp]
 800f550:	b92b      	cbnz	r3, 800f55e <quorem+0x9c>
 800f552:	9b01      	ldr	r3, [sp, #4]
 800f554:	3b04      	subs	r3, #4
 800f556:	429d      	cmp	r5, r3
 800f558:	461a      	mov	r2, r3
 800f55a:	d32c      	bcc.n	800f5b6 <quorem+0xf4>
 800f55c:	613c      	str	r4, [r7, #16]
 800f55e:	4638      	mov	r0, r7
 800f560:	f001 f9a8 	bl	80108b4 <__mcmp>
 800f564:	2800      	cmp	r0, #0
 800f566:	db22      	blt.n	800f5ae <quorem+0xec>
 800f568:	3601      	adds	r6, #1
 800f56a:	4629      	mov	r1, r5
 800f56c:	2000      	movs	r0, #0
 800f56e:	f858 2b04 	ldr.w	r2, [r8], #4
 800f572:	f8d1 c000 	ldr.w	ip, [r1]
 800f576:	b293      	uxth	r3, r2
 800f578:	1ac3      	subs	r3, r0, r3
 800f57a:	0c12      	lsrs	r2, r2, #16
 800f57c:	fa13 f38c 	uxtah	r3, r3, ip
 800f580:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800f584:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f588:	b29b      	uxth	r3, r3
 800f58a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f58e:	45c1      	cmp	r9, r8
 800f590:	f841 3b04 	str.w	r3, [r1], #4
 800f594:	ea4f 4022 	mov.w	r0, r2, asr #16
 800f598:	d2e9      	bcs.n	800f56e <quorem+0xac>
 800f59a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f59e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f5a2:	b922      	cbnz	r2, 800f5ae <quorem+0xec>
 800f5a4:	3b04      	subs	r3, #4
 800f5a6:	429d      	cmp	r5, r3
 800f5a8:	461a      	mov	r2, r3
 800f5aa:	d30a      	bcc.n	800f5c2 <quorem+0x100>
 800f5ac:	613c      	str	r4, [r7, #16]
 800f5ae:	4630      	mov	r0, r6
 800f5b0:	b003      	add	sp, #12
 800f5b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f5b6:	6812      	ldr	r2, [r2, #0]
 800f5b8:	3b04      	subs	r3, #4
 800f5ba:	2a00      	cmp	r2, #0
 800f5bc:	d1ce      	bne.n	800f55c <quorem+0x9a>
 800f5be:	3c01      	subs	r4, #1
 800f5c0:	e7c9      	b.n	800f556 <quorem+0x94>
 800f5c2:	6812      	ldr	r2, [r2, #0]
 800f5c4:	3b04      	subs	r3, #4
 800f5c6:	2a00      	cmp	r2, #0
 800f5c8:	d1f0      	bne.n	800f5ac <quorem+0xea>
 800f5ca:	3c01      	subs	r4, #1
 800f5cc:	e7eb      	b.n	800f5a6 <quorem+0xe4>
 800f5ce:	2000      	movs	r0, #0
 800f5d0:	e7ee      	b.n	800f5b0 <quorem+0xee>
 800f5d2:	0000      	movs	r0, r0
 800f5d4:	0000      	movs	r0, r0
	...

0800f5d8 <_dtoa_r>:
 800f5d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5dc:	ed2d 8b04 	vpush	{d8-d9}
 800f5e0:	69c5      	ldr	r5, [r0, #28]
 800f5e2:	b093      	sub	sp, #76	; 0x4c
 800f5e4:	ed8d 0b02 	vstr	d0, [sp, #8]
 800f5e8:	ec57 6b10 	vmov	r6, r7, d0
 800f5ec:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800f5f0:	9107      	str	r1, [sp, #28]
 800f5f2:	4604      	mov	r4, r0
 800f5f4:	920a      	str	r2, [sp, #40]	; 0x28
 800f5f6:	930d      	str	r3, [sp, #52]	; 0x34
 800f5f8:	b975      	cbnz	r5, 800f618 <_dtoa_r+0x40>
 800f5fa:	2010      	movs	r0, #16
 800f5fc:	f000 fe2a 	bl	8010254 <malloc>
 800f600:	4602      	mov	r2, r0
 800f602:	61e0      	str	r0, [r4, #28]
 800f604:	b920      	cbnz	r0, 800f610 <_dtoa_r+0x38>
 800f606:	4bae      	ldr	r3, [pc, #696]	; (800f8c0 <_dtoa_r+0x2e8>)
 800f608:	21ef      	movs	r1, #239	; 0xef
 800f60a:	48ae      	ldr	r0, [pc, #696]	; (800f8c4 <_dtoa_r+0x2ec>)
 800f60c:	f001 fc82 	bl	8010f14 <__assert_func>
 800f610:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800f614:	6005      	str	r5, [r0, #0]
 800f616:	60c5      	str	r5, [r0, #12]
 800f618:	69e3      	ldr	r3, [r4, #28]
 800f61a:	6819      	ldr	r1, [r3, #0]
 800f61c:	b151      	cbz	r1, 800f634 <_dtoa_r+0x5c>
 800f61e:	685a      	ldr	r2, [r3, #4]
 800f620:	604a      	str	r2, [r1, #4]
 800f622:	2301      	movs	r3, #1
 800f624:	4093      	lsls	r3, r2
 800f626:	608b      	str	r3, [r1, #8]
 800f628:	4620      	mov	r0, r4
 800f62a:	f000 ff07 	bl	801043c <_Bfree>
 800f62e:	69e3      	ldr	r3, [r4, #28]
 800f630:	2200      	movs	r2, #0
 800f632:	601a      	str	r2, [r3, #0]
 800f634:	1e3b      	subs	r3, r7, #0
 800f636:	bfbb      	ittet	lt
 800f638:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800f63c:	9303      	strlt	r3, [sp, #12]
 800f63e:	2300      	movge	r3, #0
 800f640:	2201      	movlt	r2, #1
 800f642:	bfac      	ite	ge
 800f644:	f8c8 3000 	strge.w	r3, [r8]
 800f648:	f8c8 2000 	strlt.w	r2, [r8]
 800f64c:	4b9e      	ldr	r3, [pc, #632]	; (800f8c8 <_dtoa_r+0x2f0>)
 800f64e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800f652:	ea33 0308 	bics.w	r3, r3, r8
 800f656:	d11b      	bne.n	800f690 <_dtoa_r+0xb8>
 800f658:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f65a:	f242 730f 	movw	r3, #9999	; 0x270f
 800f65e:	6013      	str	r3, [r2, #0]
 800f660:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800f664:	4333      	orrs	r3, r6
 800f666:	f000 8593 	beq.w	8010190 <_dtoa_r+0xbb8>
 800f66a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f66c:	b963      	cbnz	r3, 800f688 <_dtoa_r+0xb0>
 800f66e:	4b97      	ldr	r3, [pc, #604]	; (800f8cc <_dtoa_r+0x2f4>)
 800f670:	e027      	b.n	800f6c2 <_dtoa_r+0xea>
 800f672:	4b97      	ldr	r3, [pc, #604]	; (800f8d0 <_dtoa_r+0x2f8>)
 800f674:	9300      	str	r3, [sp, #0]
 800f676:	3308      	adds	r3, #8
 800f678:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f67a:	6013      	str	r3, [r2, #0]
 800f67c:	9800      	ldr	r0, [sp, #0]
 800f67e:	b013      	add	sp, #76	; 0x4c
 800f680:	ecbd 8b04 	vpop	{d8-d9}
 800f684:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f688:	4b90      	ldr	r3, [pc, #576]	; (800f8cc <_dtoa_r+0x2f4>)
 800f68a:	9300      	str	r3, [sp, #0]
 800f68c:	3303      	adds	r3, #3
 800f68e:	e7f3      	b.n	800f678 <_dtoa_r+0xa0>
 800f690:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f694:	2200      	movs	r2, #0
 800f696:	ec51 0b17 	vmov	r0, r1, d7
 800f69a:	eeb0 8a47 	vmov.f32	s16, s14
 800f69e:	eef0 8a67 	vmov.f32	s17, s15
 800f6a2:	2300      	movs	r3, #0
 800f6a4:	f7f1 fa20 	bl	8000ae8 <__aeabi_dcmpeq>
 800f6a8:	4681      	mov	r9, r0
 800f6aa:	b160      	cbz	r0, 800f6c6 <_dtoa_r+0xee>
 800f6ac:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f6ae:	2301      	movs	r3, #1
 800f6b0:	6013      	str	r3, [r2, #0]
 800f6b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f6b4:	2b00      	cmp	r3, #0
 800f6b6:	f000 8568 	beq.w	801018a <_dtoa_r+0xbb2>
 800f6ba:	4b86      	ldr	r3, [pc, #536]	; (800f8d4 <_dtoa_r+0x2fc>)
 800f6bc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f6be:	6013      	str	r3, [r2, #0]
 800f6c0:	3b01      	subs	r3, #1
 800f6c2:	9300      	str	r3, [sp, #0]
 800f6c4:	e7da      	b.n	800f67c <_dtoa_r+0xa4>
 800f6c6:	aa10      	add	r2, sp, #64	; 0x40
 800f6c8:	a911      	add	r1, sp, #68	; 0x44
 800f6ca:	4620      	mov	r0, r4
 800f6cc:	eeb0 0a48 	vmov.f32	s0, s16
 800f6d0:	eef0 0a68 	vmov.f32	s1, s17
 800f6d4:	f001 f994 	bl	8010a00 <__d2b>
 800f6d8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800f6dc:	4682      	mov	sl, r0
 800f6de:	2d00      	cmp	r5, #0
 800f6e0:	d07f      	beq.n	800f7e2 <_dtoa_r+0x20a>
 800f6e2:	ee18 3a90 	vmov	r3, s17
 800f6e6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f6ea:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800f6ee:	ec51 0b18 	vmov	r0, r1, d8
 800f6f2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800f6f6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800f6fa:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800f6fe:	4619      	mov	r1, r3
 800f700:	2200      	movs	r2, #0
 800f702:	4b75      	ldr	r3, [pc, #468]	; (800f8d8 <_dtoa_r+0x300>)
 800f704:	f7f0 fdd0 	bl	80002a8 <__aeabi_dsub>
 800f708:	a367      	add	r3, pc, #412	; (adr r3, 800f8a8 <_dtoa_r+0x2d0>)
 800f70a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f70e:	f7f0 ff83 	bl	8000618 <__aeabi_dmul>
 800f712:	a367      	add	r3, pc, #412	; (adr r3, 800f8b0 <_dtoa_r+0x2d8>)
 800f714:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f718:	f7f0 fdc8 	bl	80002ac <__adddf3>
 800f71c:	4606      	mov	r6, r0
 800f71e:	4628      	mov	r0, r5
 800f720:	460f      	mov	r7, r1
 800f722:	f7f0 ff0f 	bl	8000544 <__aeabi_i2d>
 800f726:	a364      	add	r3, pc, #400	; (adr r3, 800f8b8 <_dtoa_r+0x2e0>)
 800f728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f72c:	f7f0 ff74 	bl	8000618 <__aeabi_dmul>
 800f730:	4602      	mov	r2, r0
 800f732:	460b      	mov	r3, r1
 800f734:	4630      	mov	r0, r6
 800f736:	4639      	mov	r1, r7
 800f738:	f7f0 fdb8 	bl	80002ac <__adddf3>
 800f73c:	4606      	mov	r6, r0
 800f73e:	460f      	mov	r7, r1
 800f740:	f7f1 fa1a 	bl	8000b78 <__aeabi_d2iz>
 800f744:	2200      	movs	r2, #0
 800f746:	4683      	mov	fp, r0
 800f748:	2300      	movs	r3, #0
 800f74a:	4630      	mov	r0, r6
 800f74c:	4639      	mov	r1, r7
 800f74e:	f7f1 f9d5 	bl	8000afc <__aeabi_dcmplt>
 800f752:	b148      	cbz	r0, 800f768 <_dtoa_r+0x190>
 800f754:	4658      	mov	r0, fp
 800f756:	f7f0 fef5 	bl	8000544 <__aeabi_i2d>
 800f75a:	4632      	mov	r2, r6
 800f75c:	463b      	mov	r3, r7
 800f75e:	f7f1 f9c3 	bl	8000ae8 <__aeabi_dcmpeq>
 800f762:	b908      	cbnz	r0, 800f768 <_dtoa_r+0x190>
 800f764:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f768:	f1bb 0f16 	cmp.w	fp, #22
 800f76c:	d857      	bhi.n	800f81e <_dtoa_r+0x246>
 800f76e:	4b5b      	ldr	r3, [pc, #364]	; (800f8dc <_dtoa_r+0x304>)
 800f770:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800f774:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f778:	ec51 0b18 	vmov	r0, r1, d8
 800f77c:	f7f1 f9be 	bl	8000afc <__aeabi_dcmplt>
 800f780:	2800      	cmp	r0, #0
 800f782:	d04e      	beq.n	800f822 <_dtoa_r+0x24a>
 800f784:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f788:	2300      	movs	r3, #0
 800f78a:	930c      	str	r3, [sp, #48]	; 0x30
 800f78c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f78e:	1b5b      	subs	r3, r3, r5
 800f790:	1e5a      	subs	r2, r3, #1
 800f792:	bf45      	ittet	mi
 800f794:	f1c3 0301 	rsbmi	r3, r3, #1
 800f798:	9305      	strmi	r3, [sp, #20]
 800f79a:	2300      	movpl	r3, #0
 800f79c:	2300      	movmi	r3, #0
 800f79e:	9206      	str	r2, [sp, #24]
 800f7a0:	bf54      	ite	pl
 800f7a2:	9305      	strpl	r3, [sp, #20]
 800f7a4:	9306      	strmi	r3, [sp, #24]
 800f7a6:	f1bb 0f00 	cmp.w	fp, #0
 800f7aa:	db3c      	blt.n	800f826 <_dtoa_r+0x24e>
 800f7ac:	9b06      	ldr	r3, [sp, #24]
 800f7ae:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800f7b2:	445b      	add	r3, fp
 800f7b4:	9306      	str	r3, [sp, #24]
 800f7b6:	2300      	movs	r3, #0
 800f7b8:	9308      	str	r3, [sp, #32]
 800f7ba:	9b07      	ldr	r3, [sp, #28]
 800f7bc:	2b09      	cmp	r3, #9
 800f7be:	d868      	bhi.n	800f892 <_dtoa_r+0x2ba>
 800f7c0:	2b05      	cmp	r3, #5
 800f7c2:	bfc4      	itt	gt
 800f7c4:	3b04      	subgt	r3, #4
 800f7c6:	9307      	strgt	r3, [sp, #28]
 800f7c8:	9b07      	ldr	r3, [sp, #28]
 800f7ca:	f1a3 0302 	sub.w	r3, r3, #2
 800f7ce:	bfcc      	ite	gt
 800f7d0:	2500      	movgt	r5, #0
 800f7d2:	2501      	movle	r5, #1
 800f7d4:	2b03      	cmp	r3, #3
 800f7d6:	f200 8085 	bhi.w	800f8e4 <_dtoa_r+0x30c>
 800f7da:	e8df f003 	tbb	[pc, r3]
 800f7de:	3b2e      	.short	0x3b2e
 800f7e0:	5839      	.short	0x5839
 800f7e2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800f7e6:	441d      	add	r5, r3
 800f7e8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800f7ec:	2b20      	cmp	r3, #32
 800f7ee:	bfc1      	itttt	gt
 800f7f0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800f7f4:	fa08 f803 	lslgt.w	r8, r8, r3
 800f7f8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800f7fc:	fa26 f303 	lsrgt.w	r3, r6, r3
 800f800:	bfd6      	itet	le
 800f802:	f1c3 0320 	rsble	r3, r3, #32
 800f806:	ea48 0003 	orrgt.w	r0, r8, r3
 800f80a:	fa06 f003 	lslle.w	r0, r6, r3
 800f80e:	f7f0 fe89 	bl	8000524 <__aeabi_ui2d>
 800f812:	2201      	movs	r2, #1
 800f814:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800f818:	3d01      	subs	r5, #1
 800f81a:	920e      	str	r2, [sp, #56]	; 0x38
 800f81c:	e76f      	b.n	800f6fe <_dtoa_r+0x126>
 800f81e:	2301      	movs	r3, #1
 800f820:	e7b3      	b.n	800f78a <_dtoa_r+0x1b2>
 800f822:	900c      	str	r0, [sp, #48]	; 0x30
 800f824:	e7b2      	b.n	800f78c <_dtoa_r+0x1b4>
 800f826:	9b05      	ldr	r3, [sp, #20]
 800f828:	eba3 030b 	sub.w	r3, r3, fp
 800f82c:	9305      	str	r3, [sp, #20]
 800f82e:	f1cb 0300 	rsb	r3, fp, #0
 800f832:	9308      	str	r3, [sp, #32]
 800f834:	2300      	movs	r3, #0
 800f836:	930b      	str	r3, [sp, #44]	; 0x2c
 800f838:	e7bf      	b.n	800f7ba <_dtoa_r+0x1e2>
 800f83a:	2300      	movs	r3, #0
 800f83c:	9309      	str	r3, [sp, #36]	; 0x24
 800f83e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f840:	2b00      	cmp	r3, #0
 800f842:	dc52      	bgt.n	800f8ea <_dtoa_r+0x312>
 800f844:	2301      	movs	r3, #1
 800f846:	9301      	str	r3, [sp, #4]
 800f848:	9304      	str	r3, [sp, #16]
 800f84a:	461a      	mov	r2, r3
 800f84c:	920a      	str	r2, [sp, #40]	; 0x28
 800f84e:	e00b      	b.n	800f868 <_dtoa_r+0x290>
 800f850:	2301      	movs	r3, #1
 800f852:	e7f3      	b.n	800f83c <_dtoa_r+0x264>
 800f854:	2300      	movs	r3, #0
 800f856:	9309      	str	r3, [sp, #36]	; 0x24
 800f858:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f85a:	445b      	add	r3, fp
 800f85c:	9301      	str	r3, [sp, #4]
 800f85e:	3301      	adds	r3, #1
 800f860:	2b01      	cmp	r3, #1
 800f862:	9304      	str	r3, [sp, #16]
 800f864:	bfb8      	it	lt
 800f866:	2301      	movlt	r3, #1
 800f868:	69e0      	ldr	r0, [r4, #28]
 800f86a:	2100      	movs	r1, #0
 800f86c:	2204      	movs	r2, #4
 800f86e:	f102 0614 	add.w	r6, r2, #20
 800f872:	429e      	cmp	r6, r3
 800f874:	d93d      	bls.n	800f8f2 <_dtoa_r+0x31a>
 800f876:	6041      	str	r1, [r0, #4]
 800f878:	4620      	mov	r0, r4
 800f87a:	f000 fd9f 	bl	80103bc <_Balloc>
 800f87e:	9000      	str	r0, [sp, #0]
 800f880:	2800      	cmp	r0, #0
 800f882:	d139      	bne.n	800f8f8 <_dtoa_r+0x320>
 800f884:	4b16      	ldr	r3, [pc, #88]	; (800f8e0 <_dtoa_r+0x308>)
 800f886:	4602      	mov	r2, r0
 800f888:	f240 11af 	movw	r1, #431	; 0x1af
 800f88c:	e6bd      	b.n	800f60a <_dtoa_r+0x32>
 800f88e:	2301      	movs	r3, #1
 800f890:	e7e1      	b.n	800f856 <_dtoa_r+0x27e>
 800f892:	2501      	movs	r5, #1
 800f894:	2300      	movs	r3, #0
 800f896:	9307      	str	r3, [sp, #28]
 800f898:	9509      	str	r5, [sp, #36]	; 0x24
 800f89a:	f04f 33ff 	mov.w	r3, #4294967295
 800f89e:	9301      	str	r3, [sp, #4]
 800f8a0:	9304      	str	r3, [sp, #16]
 800f8a2:	2200      	movs	r2, #0
 800f8a4:	2312      	movs	r3, #18
 800f8a6:	e7d1      	b.n	800f84c <_dtoa_r+0x274>
 800f8a8:	636f4361 	.word	0x636f4361
 800f8ac:	3fd287a7 	.word	0x3fd287a7
 800f8b0:	8b60c8b3 	.word	0x8b60c8b3
 800f8b4:	3fc68a28 	.word	0x3fc68a28
 800f8b8:	509f79fb 	.word	0x509f79fb
 800f8bc:	3fd34413 	.word	0x3fd34413
 800f8c0:	080131b9 	.word	0x080131b9
 800f8c4:	080131d0 	.word	0x080131d0
 800f8c8:	7ff00000 	.word	0x7ff00000
 800f8cc:	080131b5 	.word	0x080131b5
 800f8d0:	080131ac 	.word	0x080131ac
 800f8d4:	08013189 	.word	0x08013189
 800f8d8:	3ff80000 	.word	0x3ff80000
 800f8dc:	080132c0 	.word	0x080132c0
 800f8e0:	08013228 	.word	0x08013228
 800f8e4:	2301      	movs	r3, #1
 800f8e6:	9309      	str	r3, [sp, #36]	; 0x24
 800f8e8:	e7d7      	b.n	800f89a <_dtoa_r+0x2c2>
 800f8ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f8ec:	9301      	str	r3, [sp, #4]
 800f8ee:	9304      	str	r3, [sp, #16]
 800f8f0:	e7ba      	b.n	800f868 <_dtoa_r+0x290>
 800f8f2:	3101      	adds	r1, #1
 800f8f4:	0052      	lsls	r2, r2, #1
 800f8f6:	e7ba      	b.n	800f86e <_dtoa_r+0x296>
 800f8f8:	69e3      	ldr	r3, [r4, #28]
 800f8fa:	9a00      	ldr	r2, [sp, #0]
 800f8fc:	601a      	str	r2, [r3, #0]
 800f8fe:	9b04      	ldr	r3, [sp, #16]
 800f900:	2b0e      	cmp	r3, #14
 800f902:	f200 80a8 	bhi.w	800fa56 <_dtoa_r+0x47e>
 800f906:	2d00      	cmp	r5, #0
 800f908:	f000 80a5 	beq.w	800fa56 <_dtoa_r+0x47e>
 800f90c:	f1bb 0f00 	cmp.w	fp, #0
 800f910:	dd38      	ble.n	800f984 <_dtoa_r+0x3ac>
 800f912:	4bc0      	ldr	r3, [pc, #768]	; (800fc14 <_dtoa_r+0x63c>)
 800f914:	f00b 020f 	and.w	r2, fp, #15
 800f918:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f91c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800f920:	e9d3 6700 	ldrd	r6, r7, [r3]
 800f924:	ea4f 182b 	mov.w	r8, fp, asr #4
 800f928:	d019      	beq.n	800f95e <_dtoa_r+0x386>
 800f92a:	4bbb      	ldr	r3, [pc, #748]	; (800fc18 <_dtoa_r+0x640>)
 800f92c:	ec51 0b18 	vmov	r0, r1, d8
 800f930:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f934:	f7f0 ff9a 	bl	800086c <__aeabi_ddiv>
 800f938:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f93c:	f008 080f 	and.w	r8, r8, #15
 800f940:	2503      	movs	r5, #3
 800f942:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800fc18 <_dtoa_r+0x640>
 800f946:	f1b8 0f00 	cmp.w	r8, #0
 800f94a:	d10a      	bne.n	800f962 <_dtoa_r+0x38a>
 800f94c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f950:	4632      	mov	r2, r6
 800f952:	463b      	mov	r3, r7
 800f954:	f7f0 ff8a 	bl	800086c <__aeabi_ddiv>
 800f958:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f95c:	e02b      	b.n	800f9b6 <_dtoa_r+0x3de>
 800f95e:	2502      	movs	r5, #2
 800f960:	e7ef      	b.n	800f942 <_dtoa_r+0x36a>
 800f962:	f018 0f01 	tst.w	r8, #1
 800f966:	d008      	beq.n	800f97a <_dtoa_r+0x3a2>
 800f968:	4630      	mov	r0, r6
 800f96a:	4639      	mov	r1, r7
 800f96c:	e9d9 2300 	ldrd	r2, r3, [r9]
 800f970:	f7f0 fe52 	bl	8000618 <__aeabi_dmul>
 800f974:	3501      	adds	r5, #1
 800f976:	4606      	mov	r6, r0
 800f978:	460f      	mov	r7, r1
 800f97a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800f97e:	f109 0908 	add.w	r9, r9, #8
 800f982:	e7e0      	b.n	800f946 <_dtoa_r+0x36e>
 800f984:	f000 809f 	beq.w	800fac6 <_dtoa_r+0x4ee>
 800f988:	f1cb 0600 	rsb	r6, fp, #0
 800f98c:	4ba1      	ldr	r3, [pc, #644]	; (800fc14 <_dtoa_r+0x63c>)
 800f98e:	4fa2      	ldr	r7, [pc, #648]	; (800fc18 <_dtoa_r+0x640>)
 800f990:	f006 020f 	and.w	r2, r6, #15
 800f994:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f99c:	ec51 0b18 	vmov	r0, r1, d8
 800f9a0:	f7f0 fe3a 	bl	8000618 <__aeabi_dmul>
 800f9a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f9a8:	1136      	asrs	r6, r6, #4
 800f9aa:	2300      	movs	r3, #0
 800f9ac:	2502      	movs	r5, #2
 800f9ae:	2e00      	cmp	r6, #0
 800f9b0:	d17e      	bne.n	800fab0 <_dtoa_r+0x4d8>
 800f9b2:	2b00      	cmp	r3, #0
 800f9b4:	d1d0      	bne.n	800f958 <_dtoa_r+0x380>
 800f9b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f9b8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800f9bc:	2b00      	cmp	r3, #0
 800f9be:	f000 8084 	beq.w	800faca <_dtoa_r+0x4f2>
 800f9c2:	4b96      	ldr	r3, [pc, #600]	; (800fc1c <_dtoa_r+0x644>)
 800f9c4:	2200      	movs	r2, #0
 800f9c6:	4640      	mov	r0, r8
 800f9c8:	4649      	mov	r1, r9
 800f9ca:	f7f1 f897 	bl	8000afc <__aeabi_dcmplt>
 800f9ce:	2800      	cmp	r0, #0
 800f9d0:	d07b      	beq.n	800faca <_dtoa_r+0x4f2>
 800f9d2:	9b04      	ldr	r3, [sp, #16]
 800f9d4:	2b00      	cmp	r3, #0
 800f9d6:	d078      	beq.n	800faca <_dtoa_r+0x4f2>
 800f9d8:	9b01      	ldr	r3, [sp, #4]
 800f9da:	2b00      	cmp	r3, #0
 800f9dc:	dd39      	ble.n	800fa52 <_dtoa_r+0x47a>
 800f9de:	4b90      	ldr	r3, [pc, #576]	; (800fc20 <_dtoa_r+0x648>)
 800f9e0:	2200      	movs	r2, #0
 800f9e2:	4640      	mov	r0, r8
 800f9e4:	4649      	mov	r1, r9
 800f9e6:	f7f0 fe17 	bl	8000618 <__aeabi_dmul>
 800f9ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f9ee:	9e01      	ldr	r6, [sp, #4]
 800f9f0:	f10b 37ff 	add.w	r7, fp, #4294967295
 800f9f4:	3501      	adds	r5, #1
 800f9f6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800f9fa:	4628      	mov	r0, r5
 800f9fc:	f7f0 fda2 	bl	8000544 <__aeabi_i2d>
 800fa00:	4642      	mov	r2, r8
 800fa02:	464b      	mov	r3, r9
 800fa04:	f7f0 fe08 	bl	8000618 <__aeabi_dmul>
 800fa08:	4b86      	ldr	r3, [pc, #536]	; (800fc24 <_dtoa_r+0x64c>)
 800fa0a:	2200      	movs	r2, #0
 800fa0c:	f7f0 fc4e 	bl	80002ac <__adddf3>
 800fa10:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800fa14:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fa18:	9303      	str	r3, [sp, #12]
 800fa1a:	2e00      	cmp	r6, #0
 800fa1c:	d158      	bne.n	800fad0 <_dtoa_r+0x4f8>
 800fa1e:	4b82      	ldr	r3, [pc, #520]	; (800fc28 <_dtoa_r+0x650>)
 800fa20:	2200      	movs	r2, #0
 800fa22:	4640      	mov	r0, r8
 800fa24:	4649      	mov	r1, r9
 800fa26:	f7f0 fc3f 	bl	80002a8 <__aeabi_dsub>
 800fa2a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fa2e:	4680      	mov	r8, r0
 800fa30:	4689      	mov	r9, r1
 800fa32:	f7f1 f881 	bl	8000b38 <__aeabi_dcmpgt>
 800fa36:	2800      	cmp	r0, #0
 800fa38:	f040 8296 	bne.w	800ff68 <_dtoa_r+0x990>
 800fa3c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800fa40:	4640      	mov	r0, r8
 800fa42:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fa46:	4649      	mov	r1, r9
 800fa48:	f7f1 f858 	bl	8000afc <__aeabi_dcmplt>
 800fa4c:	2800      	cmp	r0, #0
 800fa4e:	f040 8289 	bne.w	800ff64 <_dtoa_r+0x98c>
 800fa52:	ed8d 8b02 	vstr	d8, [sp, #8]
 800fa56:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800fa58:	2b00      	cmp	r3, #0
 800fa5a:	f2c0 814e 	blt.w	800fcfa <_dtoa_r+0x722>
 800fa5e:	f1bb 0f0e 	cmp.w	fp, #14
 800fa62:	f300 814a 	bgt.w	800fcfa <_dtoa_r+0x722>
 800fa66:	4b6b      	ldr	r3, [pc, #428]	; (800fc14 <_dtoa_r+0x63c>)
 800fa68:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800fa6c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800fa70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fa72:	2b00      	cmp	r3, #0
 800fa74:	f280 80dc 	bge.w	800fc30 <_dtoa_r+0x658>
 800fa78:	9b04      	ldr	r3, [sp, #16]
 800fa7a:	2b00      	cmp	r3, #0
 800fa7c:	f300 80d8 	bgt.w	800fc30 <_dtoa_r+0x658>
 800fa80:	f040 826f 	bne.w	800ff62 <_dtoa_r+0x98a>
 800fa84:	4b68      	ldr	r3, [pc, #416]	; (800fc28 <_dtoa_r+0x650>)
 800fa86:	2200      	movs	r2, #0
 800fa88:	4640      	mov	r0, r8
 800fa8a:	4649      	mov	r1, r9
 800fa8c:	f7f0 fdc4 	bl	8000618 <__aeabi_dmul>
 800fa90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fa94:	f7f1 f846 	bl	8000b24 <__aeabi_dcmpge>
 800fa98:	9e04      	ldr	r6, [sp, #16]
 800fa9a:	4637      	mov	r7, r6
 800fa9c:	2800      	cmp	r0, #0
 800fa9e:	f040 8245 	bne.w	800ff2c <_dtoa_r+0x954>
 800faa2:	9d00      	ldr	r5, [sp, #0]
 800faa4:	2331      	movs	r3, #49	; 0x31
 800faa6:	f805 3b01 	strb.w	r3, [r5], #1
 800faaa:	f10b 0b01 	add.w	fp, fp, #1
 800faae:	e241      	b.n	800ff34 <_dtoa_r+0x95c>
 800fab0:	07f2      	lsls	r2, r6, #31
 800fab2:	d505      	bpl.n	800fac0 <_dtoa_r+0x4e8>
 800fab4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fab8:	f7f0 fdae 	bl	8000618 <__aeabi_dmul>
 800fabc:	3501      	adds	r5, #1
 800fabe:	2301      	movs	r3, #1
 800fac0:	1076      	asrs	r6, r6, #1
 800fac2:	3708      	adds	r7, #8
 800fac4:	e773      	b.n	800f9ae <_dtoa_r+0x3d6>
 800fac6:	2502      	movs	r5, #2
 800fac8:	e775      	b.n	800f9b6 <_dtoa_r+0x3de>
 800faca:	9e04      	ldr	r6, [sp, #16]
 800facc:	465f      	mov	r7, fp
 800face:	e792      	b.n	800f9f6 <_dtoa_r+0x41e>
 800fad0:	9900      	ldr	r1, [sp, #0]
 800fad2:	4b50      	ldr	r3, [pc, #320]	; (800fc14 <_dtoa_r+0x63c>)
 800fad4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800fad8:	4431      	add	r1, r6
 800fada:	9102      	str	r1, [sp, #8]
 800fadc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800fade:	eeb0 9a47 	vmov.f32	s18, s14
 800fae2:	eef0 9a67 	vmov.f32	s19, s15
 800fae6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800faea:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800faee:	2900      	cmp	r1, #0
 800faf0:	d044      	beq.n	800fb7c <_dtoa_r+0x5a4>
 800faf2:	494e      	ldr	r1, [pc, #312]	; (800fc2c <_dtoa_r+0x654>)
 800faf4:	2000      	movs	r0, #0
 800faf6:	f7f0 feb9 	bl	800086c <__aeabi_ddiv>
 800fafa:	ec53 2b19 	vmov	r2, r3, d9
 800fafe:	f7f0 fbd3 	bl	80002a8 <__aeabi_dsub>
 800fb02:	9d00      	ldr	r5, [sp, #0]
 800fb04:	ec41 0b19 	vmov	d9, r0, r1
 800fb08:	4649      	mov	r1, r9
 800fb0a:	4640      	mov	r0, r8
 800fb0c:	f7f1 f834 	bl	8000b78 <__aeabi_d2iz>
 800fb10:	4606      	mov	r6, r0
 800fb12:	f7f0 fd17 	bl	8000544 <__aeabi_i2d>
 800fb16:	4602      	mov	r2, r0
 800fb18:	460b      	mov	r3, r1
 800fb1a:	4640      	mov	r0, r8
 800fb1c:	4649      	mov	r1, r9
 800fb1e:	f7f0 fbc3 	bl	80002a8 <__aeabi_dsub>
 800fb22:	3630      	adds	r6, #48	; 0x30
 800fb24:	f805 6b01 	strb.w	r6, [r5], #1
 800fb28:	ec53 2b19 	vmov	r2, r3, d9
 800fb2c:	4680      	mov	r8, r0
 800fb2e:	4689      	mov	r9, r1
 800fb30:	f7f0 ffe4 	bl	8000afc <__aeabi_dcmplt>
 800fb34:	2800      	cmp	r0, #0
 800fb36:	d164      	bne.n	800fc02 <_dtoa_r+0x62a>
 800fb38:	4642      	mov	r2, r8
 800fb3a:	464b      	mov	r3, r9
 800fb3c:	4937      	ldr	r1, [pc, #220]	; (800fc1c <_dtoa_r+0x644>)
 800fb3e:	2000      	movs	r0, #0
 800fb40:	f7f0 fbb2 	bl	80002a8 <__aeabi_dsub>
 800fb44:	ec53 2b19 	vmov	r2, r3, d9
 800fb48:	f7f0 ffd8 	bl	8000afc <__aeabi_dcmplt>
 800fb4c:	2800      	cmp	r0, #0
 800fb4e:	f040 80b6 	bne.w	800fcbe <_dtoa_r+0x6e6>
 800fb52:	9b02      	ldr	r3, [sp, #8]
 800fb54:	429d      	cmp	r5, r3
 800fb56:	f43f af7c 	beq.w	800fa52 <_dtoa_r+0x47a>
 800fb5a:	4b31      	ldr	r3, [pc, #196]	; (800fc20 <_dtoa_r+0x648>)
 800fb5c:	ec51 0b19 	vmov	r0, r1, d9
 800fb60:	2200      	movs	r2, #0
 800fb62:	f7f0 fd59 	bl	8000618 <__aeabi_dmul>
 800fb66:	4b2e      	ldr	r3, [pc, #184]	; (800fc20 <_dtoa_r+0x648>)
 800fb68:	ec41 0b19 	vmov	d9, r0, r1
 800fb6c:	2200      	movs	r2, #0
 800fb6e:	4640      	mov	r0, r8
 800fb70:	4649      	mov	r1, r9
 800fb72:	f7f0 fd51 	bl	8000618 <__aeabi_dmul>
 800fb76:	4680      	mov	r8, r0
 800fb78:	4689      	mov	r9, r1
 800fb7a:	e7c5      	b.n	800fb08 <_dtoa_r+0x530>
 800fb7c:	ec51 0b17 	vmov	r0, r1, d7
 800fb80:	f7f0 fd4a 	bl	8000618 <__aeabi_dmul>
 800fb84:	9b02      	ldr	r3, [sp, #8]
 800fb86:	9d00      	ldr	r5, [sp, #0]
 800fb88:	930f      	str	r3, [sp, #60]	; 0x3c
 800fb8a:	ec41 0b19 	vmov	d9, r0, r1
 800fb8e:	4649      	mov	r1, r9
 800fb90:	4640      	mov	r0, r8
 800fb92:	f7f0 fff1 	bl	8000b78 <__aeabi_d2iz>
 800fb96:	4606      	mov	r6, r0
 800fb98:	f7f0 fcd4 	bl	8000544 <__aeabi_i2d>
 800fb9c:	3630      	adds	r6, #48	; 0x30
 800fb9e:	4602      	mov	r2, r0
 800fba0:	460b      	mov	r3, r1
 800fba2:	4640      	mov	r0, r8
 800fba4:	4649      	mov	r1, r9
 800fba6:	f7f0 fb7f 	bl	80002a8 <__aeabi_dsub>
 800fbaa:	f805 6b01 	strb.w	r6, [r5], #1
 800fbae:	9b02      	ldr	r3, [sp, #8]
 800fbb0:	429d      	cmp	r5, r3
 800fbb2:	4680      	mov	r8, r0
 800fbb4:	4689      	mov	r9, r1
 800fbb6:	f04f 0200 	mov.w	r2, #0
 800fbba:	d124      	bne.n	800fc06 <_dtoa_r+0x62e>
 800fbbc:	4b1b      	ldr	r3, [pc, #108]	; (800fc2c <_dtoa_r+0x654>)
 800fbbe:	ec51 0b19 	vmov	r0, r1, d9
 800fbc2:	f7f0 fb73 	bl	80002ac <__adddf3>
 800fbc6:	4602      	mov	r2, r0
 800fbc8:	460b      	mov	r3, r1
 800fbca:	4640      	mov	r0, r8
 800fbcc:	4649      	mov	r1, r9
 800fbce:	f7f0 ffb3 	bl	8000b38 <__aeabi_dcmpgt>
 800fbd2:	2800      	cmp	r0, #0
 800fbd4:	d173      	bne.n	800fcbe <_dtoa_r+0x6e6>
 800fbd6:	ec53 2b19 	vmov	r2, r3, d9
 800fbda:	4914      	ldr	r1, [pc, #80]	; (800fc2c <_dtoa_r+0x654>)
 800fbdc:	2000      	movs	r0, #0
 800fbde:	f7f0 fb63 	bl	80002a8 <__aeabi_dsub>
 800fbe2:	4602      	mov	r2, r0
 800fbe4:	460b      	mov	r3, r1
 800fbe6:	4640      	mov	r0, r8
 800fbe8:	4649      	mov	r1, r9
 800fbea:	f7f0 ff87 	bl	8000afc <__aeabi_dcmplt>
 800fbee:	2800      	cmp	r0, #0
 800fbf0:	f43f af2f 	beq.w	800fa52 <_dtoa_r+0x47a>
 800fbf4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800fbf6:	1e6b      	subs	r3, r5, #1
 800fbf8:	930f      	str	r3, [sp, #60]	; 0x3c
 800fbfa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800fbfe:	2b30      	cmp	r3, #48	; 0x30
 800fc00:	d0f8      	beq.n	800fbf4 <_dtoa_r+0x61c>
 800fc02:	46bb      	mov	fp, r7
 800fc04:	e04a      	b.n	800fc9c <_dtoa_r+0x6c4>
 800fc06:	4b06      	ldr	r3, [pc, #24]	; (800fc20 <_dtoa_r+0x648>)
 800fc08:	f7f0 fd06 	bl	8000618 <__aeabi_dmul>
 800fc0c:	4680      	mov	r8, r0
 800fc0e:	4689      	mov	r9, r1
 800fc10:	e7bd      	b.n	800fb8e <_dtoa_r+0x5b6>
 800fc12:	bf00      	nop
 800fc14:	080132c0 	.word	0x080132c0
 800fc18:	08013298 	.word	0x08013298
 800fc1c:	3ff00000 	.word	0x3ff00000
 800fc20:	40240000 	.word	0x40240000
 800fc24:	401c0000 	.word	0x401c0000
 800fc28:	40140000 	.word	0x40140000
 800fc2c:	3fe00000 	.word	0x3fe00000
 800fc30:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800fc34:	9d00      	ldr	r5, [sp, #0]
 800fc36:	4642      	mov	r2, r8
 800fc38:	464b      	mov	r3, r9
 800fc3a:	4630      	mov	r0, r6
 800fc3c:	4639      	mov	r1, r7
 800fc3e:	f7f0 fe15 	bl	800086c <__aeabi_ddiv>
 800fc42:	f7f0 ff99 	bl	8000b78 <__aeabi_d2iz>
 800fc46:	9001      	str	r0, [sp, #4]
 800fc48:	f7f0 fc7c 	bl	8000544 <__aeabi_i2d>
 800fc4c:	4642      	mov	r2, r8
 800fc4e:	464b      	mov	r3, r9
 800fc50:	f7f0 fce2 	bl	8000618 <__aeabi_dmul>
 800fc54:	4602      	mov	r2, r0
 800fc56:	460b      	mov	r3, r1
 800fc58:	4630      	mov	r0, r6
 800fc5a:	4639      	mov	r1, r7
 800fc5c:	f7f0 fb24 	bl	80002a8 <__aeabi_dsub>
 800fc60:	9e01      	ldr	r6, [sp, #4]
 800fc62:	9f04      	ldr	r7, [sp, #16]
 800fc64:	3630      	adds	r6, #48	; 0x30
 800fc66:	f805 6b01 	strb.w	r6, [r5], #1
 800fc6a:	9e00      	ldr	r6, [sp, #0]
 800fc6c:	1bae      	subs	r6, r5, r6
 800fc6e:	42b7      	cmp	r7, r6
 800fc70:	4602      	mov	r2, r0
 800fc72:	460b      	mov	r3, r1
 800fc74:	d134      	bne.n	800fce0 <_dtoa_r+0x708>
 800fc76:	f7f0 fb19 	bl	80002ac <__adddf3>
 800fc7a:	4642      	mov	r2, r8
 800fc7c:	464b      	mov	r3, r9
 800fc7e:	4606      	mov	r6, r0
 800fc80:	460f      	mov	r7, r1
 800fc82:	f7f0 ff59 	bl	8000b38 <__aeabi_dcmpgt>
 800fc86:	b9c8      	cbnz	r0, 800fcbc <_dtoa_r+0x6e4>
 800fc88:	4642      	mov	r2, r8
 800fc8a:	464b      	mov	r3, r9
 800fc8c:	4630      	mov	r0, r6
 800fc8e:	4639      	mov	r1, r7
 800fc90:	f7f0 ff2a 	bl	8000ae8 <__aeabi_dcmpeq>
 800fc94:	b110      	cbz	r0, 800fc9c <_dtoa_r+0x6c4>
 800fc96:	9b01      	ldr	r3, [sp, #4]
 800fc98:	07db      	lsls	r3, r3, #31
 800fc9a:	d40f      	bmi.n	800fcbc <_dtoa_r+0x6e4>
 800fc9c:	4651      	mov	r1, sl
 800fc9e:	4620      	mov	r0, r4
 800fca0:	f000 fbcc 	bl	801043c <_Bfree>
 800fca4:	2300      	movs	r3, #0
 800fca6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800fca8:	702b      	strb	r3, [r5, #0]
 800fcaa:	f10b 0301 	add.w	r3, fp, #1
 800fcae:	6013      	str	r3, [r2, #0]
 800fcb0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fcb2:	2b00      	cmp	r3, #0
 800fcb4:	f43f ace2 	beq.w	800f67c <_dtoa_r+0xa4>
 800fcb8:	601d      	str	r5, [r3, #0]
 800fcba:	e4df      	b.n	800f67c <_dtoa_r+0xa4>
 800fcbc:	465f      	mov	r7, fp
 800fcbe:	462b      	mov	r3, r5
 800fcc0:	461d      	mov	r5, r3
 800fcc2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fcc6:	2a39      	cmp	r2, #57	; 0x39
 800fcc8:	d106      	bne.n	800fcd8 <_dtoa_r+0x700>
 800fcca:	9a00      	ldr	r2, [sp, #0]
 800fccc:	429a      	cmp	r2, r3
 800fcce:	d1f7      	bne.n	800fcc0 <_dtoa_r+0x6e8>
 800fcd0:	9900      	ldr	r1, [sp, #0]
 800fcd2:	2230      	movs	r2, #48	; 0x30
 800fcd4:	3701      	adds	r7, #1
 800fcd6:	700a      	strb	r2, [r1, #0]
 800fcd8:	781a      	ldrb	r2, [r3, #0]
 800fcda:	3201      	adds	r2, #1
 800fcdc:	701a      	strb	r2, [r3, #0]
 800fcde:	e790      	b.n	800fc02 <_dtoa_r+0x62a>
 800fce0:	4ba3      	ldr	r3, [pc, #652]	; (800ff70 <_dtoa_r+0x998>)
 800fce2:	2200      	movs	r2, #0
 800fce4:	f7f0 fc98 	bl	8000618 <__aeabi_dmul>
 800fce8:	2200      	movs	r2, #0
 800fcea:	2300      	movs	r3, #0
 800fcec:	4606      	mov	r6, r0
 800fcee:	460f      	mov	r7, r1
 800fcf0:	f7f0 fefa 	bl	8000ae8 <__aeabi_dcmpeq>
 800fcf4:	2800      	cmp	r0, #0
 800fcf6:	d09e      	beq.n	800fc36 <_dtoa_r+0x65e>
 800fcf8:	e7d0      	b.n	800fc9c <_dtoa_r+0x6c4>
 800fcfa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fcfc:	2a00      	cmp	r2, #0
 800fcfe:	f000 80ca 	beq.w	800fe96 <_dtoa_r+0x8be>
 800fd02:	9a07      	ldr	r2, [sp, #28]
 800fd04:	2a01      	cmp	r2, #1
 800fd06:	f300 80ad 	bgt.w	800fe64 <_dtoa_r+0x88c>
 800fd0a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800fd0c:	2a00      	cmp	r2, #0
 800fd0e:	f000 80a5 	beq.w	800fe5c <_dtoa_r+0x884>
 800fd12:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800fd16:	9e08      	ldr	r6, [sp, #32]
 800fd18:	9d05      	ldr	r5, [sp, #20]
 800fd1a:	9a05      	ldr	r2, [sp, #20]
 800fd1c:	441a      	add	r2, r3
 800fd1e:	9205      	str	r2, [sp, #20]
 800fd20:	9a06      	ldr	r2, [sp, #24]
 800fd22:	2101      	movs	r1, #1
 800fd24:	441a      	add	r2, r3
 800fd26:	4620      	mov	r0, r4
 800fd28:	9206      	str	r2, [sp, #24]
 800fd2a:	f000 fc3d 	bl	80105a8 <__i2b>
 800fd2e:	4607      	mov	r7, r0
 800fd30:	b165      	cbz	r5, 800fd4c <_dtoa_r+0x774>
 800fd32:	9b06      	ldr	r3, [sp, #24]
 800fd34:	2b00      	cmp	r3, #0
 800fd36:	dd09      	ble.n	800fd4c <_dtoa_r+0x774>
 800fd38:	42ab      	cmp	r3, r5
 800fd3a:	9a05      	ldr	r2, [sp, #20]
 800fd3c:	bfa8      	it	ge
 800fd3e:	462b      	movge	r3, r5
 800fd40:	1ad2      	subs	r2, r2, r3
 800fd42:	9205      	str	r2, [sp, #20]
 800fd44:	9a06      	ldr	r2, [sp, #24]
 800fd46:	1aed      	subs	r5, r5, r3
 800fd48:	1ad3      	subs	r3, r2, r3
 800fd4a:	9306      	str	r3, [sp, #24]
 800fd4c:	9b08      	ldr	r3, [sp, #32]
 800fd4e:	b1f3      	cbz	r3, 800fd8e <_dtoa_r+0x7b6>
 800fd50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fd52:	2b00      	cmp	r3, #0
 800fd54:	f000 80a3 	beq.w	800fe9e <_dtoa_r+0x8c6>
 800fd58:	2e00      	cmp	r6, #0
 800fd5a:	dd10      	ble.n	800fd7e <_dtoa_r+0x7a6>
 800fd5c:	4639      	mov	r1, r7
 800fd5e:	4632      	mov	r2, r6
 800fd60:	4620      	mov	r0, r4
 800fd62:	f000 fce1 	bl	8010728 <__pow5mult>
 800fd66:	4652      	mov	r2, sl
 800fd68:	4601      	mov	r1, r0
 800fd6a:	4607      	mov	r7, r0
 800fd6c:	4620      	mov	r0, r4
 800fd6e:	f000 fc31 	bl	80105d4 <__multiply>
 800fd72:	4651      	mov	r1, sl
 800fd74:	4680      	mov	r8, r0
 800fd76:	4620      	mov	r0, r4
 800fd78:	f000 fb60 	bl	801043c <_Bfree>
 800fd7c:	46c2      	mov	sl, r8
 800fd7e:	9b08      	ldr	r3, [sp, #32]
 800fd80:	1b9a      	subs	r2, r3, r6
 800fd82:	d004      	beq.n	800fd8e <_dtoa_r+0x7b6>
 800fd84:	4651      	mov	r1, sl
 800fd86:	4620      	mov	r0, r4
 800fd88:	f000 fcce 	bl	8010728 <__pow5mult>
 800fd8c:	4682      	mov	sl, r0
 800fd8e:	2101      	movs	r1, #1
 800fd90:	4620      	mov	r0, r4
 800fd92:	f000 fc09 	bl	80105a8 <__i2b>
 800fd96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fd98:	2b00      	cmp	r3, #0
 800fd9a:	4606      	mov	r6, r0
 800fd9c:	f340 8081 	ble.w	800fea2 <_dtoa_r+0x8ca>
 800fda0:	461a      	mov	r2, r3
 800fda2:	4601      	mov	r1, r0
 800fda4:	4620      	mov	r0, r4
 800fda6:	f000 fcbf 	bl	8010728 <__pow5mult>
 800fdaa:	9b07      	ldr	r3, [sp, #28]
 800fdac:	2b01      	cmp	r3, #1
 800fdae:	4606      	mov	r6, r0
 800fdb0:	dd7a      	ble.n	800fea8 <_dtoa_r+0x8d0>
 800fdb2:	f04f 0800 	mov.w	r8, #0
 800fdb6:	6933      	ldr	r3, [r6, #16]
 800fdb8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800fdbc:	6918      	ldr	r0, [r3, #16]
 800fdbe:	f000 fba5 	bl	801050c <__hi0bits>
 800fdc2:	f1c0 0020 	rsb	r0, r0, #32
 800fdc6:	9b06      	ldr	r3, [sp, #24]
 800fdc8:	4418      	add	r0, r3
 800fdca:	f010 001f 	ands.w	r0, r0, #31
 800fdce:	f000 8094 	beq.w	800fefa <_dtoa_r+0x922>
 800fdd2:	f1c0 0320 	rsb	r3, r0, #32
 800fdd6:	2b04      	cmp	r3, #4
 800fdd8:	f340 8085 	ble.w	800fee6 <_dtoa_r+0x90e>
 800fddc:	9b05      	ldr	r3, [sp, #20]
 800fdde:	f1c0 001c 	rsb	r0, r0, #28
 800fde2:	4403      	add	r3, r0
 800fde4:	9305      	str	r3, [sp, #20]
 800fde6:	9b06      	ldr	r3, [sp, #24]
 800fde8:	4403      	add	r3, r0
 800fdea:	4405      	add	r5, r0
 800fdec:	9306      	str	r3, [sp, #24]
 800fdee:	9b05      	ldr	r3, [sp, #20]
 800fdf0:	2b00      	cmp	r3, #0
 800fdf2:	dd05      	ble.n	800fe00 <_dtoa_r+0x828>
 800fdf4:	4651      	mov	r1, sl
 800fdf6:	461a      	mov	r2, r3
 800fdf8:	4620      	mov	r0, r4
 800fdfa:	f000 fcef 	bl	80107dc <__lshift>
 800fdfe:	4682      	mov	sl, r0
 800fe00:	9b06      	ldr	r3, [sp, #24]
 800fe02:	2b00      	cmp	r3, #0
 800fe04:	dd05      	ble.n	800fe12 <_dtoa_r+0x83a>
 800fe06:	4631      	mov	r1, r6
 800fe08:	461a      	mov	r2, r3
 800fe0a:	4620      	mov	r0, r4
 800fe0c:	f000 fce6 	bl	80107dc <__lshift>
 800fe10:	4606      	mov	r6, r0
 800fe12:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fe14:	2b00      	cmp	r3, #0
 800fe16:	d072      	beq.n	800fefe <_dtoa_r+0x926>
 800fe18:	4631      	mov	r1, r6
 800fe1a:	4650      	mov	r0, sl
 800fe1c:	f000 fd4a 	bl	80108b4 <__mcmp>
 800fe20:	2800      	cmp	r0, #0
 800fe22:	da6c      	bge.n	800fefe <_dtoa_r+0x926>
 800fe24:	2300      	movs	r3, #0
 800fe26:	4651      	mov	r1, sl
 800fe28:	220a      	movs	r2, #10
 800fe2a:	4620      	mov	r0, r4
 800fe2c:	f000 fb28 	bl	8010480 <__multadd>
 800fe30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fe32:	f10b 3bff 	add.w	fp, fp, #4294967295
 800fe36:	4682      	mov	sl, r0
 800fe38:	2b00      	cmp	r3, #0
 800fe3a:	f000 81b0 	beq.w	801019e <_dtoa_r+0xbc6>
 800fe3e:	2300      	movs	r3, #0
 800fe40:	4639      	mov	r1, r7
 800fe42:	220a      	movs	r2, #10
 800fe44:	4620      	mov	r0, r4
 800fe46:	f000 fb1b 	bl	8010480 <__multadd>
 800fe4a:	9b01      	ldr	r3, [sp, #4]
 800fe4c:	2b00      	cmp	r3, #0
 800fe4e:	4607      	mov	r7, r0
 800fe50:	f300 8096 	bgt.w	800ff80 <_dtoa_r+0x9a8>
 800fe54:	9b07      	ldr	r3, [sp, #28]
 800fe56:	2b02      	cmp	r3, #2
 800fe58:	dc59      	bgt.n	800ff0e <_dtoa_r+0x936>
 800fe5a:	e091      	b.n	800ff80 <_dtoa_r+0x9a8>
 800fe5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800fe5e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800fe62:	e758      	b.n	800fd16 <_dtoa_r+0x73e>
 800fe64:	9b04      	ldr	r3, [sp, #16]
 800fe66:	1e5e      	subs	r6, r3, #1
 800fe68:	9b08      	ldr	r3, [sp, #32]
 800fe6a:	42b3      	cmp	r3, r6
 800fe6c:	bfbf      	itttt	lt
 800fe6e:	9b08      	ldrlt	r3, [sp, #32]
 800fe70:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800fe72:	9608      	strlt	r6, [sp, #32]
 800fe74:	1af3      	sublt	r3, r6, r3
 800fe76:	bfb4      	ite	lt
 800fe78:	18d2      	addlt	r2, r2, r3
 800fe7a:	1b9e      	subge	r6, r3, r6
 800fe7c:	9b04      	ldr	r3, [sp, #16]
 800fe7e:	bfbc      	itt	lt
 800fe80:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800fe82:	2600      	movlt	r6, #0
 800fe84:	2b00      	cmp	r3, #0
 800fe86:	bfb7      	itett	lt
 800fe88:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800fe8c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800fe90:	1a9d      	sublt	r5, r3, r2
 800fe92:	2300      	movlt	r3, #0
 800fe94:	e741      	b.n	800fd1a <_dtoa_r+0x742>
 800fe96:	9e08      	ldr	r6, [sp, #32]
 800fe98:	9d05      	ldr	r5, [sp, #20]
 800fe9a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800fe9c:	e748      	b.n	800fd30 <_dtoa_r+0x758>
 800fe9e:	9a08      	ldr	r2, [sp, #32]
 800fea0:	e770      	b.n	800fd84 <_dtoa_r+0x7ac>
 800fea2:	9b07      	ldr	r3, [sp, #28]
 800fea4:	2b01      	cmp	r3, #1
 800fea6:	dc19      	bgt.n	800fedc <_dtoa_r+0x904>
 800fea8:	9b02      	ldr	r3, [sp, #8]
 800feaa:	b9bb      	cbnz	r3, 800fedc <_dtoa_r+0x904>
 800feac:	9b03      	ldr	r3, [sp, #12]
 800feae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800feb2:	b99b      	cbnz	r3, 800fedc <_dtoa_r+0x904>
 800feb4:	9b03      	ldr	r3, [sp, #12]
 800feb6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800feba:	0d1b      	lsrs	r3, r3, #20
 800febc:	051b      	lsls	r3, r3, #20
 800febe:	b183      	cbz	r3, 800fee2 <_dtoa_r+0x90a>
 800fec0:	9b05      	ldr	r3, [sp, #20]
 800fec2:	3301      	adds	r3, #1
 800fec4:	9305      	str	r3, [sp, #20]
 800fec6:	9b06      	ldr	r3, [sp, #24]
 800fec8:	3301      	adds	r3, #1
 800feca:	9306      	str	r3, [sp, #24]
 800fecc:	f04f 0801 	mov.w	r8, #1
 800fed0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fed2:	2b00      	cmp	r3, #0
 800fed4:	f47f af6f 	bne.w	800fdb6 <_dtoa_r+0x7de>
 800fed8:	2001      	movs	r0, #1
 800feda:	e774      	b.n	800fdc6 <_dtoa_r+0x7ee>
 800fedc:	f04f 0800 	mov.w	r8, #0
 800fee0:	e7f6      	b.n	800fed0 <_dtoa_r+0x8f8>
 800fee2:	4698      	mov	r8, r3
 800fee4:	e7f4      	b.n	800fed0 <_dtoa_r+0x8f8>
 800fee6:	d082      	beq.n	800fdee <_dtoa_r+0x816>
 800fee8:	9a05      	ldr	r2, [sp, #20]
 800feea:	331c      	adds	r3, #28
 800feec:	441a      	add	r2, r3
 800feee:	9205      	str	r2, [sp, #20]
 800fef0:	9a06      	ldr	r2, [sp, #24]
 800fef2:	441a      	add	r2, r3
 800fef4:	441d      	add	r5, r3
 800fef6:	9206      	str	r2, [sp, #24]
 800fef8:	e779      	b.n	800fdee <_dtoa_r+0x816>
 800fefa:	4603      	mov	r3, r0
 800fefc:	e7f4      	b.n	800fee8 <_dtoa_r+0x910>
 800fefe:	9b04      	ldr	r3, [sp, #16]
 800ff00:	2b00      	cmp	r3, #0
 800ff02:	dc37      	bgt.n	800ff74 <_dtoa_r+0x99c>
 800ff04:	9b07      	ldr	r3, [sp, #28]
 800ff06:	2b02      	cmp	r3, #2
 800ff08:	dd34      	ble.n	800ff74 <_dtoa_r+0x99c>
 800ff0a:	9b04      	ldr	r3, [sp, #16]
 800ff0c:	9301      	str	r3, [sp, #4]
 800ff0e:	9b01      	ldr	r3, [sp, #4]
 800ff10:	b963      	cbnz	r3, 800ff2c <_dtoa_r+0x954>
 800ff12:	4631      	mov	r1, r6
 800ff14:	2205      	movs	r2, #5
 800ff16:	4620      	mov	r0, r4
 800ff18:	f000 fab2 	bl	8010480 <__multadd>
 800ff1c:	4601      	mov	r1, r0
 800ff1e:	4606      	mov	r6, r0
 800ff20:	4650      	mov	r0, sl
 800ff22:	f000 fcc7 	bl	80108b4 <__mcmp>
 800ff26:	2800      	cmp	r0, #0
 800ff28:	f73f adbb 	bgt.w	800faa2 <_dtoa_r+0x4ca>
 800ff2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ff2e:	9d00      	ldr	r5, [sp, #0]
 800ff30:	ea6f 0b03 	mvn.w	fp, r3
 800ff34:	f04f 0800 	mov.w	r8, #0
 800ff38:	4631      	mov	r1, r6
 800ff3a:	4620      	mov	r0, r4
 800ff3c:	f000 fa7e 	bl	801043c <_Bfree>
 800ff40:	2f00      	cmp	r7, #0
 800ff42:	f43f aeab 	beq.w	800fc9c <_dtoa_r+0x6c4>
 800ff46:	f1b8 0f00 	cmp.w	r8, #0
 800ff4a:	d005      	beq.n	800ff58 <_dtoa_r+0x980>
 800ff4c:	45b8      	cmp	r8, r7
 800ff4e:	d003      	beq.n	800ff58 <_dtoa_r+0x980>
 800ff50:	4641      	mov	r1, r8
 800ff52:	4620      	mov	r0, r4
 800ff54:	f000 fa72 	bl	801043c <_Bfree>
 800ff58:	4639      	mov	r1, r7
 800ff5a:	4620      	mov	r0, r4
 800ff5c:	f000 fa6e 	bl	801043c <_Bfree>
 800ff60:	e69c      	b.n	800fc9c <_dtoa_r+0x6c4>
 800ff62:	2600      	movs	r6, #0
 800ff64:	4637      	mov	r7, r6
 800ff66:	e7e1      	b.n	800ff2c <_dtoa_r+0x954>
 800ff68:	46bb      	mov	fp, r7
 800ff6a:	4637      	mov	r7, r6
 800ff6c:	e599      	b.n	800faa2 <_dtoa_r+0x4ca>
 800ff6e:	bf00      	nop
 800ff70:	40240000 	.word	0x40240000
 800ff74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ff76:	2b00      	cmp	r3, #0
 800ff78:	f000 80c8 	beq.w	801010c <_dtoa_r+0xb34>
 800ff7c:	9b04      	ldr	r3, [sp, #16]
 800ff7e:	9301      	str	r3, [sp, #4]
 800ff80:	2d00      	cmp	r5, #0
 800ff82:	dd05      	ble.n	800ff90 <_dtoa_r+0x9b8>
 800ff84:	4639      	mov	r1, r7
 800ff86:	462a      	mov	r2, r5
 800ff88:	4620      	mov	r0, r4
 800ff8a:	f000 fc27 	bl	80107dc <__lshift>
 800ff8e:	4607      	mov	r7, r0
 800ff90:	f1b8 0f00 	cmp.w	r8, #0
 800ff94:	d05b      	beq.n	801004e <_dtoa_r+0xa76>
 800ff96:	6879      	ldr	r1, [r7, #4]
 800ff98:	4620      	mov	r0, r4
 800ff9a:	f000 fa0f 	bl	80103bc <_Balloc>
 800ff9e:	4605      	mov	r5, r0
 800ffa0:	b928      	cbnz	r0, 800ffae <_dtoa_r+0x9d6>
 800ffa2:	4b83      	ldr	r3, [pc, #524]	; (80101b0 <_dtoa_r+0xbd8>)
 800ffa4:	4602      	mov	r2, r0
 800ffa6:	f240 21ef 	movw	r1, #751	; 0x2ef
 800ffaa:	f7ff bb2e 	b.w	800f60a <_dtoa_r+0x32>
 800ffae:	693a      	ldr	r2, [r7, #16]
 800ffb0:	3202      	adds	r2, #2
 800ffb2:	0092      	lsls	r2, r2, #2
 800ffb4:	f107 010c 	add.w	r1, r7, #12
 800ffb8:	300c      	adds	r0, #12
 800ffba:	f7ff fa74 	bl	800f4a6 <memcpy>
 800ffbe:	2201      	movs	r2, #1
 800ffc0:	4629      	mov	r1, r5
 800ffc2:	4620      	mov	r0, r4
 800ffc4:	f000 fc0a 	bl	80107dc <__lshift>
 800ffc8:	9b00      	ldr	r3, [sp, #0]
 800ffca:	3301      	adds	r3, #1
 800ffcc:	9304      	str	r3, [sp, #16]
 800ffce:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ffd2:	4413      	add	r3, r2
 800ffd4:	9308      	str	r3, [sp, #32]
 800ffd6:	9b02      	ldr	r3, [sp, #8]
 800ffd8:	f003 0301 	and.w	r3, r3, #1
 800ffdc:	46b8      	mov	r8, r7
 800ffde:	9306      	str	r3, [sp, #24]
 800ffe0:	4607      	mov	r7, r0
 800ffe2:	9b04      	ldr	r3, [sp, #16]
 800ffe4:	4631      	mov	r1, r6
 800ffe6:	3b01      	subs	r3, #1
 800ffe8:	4650      	mov	r0, sl
 800ffea:	9301      	str	r3, [sp, #4]
 800ffec:	f7ff fa69 	bl	800f4c2 <quorem>
 800fff0:	4641      	mov	r1, r8
 800fff2:	9002      	str	r0, [sp, #8]
 800fff4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800fff8:	4650      	mov	r0, sl
 800fffa:	f000 fc5b 	bl	80108b4 <__mcmp>
 800fffe:	463a      	mov	r2, r7
 8010000:	9005      	str	r0, [sp, #20]
 8010002:	4631      	mov	r1, r6
 8010004:	4620      	mov	r0, r4
 8010006:	f000 fc71 	bl	80108ec <__mdiff>
 801000a:	68c2      	ldr	r2, [r0, #12]
 801000c:	4605      	mov	r5, r0
 801000e:	bb02      	cbnz	r2, 8010052 <_dtoa_r+0xa7a>
 8010010:	4601      	mov	r1, r0
 8010012:	4650      	mov	r0, sl
 8010014:	f000 fc4e 	bl	80108b4 <__mcmp>
 8010018:	4602      	mov	r2, r0
 801001a:	4629      	mov	r1, r5
 801001c:	4620      	mov	r0, r4
 801001e:	9209      	str	r2, [sp, #36]	; 0x24
 8010020:	f000 fa0c 	bl	801043c <_Bfree>
 8010024:	9b07      	ldr	r3, [sp, #28]
 8010026:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010028:	9d04      	ldr	r5, [sp, #16]
 801002a:	ea43 0102 	orr.w	r1, r3, r2
 801002e:	9b06      	ldr	r3, [sp, #24]
 8010030:	4319      	orrs	r1, r3
 8010032:	d110      	bne.n	8010056 <_dtoa_r+0xa7e>
 8010034:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8010038:	d029      	beq.n	801008e <_dtoa_r+0xab6>
 801003a:	9b05      	ldr	r3, [sp, #20]
 801003c:	2b00      	cmp	r3, #0
 801003e:	dd02      	ble.n	8010046 <_dtoa_r+0xa6e>
 8010040:	9b02      	ldr	r3, [sp, #8]
 8010042:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8010046:	9b01      	ldr	r3, [sp, #4]
 8010048:	f883 9000 	strb.w	r9, [r3]
 801004c:	e774      	b.n	800ff38 <_dtoa_r+0x960>
 801004e:	4638      	mov	r0, r7
 8010050:	e7ba      	b.n	800ffc8 <_dtoa_r+0x9f0>
 8010052:	2201      	movs	r2, #1
 8010054:	e7e1      	b.n	801001a <_dtoa_r+0xa42>
 8010056:	9b05      	ldr	r3, [sp, #20]
 8010058:	2b00      	cmp	r3, #0
 801005a:	db04      	blt.n	8010066 <_dtoa_r+0xa8e>
 801005c:	9907      	ldr	r1, [sp, #28]
 801005e:	430b      	orrs	r3, r1
 8010060:	9906      	ldr	r1, [sp, #24]
 8010062:	430b      	orrs	r3, r1
 8010064:	d120      	bne.n	80100a8 <_dtoa_r+0xad0>
 8010066:	2a00      	cmp	r2, #0
 8010068:	dded      	ble.n	8010046 <_dtoa_r+0xa6e>
 801006a:	4651      	mov	r1, sl
 801006c:	2201      	movs	r2, #1
 801006e:	4620      	mov	r0, r4
 8010070:	f000 fbb4 	bl	80107dc <__lshift>
 8010074:	4631      	mov	r1, r6
 8010076:	4682      	mov	sl, r0
 8010078:	f000 fc1c 	bl	80108b4 <__mcmp>
 801007c:	2800      	cmp	r0, #0
 801007e:	dc03      	bgt.n	8010088 <_dtoa_r+0xab0>
 8010080:	d1e1      	bne.n	8010046 <_dtoa_r+0xa6e>
 8010082:	f019 0f01 	tst.w	r9, #1
 8010086:	d0de      	beq.n	8010046 <_dtoa_r+0xa6e>
 8010088:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 801008c:	d1d8      	bne.n	8010040 <_dtoa_r+0xa68>
 801008e:	9a01      	ldr	r2, [sp, #4]
 8010090:	2339      	movs	r3, #57	; 0x39
 8010092:	7013      	strb	r3, [r2, #0]
 8010094:	462b      	mov	r3, r5
 8010096:	461d      	mov	r5, r3
 8010098:	3b01      	subs	r3, #1
 801009a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801009e:	2a39      	cmp	r2, #57	; 0x39
 80100a0:	d06c      	beq.n	801017c <_dtoa_r+0xba4>
 80100a2:	3201      	adds	r2, #1
 80100a4:	701a      	strb	r2, [r3, #0]
 80100a6:	e747      	b.n	800ff38 <_dtoa_r+0x960>
 80100a8:	2a00      	cmp	r2, #0
 80100aa:	dd07      	ble.n	80100bc <_dtoa_r+0xae4>
 80100ac:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80100b0:	d0ed      	beq.n	801008e <_dtoa_r+0xab6>
 80100b2:	9a01      	ldr	r2, [sp, #4]
 80100b4:	f109 0301 	add.w	r3, r9, #1
 80100b8:	7013      	strb	r3, [r2, #0]
 80100ba:	e73d      	b.n	800ff38 <_dtoa_r+0x960>
 80100bc:	9b04      	ldr	r3, [sp, #16]
 80100be:	9a08      	ldr	r2, [sp, #32]
 80100c0:	f803 9c01 	strb.w	r9, [r3, #-1]
 80100c4:	4293      	cmp	r3, r2
 80100c6:	d043      	beq.n	8010150 <_dtoa_r+0xb78>
 80100c8:	4651      	mov	r1, sl
 80100ca:	2300      	movs	r3, #0
 80100cc:	220a      	movs	r2, #10
 80100ce:	4620      	mov	r0, r4
 80100d0:	f000 f9d6 	bl	8010480 <__multadd>
 80100d4:	45b8      	cmp	r8, r7
 80100d6:	4682      	mov	sl, r0
 80100d8:	f04f 0300 	mov.w	r3, #0
 80100dc:	f04f 020a 	mov.w	r2, #10
 80100e0:	4641      	mov	r1, r8
 80100e2:	4620      	mov	r0, r4
 80100e4:	d107      	bne.n	80100f6 <_dtoa_r+0xb1e>
 80100e6:	f000 f9cb 	bl	8010480 <__multadd>
 80100ea:	4680      	mov	r8, r0
 80100ec:	4607      	mov	r7, r0
 80100ee:	9b04      	ldr	r3, [sp, #16]
 80100f0:	3301      	adds	r3, #1
 80100f2:	9304      	str	r3, [sp, #16]
 80100f4:	e775      	b.n	800ffe2 <_dtoa_r+0xa0a>
 80100f6:	f000 f9c3 	bl	8010480 <__multadd>
 80100fa:	4639      	mov	r1, r7
 80100fc:	4680      	mov	r8, r0
 80100fe:	2300      	movs	r3, #0
 8010100:	220a      	movs	r2, #10
 8010102:	4620      	mov	r0, r4
 8010104:	f000 f9bc 	bl	8010480 <__multadd>
 8010108:	4607      	mov	r7, r0
 801010a:	e7f0      	b.n	80100ee <_dtoa_r+0xb16>
 801010c:	9b04      	ldr	r3, [sp, #16]
 801010e:	9301      	str	r3, [sp, #4]
 8010110:	9d00      	ldr	r5, [sp, #0]
 8010112:	4631      	mov	r1, r6
 8010114:	4650      	mov	r0, sl
 8010116:	f7ff f9d4 	bl	800f4c2 <quorem>
 801011a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 801011e:	9b00      	ldr	r3, [sp, #0]
 8010120:	f805 9b01 	strb.w	r9, [r5], #1
 8010124:	1aea      	subs	r2, r5, r3
 8010126:	9b01      	ldr	r3, [sp, #4]
 8010128:	4293      	cmp	r3, r2
 801012a:	dd07      	ble.n	801013c <_dtoa_r+0xb64>
 801012c:	4651      	mov	r1, sl
 801012e:	2300      	movs	r3, #0
 8010130:	220a      	movs	r2, #10
 8010132:	4620      	mov	r0, r4
 8010134:	f000 f9a4 	bl	8010480 <__multadd>
 8010138:	4682      	mov	sl, r0
 801013a:	e7ea      	b.n	8010112 <_dtoa_r+0xb3a>
 801013c:	9b01      	ldr	r3, [sp, #4]
 801013e:	2b00      	cmp	r3, #0
 8010140:	bfc8      	it	gt
 8010142:	461d      	movgt	r5, r3
 8010144:	9b00      	ldr	r3, [sp, #0]
 8010146:	bfd8      	it	le
 8010148:	2501      	movle	r5, #1
 801014a:	441d      	add	r5, r3
 801014c:	f04f 0800 	mov.w	r8, #0
 8010150:	4651      	mov	r1, sl
 8010152:	2201      	movs	r2, #1
 8010154:	4620      	mov	r0, r4
 8010156:	f000 fb41 	bl	80107dc <__lshift>
 801015a:	4631      	mov	r1, r6
 801015c:	4682      	mov	sl, r0
 801015e:	f000 fba9 	bl	80108b4 <__mcmp>
 8010162:	2800      	cmp	r0, #0
 8010164:	dc96      	bgt.n	8010094 <_dtoa_r+0xabc>
 8010166:	d102      	bne.n	801016e <_dtoa_r+0xb96>
 8010168:	f019 0f01 	tst.w	r9, #1
 801016c:	d192      	bne.n	8010094 <_dtoa_r+0xabc>
 801016e:	462b      	mov	r3, r5
 8010170:	461d      	mov	r5, r3
 8010172:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010176:	2a30      	cmp	r2, #48	; 0x30
 8010178:	d0fa      	beq.n	8010170 <_dtoa_r+0xb98>
 801017a:	e6dd      	b.n	800ff38 <_dtoa_r+0x960>
 801017c:	9a00      	ldr	r2, [sp, #0]
 801017e:	429a      	cmp	r2, r3
 8010180:	d189      	bne.n	8010096 <_dtoa_r+0xabe>
 8010182:	f10b 0b01 	add.w	fp, fp, #1
 8010186:	2331      	movs	r3, #49	; 0x31
 8010188:	e796      	b.n	80100b8 <_dtoa_r+0xae0>
 801018a:	4b0a      	ldr	r3, [pc, #40]	; (80101b4 <_dtoa_r+0xbdc>)
 801018c:	f7ff ba99 	b.w	800f6c2 <_dtoa_r+0xea>
 8010190:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010192:	2b00      	cmp	r3, #0
 8010194:	f47f aa6d 	bne.w	800f672 <_dtoa_r+0x9a>
 8010198:	4b07      	ldr	r3, [pc, #28]	; (80101b8 <_dtoa_r+0xbe0>)
 801019a:	f7ff ba92 	b.w	800f6c2 <_dtoa_r+0xea>
 801019e:	9b01      	ldr	r3, [sp, #4]
 80101a0:	2b00      	cmp	r3, #0
 80101a2:	dcb5      	bgt.n	8010110 <_dtoa_r+0xb38>
 80101a4:	9b07      	ldr	r3, [sp, #28]
 80101a6:	2b02      	cmp	r3, #2
 80101a8:	f73f aeb1 	bgt.w	800ff0e <_dtoa_r+0x936>
 80101ac:	e7b0      	b.n	8010110 <_dtoa_r+0xb38>
 80101ae:	bf00      	nop
 80101b0:	08013228 	.word	0x08013228
 80101b4:	08013188 	.word	0x08013188
 80101b8:	080131ac 	.word	0x080131ac

080101bc <_free_r>:
 80101bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80101be:	2900      	cmp	r1, #0
 80101c0:	d044      	beq.n	801024c <_free_r+0x90>
 80101c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80101c6:	9001      	str	r0, [sp, #4]
 80101c8:	2b00      	cmp	r3, #0
 80101ca:	f1a1 0404 	sub.w	r4, r1, #4
 80101ce:	bfb8      	it	lt
 80101d0:	18e4      	addlt	r4, r4, r3
 80101d2:	f000 f8e7 	bl	80103a4 <__malloc_lock>
 80101d6:	4a1e      	ldr	r2, [pc, #120]	; (8010250 <_free_r+0x94>)
 80101d8:	9801      	ldr	r0, [sp, #4]
 80101da:	6813      	ldr	r3, [r2, #0]
 80101dc:	b933      	cbnz	r3, 80101ec <_free_r+0x30>
 80101de:	6063      	str	r3, [r4, #4]
 80101e0:	6014      	str	r4, [r2, #0]
 80101e2:	b003      	add	sp, #12
 80101e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80101e8:	f000 b8e2 	b.w	80103b0 <__malloc_unlock>
 80101ec:	42a3      	cmp	r3, r4
 80101ee:	d908      	bls.n	8010202 <_free_r+0x46>
 80101f0:	6825      	ldr	r5, [r4, #0]
 80101f2:	1961      	adds	r1, r4, r5
 80101f4:	428b      	cmp	r3, r1
 80101f6:	bf01      	itttt	eq
 80101f8:	6819      	ldreq	r1, [r3, #0]
 80101fa:	685b      	ldreq	r3, [r3, #4]
 80101fc:	1949      	addeq	r1, r1, r5
 80101fe:	6021      	streq	r1, [r4, #0]
 8010200:	e7ed      	b.n	80101de <_free_r+0x22>
 8010202:	461a      	mov	r2, r3
 8010204:	685b      	ldr	r3, [r3, #4]
 8010206:	b10b      	cbz	r3, 801020c <_free_r+0x50>
 8010208:	42a3      	cmp	r3, r4
 801020a:	d9fa      	bls.n	8010202 <_free_r+0x46>
 801020c:	6811      	ldr	r1, [r2, #0]
 801020e:	1855      	adds	r5, r2, r1
 8010210:	42a5      	cmp	r5, r4
 8010212:	d10b      	bne.n	801022c <_free_r+0x70>
 8010214:	6824      	ldr	r4, [r4, #0]
 8010216:	4421      	add	r1, r4
 8010218:	1854      	adds	r4, r2, r1
 801021a:	42a3      	cmp	r3, r4
 801021c:	6011      	str	r1, [r2, #0]
 801021e:	d1e0      	bne.n	80101e2 <_free_r+0x26>
 8010220:	681c      	ldr	r4, [r3, #0]
 8010222:	685b      	ldr	r3, [r3, #4]
 8010224:	6053      	str	r3, [r2, #4]
 8010226:	440c      	add	r4, r1
 8010228:	6014      	str	r4, [r2, #0]
 801022a:	e7da      	b.n	80101e2 <_free_r+0x26>
 801022c:	d902      	bls.n	8010234 <_free_r+0x78>
 801022e:	230c      	movs	r3, #12
 8010230:	6003      	str	r3, [r0, #0]
 8010232:	e7d6      	b.n	80101e2 <_free_r+0x26>
 8010234:	6825      	ldr	r5, [r4, #0]
 8010236:	1961      	adds	r1, r4, r5
 8010238:	428b      	cmp	r3, r1
 801023a:	bf04      	itt	eq
 801023c:	6819      	ldreq	r1, [r3, #0]
 801023e:	685b      	ldreq	r3, [r3, #4]
 8010240:	6063      	str	r3, [r4, #4]
 8010242:	bf04      	itt	eq
 8010244:	1949      	addeq	r1, r1, r5
 8010246:	6021      	streq	r1, [r4, #0]
 8010248:	6054      	str	r4, [r2, #4]
 801024a:	e7ca      	b.n	80101e2 <_free_r+0x26>
 801024c:	b003      	add	sp, #12
 801024e:	bd30      	pop	{r4, r5, pc}
 8010250:	2000636c 	.word	0x2000636c

08010254 <malloc>:
 8010254:	4b02      	ldr	r3, [pc, #8]	; (8010260 <malloc+0xc>)
 8010256:	4601      	mov	r1, r0
 8010258:	6818      	ldr	r0, [r3, #0]
 801025a:	f000 b823 	b.w	80102a4 <_malloc_r>
 801025e:	bf00      	nop
 8010260:	200001e0 	.word	0x200001e0

08010264 <sbrk_aligned>:
 8010264:	b570      	push	{r4, r5, r6, lr}
 8010266:	4e0e      	ldr	r6, [pc, #56]	; (80102a0 <sbrk_aligned+0x3c>)
 8010268:	460c      	mov	r4, r1
 801026a:	6831      	ldr	r1, [r6, #0]
 801026c:	4605      	mov	r5, r0
 801026e:	b911      	cbnz	r1, 8010276 <sbrk_aligned+0x12>
 8010270:	f000 fe40 	bl	8010ef4 <_sbrk_r>
 8010274:	6030      	str	r0, [r6, #0]
 8010276:	4621      	mov	r1, r4
 8010278:	4628      	mov	r0, r5
 801027a:	f000 fe3b 	bl	8010ef4 <_sbrk_r>
 801027e:	1c43      	adds	r3, r0, #1
 8010280:	d00a      	beq.n	8010298 <sbrk_aligned+0x34>
 8010282:	1cc4      	adds	r4, r0, #3
 8010284:	f024 0403 	bic.w	r4, r4, #3
 8010288:	42a0      	cmp	r0, r4
 801028a:	d007      	beq.n	801029c <sbrk_aligned+0x38>
 801028c:	1a21      	subs	r1, r4, r0
 801028e:	4628      	mov	r0, r5
 8010290:	f000 fe30 	bl	8010ef4 <_sbrk_r>
 8010294:	3001      	adds	r0, #1
 8010296:	d101      	bne.n	801029c <sbrk_aligned+0x38>
 8010298:	f04f 34ff 	mov.w	r4, #4294967295
 801029c:	4620      	mov	r0, r4
 801029e:	bd70      	pop	{r4, r5, r6, pc}
 80102a0:	20006370 	.word	0x20006370

080102a4 <_malloc_r>:
 80102a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80102a8:	1ccd      	adds	r5, r1, #3
 80102aa:	f025 0503 	bic.w	r5, r5, #3
 80102ae:	3508      	adds	r5, #8
 80102b0:	2d0c      	cmp	r5, #12
 80102b2:	bf38      	it	cc
 80102b4:	250c      	movcc	r5, #12
 80102b6:	2d00      	cmp	r5, #0
 80102b8:	4607      	mov	r7, r0
 80102ba:	db01      	blt.n	80102c0 <_malloc_r+0x1c>
 80102bc:	42a9      	cmp	r1, r5
 80102be:	d905      	bls.n	80102cc <_malloc_r+0x28>
 80102c0:	230c      	movs	r3, #12
 80102c2:	603b      	str	r3, [r7, #0]
 80102c4:	2600      	movs	r6, #0
 80102c6:	4630      	mov	r0, r6
 80102c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80102cc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80103a0 <_malloc_r+0xfc>
 80102d0:	f000 f868 	bl	80103a4 <__malloc_lock>
 80102d4:	f8d8 3000 	ldr.w	r3, [r8]
 80102d8:	461c      	mov	r4, r3
 80102da:	bb5c      	cbnz	r4, 8010334 <_malloc_r+0x90>
 80102dc:	4629      	mov	r1, r5
 80102de:	4638      	mov	r0, r7
 80102e0:	f7ff ffc0 	bl	8010264 <sbrk_aligned>
 80102e4:	1c43      	adds	r3, r0, #1
 80102e6:	4604      	mov	r4, r0
 80102e8:	d155      	bne.n	8010396 <_malloc_r+0xf2>
 80102ea:	f8d8 4000 	ldr.w	r4, [r8]
 80102ee:	4626      	mov	r6, r4
 80102f0:	2e00      	cmp	r6, #0
 80102f2:	d145      	bne.n	8010380 <_malloc_r+0xdc>
 80102f4:	2c00      	cmp	r4, #0
 80102f6:	d048      	beq.n	801038a <_malloc_r+0xe6>
 80102f8:	6823      	ldr	r3, [r4, #0]
 80102fa:	4631      	mov	r1, r6
 80102fc:	4638      	mov	r0, r7
 80102fe:	eb04 0903 	add.w	r9, r4, r3
 8010302:	f000 fdf7 	bl	8010ef4 <_sbrk_r>
 8010306:	4581      	cmp	r9, r0
 8010308:	d13f      	bne.n	801038a <_malloc_r+0xe6>
 801030a:	6821      	ldr	r1, [r4, #0]
 801030c:	1a6d      	subs	r5, r5, r1
 801030e:	4629      	mov	r1, r5
 8010310:	4638      	mov	r0, r7
 8010312:	f7ff ffa7 	bl	8010264 <sbrk_aligned>
 8010316:	3001      	adds	r0, #1
 8010318:	d037      	beq.n	801038a <_malloc_r+0xe6>
 801031a:	6823      	ldr	r3, [r4, #0]
 801031c:	442b      	add	r3, r5
 801031e:	6023      	str	r3, [r4, #0]
 8010320:	f8d8 3000 	ldr.w	r3, [r8]
 8010324:	2b00      	cmp	r3, #0
 8010326:	d038      	beq.n	801039a <_malloc_r+0xf6>
 8010328:	685a      	ldr	r2, [r3, #4]
 801032a:	42a2      	cmp	r2, r4
 801032c:	d12b      	bne.n	8010386 <_malloc_r+0xe2>
 801032e:	2200      	movs	r2, #0
 8010330:	605a      	str	r2, [r3, #4]
 8010332:	e00f      	b.n	8010354 <_malloc_r+0xb0>
 8010334:	6822      	ldr	r2, [r4, #0]
 8010336:	1b52      	subs	r2, r2, r5
 8010338:	d41f      	bmi.n	801037a <_malloc_r+0xd6>
 801033a:	2a0b      	cmp	r2, #11
 801033c:	d917      	bls.n	801036e <_malloc_r+0xca>
 801033e:	1961      	adds	r1, r4, r5
 8010340:	42a3      	cmp	r3, r4
 8010342:	6025      	str	r5, [r4, #0]
 8010344:	bf18      	it	ne
 8010346:	6059      	strne	r1, [r3, #4]
 8010348:	6863      	ldr	r3, [r4, #4]
 801034a:	bf08      	it	eq
 801034c:	f8c8 1000 	streq.w	r1, [r8]
 8010350:	5162      	str	r2, [r4, r5]
 8010352:	604b      	str	r3, [r1, #4]
 8010354:	4638      	mov	r0, r7
 8010356:	f104 060b 	add.w	r6, r4, #11
 801035a:	f000 f829 	bl	80103b0 <__malloc_unlock>
 801035e:	f026 0607 	bic.w	r6, r6, #7
 8010362:	1d23      	adds	r3, r4, #4
 8010364:	1af2      	subs	r2, r6, r3
 8010366:	d0ae      	beq.n	80102c6 <_malloc_r+0x22>
 8010368:	1b9b      	subs	r3, r3, r6
 801036a:	50a3      	str	r3, [r4, r2]
 801036c:	e7ab      	b.n	80102c6 <_malloc_r+0x22>
 801036e:	42a3      	cmp	r3, r4
 8010370:	6862      	ldr	r2, [r4, #4]
 8010372:	d1dd      	bne.n	8010330 <_malloc_r+0x8c>
 8010374:	f8c8 2000 	str.w	r2, [r8]
 8010378:	e7ec      	b.n	8010354 <_malloc_r+0xb0>
 801037a:	4623      	mov	r3, r4
 801037c:	6864      	ldr	r4, [r4, #4]
 801037e:	e7ac      	b.n	80102da <_malloc_r+0x36>
 8010380:	4634      	mov	r4, r6
 8010382:	6876      	ldr	r6, [r6, #4]
 8010384:	e7b4      	b.n	80102f0 <_malloc_r+0x4c>
 8010386:	4613      	mov	r3, r2
 8010388:	e7cc      	b.n	8010324 <_malloc_r+0x80>
 801038a:	230c      	movs	r3, #12
 801038c:	603b      	str	r3, [r7, #0]
 801038e:	4638      	mov	r0, r7
 8010390:	f000 f80e 	bl	80103b0 <__malloc_unlock>
 8010394:	e797      	b.n	80102c6 <_malloc_r+0x22>
 8010396:	6025      	str	r5, [r4, #0]
 8010398:	e7dc      	b.n	8010354 <_malloc_r+0xb0>
 801039a:	605b      	str	r3, [r3, #4]
 801039c:	deff      	udf	#255	; 0xff
 801039e:	bf00      	nop
 80103a0:	2000636c 	.word	0x2000636c

080103a4 <__malloc_lock>:
 80103a4:	4801      	ldr	r0, [pc, #4]	; (80103ac <__malloc_lock+0x8>)
 80103a6:	f7ff b87c 	b.w	800f4a2 <__retarget_lock_acquire_recursive>
 80103aa:	bf00      	nop
 80103ac:	20006368 	.word	0x20006368

080103b0 <__malloc_unlock>:
 80103b0:	4801      	ldr	r0, [pc, #4]	; (80103b8 <__malloc_unlock+0x8>)
 80103b2:	f7ff b877 	b.w	800f4a4 <__retarget_lock_release_recursive>
 80103b6:	bf00      	nop
 80103b8:	20006368 	.word	0x20006368

080103bc <_Balloc>:
 80103bc:	b570      	push	{r4, r5, r6, lr}
 80103be:	69c6      	ldr	r6, [r0, #28]
 80103c0:	4604      	mov	r4, r0
 80103c2:	460d      	mov	r5, r1
 80103c4:	b976      	cbnz	r6, 80103e4 <_Balloc+0x28>
 80103c6:	2010      	movs	r0, #16
 80103c8:	f7ff ff44 	bl	8010254 <malloc>
 80103cc:	4602      	mov	r2, r0
 80103ce:	61e0      	str	r0, [r4, #28]
 80103d0:	b920      	cbnz	r0, 80103dc <_Balloc+0x20>
 80103d2:	4b18      	ldr	r3, [pc, #96]	; (8010434 <_Balloc+0x78>)
 80103d4:	4818      	ldr	r0, [pc, #96]	; (8010438 <_Balloc+0x7c>)
 80103d6:	216b      	movs	r1, #107	; 0x6b
 80103d8:	f000 fd9c 	bl	8010f14 <__assert_func>
 80103dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80103e0:	6006      	str	r6, [r0, #0]
 80103e2:	60c6      	str	r6, [r0, #12]
 80103e4:	69e6      	ldr	r6, [r4, #28]
 80103e6:	68f3      	ldr	r3, [r6, #12]
 80103e8:	b183      	cbz	r3, 801040c <_Balloc+0x50>
 80103ea:	69e3      	ldr	r3, [r4, #28]
 80103ec:	68db      	ldr	r3, [r3, #12]
 80103ee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80103f2:	b9b8      	cbnz	r0, 8010424 <_Balloc+0x68>
 80103f4:	2101      	movs	r1, #1
 80103f6:	fa01 f605 	lsl.w	r6, r1, r5
 80103fa:	1d72      	adds	r2, r6, #5
 80103fc:	0092      	lsls	r2, r2, #2
 80103fe:	4620      	mov	r0, r4
 8010400:	f000 fda6 	bl	8010f50 <_calloc_r>
 8010404:	b160      	cbz	r0, 8010420 <_Balloc+0x64>
 8010406:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801040a:	e00e      	b.n	801042a <_Balloc+0x6e>
 801040c:	2221      	movs	r2, #33	; 0x21
 801040e:	2104      	movs	r1, #4
 8010410:	4620      	mov	r0, r4
 8010412:	f000 fd9d 	bl	8010f50 <_calloc_r>
 8010416:	69e3      	ldr	r3, [r4, #28]
 8010418:	60f0      	str	r0, [r6, #12]
 801041a:	68db      	ldr	r3, [r3, #12]
 801041c:	2b00      	cmp	r3, #0
 801041e:	d1e4      	bne.n	80103ea <_Balloc+0x2e>
 8010420:	2000      	movs	r0, #0
 8010422:	bd70      	pop	{r4, r5, r6, pc}
 8010424:	6802      	ldr	r2, [r0, #0]
 8010426:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801042a:	2300      	movs	r3, #0
 801042c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010430:	e7f7      	b.n	8010422 <_Balloc+0x66>
 8010432:	bf00      	nop
 8010434:	080131b9 	.word	0x080131b9
 8010438:	08013239 	.word	0x08013239

0801043c <_Bfree>:
 801043c:	b570      	push	{r4, r5, r6, lr}
 801043e:	69c6      	ldr	r6, [r0, #28]
 8010440:	4605      	mov	r5, r0
 8010442:	460c      	mov	r4, r1
 8010444:	b976      	cbnz	r6, 8010464 <_Bfree+0x28>
 8010446:	2010      	movs	r0, #16
 8010448:	f7ff ff04 	bl	8010254 <malloc>
 801044c:	4602      	mov	r2, r0
 801044e:	61e8      	str	r0, [r5, #28]
 8010450:	b920      	cbnz	r0, 801045c <_Bfree+0x20>
 8010452:	4b09      	ldr	r3, [pc, #36]	; (8010478 <_Bfree+0x3c>)
 8010454:	4809      	ldr	r0, [pc, #36]	; (801047c <_Bfree+0x40>)
 8010456:	218f      	movs	r1, #143	; 0x8f
 8010458:	f000 fd5c 	bl	8010f14 <__assert_func>
 801045c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010460:	6006      	str	r6, [r0, #0]
 8010462:	60c6      	str	r6, [r0, #12]
 8010464:	b13c      	cbz	r4, 8010476 <_Bfree+0x3a>
 8010466:	69eb      	ldr	r3, [r5, #28]
 8010468:	6862      	ldr	r2, [r4, #4]
 801046a:	68db      	ldr	r3, [r3, #12]
 801046c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010470:	6021      	str	r1, [r4, #0]
 8010472:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010476:	bd70      	pop	{r4, r5, r6, pc}
 8010478:	080131b9 	.word	0x080131b9
 801047c:	08013239 	.word	0x08013239

08010480 <__multadd>:
 8010480:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010484:	690d      	ldr	r5, [r1, #16]
 8010486:	4607      	mov	r7, r0
 8010488:	460c      	mov	r4, r1
 801048a:	461e      	mov	r6, r3
 801048c:	f101 0c14 	add.w	ip, r1, #20
 8010490:	2000      	movs	r0, #0
 8010492:	f8dc 3000 	ldr.w	r3, [ip]
 8010496:	b299      	uxth	r1, r3
 8010498:	fb02 6101 	mla	r1, r2, r1, r6
 801049c:	0c1e      	lsrs	r6, r3, #16
 801049e:	0c0b      	lsrs	r3, r1, #16
 80104a0:	fb02 3306 	mla	r3, r2, r6, r3
 80104a4:	b289      	uxth	r1, r1
 80104a6:	3001      	adds	r0, #1
 80104a8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80104ac:	4285      	cmp	r5, r0
 80104ae:	f84c 1b04 	str.w	r1, [ip], #4
 80104b2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80104b6:	dcec      	bgt.n	8010492 <__multadd+0x12>
 80104b8:	b30e      	cbz	r6, 80104fe <__multadd+0x7e>
 80104ba:	68a3      	ldr	r3, [r4, #8]
 80104bc:	42ab      	cmp	r3, r5
 80104be:	dc19      	bgt.n	80104f4 <__multadd+0x74>
 80104c0:	6861      	ldr	r1, [r4, #4]
 80104c2:	4638      	mov	r0, r7
 80104c4:	3101      	adds	r1, #1
 80104c6:	f7ff ff79 	bl	80103bc <_Balloc>
 80104ca:	4680      	mov	r8, r0
 80104cc:	b928      	cbnz	r0, 80104da <__multadd+0x5a>
 80104ce:	4602      	mov	r2, r0
 80104d0:	4b0c      	ldr	r3, [pc, #48]	; (8010504 <__multadd+0x84>)
 80104d2:	480d      	ldr	r0, [pc, #52]	; (8010508 <__multadd+0x88>)
 80104d4:	21ba      	movs	r1, #186	; 0xba
 80104d6:	f000 fd1d 	bl	8010f14 <__assert_func>
 80104da:	6922      	ldr	r2, [r4, #16]
 80104dc:	3202      	adds	r2, #2
 80104de:	f104 010c 	add.w	r1, r4, #12
 80104e2:	0092      	lsls	r2, r2, #2
 80104e4:	300c      	adds	r0, #12
 80104e6:	f7fe ffde 	bl	800f4a6 <memcpy>
 80104ea:	4621      	mov	r1, r4
 80104ec:	4638      	mov	r0, r7
 80104ee:	f7ff ffa5 	bl	801043c <_Bfree>
 80104f2:	4644      	mov	r4, r8
 80104f4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80104f8:	3501      	adds	r5, #1
 80104fa:	615e      	str	r6, [r3, #20]
 80104fc:	6125      	str	r5, [r4, #16]
 80104fe:	4620      	mov	r0, r4
 8010500:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010504:	08013228 	.word	0x08013228
 8010508:	08013239 	.word	0x08013239

0801050c <__hi0bits>:
 801050c:	0c03      	lsrs	r3, r0, #16
 801050e:	041b      	lsls	r3, r3, #16
 8010510:	b9d3      	cbnz	r3, 8010548 <__hi0bits+0x3c>
 8010512:	0400      	lsls	r0, r0, #16
 8010514:	2310      	movs	r3, #16
 8010516:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801051a:	bf04      	itt	eq
 801051c:	0200      	lsleq	r0, r0, #8
 801051e:	3308      	addeq	r3, #8
 8010520:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8010524:	bf04      	itt	eq
 8010526:	0100      	lsleq	r0, r0, #4
 8010528:	3304      	addeq	r3, #4
 801052a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801052e:	bf04      	itt	eq
 8010530:	0080      	lsleq	r0, r0, #2
 8010532:	3302      	addeq	r3, #2
 8010534:	2800      	cmp	r0, #0
 8010536:	db05      	blt.n	8010544 <__hi0bits+0x38>
 8010538:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801053c:	f103 0301 	add.w	r3, r3, #1
 8010540:	bf08      	it	eq
 8010542:	2320      	moveq	r3, #32
 8010544:	4618      	mov	r0, r3
 8010546:	4770      	bx	lr
 8010548:	2300      	movs	r3, #0
 801054a:	e7e4      	b.n	8010516 <__hi0bits+0xa>

0801054c <__lo0bits>:
 801054c:	6803      	ldr	r3, [r0, #0]
 801054e:	f013 0207 	ands.w	r2, r3, #7
 8010552:	d00c      	beq.n	801056e <__lo0bits+0x22>
 8010554:	07d9      	lsls	r1, r3, #31
 8010556:	d422      	bmi.n	801059e <__lo0bits+0x52>
 8010558:	079a      	lsls	r2, r3, #30
 801055a:	bf49      	itett	mi
 801055c:	085b      	lsrmi	r3, r3, #1
 801055e:	089b      	lsrpl	r3, r3, #2
 8010560:	6003      	strmi	r3, [r0, #0]
 8010562:	2201      	movmi	r2, #1
 8010564:	bf5c      	itt	pl
 8010566:	6003      	strpl	r3, [r0, #0]
 8010568:	2202      	movpl	r2, #2
 801056a:	4610      	mov	r0, r2
 801056c:	4770      	bx	lr
 801056e:	b299      	uxth	r1, r3
 8010570:	b909      	cbnz	r1, 8010576 <__lo0bits+0x2a>
 8010572:	0c1b      	lsrs	r3, r3, #16
 8010574:	2210      	movs	r2, #16
 8010576:	b2d9      	uxtb	r1, r3
 8010578:	b909      	cbnz	r1, 801057e <__lo0bits+0x32>
 801057a:	3208      	adds	r2, #8
 801057c:	0a1b      	lsrs	r3, r3, #8
 801057e:	0719      	lsls	r1, r3, #28
 8010580:	bf04      	itt	eq
 8010582:	091b      	lsreq	r3, r3, #4
 8010584:	3204      	addeq	r2, #4
 8010586:	0799      	lsls	r1, r3, #30
 8010588:	bf04      	itt	eq
 801058a:	089b      	lsreq	r3, r3, #2
 801058c:	3202      	addeq	r2, #2
 801058e:	07d9      	lsls	r1, r3, #31
 8010590:	d403      	bmi.n	801059a <__lo0bits+0x4e>
 8010592:	085b      	lsrs	r3, r3, #1
 8010594:	f102 0201 	add.w	r2, r2, #1
 8010598:	d003      	beq.n	80105a2 <__lo0bits+0x56>
 801059a:	6003      	str	r3, [r0, #0]
 801059c:	e7e5      	b.n	801056a <__lo0bits+0x1e>
 801059e:	2200      	movs	r2, #0
 80105a0:	e7e3      	b.n	801056a <__lo0bits+0x1e>
 80105a2:	2220      	movs	r2, #32
 80105a4:	e7e1      	b.n	801056a <__lo0bits+0x1e>
	...

080105a8 <__i2b>:
 80105a8:	b510      	push	{r4, lr}
 80105aa:	460c      	mov	r4, r1
 80105ac:	2101      	movs	r1, #1
 80105ae:	f7ff ff05 	bl	80103bc <_Balloc>
 80105b2:	4602      	mov	r2, r0
 80105b4:	b928      	cbnz	r0, 80105c2 <__i2b+0x1a>
 80105b6:	4b05      	ldr	r3, [pc, #20]	; (80105cc <__i2b+0x24>)
 80105b8:	4805      	ldr	r0, [pc, #20]	; (80105d0 <__i2b+0x28>)
 80105ba:	f240 1145 	movw	r1, #325	; 0x145
 80105be:	f000 fca9 	bl	8010f14 <__assert_func>
 80105c2:	2301      	movs	r3, #1
 80105c4:	6144      	str	r4, [r0, #20]
 80105c6:	6103      	str	r3, [r0, #16]
 80105c8:	bd10      	pop	{r4, pc}
 80105ca:	bf00      	nop
 80105cc:	08013228 	.word	0x08013228
 80105d0:	08013239 	.word	0x08013239

080105d4 <__multiply>:
 80105d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80105d8:	4691      	mov	r9, r2
 80105da:	690a      	ldr	r2, [r1, #16]
 80105dc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80105e0:	429a      	cmp	r2, r3
 80105e2:	bfb8      	it	lt
 80105e4:	460b      	movlt	r3, r1
 80105e6:	460c      	mov	r4, r1
 80105e8:	bfbc      	itt	lt
 80105ea:	464c      	movlt	r4, r9
 80105ec:	4699      	movlt	r9, r3
 80105ee:	6927      	ldr	r7, [r4, #16]
 80105f0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80105f4:	68a3      	ldr	r3, [r4, #8]
 80105f6:	6861      	ldr	r1, [r4, #4]
 80105f8:	eb07 060a 	add.w	r6, r7, sl
 80105fc:	42b3      	cmp	r3, r6
 80105fe:	b085      	sub	sp, #20
 8010600:	bfb8      	it	lt
 8010602:	3101      	addlt	r1, #1
 8010604:	f7ff feda 	bl	80103bc <_Balloc>
 8010608:	b930      	cbnz	r0, 8010618 <__multiply+0x44>
 801060a:	4602      	mov	r2, r0
 801060c:	4b44      	ldr	r3, [pc, #272]	; (8010720 <__multiply+0x14c>)
 801060e:	4845      	ldr	r0, [pc, #276]	; (8010724 <__multiply+0x150>)
 8010610:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8010614:	f000 fc7e 	bl	8010f14 <__assert_func>
 8010618:	f100 0514 	add.w	r5, r0, #20
 801061c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8010620:	462b      	mov	r3, r5
 8010622:	2200      	movs	r2, #0
 8010624:	4543      	cmp	r3, r8
 8010626:	d321      	bcc.n	801066c <__multiply+0x98>
 8010628:	f104 0314 	add.w	r3, r4, #20
 801062c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8010630:	f109 0314 	add.w	r3, r9, #20
 8010634:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8010638:	9202      	str	r2, [sp, #8]
 801063a:	1b3a      	subs	r2, r7, r4
 801063c:	3a15      	subs	r2, #21
 801063e:	f022 0203 	bic.w	r2, r2, #3
 8010642:	3204      	adds	r2, #4
 8010644:	f104 0115 	add.w	r1, r4, #21
 8010648:	428f      	cmp	r7, r1
 801064a:	bf38      	it	cc
 801064c:	2204      	movcc	r2, #4
 801064e:	9201      	str	r2, [sp, #4]
 8010650:	9a02      	ldr	r2, [sp, #8]
 8010652:	9303      	str	r3, [sp, #12]
 8010654:	429a      	cmp	r2, r3
 8010656:	d80c      	bhi.n	8010672 <__multiply+0x9e>
 8010658:	2e00      	cmp	r6, #0
 801065a:	dd03      	ble.n	8010664 <__multiply+0x90>
 801065c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010660:	2b00      	cmp	r3, #0
 8010662:	d05b      	beq.n	801071c <__multiply+0x148>
 8010664:	6106      	str	r6, [r0, #16]
 8010666:	b005      	add	sp, #20
 8010668:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801066c:	f843 2b04 	str.w	r2, [r3], #4
 8010670:	e7d8      	b.n	8010624 <__multiply+0x50>
 8010672:	f8b3 a000 	ldrh.w	sl, [r3]
 8010676:	f1ba 0f00 	cmp.w	sl, #0
 801067a:	d024      	beq.n	80106c6 <__multiply+0xf2>
 801067c:	f104 0e14 	add.w	lr, r4, #20
 8010680:	46a9      	mov	r9, r5
 8010682:	f04f 0c00 	mov.w	ip, #0
 8010686:	f85e 2b04 	ldr.w	r2, [lr], #4
 801068a:	f8d9 1000 	ldr.w	r1, [r9]
 801068e:	fa1f fb82 	uxth.w	fp, r2
 8010692:	b289      	uxth	r1, r1
 8010694:	fb0a 110b 	mla	r1, sl, fp, r1
 8010698:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801069c:	f8d9 2000 	ldr.w	r2, [r9]
 80106a0:	4461      	add	r1, ip
 80106a2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80106a6:	fb0a c20b 	mla	r2, sl, fp, ip
 80106aa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80106ae:	b289      	uxth	r1, r1
 80106b0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80106b4:	4577      	cmp	r7, lr
 80106b6:	f849 1b04 	str.w	r1, [r9], #4
 80106ba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80106be:	d8e2      	bhi.n	8010686 <__multiply+0xb2>
 80106c0:	9a01      	ldr	r2, [sp, #4]
 80106c2:	f845 c002 	str.w	ip, [r5, r2]
 80106c6:	9a03      	ldr	r2, [sp, #12]
 80106c8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80106cc:	3304      	adds	r3, #4
 80106ce:	f1b9 0f00 	cmp.w	r9, #0
 80106d2:	d021      	beq.n	8010718 <__multiply+0x144>
 80106d4:	6829      	ldr	r1, [r5, #0]
 80106d6:	f104 0c14 	add.w	ip, r4, #20
 80106da:	46ae      	mov	lr, r5
 80106dc:	f04f 0a00 	mov.w	sl, #0
 80106e0:	f8bc b000 	ldrh.w	fp, [ip]
 80106e4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80106e8:	fb09 220b 	mla	r2, r9, fp, r2
 80106ec:	4452      	add	r2, sl
 80106ee:	b289      	uxth	r1, r1
 80106f0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80106f4:	f84e 1b04 	str.w	r1, [lr], #4
 80106f8:	f85c 1b04 	ldr.w	r1, [ip], #4
 80106fc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8010700:	f8be 1000 	ldrh.w	r1, [lr]
 8010704:	fb09 110a 	mla	r1, r9, sl, r1
 8010708:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 801070c:	4567      	cmp	r7, ip
 801070e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8010712:	d8e5      	bhi.n	80106e0 <__multiply+0x10c>
 8010714:	9a01      	ldr	r2, [sp, #4]
 8010716:	50a9      	str	r1, [r5, r2]
 8010718:	3504      	adds	r5, #4
 801071a:	e799      	b.n	8010650 <__multiply+0x7c>
 801071c:	3e01      	subs	r6, #1
 801071e:	e79b      	b.n	8010658 <__multiply+0x84>
 8010720:	08013228 	.word	0x08013228
 8010724:	08013239 	.word	0x08013239

08010728 <__pow5mult>:
 8010728:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801072c:	4615      	mov	r5, r2
 801072e:	f012 0203 	ands.w	r2, r2, #3
 8010732:	4606      	mov	r6, r0
 8010734:	460f      	mov	r7, r1
 8010736:	d007      	beq.n	8010748 <__pow5mult+0x20>
 8010738:	4c25      	ldr	r4, [pc, #148]	; (80107d0 <__pow5mult+0xa8>)
 801073a:	3a01      	subs	r2, #1
 801073c:	2300      	movs	r3, #0
 801073e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010742:	f7ff fe9d 	bl	8010480 <__multadd>
 8010746:	4607      	mov	r7, r0
 8010748:	10ad      	asrs	r5, r5, #2
 801074a:	d03d      	beq.n	80107c8 <__pow5mult+0xa0>
 801074c:	69f4      	ldr	r4, [r6, #28]
 801074e:	b97c      	cbnz	r4, 8010770 <__pow5mult+0x48>
 8010750:	2010      	movs	r0, #16
 8010752:	f7ff fd7f 	bl	8010254 <malloc>
 8010756:	4602      	mov	r2, r0
 8010758:	61f0      	str	r0, [r6, #28]
 801075a:	b928      	cbnz	r0, 8010768 <__pow5mult+0x40>
 801075c:	4b1d      	ldr	r3, [pc, #116]	; (80107d4 <__pow5mult+0xac>)
 801075e:	481e      	ldr	r0, [pc, #120]	; (80107d8 <__pow5mult+0xb0>)
 8010760:	f240 11b3 	movw	r1, #435	; 0x1b3
 8010764:	f000 fbd6 	bl	8010f14 <__assert_func>
 8010768:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801076c:	6004      	str	r4, [r0, #0]
 801076e:	60c4      	str	r4, [r0, #12]
 8010770:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8010774:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010778:	b94c      	cbnz	r4, 801078e <__pow5mult+0x66>
 801077a:	f240 2171 	movw	r1, #625	; 0x271
 801077e:	4630      	mov	r0, r6
 8010780:	f7ff ff12 	bl	80105a8 <__i2b>
 8010784:	2300      	movs	r3, #0
 8010786:	f8c8 0008 	str.w	r0, [r8, #8]
 801078a:	4604      	mov	r4, r0
 801078c:	6003      	str	r3, [r0, #0]
 801078e:	f04f 0900 	mov.w	r9, #0
 8010792:	07eb      	lsls	r3, r5, #31
 8010794:	d50a      	bpl.n	80107ac <__pow5mult+0x84>
 8010796:	4639      	mov	r1, r7
 8010798:	4622      	mov	r2, r4
 801079a:	4630      	mov	r0, r6
 801079c:	f7ff ff1a 	bl	80105d4 <__multiply>
 80107a0:	4639      	mov	r1, r7
 80107a2:	4680      	mov	r8, r0
 80107a4:	4630      	mov	r0, r6
 80107a6:	f7ff fe49 	bl	801043c <_Bfree>
 80107aa:	4647      	mov	r7, r8
 80107ac:	106d      	asrs	r5, r5, #1
 80107ae:	d00b      	beq.n	80107c8 <__pow5mult+0xa0>
 80107b0:	6820      	ldr	r0, [r4, #0]
 80107b2:	b938      	cbnz	r0, 80107c4 <__pow5mult+0x9c>
 80107b4:	4622      	mov	r2, r4
 80107b6:	4621      	mov	r1, r4
 80107b8:	4630      	mov	r0, r6
 80107ba:	f7ff ff0b 	bl	80105d4 <__multiply>
 80107be:	6020      	str	r0, [r4, #0]
 80107c0:	f8c0 9000 	str.w	r9, [r0]
 80107c4:	4604      	mov	r4, r0
 80107c6:	e7e4      	b.n	8010792 <__pow5mult+0x6a>
 80107c8:	4638      	mov	r0, r7
 80107ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80107ce:	bf00      	nop
 80107d0:	08013388 	.word	0x08013388
 80107d4:	080131b9 	.word	0x080131b9
 80107d8:	08013239 	.word	0x08013239

080107dc <__lshift>:
 80107dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80107e0:	460c      	mov	r4, r1
 80107e2:	6849      	ldr	r1, [r1, #4]
 80107e4:	6923      	ldr	r3, [r4, #16]
 80107e6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80107ea:	68a3      	ldr	r3, [r4, #8]
 80107ec:	4607      	mov	r7, r0
 80107ee:	4691      	mov	r9, r2
 80107f0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80107f4:	f108 0601 	add.w	r6, r8, #1
 80107f8:	42b3      	cmp	r3, r6
 80107fa:	db0b      	blt.n	8010814 <__lshift+0x38>
 80107fc:	4638      	mov	r0, r7
 80107fe:	f7ff fddd 	bl	80103bc <_Balloc>
 8010802:	4605      	mov	r5, r0
 8010804:	b948      	cbnz	r0, 801081a <__lshift+0x3e>
 8010806:	4602      	mov	r2, r0
 8010808:	4b28      	ldr	r3, [pc, #160]	; (80108ac <__lshift+0xd0>)
 801080a:	4829      	ldr	r0, [pc, #164]	; (80108b0 <__lshift+0xd4>)
 801080c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8010810:	f000 fb80 	bl	8010f14 <__assert_func>
 8010814:	3101      	adds	r1, #1
 8010816:	005b      	lsls	r3, r3, #1
 8010818:	e7ee      	b.n	80107f8 <__lshift+0x1c>
 801081a:	2300      	movs	r3, #0
 801081c:	f100 0114 	add.w	r1, r0, #20
 8010820:	f100 0210 	add.w	r2, r0, #16
 8010824:	4618      	mov	r0, r3
 8010826:	4553      	cmp	r3, sl
 8010828:	db33      	blt.n	8010892 <__lshift+0xb6>
 801082a:	6920      	ldr	r0, [r4, #16]
 801082c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010830:	f104 0314 	add.w	r3, r4, #20
 8010834:	f019 091f 	ands.w	r9, r9, #31
 8010838:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801083c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010840:	d02b      	beq.n	801089a <__lshift+0xbe>
 8010842:	f1c9 0e20 	rsb	lr, r9, #32
 8010846:	468a      	mov	sl, r1
 8010848:	2200      	movs	r2, #0
 801084a:	6818      	ldr	r0, [r3, #0]
 801084c:	fa00 f009 	lsl.w	r0, r0, r9
 8010850:	4310      	orrs	r0, r2
 8010852:	f84a 0b04 	str.w	r0, [sl], #4
 8010856:	f853 2b04 	ldr.w	r2, [r3], #4
 801085a:	459c      	cmp	ip, r3
 801085c:	fa22 f20e 	lsr.w	r2, r2, lr
 8010860:	d8f3      	bhi.n	801084a <__lshift+0x6e>
 8010862:	ebac 0304 	sub.w	r3, ip, r4
 8010866:	3b15      	subs	r3, #21
 8010868:	f023 0303 	bic.w	r3, r3, #3
 801086c:	3304      	adds	r3, #4
 801086e:	f104 0015 	add.w	r0, r4, #21
 8010872:	4584      	cmp	ip, r0
 8010874:	bf38      	it	cc
 8010876:	2304      	movcc	r3, #4
 8010878:	50ca      	str	r2, [r1, r3]
 801087a:	b10a      	cbz	r2, 8010880 <__lshift+0xa4>
 801087c:	f108 0602 	add.w	r6, r8, #2
 8010880:	3e01      	subs	r6, #1
 8010882:	4638      	mov	r0, r7
 8010884:	612e      	str	r6, [r5, #16]
 8010886:	4621      	mov	r1, r4
 8010888:	f7ff fdd8 	bl	801043c <_Bfree>
 801088c:	4628      	mov	r0, r5
 801088e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010892:	f842 0f04 	str.w	r0, [r2, #4]!
 8010896:	3301      	adds	r3, #1
 8010898:	e7c5      	b.n	8010826 <__lshift+0x4a>
 801089a:	3904      	subs	r1, #4
 801089c:	f853 2b04 	ldr.w	r2, [r3], #4
 80108a0:	f841 2f04 	str.w	r2, [r1, #4]!
 80108a4:	459c      	cmp	ip, r3
 80108a6:	d8f9      	bhi.n	801089c <__lshift+0xc0>
 80108a8:	e7ea      	b.n	8010880 <__lshift+0xa4>
 80108aa:	bf00      	nop
 80108ac:	08013228 	.word	0x08013228
 80108b0:	08013239 	.word	0x08013239

080108b4 <__mcmp>:
 80108b4:	b530      	push	{r4, r5, lr}
 80108b6:	6902      	ldr	r2, [r0, #16]
 80108b8:	690c      	ldr	r4, [r1, #16]
 80108ba:	1b12      	subs	r2, r2, r4
 80108bc:	d10e      	bne.n	80108dc <__mcmp+0x28>
 80108be:	f100 0314 	add.w	r3, r0, #20
 80108c2:	3114      	adds	r1, #20
 80108c4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80108c8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80108cc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80108d0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80108d4:	42a5      	cmp	r5, r4
 80108d6:	d003      	beq.n	80108e0 <__mcmp+0x2c>
 80108d8:	d305      	bcc.n	80108e6 <__mcmp+0x32>
 80108da:	2201      	movs	r2, #1
 80108dc:	4610      	mov	r0, r2
 80108de:	bd30      	pop	{r4, r5, pc}
 80108e0:	4283      	cmp	r3, r0
 80108e2:	d3f3      	bcc.n	80108cc <__mcmp+0x18>
 80108e4:	e7fa      	b.n	80108dc <__mcmp+0x28>
 80108e6:	f04f 32ff 	mov.w	r2, #4294967295
 80108ea:	e7f7      	b.n	80108dc <__mcmp+0x28>

080108ec <__mdiff>:
 80108ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108f0:	460c      	mov	r4, r1
 80108f2:	4606      	mov	r6, r0
 80108f4:	4611      	mov	r1, r2
 80108f6:	4620      	mov	r0, r4
 80108f8:	4690      	mov	r8, r2
 80108fa:	f7ff ffdb 	bl	80108b4 <__mcmp>
 80108fe:	1e05      	subs	r5, r0, #0
 8010900:	d110      	bne.n	8010924 <__mdiff+0x38>
 8010902:	4629      	mov	r1, r5
 8010904:	4630      	mov	r0, r6
 8010906:	f7ff fd59 	bl	80103bc <_Balloc>
 801090a:	b930      	cbnz	r0, 801091a <__mdiff+0x2e>
 801090c:	4b3a      	ldr	r3, [pc, #232]	; (80109f8 <__mdiff+0x10c>)
 801090e:	4602      	mov	r2, r0
 8010910:	f240 2137 	movw	r1, #567	; 0x237
 8010914:	4839      	ldr	r0, [pc, #228]	; (80109fc <__mdiff+0x110>)
 8010916:	f000 fafd 	bl	8010f14 <__assert_func>
 801091a:	2301      	movs	r3, #1
 801091c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010920:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010924:	bfa4      	itt	ge
 8010926:	4643      	movge	r3, r8
 8010928:	46a0      	movge	r8, r4
 801092a:	4630      	mov	r0, r6
 801092c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8010930:	bfa6      	itte	ge
 8010932:	461c      	movge	r4, r3
 8010934:	2500      	movge	r5, #0
 8010936:	2501      	movlt	r5, #1
 8010938:	f7ff fd40 	bl	80103bc <_Balloc>
 801093c:	b920      	cbnz	r0, 8010948 <__mdiff+0x5c>
 801093e:	4b2e      	ldr	r3, [pc, #184]	; (80109f8 <__mdiff+0x10c>)
 8010940:	4602      	mov	r2, r0
 8010942:	f240 2145 	movw	r1, #581	; 0x245
 8010946:	e7e5      	b.n	8010914 <__mdiff+0x28>
 8010948:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801094c:	6926      	ldr	r6, [r4, #16]
 801094e:	60c5      	str	r5, [r0, #12]
 8010950:	f104 0914 	add.w	r9, r4, #20
 8010954:	f108 0514 	add.w	r5, r8, #20
 8010958:	f100 0e14 	add.w	lr, r0, #20
 801095c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8010960:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8010964:	f108 0210 	add.w	r2, r8, #16
 8010968:	46f2      	mov	sl, lr
 801096a:	2100      	movs	r1, #0
 801096c:	f859 3b04 	ldr.w	r3, [r9], #4
 8010970:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8010974:	fa11 f88b 	uxtah	r8, r1, fp
 8010978:	b299      	uxth	r1, r3
 801097a:	0c1b      	lsrs	r3, r3, #16
 801097c:	eba8 0801 	sub.w	r8, r8, r1
 8010980:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8010984:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8010988:	fa1f f888 	uxth.w	r8, r8
 801098c:	1419      	asrs	r1, r3, #16
 801098e:	454e      	cmp	r6, r9
 8010990:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8010994:	f84a 3b04 	str.w	r3, [sl], #4
 8010998:	d8e8      	bhi.n	801096c <__mdiff+0x80>
 801099a:	1b33      	subs	r3, r6, r4
 801099c:	3b15      	subs	r3, #21
 801099e:	f023 0303 	bic.w	r3, r3, #3
 80109a2:	3304      	adds	r3, #4
 80109a4:	3415      	adds	r4, #21
 80109a6:	42a6      	cmp	r6, r4
 80109a8:	bf38      	it	cc
 80109aa:	2304      	movcc	r3, #4
 80109ac:	441d      	add	r5, r3
 80109ae:	4473      	add	r3, lr
 80109b0:	469e      	mov	lr, r3
 80109b2:	462e      	mov	r6, r5
 80109b4:	4566      	cmp	r6, ip
 80109b6:	d30e      	bcc.n	80109d6 <__mdiff+0xea>
 80109b8:	f10c 0203 	add.w	r2, ip, #3
 80109bc:	1b52      	subs	r2, r2, r5
 80109be:	f022 0203 	bic.w	r2, r2, #3
 80109c2:	3d03      	subs	r5, #3
 80109c4:	45ac      	cmp	ip, r5
 80109c6:	bf38      	it	cc
 80109c8:	2200      	movcc	r2, #0
 80109ca:	4413      	add	r3, r2
 80109cc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80109d0:	b17a      	cbz	r2, 80109f2 <__mdiff+0x106>
 80109d2:	6107      	str	r7, [r0, #16]
 80109d4:	e7a4      	b.n	8010920 <__mdiff+0x34>
 80109d6:	f856 8b04 	ldr.w	r8, [r6], #4
 80109da:	fa11 f288 	uxtah	r2, r1, r8
 80109de:	1414      	asrs	r4, r2, #16
 80109e0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80109e4:	b292      	uxth	r2, r2
 80109e6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80109ea:	f84e 2b04 	str.w	r2, [lr], #4
 80109ee:	1421      	asrs	r1, r4, #16
 80109f0:	e7e0      	b.n	80109b4 <__mdiff+0xc8>
 80109f2:	3f01      	subs	r7, #1
 80109f4:	e7ea      	b.n	80109cc <__mdiff+0xe0>
 80109f6:	bf00      	nop
 80109f8:	08013228 	.word	0x08013228
 80109fc:	08013239 	.word	0x08013239

08010a00 <__d2b>:
 8010a00:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010a04:	460f      	mov	r7, r1
 8010a06:	2101      	movs	r1, #1
 8010a08:	ec59 8b10 	vmov	r8, r9, d0
 8010a0c:	4616      	mov	r6, r2
 8010a0e:	f7ff fcd5 	bl	80103bc <_Balloc>
 8010a12:	4604      	mov	r4, r0
 8010a14:	b930      	cbnz	r0, 8010a24 <__d2b+0x24>
 8010a16:	4602      	mov	r2, r0
 8010a18:	4b24      	ldr	r3, [pc, #144]	; (8010aac <__d2b+0xac>)
 8010a1a:	4825      	ldr	r0, [pc, #148]	; (8010ab0 <__d2b+0xb0>)
 8010a1c:	f240 310f 	movw	r1, #783	; 0x30f
 8010a20:	f000 fa78 	bl	8010f14 <__assert_func>
 8010a24:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8010a28:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010a2c:	bb2d      	cbnz	r5, 8010a7a <__d2b+0x7a>
 8010a2e:	9301      	str	r3, [sp, #4]
 8010a30:	f1b8 0300 	subs.w	r3, r8, #0
 8010a34:	d026      	beq.n	8010a84 <__d2b+0x84>
 8010a36:	4668      	mov	r0, sp
 8010a38:	9300      	str	r3, [sp, #0]
 8010a3a:	f7ff fd87 	bl	801054c <__lo0bits>
 8010a3e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8010a42:	b1e8      	cbz	r0, 8010a80 <__d2b+0x80>
 8010a44:	f1c0 0320 	rsb	r3, r0, #32
 8010a48:	fa02 f303 	lsl.w	r3, r2, r3
 8010a4c:	430b      	orrs	r3, r1
 8010a4e:	40c2      	lsrs	r2, r0
 8010a50:	6163      	str	r3, [r4, #20]
 8010a52:	9201      	str	r2, [sp, #4]
 8010a54:	9b01      	ldr	r3, [sp, #4]
 8010a56:	61a3      	str	r3, [r4, #24]
 8010a58:	2b00      	cmp	r3, #0
 8010a5a:	bf14      	ite	ne
 8010a5c:	2202      	movne	r2, #2
 8010a5e:	2201      	moveq	r2, #1
 8010a60:	6122      	str	r2, [r4, #16]
 8010a62:	b1bd      	cbz	r5, 8010a94 <__d2b+0x94>
 8010a64:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8010a68:	4405      	add	r5, r0
 8010a6a:	603d      	str	r5, [r7, #0]
 8010a6c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8010a70:	6030      	str	r0, [r6, #0]
 8010a72:	4620      	mov	r0, r4
 8010a74:	b003      	add	sp, #12
 8010a76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010a7a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010a7e:	e7d6      	b.n	8010a2e <__d2b+0x2e>
 8010a80:	6161      	str	r1, [r4, #20]
 8010a82:	e7e7      	b.n	8010a54 <__d2b+0x54>
 8010a84:	a801      	add	r0, sp, #4
 8010a86:	f7ff fd61 	bl	801054c <__lo0bits>
 8010a8a:	9b01      	ldr	r3, [sp, #4]
 8010a8c:	6163      	str	r3, [r4, #20]
 8010a8e:	3020      	adds	r0, #32
 8010a90:	2201      	movs	r2, #1
 8010a92:	e7e5      	b.n	8010a60 <__d2b+0x60>
 8010a94:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010a98:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8010a9c:	6038      	str	r0, [r7, #0]
 8010a9e:	6918      	ldr	r0, [r3, #16]
 8010aa0:	f7ff fd34 	bl	801050c <__hi0bits>
 8010aa4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010aa8:	e7e2      	b.n	8010a70 <__d2b+0x70>
 8010aaa:	bf00      	nop
 8010aac:	08013228 	.word	0x08013228
 8010ab0:	08013239 	.word	0x08013239

08010ab4 <__ssputs_r>:
 8010ab4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010ab8:	688e      	ldr	r6, [r1, #8]
 8010aba:	461f      	mov	r7, r3
 8010abc:	42be      	cmp	r6, r7
 8010abe:	680b      	ldr	r3, [r1, #0]
 8010ac0:	4682      	mov	sl, r0
 8010ac2:	460c      	mov	r4, r1
 8010ac4:	4690      	mov	r8, r2
 8010ac6:	d82c      	bhi.n	8010b22 <__ssputs_r+0x6e>
 8010ac8:	898a      	ldrh	r2, [r1, #12]
 8010aca:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010ace:	d026      	beq.n	8010b1e <__ssputs_r+0x6a>
 8010ad0:	6965      	ldr	r5, [r4, #20]
 8010ad2:	6909      	ldr	r1, [r1, #16]
 8010ad4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010ad8:	eba3 0901 	sub.w	r9, r3, r1
 8010adc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010ae0:	1c7b      	adds	r3, r7, #1
 8010ae2:	444b      	add	r3, r9
 8010ae4:	106d      	asrs	r5, r5, #1
 8010ae6:	429d      	cmp	r5, r3
 8010ae8:	bf38      	it	cc
 8010aea:	461d      	movcc	r5, r3
 8010aec:	0553      	lsls	r3, r2, #21
 8010aee:	d527      	bpl.n	8010b40 <__ssputs_r+0x8c>
 8010af0:	4629      	mov	r1, r5
 8010af2:	f7ff fbd7 	bl	80102a4 <_malloc_r>
 8010af6:	4606      	mov	r6, r0
 8010af8:	b360      	cbz	r0, 8010b54 <__ssputs_r+0xa0>
 8010afa:	6921      	ldr	r1, [r4, #16]
 8010afc:	464a      	mov	r2, r9
 8010afe:	f7fe fcd2 	bl	800f4a6 <memcpy>
 8010b02:	89a3      	ldrh	r3, [r4, #12]
 8010b04:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010b08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010b0c:	81a3      	strh	r3, [r4, #12]
 8010b0e:	6126      	str	r6, [r4, #16]
 8010b10:	6165      	str	r5, [r4, #20]
 8010b12:	444e      	add	r6, r9
 8010b14:	eba5 0509 	sub.w	r5, r5, r9
 8010b18:	6026      	str	r6, [r4, #0]
 8010b1a:	60a5      	str	r5, [r4, #8]
 8010b1c:	463e      	mov	r6, r7
 8010b1e:	42be      	cmp	r6, r7
 8010b20:	d900      	bls.n	8010b24 <__ssputs_r+0x70>
 8010b22:	463e      	mov	r6, r7
 8010b24:	6820      	ldr	r0, [r4, #0]
 8010b26:	4632      	mov	r2, r6
 8010b28:	4641      	mov	r1, r8
 8010b2a:	f000 f9c9 	bl	8010ec0 <memmove>
 8010b2e:	68a3      	ldr	r3, [r4, #8]
 8010b30:	1b9b      	subs	r3, r3, r6
 8010b32:	60a3      	str	r3, [r4, #8]
 8010b34:	6823      	ldr	r3, [r4, #0]
 8010b36:	4433      	add	r3, r6
 8010b38:	6023      	str	r3, [r4, #0]
 8010b3a:	2000      	movs	r0, #0
 8010b3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010b40:	462a      	mov	r2, r5
 8010b42:	f000 fa2d 	bl	8010fa0 <_realloc_r>
 8010b46:	4606      	mov	r6, r0
 8010b48:	2800      	cmp	r0, #0
 8010b4a:	d1e0      	bne.n	8010b0e <__ssputs_r+0x5a>
 8010b4c:	6921      	ldr	r1, [r4, #16]
 8010b4e:	4650      	mov	r0, sl
 8010b50:	f7ff fb34 	bl	80101bc <_free_r>
 8010b54:	230c      	movs	r3, #12
 8010b56:	f8ca 3000 	str.w	r3, [sl]
 8010b5a:	89a3      	ldrh	r3, [r4, #12]
 8010b5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010b60:	81a3      	strh	r3, [r4, #12]
 8010b62:	f04f 30ff 	mov.w	r0, #4294967295
 8010b66:	e7e9      	b.n	8010b3c <__ssputs_r+0x88>

08010b68 <_svfiprintf_r>:
 8010b68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b6c:	4698      	mov	r8, r3
 8010b6e:	898b      	ldrh	r3, [r1, #12]
 8010b70:	061b      	lsls	r3, r3, #24
 8010b72:	b09d      	sub	sp, #116	; 0x74
 8010b74:	4607      	mov	r7, r0
 8010b76:	460d      	mov	r5, r1
 8010b78:	4614      	mov	r4, r2
 8010b7a:	d50e      	bpl.n	8010b9a <_svfiprintf_r+0x32>
 8010b7c:	690b      	ldr	r3, [r1, #16]
 8010b7e:	b963      	cbnz	r3, 8010b9a <_svfiprintf_r+0x32>
 8010b80:	2140      	movs	r1, #64	; 0x40
 8010b82:	f7ff fb8f 	bl	80102a4 <_malloc_r>
 8010b86:	6028      	str	r0, [r5, #0]
 8010b88:	6128      	str	r0, [r5, #16]
 8010b8a:	b920      	cbnz	r0, 8010b96 <_svfiprintf_r+0x2e>
 8010b8c:	230c      	movs	r3, #12
 8010b8e:	603b      	str	r3, [r7, #0]
 8010b90:	f04f 30ff 	mov.w	r0, #4294967295
 8010b94:	e0d0      	b.n	8010d38 <_svfiprintf_r+0x1d0>
 8010b96:	2340      	movs	r3, #64	; 0x40
 8010b98:	616b      	str	r3, [r5, #20]
 8010b9a:	2300      	movs	r3, #0
 8010b9c:	9309      	str	r3, [sp, #36]	; 0x24
 8010b9e:	2320      	movs	r3, #32
 8010ba0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010ba4:	f8cd 800c 	str.w	r8, [sp, #12]
 8010ba8:	2330      	movs	r3, #48	; 0x30
 8010baa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8010d50 <_svfiprintf_r+0x1e8>
 8010bae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010bb2:	f04f 0901 	mov.w	r9, #1
 8010bb6:	4623      	mov	r3, r4
 8010bb8:	469a      	mov	sl, r3
 8010bba:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010bbe:	b10a      	cbz	r2, 8010bc4 <_svfiprintf_r+0x5c>
 8010bc0:	2a25      	cmp	r2, #37	; 0x25
 8010bc2:	d1f9      	bne.n	8010bb8 <_svfiprintf_r+0x50>
 8010bc4:	ebba 0b04 	subs.w	fp, sl, r4
 8010bc8:	d00b      	beq.n	8010be2 <_svfiprintf_r+0x7a>
 8010bca:	465b      	mov	r3, fp
 8010bcc:	4622      	mov	r2, r4
 8010bce:	4629      	mov	r1, r5
 8010bd0:	4638      	mov	r0, r7
 8010bd2:	f7ff ff6f 	bl	8010ab4 <__ssputs_r>
 8010bd6:	3001      	adds	r0, #1
 8010bd8:	f000 80a9 	beq.w	8010d2e <_svfiprintf_r+0x1c6>
 8010bdc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010bde:	445a      	add	r2, fp
 8010be0:	9209      	str	r2, [sp, #36]	; 0x24
 8010be2:	f89a 3000 	ldrb.w	r3, [sl]
 8010be6:	2b00      	cmp	r3, #0
 8010be8:	f000 80a1 	beq.w	8010d2e <_svfiprintf_r+0x1c6>
 8010bec:	2300      	movs	r3, #0
 8010bee:	f04f 32ff 	mov.w	r2, #4294967295
 8010bf2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010bf6:	f10a 0a01 	add.w	sl, sl, #1
 8010bfa:	9304      	str	r3, [sp, #16]
 8010bfc:	9307      	str	r3, [sp, #28]
 8010bfe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010c02:	931a      	str	r3, [sp, #104]	; 0x68
 8010c04:	4654      	mov	r4, sl
 8010c06:	2205      	movs	r2, #5
 8010c08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010c0c:	4850      	ldr	r0, [pc, #320]	; (8010d50 <_svfiprintf_r+0x1e8>)
 8010c0e:	f7ef faef 	bl	80001f0 <memchr>
 8010c12:	9a04      	ldr	r2, [sp, #16]
 8010c14:	b9d8      	cbnz	r0, 8010c4e <_svfiprintf_r+0xe6>
 8010c16:	06d0      	lsls	r0, r2, #27
 8010c18:	bf44      	itt	mi
 8010c1a:	2320      	movmi	r3, #32
 8010c1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010c20:	0711      	lsls	r1, r2, #28
 8010c22:	bf44      	itt	mi
 8010c24:	232b      	movmi	r3, #43	; 0x2b
 8010c26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010c2a:	f89a 3000 	ldrb.w	r3, [sl]
 8010c2e:	2b2a      	cmp	r3, #42	; 0x2a
 8010c30:	d015      	beq.n	8010c5e <_svfiprintf_r+0xf6>
 8010c32:	9a07      	ldr	r2, [sp, #28]
 8010c34:	4654      	mov	r4, sl
 8010c36:	2000      	movs	r0, #0
 8010c38:	f04f 0c0a 	mov.w	ip, #10
 8010c3c:	4621      	mov	r1, r4
 8010c3e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010c42:	3b30      	subs	r3, #48	; 0x30
 8010c44:	2b09      	cmp	r3, #9
 8010c46:	d94d      	bls.n	8010ce4 <_svfiprintf_r+0x17c>
 8010c48:	b1b0      	cbz	r0, 8010c78 <_svfiprintf_r+0x110>
 8010c4a:	9207      	str	r2, [sp, #28]
 8010c4c:	e014      	b.n	8010c78 <_svfiprintf_r+0x110>
 8010c4e:	eba0 0308 	sub.w	r3, r0, r8
 8010c52:	fa09 f303 	lsl.w	r3, r9, r3
 8010c56:	4313      	orrs	r3, r2
 8010c58:	9304      	str	r3, [sp, #16]
 8010c5a:	46a2      	mov	sl, r4
 8010c5c:	e7d2      	b.n	8010c04 <_svfiprintf_r+0x9c>
 8010c5e:	9b03      	ldr	r3, [sp, #12]
 8010c60:	1d19      	adds	r1, r3, #4
 8010c62:	681b      	ldr	r3, [r3, #0]
 8010c64:	9103      	str	r1, [sp, #12]
 8010c66:	2b00      	cmp	r3, #0
 8010c68:	bfbb      	ittet	lt
 8010c6a:	425b      	neglt	r3, r3
 8010c6c:	f042 0202 	orrlt.w	r2, r2, #2
 8010c70:	9307      	strge	r3, [sp, #28]
 8010c72:	9307      	strlt	r3, [sp, #28]
 8010c74:	bfb8      	it	lt
 8010c76:	9204      	strlt	r2, [sp, #16]
 8010c78:	7823      	ldrb	r3, [r4, #0]
 8010c7a:	2b2e      	cmp	r3, #46	; 0x2e
 8010c7c:	d10c      	bne.n	8010c98 <_svfiprintf_r+0x130>
 8010c7e:	7863      	ldrb	r3, [r4, #1]
 8010c80:	2b2a      	cmp	r3, #42	; 0x2a
 8010c82:	d134      	bne.n	8010cee <_svfiprintf_r+0x186>
 8010c84:	9b03      	ldr	r3, [sp, #12]
 8010c86:	1d1a      	adds	r2, r3, #4
 8010c88:	681b      	ldr	r3, [r3, #0]
 8010c8a:	9203      	str	r2, [sp, #12]
 8010c8c:	2b00      	cmp	r3, #0
 8010c8e:	bfb8      	it	lt
 8010c90:	f04f 33ff 	movlt.w	r3, #4294967295
 8010c94:	3402      	adds	r4, #2
 8010c96:	9305      	str	r3, [sp, #20]
 8010c98:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8010d60 <_svfiprintf_r+0x1f8>
 8010c9c:	7821      	ldrb	r1, [r4, #0]
 8010c9e:	2203      	movs	r2, #3
 8010ca0:	4650      	mov	r0, sl
 8010ca2:	f7ef faa5 	bl	80001f0 <memchr>
 8010ca6:	b138      	cbz	r0, 8010cb8 <_svfiprintf_r+0x150>
 8010ca8:	9b04      	ldr	r3, [sp, #16]
 8010caa:	eba0 000a 	sub.w	r0, r0, sl
 8010cae:	2240      	movs	r2, #64	; 0x40
 8010cb0:	4082      	lsls	r2, r0
 8010cb2:	4313      	orrs	r3, r2
 8010cb4:	3401      	adds	r4, #1
 8010cb6:	9304      	str	r3, [sp, #16]
 8010cb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010cbc:	4825      	ldr	r0, [pc, #148]	; (8010d54 <_svfiprintf_r+0x1ec>)
 8010cbe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010cc2:	2206      	movs	r2, #6
 8010cc4:	f7ef fa94 	bl	80001f0 <memchr>
 8010cc8:	2800      	cmp	r0, #0
 8010cca:	d038      	beq.n	8010d3e <_svfiprintf_r+0x1d6>
 8010ccc:	4b22      	ldr	r3, [pc, #136]	; (8010d58 <_svfiprintf_r+0x1f0>)
 8010cce:	bb1b      	cbnz	r3, 8010d18 <_svfiprintf_r+0x1b0>
 8010cd0:	9b03      	ldr	r3, [sp, #12]
 8010cd2:	3307      	adds	r3, #7
 8010cd4:	f023 0307 	bic.w	r3, r3, #7
 8010cd8:	3308      	adds	r3, #8
 8010cda:	9303      	str	r3, [sp, #12]
 8010cdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010cde:	4433      	add	r3, r6
 8010ce0:	9309      	str	r3, [sp, #36]	; 0x24
 8010ce2:	e768      	b.n	8010bb6 <_svfiprintf_r+0x4e>
 8010ce4:	fb0c 3202 	mla	r2, ip, r2, r3
 8010ce8:	460c      	mov	r4, r1
 8010cea:	2001      	movs	r0, #1
 8010cec:	e7a6      	b.n	8010c3c <_svfiprintf_r+0xd4>
 8010cee:	2300      	movs	r3, #0
 8010cf0:	3401      	adds	r4, #1
 8010cf2:	9305      	str	r3, [sp, #20]
 8010cf4:	4619      	mov	r1, r3
 8010cf6:	f04f 0c0a 	mov.w	ip, #10
 8010cfa:	4620      	mov	r0, r4
 8010cfc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010d00:	3a30      	subs	r2, #48	; 0x30
 8010d02:	2a09      	cmp	r2, #9
 8010d04:	d903      	bls.n	8010d0e <_svfiprintf_r+0x1a6>
 8010d06:	2b00      	cmp	r3, #0
 8010d08:	d0c6      	beq.n	8010c98 <_svfiprintf_r+0x130>
 8010d0a:	9105      	str	r1, [sp, #20]
 8010d0c:	e7c4      	b.n	8010c98 <_svfiprintf_r+0x130>
 8010d0e:	fb0c 2101 	mla	r1, ip, r1, r2
 8010d12:	4604      	mov	r4, r0
 8010d14:	2301      	movs	r3, #1
 8010d16:	e7f0      	b.n	8010cfa <_svfiprintf_r+0x192>
 8010d18:	ab03      	add	r3, sp, #12
 8010d1a:	9300      	str	r3, [sp, #0]
 8010d1c:	462a      	mov	r2, r5
 8010d1e:	4b0f      	ldr	r3, [pc, #60]	; (8010d5c <_svfiprintf_r+0x1f4>)
 8010d20:	a904      	add	r1, sp, #16
 8010d22:	4638      	mov	r0, r7
 8010d24:	f7fd fdfe 	bl	800e924 <_printf_float>
 8010d28:	1c42      	adds	r2, r0, #1
 8010d2a:	4606      	mov	r6, r0
 8010d2c:	d1d6      	bne.n	8010cdc <_svfiprintf_r+0x174>
 8010d2e:	89ab      	ldrh	r3, [r5, #12]
 8010d30:	065b      	lsls	r3, r3, #25
 8010d32:	f53f af2d 	bmi.w	8010b90 <_svfiprintf_r+0x28>
 8010d36:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010d38:	b01d      	add	sp, #116	; 0x74
 8010d3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d3e:	ab03      	add	r3, sp, #12
 8010d40:	9300      	str	r3, [sp, #0]
 8010d42:	462a      	mov	r2, r5
 8010d44:	4b05      	ldr	r3, [pc, #20]	; (8010d5c <_svfiprintf_r+0x1f4>)
 8010d46:	a904      	add	r1, sp, #16
 8010d48:	4638      	mov	r0, r7
 8010d4a:	f7fe f88f 	bl	800ee6c <_printf_i>
 8010d4e:	e7eb      	b.n	8010d28 <_svfiprintf_r+0x1c0>
 8010d50:	08013394 	.word	0x08013394
 8010d54:	0801339e 	.word	0x0801339e
 8010d58:	0800e925 	.word	0x0800e925
 8010d5c:	08010ab5 	.word	0x08010ab5
 8010d60:	0801339a 	.word	0x0801339a

08010d64 <__sflush_r>:
 8010d64:	898a      	ldrh	r2, [r1, #12]
 8010d66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d6a:	4605      	mov	r5, r0
 8010d6c:	0710      	lsls	r0, r2, #28
 8010d6e:	460c      	mov	r4, r1
 8010d70:	d458      	bmi.n	8010e24 <__sflush_r+0xc0>
 8010d72:	684b      	ldr	r3, [r1, #4]
 8010d74:	2b00      	cmp	r3, #0
 8010d76:	dc05      	bgt.n	8010d84 <__sflush_r+0x20>
 8010d78:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010d7a:	2b00      	cmp	r3, #0
 8010d7c:	dc02      	bgt.n	8010d84 <__sflush_r+0x20>
 8010d7e:	2000      	movs	r0, #0
 8010d80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010d84:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010d86:	2e00      	cmp	r6, #0
 8010d88:	d0f9      	beq.n	8010d7e <__sflush_r+0x1a>
 8010d8a:	2300      	movs	r3, #0
 8010d8c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010d90:	682f      	ldr	r7, [r5, #0]
 8010d92:	6a21      	ldr	r1, [r4, #32]
 8010d94:	602b      	str	r3, [r5, #0]
 8010d96:	d032      	beq.n	8010dfe <__sflush_r+0x9a>
 8010d98:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010d9a:	89a3      	ldrh	r3, [r4, #12]
 8010d9c:	075a      	lsls	r2, r3, #29
 8010d9e:	d505      	bpl.n	8010dac <__sflush_r+0x48>
 8010da0:	6863      	ldr	r3, [r4, #4]
 8010da2:	1ac0      	subs	r0, r0, r3
 8010da4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010da6:	b10b      	cbz	r3, 8010dac <__sflush_r+0x48>
 8010da8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010daa:	1ac0      	subs	r0, r0, r3
 8010dac:	2300      	movs	r3, #0
 8010dae:	4602      	mov	r2, r0
 8010db0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010db2:	6a21      	ldr	r1, [r4, #32]
 8010db4:	4628      	mov	r0, r5
 8010db6:	47b0      	blx	r6
 8010db8:	1c43      	adds	r3, r0, #1
 8010dba:	89a3      	ldrh	r3, [r4, #12]
 8010dbc:	d106      	bne.n	8010dcc <__sflush_r+0x68>
 8010dbe:	6829      	ldr	r1, [r5, #0]
 8010dc0:	291d      	cmp	r1, #29
 8010dc2:	d82b      	bhi.n	8010e1c <__sflush_r+0xb8>
 8010dc4:	4a29      	ldr	r2, [pc, #164]	; (8010e6c <__sflush_r+0x108>)
 8010dc6:	410a      	asrs	r2, r1
 8010dc8:	07d6      	lsls	r6, r2, #31
 8010dca:	d427      	bmi.n	8010e1c <__sflush_r+0xb8>
 8010dcc:	2200      	movs	r2, #0
 8010dce:	6062      	str	r2, [r4, #4]
 8010dd0:	04d9      	lsls	r1, r3, #19
 8010dd2:	6922      	ldr	r2, [r4, #16]
 8010dd4:	6022      	str	r2, [r4, #0]
 8010dd6:	d504      	bpl.n	8010de2 <__sflush_r+0x7e>
 8010dd8:	1c42      	adds	r2, r0, #1
 8010dda:	d101      	bne.n	8010de0 <__sflush_r+0x7c>
 8010ddc:	682b      	ldr	r3, [r5, #0]
 8010dde:	b903      	cbnz	r3, 8010de2 <__sflush_r+0x7e>
 8010de0:	6560      	str	r0, [r4, #84]	; 0x54
 8010de2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010de4:	602f      	str	r7, [r5, #0]
 8010de6:	2900      	cmp	r1, #0
 8010de8:	d0c9      	beq.n	8010d7e <__sflush_r+0x1a>
 8010dea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010dee:	4299      	cmp	r1, r3
 8010df0:	d002      	beq.n	8010df8 <__sflush_r+0x94>
 8010df2:	4628      	mov	r0, r5
 8010df4:	f7ff f9e2 	bl	80101bc <_free_r>
 8010df8:	2000      	movs	r0, #0
 8010dfa:	6360      	str	r0, [r4, #52]	; 0x34
 8010dfc:	e7c0      	b.n	8010d80 <__sflush_r+0x1c>
 8010dfe:	2301      	movs	r3, #1
 8010e00:	4628      	mov	r0, r5
 8010e02:	47b0      	blx	r6
 8010e04:	1c41      	adds	r1, r0, #1
 8010e06:	d1c8      	bne.n	8010d9a <__sflush_r+0x36>
 8010e08:	682b      	ldr	r3, [r5, #0]
 8010e0a:	2b00      	cmp	r3, #0
 8010e0c:	d0c5      	beq.n	8010d9a <__sflush_r+0x36>
 8010e0e:	2b1d      	cmp	r3, #29
 8010e10:	d001      	beq.n	8010e16 <__sflush_r+0xb2>
 8010e12:	2b16      	cmp	r3, #22
 8010e14:	d101      	bne.n	8010e1a <__sflush_r+0xb6>
 8010e16:	602f      	str	r7, [r5, #0]
 8010e18:	e7b1      	b.n	8010d7e <__sflush_r+0x1a>
 8010e1a:	89a3      	ldrh	r3, [r4, #12]
 8010e1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010e20:	81a3      	strh	r3, [r4, #12]
 8010e22:	e7ad      	b.n	8010d80 <__sflush_r+0x1c>
 8010e24:	690f      	ldr	r7, [r1, #16]
 8010e26:	2f00      	cmp	r7, #0
 8010e28:	d0a9      	beq.n	8010d7e <__sflush_r+0x1a>
 8010e2a:	0793      	lsls	r3, r2, #30
 8010e2c:	680e      	ldr	r6, [r1, #0]
 8010e2e:	bf08      	it	eq
 8010e30:	694b      	ldreq	r3, [r1, #20]
 8010e32:	600f      	str	r7, [r1, #0]
 8010e34:	bf18      	it	ne
 8010e36:	2300      	movne	r3, #0
 8010e38:	eba6 0807 	sub.w	r8, r6, r7
 8010e3c:	608b      	str	r3, [r1, #8]
 8010e3e:	f1b8 0f00 	cmp.w	r8, #0
 8010e42:	dd9c      	ble.n	8010d7e <__sflush_r+0x1a>
 8010e44:	6a21      	ldr	r1, [r4, #32]
 8010e46:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010e48:	4643      	mov	r3, r8
 8010e4a:	463a      	mov	r2, r7
 8010e4c:	4628      	mov	r0, r5
 8010e4e:	47b0      	blx	r6
 8010e50:	2800      	cmp	r0, #0
 8010e52:	dc06      	bgt.n	8010e62 <__sflush_r+0xfe>
 8010e54:	89a3      	ldrh	r3, [r4, #12]
 8010e56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010e5a:	81a3      	strh	r3, [r4, #12]
 8010e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8010e60:	e78e      	b.n	8010d80 <__sflush_r+0x1c>
 8010e62:	4407      	add	r7, r0
 8010e64:	eba8 0800 	sub.w	r8, r8, r0
 8010e68:	e7e9      	b.n	8010e3e <__sflush_r+0xda>
 8010e6a:	bf00      	nop
 8010e6c:	dfbffffe 	.word	0xdfbffffe

08010e70 <_fflush_r>:
 8010e70:	b538      	push	{r3, r4, r5, lr}
 8010e72:	690b      	ldr	r3, [r1, #16]
 8010e74:	4605      	mov	r5, r0
 8010e76:	460c      	mov	r4, r1
 8010e78:	b913      	cbnz	r3, 8010e80 <_fflush_r+0x10>
 8010e7a:	2500      	movs	r5, #0
 8010e7c:	4628      	mov	r0, r5
 8010e7e:	bd38      	pop	{r3, r4, r5, pc}
 8010e80:	b118      	cbz	r0, 8010e8a <_fflush_r+0x1a>
 8010e82:	6a03      	ldr	r3, [r0, #32]
 8010e84:	b90b      	cbnz	r3, 8010e8a <_fflush_r+0x1a>
 8010e86:	f7fe f99f 	bl	800f1c8 <__sinit>
 8010e8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010e8e:	2b00      	cmp	r3, #0
 8010e90:	d0f3      	beq.n	8010e7a <_fflush_r+0xa>
 8010e92:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010e94:	07d0      	lsls	r0, r2, #31
 8010e96:	d404      	bmi.n	8010ea2 <_fflush_r+0x32>
 8010e98:	0599      	lsls	r1, r3, #22
 8010e9a:	d402      	bmi.n	8010ea2 <_fflush_r+0x32>
 8010e9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010e9e:	f7fe fb00 	bl	800f4a2 <__retarget_lock_acquire_recursive>
 8010ea2:	4628      	mov	r0, r5
 8010ea4:	4621      	mov	r1, r4
 8010ea6:	f7ff ff5d 	bl	8010d64 <__sflush_r>
 8010eaa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010eac:	07da      	lsls	r2, r3, #31
 8010eae:	4605      	mov	r5, r0
 8010eb0:	d4e4      	bmi.n	8010e7c <_fflush_r+0xc>
 8010eb2:	89a3      	ldrh	r3, [r4, #12]
 8010eb4:	059b      	lsls	r3, r3, #22
 8010eb6:	d4e1      	bmi.n	8010e7c <_fflush_r+0xc>
 8010eb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010eba:	f7fe faf3 	bl	800f4a4 <__retarget_lock_release_recursive>
 8010ebe:	e7dd      	b.n	8010e7c <_fflush_r+0xc>

08010ec0 <memmove>:
 8010ec0:	4288      	cmp	r0, r1
 8010ec2:	b510      	push	{r4, lr}
 8010ec4:	eb01 0402 	add.w	r4, r1, r2
 8010ec8:	d902      	bls.n	8010ed0 <memmove+0x10>
 8010eca:	4284      	cmp	r4, r0
 8010ecc:	4623      	mov	r3, r4
 8010ece:	d807      	bhi.n	8010ee0 <memmove+0x20>
 8010ed0:	1e43      	subs	r3, r0, #1
 8010ed2:	42a1      	cmp	r1, r4
 8010ed4:	d008      	beq.n	8010ee8 <memmove+0x28>
 8010ed6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010eda:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010ede:	e7f8      	b.n	8010ed2 <memmove+0x12>
 8010ee0:	4402      	add	r2, r0
 8010ee2:	4601      	mov	r1, r0
 8010ee4:	428a      	cmp	r2, r1
 8010ee6:	d100      	bne.n	8010eea <memmove+0x2a>
 8010ee8:	bd10      	pop	{r4, pc}
 8010eea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010eee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010ef2:	e7f7      	b.n	8010ee4 <memmove+0x24>

08010ef4 <_sbrk_r>:
 8010ef4:	b538      	push	{r3, r4, r5, lr}
 8010ef6:	4d06      	ldr	r5, [pc, #24]	; (8010f10 <_sbrk_r+0x1c>)
 8010ef8:	2300      	movs	r3, #0
 8010efa:	4604      	mov	r4, r0
 8010efc:	4608      	mov	r0, r1
 8010efe:	602b      	str	r3, [r5, #0]
 8010f00:	f7f0 fbfa 	bl	80016f8 <_sbrk>
 8010f04:	1c43      	adds	r3, r0, #1
 8010f06:	d102      	bne.n	8010f0e <_sbrk_r+0x1a>
 8010f08:	682b      	ldr	r3, [r5, #0]
 8010f0a:	b103      	cbz	r3, 8010f0e <_sbrk_r+0x1a>
 8010f0c:	6023      	str	r3, [r4, #0]
 8010f0e:	bd38      	pop	{r3, r4, r5, pc}
 8010f10:	20006364 	.word	0x20006364

08010f14 <__assert_func>:
 8010f14:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010f16:	4614      	mov	r4, r2
 8010f18:	461a      	mov	r2, r3
 8010f1a:	4b09      	ldr	r3, [pc, #36]	; (8010f40 <__assert_func+0x2c>)
 8010f1c:	681b      	ldr	r3, [r3, #0]
 8010f1e:	4605      	mov	r5, r0
 8010f20:	68d8      	ldr	r0, [r3, #12]
 8010f22:	b14c      	cbz	r4, 8010f38 <__assert_func+0x24>
 8010f24:	4b07      	ldr	r3, [pc, #28]	; (8010f44 <__assert_func+0x30>)
 8010f26:	9100      	str	r1, [sp, #0]
 8010f28:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010f2c:	4906      	ldr	r1, [pc, #24]	; (8010f48 <__assert_func+0x34>)
 8010f2e:	462b      	mov	r3, r5
 8010f30:	f000 f872 	bl	8011018 <fiprintf>
 8010f34:	f000 f882 	bl	801103c <abort>
 8010f38:	4b04      	ldr	r3, [pc, #16]	; (8010f4c <__assert_func+0x38>)
 8010f3a:	461c      	mov	r4, r3
 8010f3c:	e7f3      	b.n	8010f26 <__assert_func+0x12>
 8010f3e:	bf00      	nop
 8010f40:	200001e0 	.word	0x200001e0
 8010f44:	080133af 	.word	0x080133af
 8010f48:	080133bc 	.word	0x080133bc
 8010f4c:	080133ea 	.word	0x080133ea

08010f50 <_calloc_r>:
 8010f50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010f52:	fba1 2402 	umull	r2, r4, r1, r2
 8010f56:	b94c      	cbnz	r4, 8010f6c <_calloc_r+0x1c>
 8010f58:	4611      	mov	r1, r2
 8010f5a:	9201      	str	r2, [sp, #4]
 8010f5c:	f7ff f9a2 	bl	80102a4 <_malloc_r>
 8010f60:	9a01      	ldr	r2, [sp, #4]
 8010f62:	4605      	mov	r5, r0
 8010f64:	b930      	cbnz	r0, 8010f74 <_calloc_r+0x24>
 8010f66:	4628      	mov	r0, r5
 8010f68:	b003      	add	sp, #12
 8010f6a:	bd30      	pop	{r4, r5, pc}
 8010f6c:	220c      	movs	r2, #12
 8010f6e:	6002      	str	r2, [r0, #0]
 8010f70:	2500      	movs	r5, #0
 8010f72:	e7f8      	b.n	8010f66 <_calloc_r+0x16>
 8010f74:	4621      	mov	r1, r4
 8010f76:	f7fe f9c0 	bl	800f2fa <memset>
 8010f7a:	e7f4      	b.n	8010f66 <_calloc_r+0x16>

08010f7c <__ascii_mbtowc>:
 8010f7c:	b082      	sub	sp, #8
 8010f7e:	b901      	cbnz	r1, 8010f82 <__ascii_mbtowc+0x6>
 8010f80:	a901      	add	r1, sp, #4
 8010f82:	b142      	cbz	r2, 8010f96 <__ascii_mbtowc+0x1a>
 8010f84:	b14b      	cbz	r3, 8010f9a <__ascii_mbtowc+0x1e>
 8010f86:	7813      	ldrb	r3, [r2, #0]
 8010f88:	600b      	str	r3, [r1, #0]
 8010f8a:	7812      	ldrb	r2, [r2, #0]
 8010f8c:	1e10      	subs	r0, r2, #0
 8010f8e:	bf18      	it	ne
 8010f90:	2001      	movne	r0, #1
 8010f92:	b002      	add	sp, #8
 8010f94:	4770      	bx	lr
 8010f96:	4610      	mov	r0, r2
 8010f98:	e7fb      	b.n	8010f92 <__ascii_mbtowc+0x16>
 8010f9a:	f06f 0001 	mvn.w	r0, #1
 8010f9e:	e7f8      	b.n	8010f92 <__ascii_mbtowc+0x16>

08010fa0 <_realloc_r>:
 8010fa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010fa4:	4680      	mov	r8, r0
 8010fa6:	4614      	mov	r4, r2
 8010fa8:	460e      	mov	r6, r1
 8010faa:	b921      	cbnz	r1, 8010fb6 <_realloc_r+0x16>
 8010fac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010fb0:	4611      	mov	r1, r2
 8010fb2:	f7ff b977 	b.w	80102a4 <_malloc_r>
 8010fb6:	b92a      	cbnz	r2, 8010fc4 <_realloc_r+0x24>
 8010fb8:	f7ff f900 	bl	80101bc <_free_r>
 8010fbc:	4625      	mov	r5, r4
 8010fbe:	4628      	mov	r0, r5
 8010fc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010fc4:	f000 f841 	bl	801104a <_malloc_usable_size_r>
 8010fc8:	4284      	cmp	r4, r0
 8010fca:	4607      	mov	r7, r0
 8010fcc:	d802      	bhi.n	8010fd4 <_realloc_r+0x34>
 8010fce:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010fd2:	d812      	bhi.n	8010ffa <_realloc_r+0x5a>
 8010fd4:	4621      	mov	r1, r4
 8010fd6:	4640      	mov	r0, r8
 8010fd8:	f7ff f964 	bl	80102a4 <_malloc_r>
 8010fdc:	4605      	mov	r5, r0
 8010fde:	2800      	cmp	r0, #0
 8010fe0:	d0ed      	beq.n	8010fbe <_realloc_r+0x1e>
 8010fe2:	42bc      	cmp	r4, r7
 8010fe4:	4622      	mov	r2, r4
 8010fe6:	4631      	mov	r1, r6
 8010fe8:	bf28      	it	cs
 8010fea:	463a      	movcs	r2, r7
 8010fec:	f7fe fa5b 	bl	800f4a6 <memcpy>
 8010ff0:	4631      	mov	r1, r6
 8010ff2:	4640      	mov	r0, r8
 8010ff4:	f7ff f8e2 	bl	80101bc <_free_r>
 8010ff8:	e7e1      	b.n	8010fbe <_realloc_r+0x1e>
 8010ffa:	4635      	mov	r5, r6
 8010ffc:	e7df      	b.n	8010fbe <_realloc_r+0x1e>

08010ffe <__ascii_wctomb>:
 8010ffe:	b149      	cbz	r1, 8011014 <__ascii_wctomb+0x16>
 8011000:	2aff      	cmp	r2, #255	; 0xff
 8011002:	bf85      	ittet	hi
 8011004:	238a      	movhi	r3, #138	; 0x8a
 8011006:	6003      	strhi	r3, [r0, #0]
 8011008:	700a      	strbls	r2, [r1, #0]
 801100a:	f04f 30ff 	movhi.w	r0, #4294967295
 801100e:	bf98      	it	ls
 8011010:	2001      	movls	r0, #1
 8011012:	4770      	bx	lr
 8011014:	4608      	mov	r0, r1
 8011016:	4770      	bx	lr

08011018 <fiprintf>:
 8011018:	b40e      	push	{r1, r2, r3}
 801101a:	b503      	push	{r0, r1, lr}
 801101c:	4601      	mov	r1, r0
 801101e:	ab03      	add	r3, sp, #12
 8011020:	4805      	ldr	r0, [pc, #20]	; (8011038 <fiprintf+0x20>)
 8011022:	f853 2b04 	ldr.w	r2, [r3], #4
 8011026:	6800      	ldr	r0, [r0, #0]
 8011028:	9301      	str	r3, [sp, #4]
 801102a:	f000 f83f 	bl	80110ac <_vfiprintf_r>
 801102e:	b002      	add	sp, #8
 8011030:	f85d eb04 	ldr.w	lr, [sp], #4
 8011034:	b003      	add	sp, #12
 8011036:	4770      	bx	lr
 8011038:	200001e0 	.word	0x200001e0

0801103c <abort>:
 801103c:	b508      	push	{r3, lr}
 801103e:	2006      	movs	r0, #6
 8011040:	f000 fa0c 	bl	801145c <raise>
 8011044:	2001      	movs	r0, #1
 8011046:	f7f0 fadf 	bl	8001608 <_exit>

0801104a <_malloc_usable_size_r>:
 801104a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801104e:	1f18      	subs	r0, r3, #4
 8011050:	2b00      	cmp	r3, #0
 8011052:	bfbc      	itt	lt
 8011054:	580b      	ldrlt	r3, [r1, r0]
 8011056:	18c0      	addlt	r0, r0, r3
 8011058:	4770      	bx	lr

0801105a <__sfputc_r>:
 801105a:	6893      	ldr	r3, [r2, #8]
 801105c:	3b01      	subs	r3, #1
 801105e:	2b00      	cmp	r3, #0
 8011060:	b410      	push	{r4}
 8011062:	6093      	str	r3, [r2, #8]
 8011064:	da08      	bge.n	8011078 <__sfputc_r+0x1e>
 8011066:	6994      	ldr	r4, [r2, #24]
 8011068:	42a3      	cmp	r3, r4
 801106a:	db01      	blt.n	8011070 <__sfputc_r+0x16>
 801106c:	290a      	cmp	r1, #10
 801106e:	d103      	bne.n	8011078 <__sfputc_r+0x1e>
 8011070:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011074:	f000 b934 	b.w	80112e0 <__swbuf_r>
 8011078:	6813      	ldr	r3, [r2, #0]
 801107a:	1c58      	adds	r0, r3, #1
 801107c:	6010      	str	r0, [r2, #0]
 801107e:	7019      	strb	r1, [r3, #0]
 8011080:	4608      	mov	r0, r1
 8011082:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011086:	4770      	bx	lr

08011088 <__sfputs_r>:
 8011088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801108a:	4606      	mov	r6, r0
 801108c:	460f      	mov	r7, r1
 801108e:	4614      	mov	r4, r2
 8011090:	18d5      	adds	r5, r2, r3
 8011092:	42ac      	cmp	r4, r5
 8011094:	d101      	bne.n	801109a <__sfputs_r+0x12>
 8011096:	2000      	movs	r0, #0
 8011098:	e007      	b.n	80110aa <__sfputs_r+0x22>
 801109a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801109e:	463a      	mov	r2, r7
 80110a0:	4630      	mov	r0, r6
 80110a2:	f7ff ffda 	bl	801105a <__sfputc_r>
 80110a6:	1c43      	adds	r3, r0, #1
 80110a8:	d1f3      	bne.n	8011092 <__sfputs_r+0xa>
 80110aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080110ac <_vfiprintf_r>:
 80110ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80110b0:	460d      	mov	r5, r1
 80110b2:	b09d      	sub	sp, #116	; 0x74
 80110b4:	4614      	mov	r4, r2
 80110b6:	4698      	mov	r8, r3
 80110b8:	4606      	mov	r6, r0
 80110ba:	b118      	cbz	r0, 80110c4 <_vfiprintf_r+0x18>
 80110bc:	6a03      	ldr	r3, [r0, #32]
 80110be:	b90b      	cbnz	r3, 80110c4 <_vfiprintf_r+0x18>
 80110c0:	f7fe f882 	bl	800f1c8 <__sinit>
 80110c4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80110c6:	07d9      	lsls	r1, r3, #31
 80110c8:	d405      	bmi.n	80110d6 <_vfiprintf_r+0x2a>
 80110ca:	89ab      	ldrh	r3, [r5, #12]
 80110cc:	059a      	lsls	r2, r3, #22
 80110ce:	d402      	bmi.n	80110d6 <_vfiprintf_r+0x2a>
 80110d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80110d2:	f7fe f9e6 	bl	800f4a2 <__retarget_lock_acquire_recursive>
 80110d6:	89ab      	ldrh	r3, [r5, #12]
 80110d8:	071b      	lsls	r3, r3, #28
 80110da:	d501      	bpl.n	80110e0 <_vfiprintf_r+0x34>
 80110dc:	692b      	ldr	r3, [r5, #16]
 80110de:	b99b      	cbnz	r3, 8011108 <_vfiprintf_r+0x5c>
 80110e0:	4629      	mov	r1, r5
 80110e2:	4630      	mov	r0, r6
 80110e4:	f000 f93a 	bl	801135c <__swsetup_r>
 80110e8:	b170      	cbz	r0, 8011108 <_vfiprintf_r+0x5c>
 80110ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80110ec:	07dc      	lsls	r4, r3, #31
 80110ee:	d504      	bpl.n	80110fa <_vfiprintf_r+0x4e>
 80110f0:	f04f 30ff 	mov.w	r0, #4294967295
 80110f4:	b01d      	add	sp, #116	; 0x74
 80110f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80110fa:	89ab      	ldrh	r3, [r5, #12]
 80110fc:	0598      	lsls	r0, r3, #22
 80110fe:	d4f7      	bmi.n	80110f0 <_vfiprintf_r+0x44>
 8011100:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011102:	f7fe f9cf 	bl	800f4a4 <__retarget_lock_release_recursive>
 8011106:	e7f3      	b.n	80110f0 <_vfiprintf_r+0x44>
 8011108:	2300      	movs	r3, #0
 801110a:	9309      	str	r3, [sp, #36]	; 0x24
 801110c:	2320      	movs	r3, #32
 801110e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011112:	f8cd 800c 	str.w	r8, [sp, #12]
 8011116:	2330      	movs	r3, #48	; 0x30
 8011118:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80112cc <_vfiprintf_r+0x220>
 801111c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011120:	f04f 0901 	mov.w	r9, #1
 8011124:	4623      	mov	r3, r4
 8011126:	469a      	mov	sl, r3
 8011128:	f813 2b01 	ldrb.w	r2, [r3], #1
 801112c:	b10a      	cbz	r2, 8011132 <_vfiprintf_r+0x86>
 801112e:	2a25      	cmp	r2, #37	; 0x25
 8011130:	d1f9      	bne.n	8011126 <_vfiprintf_r+0x7a>
 8011132:	ebba 0b04 	subs.w	fp, sl, r4
 8011136:	d00b      	beq.n	8011150 <_vfiprintf_r+0xa4>
 8011138:	465b      	mov	r3, fp
 801113a:	4622      	mov	r2, r4
 801113c:	4629      	mov	r1, r5
 801113e:	4630      	mov	r0, r6
 8011140:	f7ff ffa2 	bl	8011088 <__sfputs_r>
 8011144:	3001      	adds	r0, #1
 8011146:	f000 80a9 	beq.w	801129c <_vfiprintf_r+0x1f0>
 801114a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801114c:	445a      	add	r2, fp
 801114e:	9209      	str	r2, [sp, #36]	; 0x24
 8011150:	f89a 3000 	ldrb.w	r3, [sl]
 8011154:	2b00      	cmp	r3, #0
 8011156:	f000 80a1 	beq.w	801129c <_vfiprintf_r+0x1f0>
 801115a:	2300      	movs	r3, #0
 801115c:	f04f 32ff 	mov.w	r2, #4294967295
 8011160:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011164:	f10a 0a01 	add.w	sl, sl, #1
 8011168:	9304      	str	r3, [sp, #16]
 801116a:	9307      	str	r3, [sp, #28]
 801116c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011170:	931a      	str	r3, [sp, #104]	; 0x68
 8011172:	4654      	mov	r4, sl
 8011174:	2205      	movs	r2, #5
 8011176:	f814 1b01 	ldrb.w	r1, [r4], #1
 801117a:	4854      	ldr	r0, [pc, #336]	; (80112cc <_vfiprintf_r+0x220>)
 801117c:	f7ef f838 	bl	80001f0 <memchr>
 8011180:	9a04      	ldr	r2, [sp, #16]
 8011182:	b9d8      	cbnz	r0, 80111bc <_vfiprintf_r+0x110>
 8011184:	06d1      	lsls	r1, r2, #27
 8011186:	bf44      	itt	mi
 8011188:	2320      	movmi	r3, #32
 801118a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801118e:	0713      	lsls	r3, r2, #28
 8011190:	bf44      	itt	mi
 8011192:	232b      	movmi	r3, #43	; 0x2b
 8011194:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011198:	f89a 3000 	ldrb.w	r3, [sl]
 801119c:	2b2a      	cmp	r3, #42	; 0x2a
 801119e:	d015      	beq.n	80111cc <_vfiprintf_r+0x120>
 80111a0:	9a07      	ldr	r2, [sp, #28]
 80111a2:	4654      	mov	r4, sl
 80111a4:	2000      	movs	r0, #0
 80111a6:	f04f 0c0a 	mov.w	ip, #10
 80111aa:	4621      	mov	r1, r4
 80111ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 80111b0:	3b30      	subs	r3, #48	; 0x30
 80111b2:	2b09      	cmp	r3, #9
 80111b4:	d94d      	bls.n	8011252 <_vfiprintf_r+0x1a6>
 80111b6:	b1b0      	cbz	r0, 80111e6 <_vfiprintf_r+0x13a>
 80111b8:	9207      	str	r2, [sp, #28]
 80111ba:	e014      	b.n	80111e6 <_vfiprintf_r+0x13a>
 80111bc:	eba0 0308 	sub.w	r3, r0, r8
 80111c0:	fa09 f303 	lsl.w	r3, r9, r3
 80111c4:	4313      	orrs	r3, r2
 80111c6:	9304      	str	r3, [sp, #16]
 80111c8:	46a2      	mov	sl, r4
 80111ca:	e7d2      	b.n	8011172 <_vfiprintf_r+0xc6>
 80111cc:	9b03      	ldr	r3, [sp, #12]
 80111ce:	1d19      	adds	r1, r3, #4
 80111d0:	681b      	ldr	r3, [r3, #0]
 80111d2:	9103      	str	r1, [sp, #12]
 80111d4:	2b00      	cmp	r3, #0
 80111d6:	bfbb      	ittet	lt
 80111d8:	425b      	neglt	r3, r3
 80111da:	f042 0202 	orrlt.w	r2, r2, #2
 80111de:	9307      	strge	r3, [sp, #28]
 80111e0:	9307      	strlt	r3, [sp, #28]
 80111e2:	bfb8      	it	lt
 80111e4:	9204      	strlt	r2, [sp, #16]
 80111e6:	7823      	ldrb	r3, [r4, #0]
 80111e8:	2b2e      	cmp	r3, #46	; 0x2e
 80111ea:	d10c      	bne.n	8011206 <_vfiprintf_r+0x15a>
 80111ec:	7863      	ldrb	r3, [r4, #1]
 80111ee:	2b2a      	cmp	r3, #42	; 0x2a
 80111f0:	d134      	bne.n	801125c <_vfiprintf_r+0x1b0>
 80111f2:	9b03      	ldr	r3, [sp, #12]
 80111f4:	1d1a      	adds	r2, r3, #4
 80111f6:	681b      	ldr	r3, [r3, #0]
 80111f8:	9203      	str	r2, [sp, #12]
 80111fa:	2b00      	cmp	r3, #0
 80111fc:	bfb8      	it	lt
 80111fe:	f04f 33ff 	movlt.w	r3, #4294967295
 8011202:	3402      	adds	r4, #2
 8011204:	9305      	str	r3, [sp, #20]
 8011206:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80112dc <_vfiprintf_r+0x230>
 801120a:	7821      	ldrb	r1, [r4, #0]
 801120c:	2203      	movs	r2, #3
 801120e:	4650      	mov	r0, sl
 8011210:	f7ee ffee 	bl	80001f0 <memchr>
 8011214:	b138      	cbz	r0, 8011226 <_vfiprintf_r+0x17a>
 8011216:	9b04      	ldr	r3, [sp, #16]
 8011218:	eba0 000a 	sub.w	r0, r0, sl
 801121c:	2240      	movs	r2, #64	; 0x40
 801121e:	4082      	lsls	r2, r0
 8011220:	4313      	orrs	r3, r2
 8011222:	3401      	adds	r4, #1
 8011224:	9304      	str	r3, [sp, #16]
 8011226:	f814 1b01 	ldrb.w	r1, [r4], #1
 801122a:	4829      	ldr	r0, [pc, #164]	; (80112d0 <_vfiprintf_r+0x224>)
 801122c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011230:	2206      	movs	r2, #6
 8011232:	f7ee ffdd 	bl	80001f0 <memchr>
 8011236:	2800      	cmp	r0, #0
 8011238:	d03f      	beq.n	80112ba <_vfiprintf_r+0x20e>
 801123a:	4b26      	ldr	r3, [pc, #152]	; (80112d4 <_vfiprintf_r+0x228>)
 801123c:	bb1b      	cbnz	r3, 8011286 <_vfiprintf_r+0x1da>
 801123e:	9b03      	ldr	r3, [sp, #12]
 8011240:	3307      	adds	r3, #7
 8011242:	f023 0307 	bic.w	r3, r3, #7
 8011246:	3308      	adds	r3, #8
 8011248:	9303      	str	r3, [sp, #12]
 801124a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801124c:	443b      	add	r3, r7
 801124e:	9309      	str	r3, [sp, #36]	; 0x24
 8011250:	e768      	b.n	8011124 <_vfiprintf_r+0x78>
 8011252:	fb0c 3202 	mla	r2, ip, r2, r3
 8011256:	460c      	mov	r4, r1
 8011258:	2001      	movs	r0, #1
 801125a:	e7a6      	b.n	80111aa <_vfiprintf_r+0xfe>
 801125c:	2300      	movs	r3, #0
 801125e:	3401      	adds	r4, #1
 8011260:	9305      	str	r3, [sp, #20]
 8011262:	4619      	mov	r1, r3
 8011264:	f04f 0c0a 	mov.w	ip, #10
 8011268:	4620      	mov	r0, r4
 801126a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801126e:	3a30      	subs	r2, #48	; 0x30
 8011270:	2a09      	cmp	r2, #9
 8011272:	d903      	bls.n	801127c <_vfiprintf_r+0x1d0>
 8011274:	2b00      	cmp	r3, #0
 8011276:	d0c6      	beq.n	8011206 <_vfiprintf_r+0x15a>
 8011278:	9105      	str	r1, [sp, #20]
 801127a:	e7c4      	b.n	8011206 <_vfiprintf_r+0x15a>
 801127c:	fb0c 2101 	mla	r1, ip, r1, r2
 8011280:	4604      	mov	r4, r0
 8011282:	2301      	movs	r3, #1
 8011284:	e7f0      	b.n	8011268 <_vfiprintf_r+0x1bc>
 8011286:	ab03      	add	r3, sp, #12
 8011288:	9300      	str	r3, [sp, #0]
 801128a:	462a      	mov	r2, r5
 801128c:	4b12      	ldr	r3, [pc, #72]	; (80112d8 <_vfiprintf_r+0x22c>)
 801128e:	a904      	add	r1, sp, #16
 8011290:	4630      	mov	r0, r6
 8011292:	f7fd fb47 	bl	800e924 <_printf_float>
 8011296:	4607      	mov	r7, r0
 8011298:	1c78      	adds	r0, r7, #1
 801129a:	d1d6      	bne.n	801124a <_vfiprintf_r+0x19e>
 801129c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801129e:	07d9      	lsls	r1, r3, #31
 80112a0:	d405      	bmi.n	80112ae <_vfiprintf_r+0x202>
 80112a2:	89ab      	ldrh	r3, [r5, #12]
 80112a4:	059a      	lsls	r2, r3, #22
 80112a6:	d402      	bmi.n	80112ae <_vfiprintf_r+0x202>
 80112a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80112aa:	f7fe f8fb 	bl	800f4a4 <__retarget_lock_release_recursive>
 80112ae:	89ab      	ldrh	r3, [r5, #12]
 80112b0:	065b      	lsls	r3, r3, #25
 80112b2:	f53f af1d 	bmi.w	80110f0 <_vfiprintf_r+0x44>
 80112b6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80112b8:	e71c      	b.n	80110f4 <_vfiprintf_r+0x48>
 80112ba:	ab03      	add	r3, sp, #12
 80112bc:	9300      	str	r3, [sp, #0]
 80112be:	462a      	mov	r2, r5
 80112c0:	4b05      	ldr	r3, [pc, #20]	; (80112d8 <_vfiprintf_r+0x22c>)
 80112c2:	a904      	add	r1, sp, #16
 80112c4:	4630      	mov	r0, r6
 80112c6:	f7fd fdd1 	bl	800ee6c <_printf_i>
 80112ca:	e7e4      	b.n	8011296 <_vfiprintf_r+0x1ea>
 80112cc:	08013394 	.word	0x08013394
 80112d0:	0801339e 	.word	0x0801339e
 80112d4:	0800e925 	.word	0x0800e925
 80112d8:	08011089 	.word	0x08011089
 80112dc:	0801339a 	.word	0x0801339a

080112e0 <__swbuf_r>:
 80112e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80112e2:	460e      	mov	r6, r1
 80112e4:	4614      	mov	r4, r2
 80112e6:	4605      	mov	r5, r0
 80112e8:	b118      	cbz	r0, 80112f2 <__swbuf_r+0x12>
 80112ea:	6a03      	ldr	r3, [r0, #32]
 80112ec:	b90b      	cbnz	r3, 80112f2 <__swbuf_r+0x12>
 80112ee:	f7fd ff6b 	bl	800f1c8 <__sinit>
 80112f2:	69a3      	ldr	r3, [r4, #24]
 80112f4:	60a3      	str	r3, [r4, #8]
 80112f6:	89a3      	ldrh	r3, [r4, #12]
 80112f8:	071a      	lsls	r2, r3, #28
 80112fa:	d525      	bpl.n	8011348 <__swbuf_r+0x68>
 80112fc:	6923      	ldr	r3, [r4, #16]
 80112fe:	b31b      	cbz	r3, 8011348 <__swbuf_r+0x68>
 8011300:	6823      	ldr	r3, [r4, #0]
 8011302:	6922      	ldr	r2, [r4, #16]
 8011304:	1a98      	subs	r0, r3, r2
 8011306:	6963      	ldr	r3, [r4, #20]
 8011308:	b2f6      	uxtb	r6, r6
 801130a:	4283      	cmp	r3, r0
 801130c:	4637      	mov	r7, r6
 801130e:	dc04      	bgt.n	801131a <__swbuf_r+0x3a>
 8011310:	4621      	mov	r1, r4
 8011312:	4628      	mov	r0, r5
 8011314:	f7ff fdac 	bl	8010e70 <_fflush_r>
 8011318:	b9e0      	cbnz	r0, 8011354 <__swbuf_r+0x74>
 801131a:	68a3      	ldr	r3, [r4, #8]
 801131c:	3b01      	subs	r3, #1
 801131e:	60a3      	str	r3, [r4, #8]
 8011320:	6823      	ldr	r3, [r4, #0]
 8011322:	1c5a      	adds	r2, r3, #1
 8011324:	6022      	str	r2, [r4, #0]
 8011326:	701e      	strb	r6, [r3, #0]
 8011328:	6962      	ldr	r2, [r4, #20]
 801132a:	1c43      	adds	r3, r0, #1
 801132c:	429a      	cmp	r2, r3
 801132e:	d004      	beq.n	801133a <__swbuf_r+0x5a>
 8011330:	89a3      	ldrh	r3, [r4, #12]
 8011332:	07db      	lsls	r3, r3, #31
 8011334:	d506      	bpl.n	8011344 <__swbuf_r+0x64>
 8011336:	2e0a      	cmp	r6, #10
 8011338:	d104      	bne.n	8011344 <__swbuf_r+0x64>
 801133a:	4621      	mov	r1, r4
 801133c:	4628      	mov	r0, r5
 801133e:	f7ff fd97 	bl	8010e70 <_fflush_r>
 8011342:	b938      	cbnz	r0, 8011354 <__swbuf_r+0x74>
 8011344:	4638      	mov	r0, r7
 8011346:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011348:	4621      	mov	r1, r4
 801134a:	4628      	mov	r0, r5
 801134c:	f000 f806 	bl	801135c <__swsetup_r>
 8011350:	2800      	cmp	r0, #0
 8011352:	d0d5      	beq.n	8011300 <__swbuf_r+0x20>
 8011354:	f04f 37ff 	mov.w	r7, #4294967295
 8011358:	e7f4      	b.n	8011344 <__swbuf_r+0x64>
	...

0801135c <__swsetup_r>:
 801135c:	b538      	push	{r3, r4, r5, lr}
 801135e:	4b2a      	ldr	r3, [pc, #168]	; (8011408 <__swsetup_r+0xac>)
 8011360:	4605      	mov	r5, r0
 8011362:	6818      	ldr	r0, [r3, #0]
 8011364:	460c      	mov	r4, r1
 8011366:	b118      	cbz	r0, 8011370 <__swsetup_r+0x14>
 8011368:	6a03      	ldr	r3, [r0, #32]
 801136a:	b90b      	cbnz	r3, 8011370 <__swsetup_r+0x14>
 801136c:	f7fd ff2c 	bl	800f1c8 <__sinit>
 8011370:	89a3      	ldrh	r3, [r4, #12]
 8011372:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011376:	0718      	lsls	r0, r3, #28
 8011378:	d422      	bmi.n	80113c0 <__swsetup_r+0x64>
 801137a:	06d9      	lsls	r1, r3, #27
 801137c:	d407      	bmi.n	801138e <__swsetup_r+0x32>
 801137e:	2309      	movs	r3, #9
 8011380:	602b      	str	r3, [r5, #0]
 8011382:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011386:	81a3      	strh	r3, [r4, #12]
 8011388:	f04f 30ff 	mov.w	r0, #4294967295
 801138c:	e034      	b.n	80113f8 <__swsetup_r+0x9c>
 801138e:	0758      	lsls	r0, r3, #29
 8011390:	d512      	bpl.n	80113b8 <__swsetup_r+0x5c>
 8011392:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011394:	b141      	cbz	r1, 80113a8 <__swsetup_r+0x4c>
 8011396:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801139a:	4299      	cmp	r1, r3
 801139c:	d002      	beq.n	80113a4 <__swsetup_r+0x48>
 801139e:	4628      	mov	r0, r5
 80113a0:	f7fe ff0c 	bl	80101bc <_free_r>
 80113a4:	2300      	movs	r3, #0
 80113a6:	6363      	str	r3, [r4, #52]	; 0x34
 80113a8:	89a3      	ldrh	r3, [r4, #12]
 80113aa:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80113ae:	81a3      	strh	r3, [r4, #12]
 80113b0:	2300      	movs	r3, #0
 80113b2:	6063      	str	r3, [r4, #4]
 80113b4:	6923      	ldr	r3, [r4, #16]
 80113b6:	6023      	str	r3, [r4, #0]
 80113b8:	89a3      	ldrh	r3, [r4, #12]
 80113ba:	f043 0308 	orr.w	r3, r3, #8
 80113be:	81a3      	strh	r3, [r4, #12]
 80113c0:	6923      	ldr	r3, [r4, #16]
 80113c2:	b94b      	cbnz	r3, 80113d8 <__swsetup_r+0x7c>
 80113c4:	89a3      	ldrh	r3, [r4, #12]
 80113c6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80113ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80113ce:	d003      	beq.n	80113d8 <__swsetup_r+0x7c>
 80113d0:	4621      	mov	r1, r4
 80113d2:	4628      	mov	r0, r5
 80113d4:	f000 f884 	bl	80114e0 <__smakebuf_r>
 80113d8:	89a0      	ldrh	r0, [r4, #12]
 80113da:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80113de:	f010 0301 	ands.w	r3, r0, #1
 80113e2:	d00a      	beq.n	80113fa <__swsetup_r+0x9e>
 80113e4:	2300      	movs	r3, #0
 80113e6:	60a3      	str	r3, [r4, #8]
 80113e8:	6963      	ldr	r3, [r4, #20]
 80113ea:	425b      	negs	r3, r3
 80113ec:	61a3      	str	r3, [r4, #24]
 80113ee:	6923      	ldr	r3, [r4, #16]
 80113f0:	b943      	cbnz	r3, 8011404 <__swsetup_r+0xa8>
 80113f2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80113f6:	d1c4      	bne.n	8011382 <__swsetup_r+0x26>
 80113f8:	bd38      	pop	{r3, r4, r5, pc}
 80113fa:	0781      	lsls	r1, r0, #30
 80113fc:	bf58      	it	pl
 80113fe:	6963      	ldrpl	r3, [r4, #20]
 8011400:	60a3      	str	r3, [r4, #8]
 8011402:	e7f4      	b.n	80113ee <__swsetup_r+0x92>
 8011404:	2000      	movs	r0, #0
 8011406:	e7f7      	b.n	80113f8 <__swsetup_r+0x9c>
 8011408:	200001e0 	.word	0x200001e0

0801140c <_raise_r>:
 801140c:	291f      	cmp	r1, #31
 801140e:	b538      	push	{r3, r4, r5, lr}
 8011410:	4604      	mov	r4, r0
 8011412:	460d      	mov	r5, r1
 8011414:	d904      	bls.n	8011420 <_raise_r+0x14>
 8011416:	2316      	movs	r3, #22
 8011418:	6003      	str	r3, [r0, #0]
 801141a:	f04f 30ff 	mov.w	r0, #4294967295
 801141e:	bd38      	pop	{r3, r4, r5, pc}
 8011420:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8011422:	b112      	cbz	r2, 801142a <_raise_r+0x1e>
 8011424:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011428:	b94b      	cbnz	r3, 801143e <_raise_r+0x32>
 801142a:	4620      	mov	r0, r4
 801142c:	f000 f830 	bl	8011490 <_getpid_r>
 8011430:	462a      	mov	r2, r5
 8011432:	4601      	mov	r1, r0
 8011434:	4620      	mov	r0, r4
 8011436:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801143a:	f000 b817 	b.w	801146c <_kill_r>
 801143e:	2b01      	cmp	r3, #1
 8011440:	d00a      	beq.n	8011458 <_raise_r+0x4c>
 8011442:	1c59      	adds	r1, r3, #1
 8011444:	d103      	bne.n	801144e <_raise_r+0x42>
 8011446:	2316      	movs	r3, #22
 8011448:	6003      	str	r3, [r0, #0]
 801144a:	2001      	movs	r0, #1
 801144c:	e7e7      	b.n	801141e <_raise_r+0x12>
 801144e:	2400      	movs	r4, #0
 8011450:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011454:	4628      	mov	r0, r5
 8011456:	4798      	blx	r3
 8011458:	2000      	movs	r0, #0
 801145a:	e7e0      	b.n	801141e <_raise_r+0x12>

0801145c <raise>:
 801145c:	4b02      	ldr	r3, [pc, #8]	; (8011468 <raise+0xc>)
 801145e:	4601      	mov	r1, r0
 8011460:	6818      	ldr	r0, [r3, #0]
 8011462:	f7ff bfd3 	b.w	801140c <_raise_r>
 8011466:	bf00      	nop
 8011468:	200001e0 	.word	0x200001e0

0801146c <_kill_r>:
 801146c:	b538      	push	{r3, r4, r5, lr}
 801146e:	4d07      	ldr	r5, [pc, #28]	; (801148c <_kill_r+0x20>)
 8011470:	2300      	movs	r3, #0
 8011472:	4604      	mov	r4, r0
 8011474:	4608      	mov	r0, r1
 8011476:	4611      	mov	r1, r2
 8011478:	602b      	str	r3, [r5, #0]
 801147a:	f7f0 f8b5 	bl	80015e8 <_kill>
 801147e:	1c43      	adds	r3, r0, #1
 8011480:	d102      	bne.n	8011488 <_kill_r+0x1c>
 8011482:	682b      	ldr	r3, [r5, #0]
 8011484:	b103      	cbz	r3, 8011488 <_kill_r+0x1c>
 8011486:	6023      	str	r3, [r4, #0]
 8011488:	bd38      	pop	{r3, r4, r5, pc}
 801148a:	bf00      	nop
 801148c:	20006364 	.word	0x20006364

08011490 <_getpid_r>:
 8011490:	f7f0 b8a2 	b.w	80015d8 <_getpid>

08011494 <__swhatbuf_r>:
 8011494:	b570      	push	{r4, r5, r6, lr}
 8011496:	460c      	mov	r4, r1
 8011498:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801149c:	2900      	cmp	r1, #0
 801149e:	b096      	sub	sp, #88	; 0x58
 80114a0:	4615      	mov	r5, r2
 80114a2:	461e      	mov	r6, r3
 80114a4:	da0d      	bge.n	80114c2 <__swhatbuf_r+0x2e>
 80114a6:	89a3      	ldrh	r3, [r4, #12]
 80114a8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80114ac:	f04f 0100 	mov.w	r1, #0
 80114b0:	bf0c      	ite	eq
 80114b2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80114b6:	2340      	movne	r3, #64	; 0x40
 80114b8:	2000      	movs	r0, #0
 80114ba:	6031      	str	r1, [r6, #0]
 80114bc:	602b      	str	r3, [r5, #0]
 80114be:	b016      	add	sp, #88	; 0x58
 80114c0:	bd70      	pop	{r4, r5, r6, pc}
 80114c2:	466a      	mov	r2, sp
 80114c4:	f000 f848 	bl	8011558 <_fstat_r>
 80114c8:	2800      	cmp	r0, #0
 80114ca:	dbec      	blt.n	80114a6 <__swhatbuf_r+0x12>
 80114cc:	9901      	ldr	r1, [sp, #4]
 80114ce:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80114d2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80114d6:	4259      	negs	r1, r3
 80114d8:	4159      	adcs	r1, r3
 80114da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80114de:	e7eb      	b.n	80114b8 <__swhatbuf_r+0x24>

080114e0 <__smakebuf_r>:
 80114e0:	898b      	ldrh	r3, [r1, #12]
 80114e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80114e4:	079d      	lsls	r5, r3, #30
 80114e6:	4606      	mov	r6, r0
 80114e8:	460c      	mov	r4, r1
 80114ea:	d507      	bpl.n	80114fc <__smakebuf_r+0x1c>
 80114ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80114f0:	6023      	str	r3, [r4, #0]
 80114f2:	6123      	str	r3, [r4, #16]
 80114f4:	2301      	movs	r3, #1
 80114f6:	6163      	str	r3, [r4, #20]
 80114f8:	b002      	add	sp, #8
 80114fa:	bd70      	pop	{r4, r5, r6, pc}
 80114fc:	ab01      	add	r3, sp, #4
 80114fe:	466a      	mov	r2, sp
 8011500:	f7ff ffc8 	bl	8011494 <__swhatbuf_r>
 8011504:	9900      	ldr	r1, [sp, #0]
 8011506:	4605      	mov	r5, r0
 8011508:	4630      	mov	r0, r6
 801150a:	f7fe fecb 	bl	80102a4 <_malloc_r>
 801150e:	b948      	cbnz	r0, 8011524 <__smakebuf_r+0x44>
 8011510:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011514:	059a      	lsls	r2, r3, #22
 8011516:	d4ef      	bmi.n	80114f8 <__smakebuf_r+0x18>
 8011518:	f023 0303 	bic.w	r3, r3, #3
 801151c:	f043 0302 	orr.w	r3, r3, #2
 8011520:	81a3      	strh	r3, [r4, #12]
 8011522:	e7e3      	b.n	80114ec <__smakebuf_r+0xc>
 8011524:	89a3      	ldrh	r3, [r4, #12]
 8011526:	6020      	str	r0, [r4, #0]
 8011528:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801152c:	81a3      	strh	r3, [r4, #12]
 801152e:	9b00      	ldr	r3, [sp, #0]
 8011530:	6163      	str	r3, [r4, #20]
 8011532:	9b01      	ldr	r3, [sp, #4]
 8011534:	6120      	str	r0, [r4, #16]
 8011536:	b15b      	cbz	r3, 8011550 <__smakebuf_r+0x70>
 8011538:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801153c:	4630      	mov	r0, r6
 801153e:	f000 f81d 	bl	801157c <_isatty_r>
 8011542:	b128      	cbz	r0, 8011550 <__smakebuf_r+0x70>
 8011544:	89a3      	ldrh	r3, [r4, #12]
 8011546:	f023 0303 	bic.w	r3, r3, #3
 801154a:	f043 0301 	orr.w	r3, r3, #1
 801154e:	81a3      	strh	r3, [r4, #12]
 8011550:	89a3      	ldrh	r3, [r4, #12]
 8011552:	431d      	orrs	r5, r3
 8011554:	81a5      	strh	r5, [r4, #12]
 8011556:	e7cf      	b.n	80114f8 <__smakebuf_r+0x18>

08011558 <_fstat_r>:
 8011558:	b538      	push	{r3, r4, r5, lr}
 801155a:	4d07      	ldr	r5, [pc, #28]	; (8011578 <_fstat_r+0x20>)
 801155c:	2300      	movs	r3, #0
 801155e:	4604      	mov	r4, r0
 8011560:	4608      	mov	r0, r1
 8011562:	4611      	mov	r1, r2
 8011564:	602b      	str	r3, [r5, #0]
 8011566:	f7f0 f89e 	bl	80016a6 <_fstat>
 801156a:	1c43      	adds	r3, r0, #1
 801156c:	d102      	bne.n	8011574 <_fstat_r+0x1c>
 801156e:	682b      	ldr	r3, [r5, #0]
 8011570:	b103      	cbz	r3, 8011574 <_fstat_r+0x1c>
 8011572:	6023      	str	r3, [r4, #0]
 8011574:	bd38      	pop	{r3, r4, r5, pc}
 8011576:	bf00      	nop
 8011578:	20006364 	.word	0x20006364

0801157c <_isatty_r>:
 801157c:	b538      	push	{r3, r4, r5, lr}
 801157e:	4d06      	ldr	r5, [pc, #24]	; (8011598 <_isatty_r+0x1c>)
 8011580:	2300      	movs	r3, #0
 8011582:	4604      	mov	r4, r0
 8011584:	4608      	mov	r0, r1
 8011586:	602b      	str	r3, [r5, #0]
 8011588:	f7f0 f89d 	bl	80016c6 <_isatty>
 801158c:	1c43      	adds	r3, r0, #1
 801158e:	d102      	bne.n	8011596 <_isatty_r+0x1a>
 8011590:	682b      	ldr	r3, [r5, #0]
 8011592:	b103      	cbz	r3, 8011596 <_isatty_r+0x1a>
 8011594:	6023      	str	r3, [r4, #0]
 8011596:	bd38      	pop	{r3, r4, r5, pc}
 8011598:	20006364 	.word	0x20006364

0801159c <_init>:
 801159c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801159e:	bf00      	nop
 80115a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80115a2:	bc08      	pop	{r3}
 80115a4:	469e      	mov	lr, r3
 80115a6:	4770      	bx	lr

080115a8 <_fini>:
 80115a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80115aa:	bf00      	nop
 80115ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80115ae:	bc08      	pop	{r3}
 80115b0:	469e      	mov	lr, r3
 80115b2:	4770      	bx	lr
